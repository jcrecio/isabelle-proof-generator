{"file_name": "/home/qj213/afp-2021-10-22/thys/BDD/NormalizeTotalProof.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BDD", "problem_names": ["lemma  (in Normalize_impl) Normalize_modifies:\n  shows\n   \"\\<forall>\\<sigma>. \\<Gamma>\\<turnstile>{\\<sigma>} \\<acute>p :== PROC Normalize (\\<acute>p) \n     {t. t may_only_modify_globals \\<sigma> in [rep,mark,low,high,next]}\"", "lemma (in Normalize_impl) Normalize_spec: \n  shows \"\\<forall>\\<sigma> pret prebdt. \\<Gamma>\\<turnstile>\\<^sub>t\n  \\<lbrace>\\<sigma>. Dag \\<acute>p \\<acute>low \\<acute>high pret \\<and> ordered pret \\<acute>var \\<and> \n   \\<acute>p \\<noteq> Null \\<and> (\\<forall>n. n \\<in> set_of pret \\<longrightarrow> \\<acute>mark n = \\<acute>mark \\<acute>p) \\<and> \n   bdt pret \\<acute>var = Some prebdt\\<rbrace>  \n  \\<acute>p :== PROC Normalize(\\<acute>p)\n  \\<lbrace>(\\<forall>pt. pt \\<notin> set_of pret \n    \\<longrightarrow> \\<^bsup>\\<sigma>\\<^esup>rep pt = \\<acute>rep pt \\<and> \\<^bsup>\\<sigma>\\<^esup>low pt = \\<acute>low pt \\<and> \\<^bsup>\\<sigma>\\<^esup>high pt = \\<acute>high pt \\<and> \n        \\<^bsup>\\<sigma>\\<^esup>mark pt = \\<acute>mark pt \\<and> \\<^bsup>\\<sigma>\\<^esup>next pt = \\<acute>next pt) \\<and> \n  (\\<exists>postt. Dag \\<acute>p \\<acute>low \\<acute>high postt \\<and> reduced postt \\<and> \n  shared postt \\<^bsup>\\<sigma>\\<^esup>var \\<and> ordered postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n  set_of postt \\<subseteq> set_of pret \\<and> \n  (\\<exists>postbdt.  bdt postt \\<^bsup>\\<sigma>\\<^esup>var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and> \n  (\\<forall> no. no \\<in> set_of pret \\<longrightarrow> \\<acute>mark no = (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark \\<^bsup>\\<sigma>\\<^esup>p)) \\<rbrace>\""], "translations": [["", "lemma  (in Normalize_impl) Normalize_modifies:\n  shows\n   \"\\<forall>\\<sigma>. \\<Gamma>\\<turnstile>{\\<sigma>} \\<acute>p :== PROC Normalize (\\<acute>p) \n     {t. t may_only_modify_globals \\<sigma> in [rep,mark,low,high,next]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<Gamma>\n          \\<turnstile> {\\<sigma>} \\<acute>p :== PROC Normalize(\\<acute>p)\n                       {t. t may_only_modify_globals \\<sigma> in [high, low,\n                        mark, next, rep]}", "apply (hoare_rule HoarePartial.ProcRec1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<Gamma>,(\\<Union>\\<sigma>.\n                    {({\\<sigma>}, Normalize_'proc,\n                      {t. t may_only_modify_globals \\<sigma> in [high, low,\n                       mark, next, rep]},\n                      {})})\n          \\<turnstile> {\\<sigma>}\n                       \\<acute>levellist :==\n                       replicate (\\<acute>p\\<rightarrow>\\<acute>var + 1)\n                        Null;;\n                       \\<acute>levellist :== CALL Levellist(\\<acute>p,\n                       \\<not> \\<acute>p\\<rightarrow>\\<acute>mark,\n                       \\<acute>levellist);;\n                       (\\<acute>n :== 0;;\n                        WHILE \\<acute>n < length \\<acute>levellist \n                        DO CALL ShareReduceRepList(\\<acute>levellist !\n             \\<acute>n);;\n                           \\<acute>n :== \\<acute>n + 1 \n                        OD);;\n                       \\<acute>p :== CALL Repoint(\\<acute>p)\n                       {t. t may_only_modify_globals \\<sigma> in [high, low,\n                        mark, next, rep]}", "apply (vcg spec=modifies)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma (in Normalize_impl) Normalize_spec: \n  shows \"\\<forall>\\<sigma> pret prebdt. \\<Gamma>\\<turnstile>\\<^sub>t\n  \\<lbrace>\\<sigma>. Dag \\<acute>p \\<acute>low \\<acute>high pret \\<and> ordered pret \\<acute>var \\<and> \n   \\<acute>p \\<noteq> Null \\<and> (\\<forall>n. n \\<in> set_of pret \\<longrightarrow> \\<acute>mark n = \\<acute>mark \\<acute>p) \\<and> \n   bdt pret \\<acute>var = Some prebdt\\<rbrace>  \n  \\<acute>p :== PROC Normalize(\\<acute>p)\n  \\<lbrace>(\\<forall>pt. pt \\<notin> set_of pret \n    \\<longrightarrow> \\<^bsup>\\<sigma>\\<^esup>rep pt = \\<acute>rep pt \\<and> \\<^bsup>\\<sigma>\\<^esup>low pt = \\<acute>low pt \\<and> \\<^bsup>\\<sigma>\\<^esup>high pt = \\<acute>high pt \\<and> \n        \\<^bsup>\\<sigma>\\<^esup>mark pt = \\<acute>mark pt \\<and> \\<^bsup>\\<sigma>\\<^esup>next pt = \\<acute>next pt) \\<and> \n  (\\<exists>postt. Dag \\<acute>p \\<acute>low \\<acute>high postt \\<and> reduced postt \\<and> \n  shared postt \\<^bsup>\\<sigma>\\<^esup>var \\<and> ordered postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n  set_of postt \\<subseteq> set_of pret \\<and> \n  (\\<exists>postbdt.  bdt postt \\<^bsup>\\<sigma>\\<^esup>var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and> \n  (\\<forall> no. no \\<in> set_of pret \\<longrightarrow> \\<acute>mark no = (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark \\<^bsup>\\<sigma>\\<^esup>p)) \\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> pret prebdt.\n       \\<Gamma>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. Dag \\<acute>p \\<acute>low\n             \\<acute>high pret \\<and>\n            ordered pret \\<acute>var \\<and>\n            \\<acute>p \\<noteq> Null \\<and>\n            (\\<forall>n.\n                n \\<in> set_of pret \\<longrightarrow>\n                n\\<rightarrow>\\<acute>mark =\n                \\<acute>p\\<rightarrow>\\<acute>mark) \\<and>\n            bdt pret \\<acute>var = Some prebdt\\<rbrace>\n                               \\<acute>p :== PROC Normalize(\\<acute>p)\n                               \\<lbrace>(\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>low pt = pt\\<rightarrow>\\<acute>low \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>high pt = pt\\<rightarrow>\\<acute>high \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>mark pt = pt\\<rightarrow>\\<acute>mark \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>next pt = pt\\<rightarrow>\\<acute>next) \\<and>\n  (\\<exists>postt.\n      Dag \\<acute>p \\<acute>low \\<acute>high postt \\<and>\n      reduced postt \\<and>\n      shared postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      ordered postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      set_of postt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postbdt.\n          bdt postt \\<^bsup>\\<sigma>\\<^esup>var = Some postbdt \\<and>\n          prebdt \\<sim> postbdt)) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      no\\<rightarrow>\\<acute>mark =\n      (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark\n               \\<^bsup>\\<sigma>\\<^esup>p))\\<rbrace>", "apply (hoare_rule HoareTotal.ProcNoRec1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> pret prebdt.\n       \\<Gamma>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. Dag \\<acute>p \\<acute>low\n             \\<acute>high pret \\<and>\n            ordered pret \\<acute>var \\<and>\n            \\<acute>p \\<noteq> Null \\<and>\n            (\\<forall>n.\n                n \\<in> set_of pret \\<longrightarrow>\n                n\\<rightarrow>\\<acute>mark =\n                \\<acute>p\\<rightarrow>\\<acute>mark) \\<and>\n            bdt pret \\<acute>var = Some prebdt\\<rbrace>\n                               \\<acute>levellist :==\n                               replicate\n                                (\\<acute>p\\<rightarrow>\\<acute>var + 1)\n                                Null;;\n                               \\<acute>levellist :== CALL Levellist(\\<acute>p,\n                               \\<not> \\<acute>p\\<rightarrow>\\<acute>mark,\n                               \\<acute>levellist);;\n                               (\\<acute>n :== 0;;\n                                WHILE \\<acute>n < length \\<acute>levellist \n                                DO CALL ShareReduceRepList(\\<acute>levellist !\n                     \\<acute>n);;\n                                   \\<acute>n :== \\<acute>n + 1 \n                                OD);;\n                               \\<acute>p :== CALL Repoint(\\<acute>p)\n                               \\<lbrace>(\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>low pt = pt\\<rightarrow>\\<acute>low \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>high pt = pt\\<rightarrow>\\<acute>high \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>mark pt = pt\\<rightarrow>\\<acute>mark \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>next pt = pt\\<rightarrow>\\<acute>next) \\<and>\n  (\\<exists>postt.\n      Dag \\<acute>p \\<acute>low \\<acute>high postt \\<and>\n      reduced postt \\<and>\n      shared postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      ordered postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      set_of postt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postbdt.\n          bdt postt \\<^bsup>\\<sigma>\\<^esup>var = Some postbdt \\<and>\n          prebdt \\<sim> postbdt)) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      no\\<rightarrow>\\<acute>mark =\n      (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark\n               \\<^bsup>\\<sigma>\\<^esup>p))\\<rbrace>", "apply (hoare_rule anno=\"\n    \\<acute>levellist :==replicate (\\<acute>p\\<rightarrow>\\<acute>var + 1) Null;;\n    \\<acute>levellist :== CALL Levellist (\\<acute>p, (\\<not> \\<acute>p\\<rightarrow>\\<acute>mark) , \\<acute>levellist);;\n    (ANNO (\\<tau>,ll). \\<lbrace>\\<tau>. Levellist \\<acute>levellist \\<acute>next ll \\<and>\n                   Dag \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high pret \\<and> ordered pret \\<^bsup>\\<sigma>\\<^esup>var \\<and> \\<^bsup>\\<sigma>\\<^esup>p \\<noteq> Null \\<and> \n                 (bdt pret \\<^bsup>\\<sigma>\\<^esup>var  = Some prebdt) \\<and> \n                 wf_ll pret ll \\<^bsup>\\<sigma>\\<^esup>var \\<and> \n                 length \\<acute>levellist = ((\\<^bsup>\\<sigma>\\<^esup>p \\<rightarrow> \\<^bsup>\\<sigma>\\<^esup>var) + 1) \\<and> \n                 wf_marking pret \\<^bsup>\\<sigma>\\<^esup>mark \\<acute>mark (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark \\<^bsup>\\<sigma>\\<^esup>p) \\<and> \n                 (\\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> \\<^bsup>\\<sigma>\\<^esup>next pt = \\<acute>next pt) \\<and>\n                 \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and> \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high  \\<and>  \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and> \\<acute>rep = \\<^bsup>\\<sigma>\\<^esup>rep \\<and> \n                 \\<acute>var = \\<^bsup>\\<sigma>\\<^esup>var\\<rbrace> \n    \\<acute>n :==0;;\n    WHILE (\\<acute>n < length \\<acute>levellist) \n    INV \\<lbrace>Levellist \\<acute>levellist \\<acute>next ll \\<and>\n         Dag \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high pret \\<and> ordered pret \\<^bsup>\\<sigma>\\<^esup>var \\<and> \\<^bsup>\\<sigma>\\<^esup>p \\<noteq> Null \\<and> \n         (bdt pret \\<^bsup>\\<sigma>\\<^esup>var  = Some prebdt) \\<and> wf_ll pret ll \\<^bsup>\\<sigma>\\<^esup>var  \\<and> \n         length \\<^bsup>\\<tau>\\<^esup>levellist = ((\\<^bsup>\\<sigma>\\<^esup>p \\<rightarrow> \\<^bsup>\\<sigma>\\<^esup>var) + 1) \\<and> \n         wf_marking pret \\<^bsup>\\<sigma>\\<^esup>mark \\<^bsup>\\<tau>\\<^esup>mark (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark \\<^bsup>\\<sigma>\\<^esup>p) \\<and>\n         \\<^bsup>\\<tau>\\<^esup>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and> \\<^bsup>\\<tau>\\<^esup>high = \\<^bsup>\\<sigma>\\<^esup>high  \\<and>  \\<^bsup>\\<tau>\\<^esup>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and> \\<^bsup>\\<tau>\\<^esup>rep = \\<^bsup>\\<sigma>\\<^esup>rep  \\<and> \\<^bsup>\\<tau>\\<^esup>var = \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n         \\<acute>n \\<le> length  \\<^bsup>\\<tau>\\<^esup>levellist \\<and>\n         (\\<forall>pt i. (pt \\<notin> set_of pret \\<or> (\\<acute>n <= i \\<and> pt \\<in> set (ll ! i) \\<and>\n                  i <length \\<^bsup>\\<tau>\\<^esup>levellist ) \n                  \\<longrightarrow> \\<^bsup>\\<sigma>\\<^esup>rep pt = \\<acute>rep pt)) \\<and> \n         \\<acute>rep ` Nodes \\<acute>n ll \\<subseteq> Nodes \\<acute>n ll \\<and> \n         (\\<forall>no \\<in> Nodes \\<acute>n ll.\n            no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var <= no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var \\<and> \n            (\\<exists>not nort. Dag (\\<acute>rep no) (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low ) (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high ) nort \\<and>\n               Dag no \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high not \\<and> reduced nort \\<and> \n               ordered nort \\<^bsup>\\<sigma>\\<^esup>var \\<and> set_of nort \\<subseteq> \\<acute>rep ` Nodes \\<acute>n ll \\<and> \n               (\\<forall> no \\<in> set_of nort. \\<acute>rep no = no) \\<and> \n               (\\<exists>nobdt norbdt. bdt not \\<^bsup>\\<sigma>\\<^esup>var = Some nobdt \\<and> \n                  bdt nort \\<^bsup>\\<sigma>\\<^esup>var = Some norbdt \\<and> nobdt \\<sim> norbdt))) \\<and>\n         (\\<forall>t1 t2. \n             t1\\<in>Dags (\\<acute>rep `(Nodes \\<acute>n ll))(\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low )(\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\\<and>\n             t2\\<in>Dags (\\<acute>rep `(Nodes \\<acute>n ll))(\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low )(\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n             \\<longrightarrow> \n             isomorphic_dags_eq t1 t2  \\<^bsup>\\<sigma>\\<^esup>var) \\<and>\n         \\<acute>levellist = \\<^bsup>\\<tau>\\<^esup>levellist \\<and> \\<acute>next = \\<^bsup>\\<tau>\\<^esup>next \\<and> \\<acute>mark = \\<^bsup>\\<tau>\\<^esup>mark \\<and> \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and> \n         \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high  \\<and> \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and>  \\<acute>var = \\<^bsup>\\<sigma>\\<^esup>var \\<rbrace>\n    VAR MEASURE (length \\<acute>levellist - \\<acute>n)\n    DO\n    CALL ShareReduceRepList(\\<acute>levellist ! \\<acute>n);;\n    \\<acute>n :==\\<acute>n + 1\n    OD\n    \\<lbrace>(\\<exists>postnormt. Dag (\\<acute>rep \\<^bsup>\\<sigma>\\<^esup>p) (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low ) (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high ) postnormt \\<and> \n      reduced postnormt \\<and> shared postnormt \\<^bsup>\\<sigma>\\<^esup>var \\<and> \n      ordered postnormt \\<^bsup>\\<sigma>\\<^esup>var \\<and> set_of postnormt \\<subseteq> set_of pret \\<and> \n      (\\<exists>postnormbdt. bdt postnormt \\<^bsup>\\<sigma>\\<^esup>var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall> no \\<in> set_of postnormt. (\\<acute>rep no = no))) \\<and> \n      ordered pret \\<^bsup>\\<sigma>\\<^esup>var  \\<and> \\<^bsup>\\<sigma>\\<^esup>p \\<noteq> Null \\<and> \n      (\\<forall> pt. pt \\<notin> set_of pret \\<longrightarrow> \\<^bsup>\\<sigma>\\<^esup>rep pt = \\<acute>rep pt) \\<and> \n      \\<acute>levellist = \\<^bsup>\\<tau>\\<^esup>levellist \\<and> \\<acute>next = \\<^bsup>\\<tau>\\<^esup>next \\<and> \\<acute>mark = \\<^bsup>\\<tau>\\<^esup>mark \\<and> \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and> \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n      \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and> (\\<forall> no. no \\<in> set_of pret \\<longrightarrow> \\<acute>mark no = (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark \\<^bsup>\\<sigma>\\<^esup>p)) \\<rbrace>)\n    ;;\n    \\<acute>p :== CALL Repoint (\\<acute>p)\"\n    in HoareTotal.annotateI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> pret prebdt.\n       \\<Gamma>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. Dag \\<acute>p \\<acute>low\n             \\<acute>high pret \\<and>\n            ordered pret \\<acute>var \\<and>\n            \\<acute>p \\<noteq> Null \\<and>\n            (\\<forall>n.\n                n \\<in> set_of pret \\<longrightarrow>\n                n\\<rightarrow>\\<acute>mark =\n                \\<acute>p\\<rightarrow>\\<acute>mark) \\<and>\n            bdt pret \\<acute>var = Some prebdt\\<rbrace>\n                               \\<acute>levellist :==\n                               replicate\n                                (\\<acute>p\\<rightarrow>\\<acute>var + 1)\n                                Null;;\n                               \\<acute>levellist :== CALL Levellist(\\<acute>p,\n                               \\<not> \\<acute>p\\<rightarrow>\\<acute>mark,\n                               \\<acute>levellist);;\n                               ANNO (\\<tau>,\n                               ll). \\<lbrace>\\<tau>. Levellist\n                \\<acute>levellist \\<acute>next ll \\<and>\n               Dag \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low\n                \\<^bsup>\\<sigma>\\<^esup>high pret \\<and>\n               ordered pret \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n               \\<^bsup>\\<sigma>\\<^esup>p \\<noteq> Null \\<and>\n               bdt pret \\<^bsup>\\<sigma>\\<^esup>var = Some prebdt \\<and>\n               wf_ll pret ll \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n               length \\<acute>levellist =\n               \\<^bsup>\\<sigma>\\<^esup>var \\<^bsup>\\<sigma>\\<^esup>p +\n               1 \\<and>\n               wf_marking pret \\<^bsup>\\<sigma>\\<^esup>mark \\<acute>mark\n                (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark\n                         \\<^bsup>\\<sigma>\\<^esup>p) \\<and>\n               (\\<forall>pt.\n                   pt \\<notin> set_of pret \\<longrightarrow>\n                   \\<^bsup>\\<sigma>\\<^esup>next pt =\n                   pt\\<rightarrow>\\<acute>next) \\<and>\n               \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and>\n               \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n               \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and>\n               \\<acute>rep = \\<^bsup>\\<sigma>\\<^esup>rep \\<and>\n               \\<acute>var = \\<^bsup>\\<sigma>\\<^esup>var\\<rbrace>\n                               \\<acute>n :== 0;;\n                               WHILE \\<acute>n < length \\<acute>levellist\n                               INV \\<lbrace>Levellist \\<acute>levellist\n       \\<acute>next ll \\<and>\n      Dag \\<^bsup>\\<sigma>\\<^esup>p \\<^bsup>\\<sigma>\\<^esup>low\n       \\<^bsup>\\<sigma>\\<^esup>high pret \\<and>\n      ordered pret \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>p \\<noteq> Null \\<and>\n      bdt pret \\<^bsup>\\<sigma>\\<^esup>var = Some prebdt \\<and>\n      wf_ll pret ll \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      length \\<^bsup>\\<tau>\\<^esup>levellist =\n      \\<^bsup>\\<sigma>\\<^esup>var \\<^bsup>\\<sigma>\\<^esup>p + 1 \\<and>\n      wf_marking pret \\<^bsup>\\<sigma>\\<^esup>mark\n       \\<^bsup>\\<tau>\\<^esup>mark\n       (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark\n                \\<^bsup>\\<sigma>\\<^esup>p) \\<and>\n      \\<^bsup>\\<tau>\\<^esup>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and>\n      \\<^bsup>\\<tau>\\<^esup>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n      \\<^bsup>\\<tau>\\<^esup>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and>\n      \\<^bsup>\\<tau>\\<^esup>rep = \\<^bsup>\\<sigma>\\<^esup>rep \\<and>\n      \\<^bsup>\\<tau>\\<^esup>var = \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      \\<acute>n \\<le> length \\<^bsup>\\<tau>\\<^esup>levellist \\<and>\n      (\\<forall>pt i.\n          pt \\<notin> set_of pret \\<or>\n          \\<acute>n \\<le> i \\<and>\n          pt \\<in> set (ll ! i) \\<and>\n          i < length \\<^bsup>\\<tau>\\<^esup>levellist \\<longrightarrow>\n          \\<^bsup>\\<sigma>\\<^esup>rep pt =\n          pt\\<rightarrow>\\<acute>rep) \\<and>\n      \\<acute>rep ` Nodes \\<acute>n ll \\<subseteq> Nodes \\<acute>n ll \\<and>\n      (\\<forall>no\\<in>Nodes \\<acute>n ll.\n          \\<^bsup>\\<sigma>\\<^esup>var (no\\<rightarrow>\\<acute>rep)\n          \\<le> \\<^bsup>\\<sigma>\\<^esup>var no \\<and>\n          (\\<exists>not nort.\n              Dag (no\\<rightarrow>\\<acute>rep)\n               (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low)\n               (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n               nort \\<and>\n              Dag no \\<^bsup>\\<sigma>\\<^esup>low\n               \\<^bsup>\\<sigma>\\<^esup>high not \\<and>\n              reduced nort \\<and>\n              ordered nort \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n              set_of nort\n              \\<subseteq> \\<acute>rep ` Nodes \\<acute>n ll \\<and>\n              (\\<forall>no\\<in>set_of nort.\n                  no\\<rightarrow>\\<acute>rep = no) \\<and>\n              (\\<exists>nobdt norbdt.\n                  bdt not \\<^bsup>\\<sigma>\\<^esup>var = Some nobdt \\<and>\n                  bdt nort \\<^bsup>\\<sigma>\\<^esup>var = Some norbdt \\<and>\n                  nobdt \\<sim> norbdt))) \\<and>\n      (\\<forall>t1 t2.\n          t1 \\<in> Dags (\\<acute>rep ` Nodes \\<acute>n ll)\n                    (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low)\n                    (\\<acute>rep \\<propto>\n                     \\<^bsup>\\<sigma>\\<^esup>high) \\<and>\n          t2 \\<in> Dags (\\<acute>rep ` Nodes \\<acute>n ll)\n                    (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low)\n                    (\\<acute>rep \\<propto>\n                     \\<^bsup>\\<sigma>\\<^esup>high) \\<longrightarrow>\n          isomorphic_dags_eq t1 t2 \\<^bsup>\\<sigma>\\<^esup>var) \\<and>\n      \\<acute>levellist = \\<^bsup>\\<tau>\\<^esup>levellist \\<and>\n      \\<acute>next = \\<^bsup>\\<tau>\\<^esup>next \\<and>\n      \\<acute>mark = \\<^bsup>\\<tau>\\<^esup>mark \\<and>\n      \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and>\n      \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n      \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and>\n      \\<acute>var = \\<^bsup>\\<sigma>\\<^esup>var\\<rbrace>\n                               VAR MEASURE length \\<acute>levellist -\n     \\<acute>n \n                               DO CALL ShareReduceRepList(\\<acute>levellist !\n                    \\<acute>n);;\n                                  \\<acute>n :== \\<acute>n + 1 \n                               OD\n                               \\<lbrace>(\\<exists>postnormt.\n      Dag (\\<^bsup>\\<sigma>\\<^esup>p\\<rightarrow>\\<acute>rep)\n       (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low)\n       (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      ordered postnormt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt \\<^bsup>\\<sigma>\\<^esup>var =\n          Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt.\n          no\\<rightarrow>\\<acute>rep = no)) \\<and>\n  ordered pret \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n  \\<^bsup>\\<sigma>\\<^esup>p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep) \\<and>\n  \\<acute>levellist = \\<^bsup>\\<tau>\\<^esup>levellist \\<and>\n  \\<acute>next = \\<^bsup>\\<tau>\\<^esup>next \\<and>\n  \\<acute>mark = \\<^bsup>\\<tau>\\<^esup>mark \\<and>\n  \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and>\n  \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n  \\<acute>p = \\<^bsup>\\<sigma>\\<^esup>p \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      no\\<rightarrow>\\<acute>mark =\n      (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark\n               \\<^bsup>\\<sigma>\\<^esup>p))\\<rbrace>,\n                               {};;\n                               \\<acute>p :== CALL Repoint(\\<acute>p)\n                               \\<lbrace>(\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep pt = pt\\<rightarrow>\\<acute>rep \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>low pt = pt\\<rightarrow>\\<acute>low \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>high pt = pt\\<rightarrow>\\<acute>high \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>mark pt = pt\\<rightarrow>\\<acute>mark \\<and>\n      \\<^bsup>\\<sigma>\\<^esup>next pt = pt\\<rightarrow>\\<acute>next) \\<and>\n  (\\<exists>postt.\n      Dag \\<acute>p \\<acute>low \\<acute>high postt \\<and>\n      reduced postt \\<and>\n      shared postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      ordered postt \\<^bsup>\\<sigma>\\<^esup>var \\<and>\n      set_of postt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postbdt.\n          bdt postt \\<^bsup>\\<sigma>\\<^esup>var = Some postbdt \\<and>\n          prebdt \\<sim> postbdt)) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      no\\<rightarrow>\\<acute>mark =\n      (\\<not> \\<^bsup>\\<sigma>\\<^esup>mark\n               \\<^bsup>\\<sigma>\\<^esup>p))\\<rbrace>", "apply (vcg spec=spec_total)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            Dag p low high t \\<and>\n                            (\\<forall>i<length (replicate (var p + 1) Null).\n                                replicate (var p + 1) Null ! i =\n                                Null) \\<and>\n                            length (replicate (var p + 1) Null) =\n                            var p + 1 \\<and>\n                            ordered t var \\<and>\n                            (\\<forall>n\\<in>set_of t.\n                                mark n = mark p) \\<and>\n                            (\\<forall>marka nexta levellist.\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    wf_ll t ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking t mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>p.\n  p \\<notin> set_of t \\<longrightarrow> next p = nexta p)) \\<longrightarrow>\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    Dag p low high pret \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    bdt pret var = Some prebdt \\<and>\n                                    wf_ll pret ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking pret mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt) \\<and>\n                                    low = low \\<and>\n                                    high = high \\<and>\n                                    p = p \\<and>\n                                    rep = rep \\<and>\n                                    var = var \\<and>\n                                    (\\<forall>lowa higha repa markb nextb pa\n  levellista.\n  (\\<exists>postnormt.\n      Dag (repa p) (repa \\<propto> low) (repa \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n  levellista = levellist \\<and>\n  nextb = nexta \\<and>\n  markb = marka \\<and>\n  lowa = low \\<and>\n  higha = high \\<and>\n  pa = p \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      markb no = (\\<not> mark p)) \\<longrightarrow>\n  (\\<exists>rept.\n      Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n       rept \\<and>\n      (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n      (\\<forall>lowa higha pa.\n          Dag pa lowa higha rept \\<and>\n          (\\<forall>pt.\n              pt \\<notin> set_of rept \\<longrightarrow>\n              low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n          (\\<forall>pt.\n              pt \\<notin> set_of pret \\<longrightarrow>\n              rep pt = repa pt \\<and>\n              low pt = lowa pt \\<and>\n              high pt = higha pt \\<and>\n              mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n          (\\<exists>postt.\n              Dag pa lowa higha postt \\<and>\n              reduced postt \\<and>\n              shared postt var \\<and>\n              ordered postt var \\<and>\n              set_of postt \\<subseteq> set_of pret \\<and>\n              (\\<exists>postbdt.\n                  bdt postt var = Some postbdt \\<and>\n                  prebdt \\<sim> postbdt)) \\<and>\n          (\\<forall>no.\n              no \\<in> set_of pret \\<longrightarrow>\n              marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark next p pret prebdt ll vara lowa higha repa\n       marka nexta pa levellist.\n       \\<lbrakk>Levellist levellist nexta ll; Dag p low high pret;\n        ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt;\n        lowa = low; higha = high; pa = p; repa = rep; vara = var\\<rbrakk>\n       \\<Longrightarrow> Levellist levellist nexta ll \\<and>\n                         Dag p low high pret \\<and>\n                         ordered pret var \\<and>\n                         p \\<noteq> Null \\<and>\n                         bdt pret var = Some prebdt \\<and>\n                         wf_ll pret ll var \\<and>\n                         length levellist = var p + 1 \\<and>\n                         wf_marking pret mark marka (\\<not> mark p) \\<and>\n                         lowa = low \\<and>\n                         higha = high \\<and>\n                         pa = p \\<and>\n                         repa = rep \\<and>\n                         vara = var \\<and>\n                         0 \\<le> length levellist \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             0 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < length levellist \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes 0 ll \\<subseteq> Nodes 0 ll \\<and>\n                         (\\<forall>no\\<in>Nodes 0 ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes 0 ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt norbdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     bdt nort var = Some norbdt \\<and>\n                                     nobdt \\<sim> norbdt))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes 0 ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes 0 ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var) \\<and>\n                         levellist = levellist \\<and>\n                         nexta = nexta \\<and>\n                         marka = marka \\<and>\n                         lowa = low \\<and>\n                         higha = high \\<and> pa = p \\<and> vara = var\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep mark next p pret prebdt ll vara lowa higha repa\n       marka nexta pa levellist.\n       \\<lbrakk>Levellist levellist nexta ll; Dag p low high pret;\n        ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt;\n        lowa = low; higha = high; pa = p; repa = rep; vara = var\\<rbrakk>\n       \\<Longrightarrow> Levellist levellist nexta ll \\<and>\n                         Dag p low high pret \\<and>\n                         ordered pret var \\<and>\n                         p \\<noteq> Null \\<and>\n                         bdt pret var = Some prebdt \\<and>\n                         wf_ll pret ll var \\<and>\n                         length levellist = var p + 1 \\<and>\n                         wf_marking pret mark marka (\\<not> mark p) \\<and>\n                         lowa = low \\<and>\n                         higha = high \\<and>\n                         pa = p \\<and>\n                         repa = rep \\<and>\n                         vara = var \\<and>\n                         0 \\<le> length levellist \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             0 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < length levellist \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes 0 ll \\<subseteq> Nodes 0 ll \\<and>\n                         (\\<forall>no\\<in>Nodes 0 ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes 0 ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt norbdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     bdt nort var = Some norbdt \\<and>\n                                     nobdt \\<sim> norbdt))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes 0 ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes 0 ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var) \\<and>\n                         levellist = levellist \\<and>\n                         nexta = nexta \\<and>\n                         marka = marka \\<and>\n                         lowa = low \\<and>\n                         higha = high \\<and> pa = p \\<and> vara = var\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            Dag p low high t \\<and>\n                            (\\<forall>i<length (replicate (var p + 1) Null).\n                                replicate (var p + 1) Null ! i =\n                                Null) \\<and>\n                            length (replicate (var p + 1) Null) =\n                            var p + 1 \\<and>\n                            ordered t var \\<and>\n                            (\\<forall>n\\<in>set_of t.\n                                mark n = mark p) \\<and>\n                            (\\<forall>marka nexta levellist.\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    wf_ll t ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking t mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>p.\n  p \\<notin> set_of t \\<longrightarrow> next p = nexta p)) \\<longrightarrow>\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    Dag p low high pret \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    bdt pret var = Some prebdt \\<and>\n                                    wf_ll pret ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking pret mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt) \\<and>\n                                    low = low \\<and>\n                                    high = high \\<and>\n                                    p = p \\<and>\n                                    rep = rep \\<and>\n                                    var = var \\<and>\n                                    (\\<forall>lowa higha repa markb nextb pa\n  levellista.\n  (\\<exists>postnormt.\n      Dag (repa p) (repa \\<propto> low) (repa \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n  levellista = levellist \\<and>\n  nextb = nexta \\<and>\n  markb = marka \\<and>\n  lowa = low \\<and>\n  higha = high \\<and>\n  pa = p \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      markb no = (\\<not> mark p)) \\<longrightarrow>\n  (\\<exists>rept.\n      Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n       rept \\<and>\n      (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n      (\\<forall>lowa higha pa.\n          Dag pa lowa higha rept \\<and>\n          (\\<forall>pt.\n              pt \\<notin> set_of rept \\<longrightarrow>\n              low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n          (\\<forall>pt.\n              pt \\<notin> set_of pret \\<longrightarrow>\n              rep pt = repa pt \\<and>\n              low pt = lowa pt \\<and>\n              high pt = higha pt \\<and>\n              mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n          (\\<exists>postt.\n              Dag pa lowa higha postt \\<and>\n              reduced postt \\<and>\n              shared postt var \\<and>\n              ordered postt var \\<and>\n              set_of postt \\<subseteq> set_of pret \\<and>\n              (\\<exists>postbdt.\n                  bdt postt var = Some postbdt \\<and>\n                  prebdt \\<sim> postbdt)) \\<and>\n          (\\<forall>no.\n              no \\<in> set_of pret \\<longrightarrow>\n              marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "(*from precondition of inner spec to invariant *)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep mark next p pret prebdt ll vara lowa higha repa\n       marka nexta pa levellist.\n       \\<lbrakk>Levellist levellist nexta ll; Dag p low high pret;\n        ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt;\n        lowa = low; higha = high; pa = p; repa = rep; vara = var\\<rbrakk>\n       \\<Longrightarrow> Levellist levellist nexta ll \\<and>\n                         Dag p low high pret \\<and>\n                         ordered pret var \\<and>\n                         p \\<noteq> Null \\<and>\n                         bdt pret var = Some prebdt \\<and>\n                         wf_ll pret ll var \\<and>\n                         length levellist = var p + 1 \\<and>\n                         wf_marking pret mark marka (\\<not> mark p) \\<and>\n                         lowa = low \\<and>\n                         higha = high \\<and>\n                         pa = p \\<and>\n                         repa = rep \\<and>\n                         vara = var \\<and>\n                         0 \\<le> length levellist \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             0 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < length levellist \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes 0 ll \\<subseteq> Nodes 0 ll \\<and>\n                         (\\<forall>no\\<in>Nodes 0 ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes 0 ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt norbdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     bdt nort var = Some norbdt \\<and>\n                                     nobdt \\<sim> norbdt))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes 0 ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes 0 ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var) \\<and>\n                         levellist = levellist \\<and>\n                         nexta = nexta \\<and>\n                         marka = marka \\<and>\n                         lowa = low \\<and>\n                         higha = high \\<and> pa = p \\<and> vara = var\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            Dag p low high t \\<and>\n                            (\\<forall>i<length (replicate (var p + 1) Null).\n                                replicate (var p + 1) Null ! i =\n                                Null) \\<and>\n                            length (replicate (var p + 1) Null) =\n                            var p + 1 \\<and>\n                            ordered t var \\<and>\n                            (\\<forall>n\\<in>set_of t.\n                                mark n = mark p) \\<and>\n                            (\\<forall>marka nexta levellist.\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    wf_ll t ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking t mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>p.\n  p \\<notin> set_of t \\<longrightarrow> next p = nexta p)) \\<longrightarrow>\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    Dag p low high pret \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    bdt pret var = Some prebdt \\<and>\n                                    wf_ll pret ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking pret mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt) \\<and>\n                                    low = low \\<and>\n                                    high = high \\<and>\n                                    p = p \\<and>\n                                    rep = rep \\<and>\n                                    var = var \\<and>\n                                    (\\<forall>lowa higha repa markb nextb pa\n  levellista.\n  (\\<exists>postnormt.\n      Dag (repa p) (repa \\<propto> low) (repa \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n  levellista = levellist \\<and>\n  nextb = nexta \\<and>\n  markb = marka \\<and>\n  lowa = low \\<and>\n  higha = high \\<and>\n  pa = p \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      markb no = (\\<not> mark p)) \\<longrightarrow>\n  (\\<exists>rept.\n      Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n       rept \\<and>\n      (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n      (\\<forall>lowa higha pa.\n          Dag pa lowa higha rept \\<and>\n          (\\<forall>pt.\n              pt \\<notin> set_of rept \\<longrightarrow>\n              low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n          (\\<forall>pt.\n              pt \\<notin> set_of pret \\<longrightarrow>\n              rep pt = repa pt \\<and>\n              low pt = lowa pt \\<and>\n              high pt = higha pt \\<and>\n              mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n          (\\<exists>postt.\n              Dag pa lowa higha postt \\<and>\n              reduced postt \\<and>\n              shared postt var \\<and>\n              ordered postt var \\<and>\n              set_of postt \\<subseteq> set_of pret \\<and>\n              (\\<exists>postbdt.\n                  bdt postt var = Some postbdt \\<and>\n                  prebdt \\<sim> postbdt)) \\<and>\n          (\\<forall>no.\n              no \\<in> set_of pret \\<longrightarrow>\n              marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    (simp add: Nodes_def null_comp_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            Dag p low high t \\<and>\n                            (\\<forall>i<length (replicate (var p + 1) Null).\n                                replicate (var p + 1) Null ! i =\n                                Null) \\<and>\n                            length (replicate (var p + 1) Null) =\n                            var p + 1 \\<and>\n                            ordered t var \\<and>\n                            (\\<forall>n\\<in>set_of t.\n                                mark n = mark p) \\<and>\n                            (\\<forall>marka nexta levellist.\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    wf_ll t ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking t mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>p.\n  p \\<notin> set_of t \\<longrightarrow> next p = nexta p)) \\<longrightarrow>\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    Dag p low high pret \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    bdt pret var = Some prebdt \\<and>\n                                    wf_ll pret ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking pret mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt) \\<and>\n                                    low = low \\<and>\n                                    high = high \\<and>\n                                    p = p \\<and>\n                                    rep = rep \\<and>\n                                    var = var \\<and>\n                                    (\\<forall>lowa higha repa markb nextb pa\n  levellista.\n  (\\<exists>postnormt.\n      Dag (repa p) (repa \\<propto> low) (repa \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n  levellista = levellist \\<and>\n  nextb = nexta \\<and>\n  markb = marka \\<and>\n  lowa = low \\<and>\n  higha = high \\<and>\n  pa = p \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      markb no = (\\<not> mark p)) \\<longrightarrow>\n  (\\<exists>rept.\n      Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n       rept \\<and>\n      (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n      (\\<forall>lowa higha pa.\n          Dag pa lowa higha rept \\<and>\n          (\\<forall>pt.\n              pt \\<notin> set_of rept \\<longrightarrow>\n              low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n          (\\<forall>pt.\n              pt \\<notin> set_of pret \\<longrightarrow>\n              rep pt = repa pt \\<and>\n              low pt = lowa pt \\<and>\n              high pt = higha pt \\<and>\n              mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n          (\\<exists>postt.\n              Dag pa lowa higha postt \\<and>\n              reduced postt \\<and>\n              shared postt var \\<and>\n              ordered postt var \\<and>\n              set_of postt \\<subseteq> set_of pret \\<and>\n              (\\<exists>postbdt.\n                  bdt postt var = Some postbdt \\<and>\n                  prebdt \\<sim> postbdt)) \\<and>\n          (\\<forall>no.\n              no \\<in> set_of pret \\<longrightarrow>\n              marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "(*from inner spec to postcondition *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t.\n                            Dag p low high t \\<and>\n                            (\\<forall>i<length (replicate (var p + 1) Null).\n                                replicate (var p + 1) Null ! i =\n                                Null) \\<and>\n                            length (replicate (var p + 1) Null) =\n                            var p + 1 \\<and>\n                            ordered t var \\<and>\n                            (\\<forall>n\\<in>set_of t.\n                                mark n = mark p) \\<and>\n                            (\\<forall>marka nexta levellist.\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    wf_ll t ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking t mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>p.\n  p \\<notin> set_of t \\<longrightarrow> next p = nexta p)) \\<longrightarrow>\n                                (\\<exists>ll.\n                                    Levellist levellist nexta ll \\<and>\n                                    Dag p low high pret \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    bdt pret var = Some prebdt \\<and>\n                                    wf_ll pret ll var \\<and>\n                                    length levellist = var p + 1 \\<and>\n                                    wf_marking pret mark marka\n                                     (\\<not> mark p) \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> next pt = nexta pt) \\<and>\n                                    low = low \\<and>\n                                    high = high \\<and>\n                                    p = p \\<and>\n                                    rep = rep \\<and>\n                                    var = var \\<and>\n                                    (\\<forall>lowa higha repa markb nextb pa\n  levellista.\n  (\\<exists>postnormt.\n      Dag (repa p) (repa \\<propto> low) (repa \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n  levellista = levellist \\<and>\n  nextb = nexta \\<and>\n  markb = marka \\<and>\n  lowa = low \\<and>\n  higha = high \\<and>\n  pa = p \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow>\n      markb no = (\\<not> mark p)) \\<longrightarrow>\n  (\\<exists>rept.\n      Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n       rept \\<and>\n      (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n      (\\<forall>lowa higha pa.\n          Dag pa lowa higha rept \\<and>\n          (\\<forall>pt.\n              pt \\<notin> set_of rept \\<longrightarrow>\n              low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n          (\\<forall>pt.\n              pt \\<notin> set_of pret \\<longrightarrow>\n              rep pt = repa pt \\<and>\n              low pt = lowa pt \\<and>\n              high pt = higha pt \\<and>\n              mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n          (\\<exists>postt.\n              Dag pa lowa higha postt \\<and>\n              reduced postt \\<and>\n              shared postt var \\<and>\n              ordered postt var \\<and>\n              set_of postt \\<subseteq> set_of pret \\<and>\n              (\\<exists>postbdt.\n                  bdt postt var = Some postbdt \\<and>\n                  prebdt \\<sim> postbdt)) \\<and>\n          (\\<forall>no.\n              no \\<in> set_of pret \\<longrightarrow>\n              marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule_tac x=pret in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> Dag p low high pret \\<and>\n                         (\\<forall>i<length (replicate (var p + 1) Null).\n                             replicate (var p + 1) Null ! i = Null) \\<and>\n                         length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>i<length (replicate (var p + 1) Null).\n                             replicate (var p + 1) Null ! i = Null) \\<and>\n                         length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length (replicate (var p + 1) Null).\n                            replicate (var p + 1) Null ! i = Null\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    clarsimp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>prebdt var low high mark p lt rt i.\n       \\<lbrakk>ordered (Node lt p rt) var; p \\<noteq> Null;\n        \\<forall>n.\n           (n \\<in> set_of lt \\<longrightarrow> mark n = mark p) \\<and>\n           (n \\<in> set_of rt \\<longrightarrow> mark n = mark p);\n        bdt (Node lt p rt) var = Some prebdt; Dag (low p) low high lt;\n        Dag (high p) low high rt; i < Suc (var p)\\<rbrakk>\n       \\<Longrightarrow> (Null # replicate (var p) Null) ! i = Null\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    (case_tac i)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>prebdt var low high mark p lt rt i.\n       \\<lbrakk>ordered (Node lt p rt) var; p \\<noteq> Null;\n        \\<forall>n.\n           (n \\<in> set_of lt \\<longrightarrow> mark n = mark p) \\<and>\n           (n \\<in> set_of rt \\<longrightarrow> mark n = mark p);\n        bdt (Node lt p rt) var = Some prebdt; Dag (low p) low high lt;\n        Dag (high p) low high rt; i < Suc (var p); i = 0\\<rbrakk>\n       \\<Longrightarrow> (Null # replicate (var p) Null) ! i = Null\n 2. \\<And>prebdt var low high mark p lt rt i nat.\n       \\<lbrakk>ordered (Node lt p rt) var; p \\<noteq> Null;\n        \\<forall>n.\n           (n \\<in> set_of lt \\<longrightarrow> mark n = mark p) \\<and>\n           (n \\<in> set_of rt \\<longrightarrow> mark n = mark p);\n        bdt (Node lt p rt) var = Some prebdt; Dag (low p) low high lt;\n        Dag (high p) low high rt; i < Suc (var p); i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (Null # replicate (var p) Null) ! i = Null\n 3. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 5. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply     simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>prebdt var low high mark p lt rt i nat.\n       \\<lbrakk>ordered (Node lt p rt) var; p \\<noteq> Null;\n        \\<forall>n.\n           (n \\<in> set_of lt \\<longrightarrow> mark n = mark p) \\<and>\n           (n \\<in> set_of rt \\<longrightarrow> mark n = mark p);\n        bdt (Node lt p rt) var = Some prebdt; Dag (low p) low high lt;\n        Dag (high p) low high rt; i < Suc (var p); i = Suc nat\\<rbrakk>\n       \\<Longrightarrow> (Null # replicate (var p) Null) ! i = Null\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> length (replicate (var p + 1) Null) =\n                         var p + 1 \\<and>\n                         ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> length (replicate (var p + 1) Null) = var p + 1\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> ordered pret var \\<and>\n                         (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> ordered pret var\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>n\\<in>set_of pret.\n                             mark n = mark p) \\<and>\n                         (\\<forall>marka nexta levellist.\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>p.\n                                     p \\<notin> set_of\n           pret \\<longrightarrow>\n                                     next p = nexta p)) \\<longrightarrow>\n                             (\\<exists>ll.\n                                 Levellist levellist nexta ll \\<and>\n                                 Dag p low high pret \\<and>\n                                 ordered pret var \\<and>\n                                 p \\<noteq> Null \\<and>\n                                 bdt pret var = Some prebdt \\<and>\n                                 wf_ll pret ll var \\<and>\n                                 length levellist = var p + 1 \\<and>\n                                 wf_marking pret mark marka\n                                  (\\<not> mark p) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<notin> set_of\n            pret \\<longrightarrow>\n                                     next pt = nexta pt) \\<and>\n                                 low = low \\<and>\n                                 high = high \\<and>\n                                 p = p \\<and>\n                                 rep = rep \\<and>\n                                 var = var \\<and>\n                                 (\\<forall>lowa higha repa markb nextb pa\n                                     levellista.\n                                     (\\<exists>postnormt.\n   Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n   reduced postnormt \\<and>\n   shared postnormt var \\<and>\n   ordered postnormt var \\<and>\n   set_of postnormt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postnormbdt.\n       bdt postnormt var = Some postnormbdt \\<and>\n       prebdt \\<sim> postnormbdt) \\<and>\n   (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                     ordered pret var \\<and>\n                                     p \\<noteq> Null \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                     levellista = levellist \\<and>\n                                     nextb = nexta \\<and>\n                                     markb = marka \\<and>\n                                     lowa = low \\<and>\n                                     higha = high \\<and>\n                                     pa = p \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow>\n   markb no = (\\<not> mark p)) \\<longrightarrow>\n                                     (\\<exists>rept.\n   Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n    rept \\<and>\n   (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n   (\\<forall>lowa higha pa.\n       Dag pa lowa higha rept \\<and>\n       (\\<forall>pt.\n           pt \\<notin> set_of rept \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n       (\\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow>\n           rep pt = repa pt \\<and>\n           low pt = lowa pt \\<and>\n           high pt = higha pt \\<and>\n           mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n       (\\<exists>postt.\n           Dag pa lowa higha postt \\<and>\n           reduced postt \\<and>\n           shared postt var \\<and>\n           ordered postt var \\<and>\n           set_of postt \\<subseteq> set_of pret \\<and>\n           (\\<exists>postbdt.\n               bdt postt var = Some postbdt \\<and>\n               prebdt \\<sim> postbdt)) \\<and>\n       (\\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n\\<in>set_of pret. mark n = mark p\n 2. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>marka nexta levellist.\n                            (\\<exists>ll.\n                                Levellist levellist nexta ll \\<and>\n                                wf_ll pret ll var \\<and>\n                                length levellist = var p + 1 \\<and>\n                                wf_marking pret mark marka\n                                 (\\<not> mark p) \\<and>\n                                (\\<forall>p.\n                                    p \\<notin> set_of pret \\<longrightarrow>\n                                    next p = nexta p)) \\<longrightarrow>\n                            (\\<exists>ll.\n                                Levellist levellist nexta ll \\<and>\n                                Dag p low high pret \\<and>\n                                ordered pret var \\<and>\n                                p \\<noteq> Null \\<and>\n                                bdt pret var = Some prebdt \\<and>\n                                wf_ll pret ll var \\<and>\n                                length levellist = var p + 1 \\<and>\n                                wf_marking pret mark marka\n                                 (\\<not> mark p) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           pret \\<longrightarrow>\n                                    next pt = nexta pt) \\<and>\n                                low = low \\<and>\n                                high = high \\<and>\n                                p = p \\<and>\n                                rep = rep \\<and>\n                                var = var \\<and>\n                                (\\<forall>lowa higha repa markb nextb pa\n                                    levellista.\n                                    (\\<exists>postnormt.\n  Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n  reduced postnormt \\<and>\n  shared postnormt var \\<and>\n  ordered postnormt var \\<and>\n  set_of postnormt \\<subseteq> set_of pret \\<and>\n  (\\<exists>postnormbdt.\n      bdt postnormt var = Some postnormbdt \\<and>\n      prebdt \\<sim> postnormbdt) \\<and>\n  (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                    levellista = levellist \\<and>\n                                    nextb = nexta \\<and>\n                                    markb = marka \\<and>\n                                    lowa = low \\<and>\n                                    higha = high \\<and>\n                                    pa = p \\<and>\n                                    (\\<forall>no.\n  no \\<in> set_of pret \\<longrightarrow>\n  markb no = (\\<not> mark p)) \\<longrightarrow>\n                                    (\\<exists>rept.\n  Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n   rept \\<and>\n  (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n  (\\<forall>lowa higha pa.\n      Dag pa lowa higha rept \\<and>\n      (\\<forall>pt.\n          pt \\<notin> set_of rept \\<longrightarrow>\n          low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n      (\\<forall>pt.\n          pt \\<notin> set_of pret \\<longrightarrow>\n          rep pt = repa pt \\<and>\n          low pt = lowa pt \\<and>\n          high pt = higha pt \\<and>\n          mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n      (\\<exists>postt.\n          Dag pa lowa higha postt \\<and>\n          reduced postt \\<and>\n          shared postt var \\<and>\n          ordered postt var \\<and>\n          set_of postt \\<subseteq> set_of pret \\<and>\n          (\\<exists>postbdt.\n              bdt postt var = Some postbdt \\<and>\n              prebdt \\<sim> postbdt)) \\<and>\n      (\\<forall>no.\n          no \\<in> set_of pret \\<longrightarrow>\n          marka no = (\\<not> mark p))))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>marka nexta levellist.\n                            (\\<exists>ll.\n                                Levellist levellist nexta ll \\<and>\n                                wf_ll pret ll var \\<and>\n                                length levellist = var p + 1 \\<and>\n                                wf_marking pret mark marka\n                                 (\\<not> mark p) \\<and>\n                                (\\<forall>p.\n                                    p \\<notin> set_of pret \\<longrightarrow>\n                                    next p = nexta p)) \\<longrightarrow>\n                            (\\<exists>ll.\n                                Levellist levellist nexta ll \\<and>\n                                Dag p low high pret \\<and>\n                                ordered pret var \\<and>\n                                p \\<noteq> Null \\<and>\n                                bdt pret var = Some prebdt \\<and>\n                                wf_ll pret ll var \\<and>\n                                length levellist = var p + 1 \\<and>\n                                wf_marking pret mark marka\n                                 (\\<not> mark p) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           pret \\<longrightarrow>\n                                    next pt = nexta pt) \\<and>\n                                low = low \\<and>\n                                high = high \\<and>\n                                p = p \\<and>\n                                rep = rep \\<and>\n                                var = var \\<and>\n                                (\\<forall>lowa higha repa markb nextb pa\n                                    levellista.\n                                    (\\<exists>postnormt.\n  Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt \\<and>\n  reduced postnormt \\<and>\n  shared postnormt var \\<and>\n  ordered postnormt var \\<and>\n  set_of postnormt \\<subseteq> set_of pret \\<and>\n  (\\<exists>postnormbdt.\n      bdt postnormt var = Some postnormbdt \\<and>\n      prebdt \\<sim> postnormbdt) \\<and>\n  (\\<forall>no\\<in>set_of postnormt. repa no = no)) \\<and>\n                                    ordered pret var \\<and>\n                                    p \\<noteq> Null \\<and>\n                                    (\\<forall>pt.\n  pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt) \\<and>\n                                    levellista = levellist \\<and>\n                                    nextb = nexta \\<and>\n                                    markb = marka \\<and>\n                                    lowa = low \\<and>\n                                    higha = high \\<and>\n                                    pa = p \\<and>\n                                    (\\<forall>no.\n  no \\<in> set_of pret \\<longrightarrow>\n  markb no = (\\<not> mark p)) \\<longrightarrow>\n                                    (\\<exists>rept.\n  Dag ((repa \\<propto> id) p) (repa \\<propto> low) (repa \\<propto> high)\n   rept \\<and>\n  (\\<forall>no\\<in>set_of rept. repa no = no) \\<and>\n  (\\<forall>lowa higha pa.\n      Dag pa lowa higha rept \\<and>\n      (\\<forall>pt.\n          pt \\<notin> set_of rept \\<longrightarrow>\n          low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n      (\\<forall>pt.\n          pt \\<notin> set_of pret \\<longrightarrow>\n          rep pt = repa pt \\<and>\n          low pt = lowa pt \\<and>\n          high pt = higha pt \\<and>\n          mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n      (\\<exists>postt.\n          Dag pa lowa higha postt \\<and>\n          reduced postt \\<and>\n          shared postt var \\<and>\n          ordered postt var \\<and>\n          set_of postt \\<subseteq> set_of pret \\<and>\n          (\\<exists>postbdt.\n              bdt postt var = Some postbdt \\<and>\n              prebdt \\<sim> postbdt)) \\<and>\n      (\\<forall>no.\n          no \\<in> set_of pret \\<longrightarrow>\n          marka no = (\\<not> mark p))))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow>\n           next p = nexta p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ll.\n                            Levellist levellist nexta ll \\<and>\n                            Dag p low high pret \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            bdt pret var = Some prebdt \\<and>\n                            wf_ll pret ll var \\<and>\n                            length levellist = var p + 1 \\<and>\n                            wf_marking pret mark marka\n                             (\\<not> mark p) \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                next pt = nexta pt) \\<and>\n                            low = low \\<and>\n                            high = high \\<and>\n                            p = p \\<and>\n                            rep = rep \\<and>\n                            var = var \\<and>\n                            (\\<forall>lowa higha repa markb nextb pa\n                                levellista.\n                                (\\<exists>postnormt.\n                                    Dag (repa p) (repa \\<propto> low)\n                                     (repa \\<propto> high) postnormt \\<and>\n                                    reduced postnormt \\<and>\n                                    shared postnormt var \\<and>\n                                    ordered postnormt var \\<and>\n                                    set_of postnormt\n                                    \\<subseteq> set_of pret \\<and>\n                                    (\\<exists>postnormbdt.\n  bdt postnormt var = Some postnormbdt \\<and>\n  prebdt \\<sim> postnormbdt) \\<and>\n                                    (\\<forall>no\\<in>set_of postnormt.\n  repa no = no)) \\<and>\n                                ordered pret var \\<and>\n                                p \\<noteq> Null \\<and>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           pret \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                levellista = levellist \\<and>\n                                nextb = nexta \\<and>\n                                markb = marka \\<and>\n                                lowa = low \\<and>\n                                higha = high \\<and>\n                                pa = p \\<and>\n                                (\\<forall>no.\n                                    no \\<in> set_of pret \\<longrightarrow>\n                                    markb no =\n                                    (\\<not> mark p)) \\<longrightarrow>\n                                (\\<exists>rept.\n                                    Dag ((repa \\<propto> id) p)\n                                     (repa \\<propto> low)\n                                     (repa \\<propto> high) rept \\<and>\n                                    (\\<forall>no\\<in>set_of rept.\n  repa no = no) \\<and>\n                                    (\\<forall>lowa higha pa.\n  Dag pa lowa higha rept \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of rept \\<longrightarrow>\n      low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      rep pt = repa pt \\<and>\n      low pt = lowa pt \\<and>\n      high pt = higha pt \\<and>\n      mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n  (\\<exists>postt.\n      Dag pa lowa higha postt \\<and>\n      reduced postt \\<and>\n      shared postt var \\<and>\n      ordered postt var \\<and>\n      set_of postt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postbdt.\n          bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (simp (no_asm_use) only: simp_thms)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow>\n           next p = nexta p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ll.\n                            Levellist levellist nexta ll \\<and>\n                            Dag p low high pret \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            bdt pret var = Some prebdt \\<and>\n                            wf_ll pret ll var \\<and>\n                            length levellist = var p + 1 \\<and>\n                            wf_marking pret mark marka\n                             (\\<not> mark p) \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                next pt = nexta pt) \\<and>\n                            (\\<forall>lowa higha repa markb nextb pa\n                                levellista.\n                                (\\<exists>postnormt.\n                                    Dag (repa p) (repa \\<propto> low)\n                                     (repa \\<propto> high) postnormt \\<and>\n                                    reduced postnormt \\<and>\n                                    shared postnormt var \\<and>\n                                    ordered postnormt var \\<and>\n                                    set_of postnormt\n                                    \\<subseteq> set_of pret \\<and>\n                                    (\\<exists>postnormbdt.\n  bdt postnormt var = Some postnormbdt \\<and>\n  prebdt \\<sim> postnormbdt) \\<and>\n                                    (\\<forall>no\\<in>set_of postnormt.\n  repa no = no)) \\<and>\n                                ordered pret var \\<and>\n                                p \\<noteq> Null \\<and>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           pret \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                levellista = levellist \\<and>\n                                nextb = nexta \\<and>\n                                markb = marka \\<and>\n                                lowa = low \\<and>\n                                higha = high \\<and>\n                                pa = p \\<and>\n                                (\\<forall>no.\n                                    no \\<in> set_of pret \\<longrightarrow>\n                                    markb no =\n                                    (\\<not> mark p)) \\<longrightarrow>\n                                (\\<exists>rept.\n                                    Dag ((repa \\<propto> id) p)\n                                     (repa \\<propto> low)\n                                     (repa \\<propto> high) rept \\<and>\n                                    (\\<forall>no\\<in>set_of rept.\n  repa no = no) \\<and>\n                                    (\\<forall>lowa higha pa.\n  Dag pa lowa higha rept \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of rept \\<longrightarrow>\n      low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      rep pt = repa pt \\<and>\n      low pt = lowa pt \\<and>\n      high pt = higha pt \\<and>\n      mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n  (\\<exists>postt.\n      Dag pa lowa higha postt \\<and>\n      reduced postt \\<and>\n      shared postt var \\<and>\n      ordered postt var \\<and>\n      set_of postt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postbdt.\n          bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule_tac x=\"ll\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow>\n           next p = nexta p\\<rbrakk>\n       \\<Longrightarrow> Levellist levellist nexta ll \\<and>\n                         Dag p low high pret \\<and>\n                         ordered pret var \\<and>\n                         p \\<noteq> Null \\<and>\n                         bdt pret var = Some prebdt \\<and>\n                         wf_ll pret ll var \\<and>\n                         length levellist = var p + 1 \\<and>\n                         wf_marking pret mark marka (\\<not> mark p) \\<and>\n                         (\\<forall>pt.\n                             pt \\<notin> set_of pret \\<longrightarrow>\n                             next pt = nexta pt) \\<and>\n                         (\\<forall>lowa higha repa markb nextb pa\n                             levellista.\n                             (\\<exists>postnormt.\n                                 Dag (repa p) (repa \\<propto> low)\n                                  (repa \\<propto> high) postnormt \\<and>\n                                 reduced postnormt \\<and>\n                                 shared postnormt var \\<and>\n                                 ordered postnormt var \\<and>\n                                 set_of postnormt\n                                 \\<subseteq> set_of pret \\<and>\n                                 (\\<exists>postnormbdt.\n                                     bdt postnormt var =\n                                     Some postnormbdt \\<and>\n                                     prebdt \\<sim> postnormbdt) \\<and>\n                                 (\\<forall>no\\<in>set_of postnormt.\n                                     repa no = no)) \\<and>\n                             ordered pret var \\<and>\n                             p \\<noteq> Null \\<and>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of pret \\<longrightarrow>\n                                 rep pt = repa pt) \\<and>\n                             levellista = levellist \\<and>\n                             nextb = nexta \\<and>\n                             markb = marka \\<and>\n                             lowa = low \\<and>\n                             higha = high \\<and>\n                             pa = p \\<and>\n                             (\\<forall>no.\n                                 no \\<in> set_of pret \\<longrightarrow>\n                                 markb no =\n                                 (\\<not> mark p)) \\<longrightarrow>\n                             (\\<exists>rept.\n                                 Dag ((repa \\<propto> id) p)\n                                  (repa \\<propto> low) (repa \\<propto> high)\n                                  rept \\<and>\n                                 (\\<forall>no\\<in>set_of rept.\n                                     repa no = no) \\<and>\n                                 (\\<forall>lowa higha pa.\n                                     Dag pa lowa higha rept \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of rept \\<longrightarrow>\n   low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow>\n   rep pt = repa pt \\<and>\n   low pt = lowa pt \\<and>\n   high pt = higha pt \\<and>\n   mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n                                     (\\<exists>postt.\n   Dag pa lowa higha postt \\<and>\n   reduced postt \\<and>\n   shared postt var \\<and>\n   ordered postt var \\<and>\n   set_of postt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postbdt.\n       bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow>\n           next p = nexta p\\<rbrakk>\n       \\<Longrightarrow> Levellist levellist nexta ll\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow>\n           next p = nexta p\\<rbrakk>\n       \\<Longrightarrow> Dag p low high pret \\<and>\n                         ordered pret var \\<and>\n                         p \\<noteq> Null \\<and>\n                         bdt pret var = Some prebdt \\<and>\n                         wf_ll pret ll var \\<and>\n                         length levellist = var p + 1 \\<and>\n                         wf_marking pret mark marka (\\<not> mark p) \\<and>\n                         (\\<forall>pt.\n                             pt \\<notin> set_of pret \\<longrightarrow>\n                             next pt = nexta pt) \\<and>\n                         (\\<forall>lowa higha repa markb nextb pa\n                             levellista.\n                             (\\<exists>postnormt.\n                                 Dag (repa p) (repa \\<propto> low)\n                                  (repa \\<propto> high) postnormt \\<and>\n                                 reduced postnormt \\<and>\n                                 shared postnormt var \\<and>\n                                 ordered postnormt var \\<and>\n                                 set_of postnormt\n                                 \\<subseteq> set_of pret \\<and>\n                                 (\\<exists>postnormbdt.\n                                     bdt postnormt var =\n                                     Some postnormbdt \\<and>\n                                     prebdt \\<sim> postnormbdt) \\<and>\n                                 (\\<forall>no\\<in>set_of postnormt.\n                                     repa no = no)) \\<and>\n                             ordered pret var \\<and>\n                             p \\<noteq> Null \\<and>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of pret \\<longrightarrow>\n                                 rep pt = repa pt) \\<and>\n                             levellista = levellist \\<and>\n                             nextb = nexta \\<and>\n                             markb = marka \\<and>\n                             lowa = low \\<and>\n                             higha = high \\<and>\n                             pa = p \\<and>\n                             (\\<forall>no.\n                                 no \\<in> set_of pret \\<longrightarrow>\n                                 markb no =\n                                 (\\<not> mark p)) \\<longrightarrow>\n                             (\\<exists>rept.\n                                 Dag ((repa \\<propto> id) p)\n                                  (repa \\<propto> low) (repa \\<propto> high)\n                                  rept \\<and>\n                                 (\\<forall>no\\<in>set_of rept.\n                                     repa no = no) \\<and>\n                                 (\\<forall>lowa higha pa.\n                                     Dag pa lowa higha rept \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of rept \\<longrightarrow>\n   low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow>\n   rep pt = repa pt \\<and>\n   low pt = lowa pt \\<and>\n   high pt = higha pt \\<and>\n   mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n                                     (\\<exists>postt.\n   Dag pa lowa higha postt \\<and>\n   reduced postt \\<and>\n   shared postt var \\<and>\n   ordered postt var \\<and>\n   set_of postt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postbdt.\n       bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)))))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow>\n           next p = nexta p\\<rbrakk>\n       \\<Longrightarrow> Dag p low high pret \\<and>\n                         ordered pret var \\<and>\n                         p \\<noteq> Null \\<and>\n                         bdt pret var = Some prebdt \\<and>\n                         wf_ll pret ll var \\<and>\n                         length levellist = var p + 1 \\<and>\n                         wf_marking pret mark marka (\\<not> mark p) \\<and>\n                         (\\<forall>pt.\n                             pt \\<notin> set_of pret \\<longrightarrow>\n                             next pt = nexta pt) \\<and>\n                         (\\<forall>lowa higha repa markb nextb pa\n                             levellista.\n                             (\\<exists>postnormt.\n                                 Dag (repa p) (repa \\<propto> low)\n                                  (repa \\<propto> high) postnormt \\<and>\n                                 reduced postnormt \\<and>\n                                 shared postnormt var \\<and>\n                                 ordered postnormt var \\<and>\n                                 set_of postnormt\n                                 \\<subseteq> set_of pret \\<and>\n                                 (\\<exists>postnormbdt.\n                                     bdt postnormt var =\n                                     Some postnormbdt \\<and>\n                                     prebdt \\<sim> postnormbdt) \\<and>\n                                 (\\<forall>no\\<in>set_of postnormt.\n                                     repa no = no)) \\<and>\n                             ordered pret var \\<and>\n                             p \\<noteq> Null \\<and>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of pret \\<longrightarrow>\n                                 rep pt = repa pt) \\<and>\n                             levellista = levellist \\<and>\n                             nextb = nexta \\<and>\n                             markb = marka \\<and>\n                             lowa = low \\<and>\n                             higha = high \\<and>\n                             pa = p \\<and>\n                             (\\<forall>no.\n                                 no \\<in> set_of pret \\<longrightarrow>\n                                 markb no =\n                                 (\\<not> mark p)) \\<longrightarrow>\n                             (\\<exists>rept.\n                                 Dag ((repa \\<propto> id) p)\n                                  (repa \\<propto> low) (repa \\<propto> high)\n                                  rept \\<and>\n                                 (\\<forall>no\\<in>set_of rept.\n                                     repa no = no) \\<and>\n                                 (\\<forall>lowa higha pa.\n                                     Dag pa lowa higha rept \\<and>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of rept \\<longrightarrow>\n   low pt = lowa pt \\<and> high pt = higha pt) \\<longrightarrow>\n                                     (\\<forall>pt.\n   pt \\<notin> set_of pret \\<longrightarrow>\n   rep pt = repa pt \\<and>\n   low pt = lowa pt \\<and>\n   high pt = higha pt \\<and>\n   mark pt = marka pt \\<and> next pt = nexta pt) \\<and>\n                                     (\\<exists>postt.\n   Dag pa lowa higha postt \\<and>\n   reduced postt \\<and>\n   shared postt var \\<and>\n   ordered postt var \\<and>\n   set_of postt \\<subseteq> set_of pret \\<and>\n   (\\<exists>postbdt.\n       bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n                                     (\\<forall>no.\n   no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)))))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       lowa higha repa markb nextb pa levellista postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret; ordered pret var; p \\<noteq> Null;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rept.\n                            Dag ((repa \\<propto> id) p) (repa \\<propto> low)\n                             (repa \\<propto> high) rept \\<and>\n                            (\\<forall>no\\<in>set_of rept.\n                                repa no = no) \\<and>\n                            (\\<forall>lowa higha pa.\n                                Dag pa lowa higha rept \\<and>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           rept \\<longrightarrow>\n                                    low pt = lowa pt \\<and>\n                                    high pt = higha pt) \\<longrightarrow>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           pret \\<longrightarrow>\n                                    rep pt = repa pt \\<and>\n                                    low pt = lowa pt \\<and>\n                                    high pt = higha pt \\<and>\n                                    mark pt = marka pt \\<and>\n                                    next pt = nexta pt) \\<and>\n                                (\\<exists>postt.\n                                    Dag pa lowa higha postt \\<and>\n                                    reduced postt \\<and>\n                                    shared postt var \\<and>\n                                    ordered postt var \\<and>\n                                    set_of postt\n                                    \\<subseteq> set_of pret \\<and>\n                                    (\\<exists>postbdt.\n  bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n                                (\\<forall>no.\n                                    no \\<in> set_of pret \\<longrightarrow>\n                                    marka no = (\\<not> mark p)))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (simp only: simp_thms triv_forall_equality True_implies_equals)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rept.\n                            Dag ((repa \\<propto> id) p) (repa \\<propto> low)\n                             (repa \\<propto> high) rept \\<and>\n                            (\\<forall>no\\<in>set_of rept.\n                                repa no = no) \\<and>\n                            (\\<forall>lowa higha pa.\n                                Dag pa lowa higha rept \\<and>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           rept \\<longrightarrow>\n                                    low pt = lowa pt \\<and>\n                                    high pt = higha pt) \\<longrightarrow>\n                                (\\<forall>pt.\n                                    pt \\<notin> set_of\n           pret \\<longrightarrow>\n                                    rep pt = repa pt \\<and>\n                                    low pt = lowa pt \\<and>\n                                    high pt = higha pt \\<and>\n                                    mark pt = marka pt \\<and>\n                                    next pt = nexta pt) \\<and>\n                                (\\<exists>postt.\n                                    Dag pa lowa higha postt \\<and>\n                                    reduced postt \\<and>\n                                    shared postt var \\<and>\n                                    ordered postt var \\<and>\n                                    set_of postt\n                                    \\<subseteq> set_of pret \\<and>\n                                    (\\<exists>postbdt.\n  bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)) \\<and>\n                                (\\<forall>no.\n                                    no \\<in> set_of pret \\<longrightarrow>\n                                    marka no = (\\<not> mark p)))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule_tac x=postnormt in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> Dag ((repa \\<propto> id) p) (repa \\<propto> low)\n                          (repa \\<propto> high) postnormt \\<and>\n                         (\\<forall>no\\<in>set_of postnormt.\n                             repa no = no) \\<and>\n                         (\\<forall>lowa higha pa.\n                             Dag pa lowa higha postnormt \\<and>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of\n        postnormt \\<longrightarrow>\n                                 low pt = lowa pt \\<and>\n                                 high pt = higha pt) \\<longrightarrow>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of pret \\<longrightarrow>\n                                 rep pt = repa pt \\<and>\n                                 low pt = lowa pt \\<and>\n                                 high pt = higha pt \\<and>\n                                 mark pt = marka pt \\<and>\n                                 next pt = nexta pt) \\<and>\n                             (\\<exists>postt.\n                                 Dag pa lowa higha postt \\<and>\n                                 reduced postt \\<and>\n                                 shared postt var \\<and>\n                                 ordered postt var \\<and>\n                                 set_of postt \\<subseteq> set_of pret \\<and>\n                                 (\\<exists>postbdt.\n                                     bdt postt var = Some postbdt \\<and>\n                                     prebdt \\<sim> postbdt)) \\<and>\n                             (\\<forall>no.\n                                 no \\<in> set_of pret \\<longrightarrow>\n                                 marka no = (\\<not> mark p)))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> Dag ((repa \\<propto> id) p) (repa \\<propto> low)\n                          (repa \\<propto> high) postnormt\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set_of postnormt.\n                             repa no = no) \\<and>\n                         (\\<forall>lowa higha pa.\n                             Dag pa lowa higha postnormt \\<and>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of\n        postnormt \\<longrightarrow>\n                                 low pt = lowa pt \\<and>\n                                 high pt = higha pt) \\<longrightarrow>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of pret \\<longrightarrow>\n                                 rep pt = repa pt \\<and>\n                                 low pt = lowa pt \\<and>\n                                 high pt = higha pt \\<and>\n                                 mark pt = marka pt \\<and>\n                                 next pt = nexta pt) \\<and>\n                             (\\<exists>postt.\n                                 Dag pa lowa higha postt \\<and>\n                                 reduced postt \\<and>\n                                 shared postt var \\<and>\n                                 ordered postt var \\<and>\n                                 set_of postt \\<subseteq> set_of pret \\<and>\n                                 (\\<exists>postbdt.\n                                     bdt postt var = Some postbdt \\<and>\n                                     prebdt \\<sim> postbdt)) \\<and>\n                             (\\<forall>no.\n                                 no \\<in> set_of pret \\<longrightarrow>\n                                 marka no = (\\<not> mark p)))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set_of postnormt.\n                             repa no = no) \\<and>\n                         (\\<forall>lowa higha pa.\n                             Dag pa lowa higha postnormt \\<and>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of\n        postnormt \\<longrightarrow>\n                                 low pt = lowa pt \\<and>\n                                 high pt = higha pt) \\<longrightarrow>\n                             (\\<forall>pt.\n                                 pt \\<notin> set_of pret \\<longrightarrow>\n                                 rep pt = repa pt \\<and>\n                                 low pt = lowa pt \\<and>\n                                 high pt = higha pt \\<and>\n                                 mark pt = marka pt \\<and>\n                                 next pt = nexta pt) \\<and>\n                             (\\<exists>postt.\n                                 Dag pa lowa higha postt \\<and>\n                                 reduced postt \\<and>\n                                 shared postt var \\<and>\n                                 ordered postt var \\<and>\n                                 set_of postt \\<subseteq> set_of pret \\<and>\n                                 (\\<exists>postbdt.\n                                     bdt postt var = Some postbdt \\<and>\n                                     prebdt \\<sim> postbdt)) \\<and>\n                             (\\<forall>no.\n                                 no \\<in> set_of pret \\<longrightarrow>\n                                 marka no = (\\<not> mark p)))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of postnormt. repa no = no\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>lowa higha pa.\n                            Dag pa lowa higha postnormt \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of\n       postnormt \\<longrightarrow>\n                                low pt = lowa pt \\<and>\n                                high pt = higha pt) \\<longrightarrow>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repa pt \\<and>\n                                low pt = lowa pt \\<and>\n                                high pt = higha pt \\<and>\n                                mark pt = marka pt \\<and>\n                                next pt = nexta pt) \\<and>\n                            (\\<exists>postt.\n                                Dag pa lowa higha postt \\<and>\n                                reduced postt \\<and>\n                                shared postt var \\<and>\n                                ordered postt var \\<and>\n                                set_of postt \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postbdt.\n                                    bdt postt var = Some postbdt \\<and>\n                                    prebdt \\<sim> postbdt)) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply    simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>lowa higha pa.\n                            Dag pa lowa higha postnormt \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of\n       postnormt \\<longrightarrow>\n                                low pt = lowa pt \\<and>\n                                high pt = higha pt) \\<longrightarrow>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repa pt \\<and>\n                                low pt = lowa pt \\<and>\n                                high pt = higha pt \\<and>\n                                mark pt = marka pt \\<and>\n                                next pt = nexta pt) \\<and>\n                            (\\<exists>postt.\n                                Dag pa lowa higha postt \\<and>\n                                reduced postt \\<and>\n                                shared postt var \\<and>\n                                ordered postt var \\<and>\n                                set_of postt \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postbdt.\n                                    bdt postt var = Some postbdt \\<and>\n                                    prebdt \\<sim> postbdt)) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>pt.\n                             pt \\<notin> set_of pret \\<longrightarrow>\n                             rep pt = repa pt \\<and>\n                             low pt = lowa pt \\<and>\n                             high pt = higha pt \\<and>\n                             mark pt = marka pt \\<and>\n                             next pt = nexta pt) \\<and>\n                         (\\<exists>postt.\n                             Dag pa lowa higha postt \\<and>\n                             reduced postt \\<and>\n                             shared postt var \\<and>\n                             ordered postt var \\<and>\n                             set_of postt \\<subseteq> set_of pret \\<and>\n                             (\\<exists>postbdt.\n                                 bdt postt var = Some postbdt \\<and>\n                                 prebdt \\<sim> postbdt)) \\<and>\n                         (\\<forall>no.\n                             no \\<in> set_of pret \\<longrightarrow>\n                             marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (simp (no_asm_simp))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 2. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "(*while-while-Fall: while nb und Schleifenbdg gelten \\<longrightarrow> while (nb+1)*)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var; n < length levellista\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellista ! n) nexta ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (lowb no = Null) =\n                                   (highb no = Null) \\<and>\n                                   lowb no \\<notin> set ns \\<and>\n                                   highb no \\<notin> set ns \\<and>\n                                   isLeaf_pt no lowb highb =\n                                   (varb no \\<le> 1) \\<and>\n                                   (lowb no \\<noteq> Null \\<longrightarrow>\n                                    repb (lowb no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> lowb) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvarb no1 = varb no2) \\<and>\n                               (\\<forall>repc.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repc no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repc no \\<noteq> Null \\<and>\n (if (repc \\<propto> lowb) no = (repc \\<propto> highb) no \\<and>\n     lowb no \\<noteq> Null\n  then repc no = (repc \\<propto> lowb) no\n  else repc no \\<in> set ns \\<and>\n       repc (repc no) = repc no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repc \\<propto> highb) no1 = (repc \\<propto> highb) no \\<and>\n            (repc \\<propto> lowb) no1 = (repc \\<propto> lowb) no) =\n           (repc no = repc no1)))) \\<longrightarrow>\n                                   length levellista - (n + 1)\n                                   < length levellista - n \\<and>\n                                   Levellist levellista nexta ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   lowa = low \\<and>\n                                   higha = high \\<and>\n                                   pa = p \\<and>\n                                   repa = rep \\<and>\n                                   vara = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repc pt) \\<and>\n                                   repc ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repc no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<and>\n t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n           (repc \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellista = levellist \\<and>\n                                   nexta = next \\<and>\n                                   markb = marka \\<and>\n                                   lowb = low \\<and>\n                                   highb = high \\<and>\n                                   pb = p \\<and> varb = var)\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < length levellist\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellist ! n) next ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (low no = Null) = (high no = Null) \\<and>\n                                   low no \\<notin> set ns \\<and>\n                                   high no \\<notin> set ns \\<and>\n                                   isLeaf_pt no low high =\n                                   (var no \\<le> 1) \\<and>\n                                   (low no \\<noteq> Null \\<longrightarrow>\n                                    repb (low no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> low) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvar no1 = var no2) \\<and>\n                               (\\<forall>repa.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repa no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repa no \\<noteq> Null \\<and>\n (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no \\<in> set ns \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1)))) \\<longrightarrow>\n                                   length levellist - (n + 1)\n                                   < length levellist - n \\<and>\n                                   Levellist levellist next ll \\<and>\n                                   Dag p low high pret \\<and>\n                                   ordered pret var \\<and>\n                                   p \\<noteq> Null \\<and>\n                                   bdt pret var = Some prebdt \\<and>\n                                   wf_ll pret ll var \\<and>\n                                   length levellist = var p + 1 \\<and>\n                                   wf_marking pret mark marka\n                                    (\\<not> mark p) \\<and>\n                                   low = low \\<and>\n                                   high = high \\<and>\n                                   p = p \\<and>\n                                   rep = rep \\<and>\n                                   var = var \\<and>\n                                   n + 1 \\<le> length levellist \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < length levellist \\<longrightarrow>\n rep pt = repa pt) \\<and>\n                                   repa ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repa no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n           (repa \\<propto> high) \\<and>\n t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n           (repa \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var) \\<and>\n                                   levellist = levellist \\<and>\n                                   next = next \\<and>\n                                   marka = marka \\<and>\n                                   low = low \\<and>\n                                   high = high \\<and>\n                                   p = p \\<and> var = var)\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (simp only: simp_thms triv_forall_equality True_implies_equals)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> \\<exists>ns.\n                               List (levellist ! n) next ns \\<and>\n                               (\\<forall>no\\<in>set ns.\n                                   no \\<noteq> Null \\<and>\n                                   (low no = Null) = (high no = Null) \\<and>\n                                   low no \\<notin> set ns \\<and>\n                                   high no \\<notin> set ns \\<and>\n                                   isLeaf_pt no low high =\n                                   (var no \\<le> 1) \\<and>\n                                   (low no \\<noteq> Null \\<longrightarrow>\n                                    repb (low no) \\<noteq> Null) \\<and>\n                                   (repb \\<propto> low) no\n                                   \\<notin> set ns) \\<and>\n                               (\\<forall>no1\\<in>set ns.\n                                   \\<forall>no2\\<in>set ns.\nvar no1 = var no2) \\<and>\n                               (\\<forall>repa.\n                                   (\\<forall>no.\n no \\<notin> set ns \\<longrightarrow> repb no = repa no) \\<and>\n                                   (\\<forall>no\\<in>set ns.\n repa no \\<noteq> Null \\<and>\n (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no \\<in> set ns \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set ns.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1)))) \\<longrightarrow>\n                                   var p + 1 - (n + 1)\n                                   < var p + 1 - n \\<and>\n                                   n + 1 \\<le> var p + 1 \\<and>\n                                   (\\<forall>pt i.\n pt \\<notin> set_of pret \\<or>\n n + 1 \\<le> i \\<and>\n pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n rep pt = repa pt) \\<and>\n                                   repa ` Nodes (n + 1) ll\n                                   \\<subseteq> Nodes (n + 1) ll \\<and>\n                                   (\\<forall>no\\<in>Nodes (n + 1) ll.\n var (repa no) \\<le> var no \\<and>\n (\\<exists>not nort.\n     Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and>\n             nobdt \\<sim> norbdt)))) \\<and>\n                                   (\\<forall>t1 t2.\n t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n           (repa \\<propto> high) \\<and>\n t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n           (repa \\<propto> high) \\<longrightarrow>\n isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule_tac x=\"ll!n\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> List (levellist ! n) next (ll ! n) \\<and>\n                            (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> List (levellist ! n) next (ll ! n)\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 4. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "apply   (simp add: Levellist_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt\n 3. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))", "prefer 3"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "(*while-end-Fall: INV nb gilt und Schleifenbdg falsch \\<longrightarrow> Nachbdg while*)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellista nexta ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); lowa = low;\n           higha = high; pa = p; repa = rep; vara = var;\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           levellista = levellist; nexta = next; markb = marka; lowb = low;\n           highb = high; pb = p; varb = var;\n           \\<not> n < length levellista\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellista = levellist \\<and>\n                            nexta = next \\<and>\n                            markb = marka \\<and>\n                            lowb = low \\<and>\n                            highb = high \\<and>\n                            pb = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                markb no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "apply   (clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt vara lowa higha repa marka\n       next pa levellist ll varb lowb highb repb markb nexta pb levellista\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            levellist = levellist \\<and>\n                            next = next \\<and>\n                            marka = marka \\<and>\n                            low = low \\<and>\n                            high = high \\<and>\n                            p = p \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "apply   (simp (no_asm_use) only: simp_thms triv_forall_equality True_implies_equals)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "proof -\n  \\<comment> \\<open>End of while (invariant + false condition) to end of inner SPEC\\<close>"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "fix var p rep mark vara lowa higha pa levellista repa marka nexta varb ll  \n    nb pret prebdt  and low :: \"ref \\<Rightarrow> ref\" and \n    high :: \"ref \\<Rightarrow> ref\" and repb :: \"ref \\<Rightarrow> ref\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume ll: \"Levellist levellista nexta ll\""], ["proof (state)\nthis:\n  Levellist levellista nexta ll\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume wf_lla: \"wf_ll pret ll var\""], ["proof (state)\nthis:\n  wf_ll pret ll var\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume length_lla: \"length levellista = var p + 1\""], ["proof (state)\nthis:\n  length levellista = var p + 1\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume ord_pret: \"ordered pret var\""], ["proof (state)\nthis:\n  ordered pret var\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume pnN: \" p \\<noteq> Null\""], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume rep_repb_nc: \n    \"\\<forall>pt i. pt \\<notin> set_of pret \\<or> nb \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> \n    i < length levellista \n    \\<longrightarrow> rep pt = repb pt\""], ["proof (state)\nthis:\n  \\<forall>pt i.\n     pt \\<notin> set_of pret \\<or>\n     nb \\<le> i \\<and>\n     pt \\<in> set (ll ! i) \\<and> i < length levellista \\<longrightarrow>\n     rep pt = repb pt\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume wf_marking_prop: \" wf_marking pret mark marka (\\<not> mark p)\""], ["proof (state)\nthis:\n  wf_marking pret mark marka (\\<not> mark p)\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume pret_dag: \"Dag p low high pret\""], ["proof (state)\nthis:\n  Dag p low high pret\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume prebdt: \"bdt pret var = Some prebdt\""], ["proof (state)\nthis:\n  bdt pret var = Some prebdt\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume not_nbslla: \"\\<not> nb < length levellista\""], ["proof (state)\nthis:\n  \\<not> nb < length levellista\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume nb_le_lla: \" nb \\<le> length levellista\""], ["proof (state)\nthis:\n  nb \\<le> length levellista\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume normalize_prop: \"\\<forall>no\\<in>Nodes nb ll.\n    var (repb no) \\<le> var no \\<and>\n    (\\<exists>not nort. Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    Dag no low high not \\<and> reduced nort \\<and> ordered nort var \\<and> \n    set_of nort \\<subseteq> repb ` Nodes nb ll \\<and> \n    (\\<forall>no\\<in>set_of nort. repb no = no) \\<and> \n    (\\<exists>nobdt norbdt. bdt not var = Some nobdt \\<and> \n    bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes nb ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes nb ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt norbdt.\n             bdt not var = Some nobdt \\<and>\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume repbNodes_in_Nodes: \" repb ` Nodes nb ll \\<subseteq> Nodes nb ll\""], ["proof (state)\nthis:\n  repb ` Nodes nb ll \\<subseteq> Nodes nb ll\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume shared_mult_dags: \n    \"\\<forall>t1 t2. t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high) \\<and> \n    t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high) \n    \\<longrightarrow> isomorphic_dags_eq t1 t2 var\""], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p);\n           n \\<le> length levellist;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and>\n              i < length levellist \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt norbdt.\n                      bdt not var = Some nobdt \\<and>\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           \\<not> n < length levellist\\<rbrakk>\n          \\<Longrightarrow> (\\<exists>postnormt.\n                                Dag (repb p) (repb \\<propto> low)\n                                 (repb \\<propto> high) postnormt \\<and>\n                                reduced postnormt \\<and>\n                                shared postnormt var \\<and>\n                                ordered postnormt var \\<and>\n                                set_of postnormt\n                                \\<subseteq> set_of pret \\<and>\n                                (\\<exists>postnormbdt.\n                                    bdt postnormt var =\n                                    Some postnormbdt \\<and>\n                                    prebdt \\<sim> postnormbdt) \\<and>\n                                (\\<forall>no\\<in>set_of postnormt.\n                                    repb no = no)) \\<and>\n                            ordered pret var \\<and>\n                            p \\<noteq> Null \\<and>\n                            (\\<forall>pt.\n                                pt \\<notin> set_of pret \\<longrightarrow>\n                                rep pt = repb pt) \\<and>\n                            (\\<forall>no.\n                                no \\<in> set_of pret \\<longrightarrow>\n                                marka no = (\\<not> mark p))\n 2. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 3. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "show \"(\\<exists>postnormt. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) postnormt \\<and>\n    reduced postnormt \\<and> shared postnormt var \\<and>\n    ordered postnormt var \\<and> set_of postnormt \\<subseteq> set_of pret \\<and> \n    (\\<exists>postnormbdt. \n    bdt postnormt var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt) \\<and> \n    (\\<forall> no \\<in> set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and> p \\<noteq> Null \\<and> \n    (\\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>  \n    (\\<forall>no. no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from ll"], ["proof (chain)\npicking this:\n  Levellist levellista nexta ll", "have length_ll_eq: \"length levellista = length ll\""], ["proof (prove)\nusing this:\n  Levellist levellista nexta ll\n\ngoal (1 subgoal):\n 1. length levellista = length ll", "by (simp add: Levellist_length)"], ["proof (state)\nthis:\n  length levellista = length ll\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from rep_repb_nc"], ["proof (chain)\npicking this:\n  \\<forall>pt i.\n     pt \\<notin> set_of pret \\<or>\n     nb \\<le> i \\<and>\n     pt \\<in> set (ll ! i) \\<and> i < length levellista \\<longrightarrow>\n     rep pt = repb pt", "have rep_nc_post: \"\\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt\""], ["proof (prove)\nusing this:\n  \\<forall>pt i.\n     pt \\<notin> set_of pret \\<or>\n     nb \\<le> i \\<and>\n     pt \\<in> set (ll ! i) \\<and> i < length levellista \\<longrightarrow>\n     rep pt = repb pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt", "by auto"], ["proof (state)\nthis:\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from pnN pret_dag"], ["proof (chain)\npicking this:\n  p \\<noteq> Null\n  Dag p low high pret", "obtain lt rt where pret_def: \"pret = Node lt p rt\""], ["proof (prove)\nusing this:\n  p \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        pret = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  pret = Node lt p rt\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from wf_marking_prop pret_def"], ["proof (chain)\npicking this:\n  wf_marking pret mark marka (\\<not> mark p)\n  pret = Node lt p rt", "have marking_inverted: \"(\\<forall>no. no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))\""], ["proof (prove)\nusing this:\n  wf_marking pret mark marka (\\<not> mark p)\n  pret = Node lt p rt\n\ngoal (1 subgoal):\n 1. \\<forall>no.\n       no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)", "by (simp add: wf_marking_def)"], ["proof (state)\nthis:\n  \\<forall>no.\n     no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from not_nbslla nb_le_lla"], ["proof (chain)\npicking this:\n  \\<not> nb < length levellista\n  nb \\<le> length levellista", "have nb_length_lla: \"nb = length levellista\""], ["proof (prove)\nusing this:\n  \\<not> nb < length levellista\n  nb \\<le> length levellista\n\ngoal (1 subgoal):\n 1. nb = length levellista", "by simp"], ["proof (state)\nthis:\n  nb = length levellista\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with length_lla"], ["proof (chain)\npicking this:\n  length levellista = var p + 1\n  nb = length levellista", "have varp_s_nb: \"var p < nb\""], ["proof (prove)\nusing this:\n  length levellista = var p + 1\n  nb = length levellista\n\ngoal (1 subgoal):\n 1. var p < nb", "by simp"], ["proof (state)\nthis:\n  var p < nb\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from pret_def"], ["proof (chain)\npicking this:\n  pret = Node lt p rt", "have p_in_pret: \"p \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  pret = Node lt p rt\n\ngoal (1 subgoal):\n 1. p \\<in> set_of pret", "by simp"], ["proof (state)\nthis:\n  p \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with wf_lla"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  p \\<in> set_of pret", "have \"p \\<in> set (ll ! (var p))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  p \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. p \\<in> set (ll ! var p)", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  p \\<in> set (ll ! var p)\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with varp_s_nb"], ["proof (chain)\npicking this:\n  var p < nb\n  p \\<in> set (ll ! var p)", "have p_in_Nodes: \"p \\<in> Nodes nb ll\""], ["proof (prove)\nusing this:\n  var p < nb\n  p \\<in> set (ll ! var p)\n\ngoal (1 subgoal):\n 1. p \\<in> Nodes nb ll", "by (auto simp add: Nodes_def)"], ["proof (state)\nthis:\n  p \\<in> Nodes nb ll\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with normalize_prop"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes nb ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes nb ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt norbdt.\n             bdt not var = Some nobdt \\<and>\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n  p \\<in> Nodes nb ll", "obtain not nort where\n      varrepno_varno: \" var (repb p) \\<le> var p\" and\n      nort_dag: \"Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\" and\n      not_dag: \" Dag p low high not\" and\n      red_nort: \"reduced nort\" and\n      ord_nort: \"ordered nort var\" and\n      nort_in_repNodes: \" set_of nort \\<subseteq> repb ` Nodes nb ll\" and\n      nort_repb: \"(\\<forall>no\\<in>set_of nort. repb no = no)\" and\n      bdt_prop: \"\\<exists>nobdt norbdt. bdt not var = Some nobdt \\<and> bdt nort var = Some norbdt \\<and>\n      nobdt \\<sim> norbdt\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes nb ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes nb ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt norbdt.\n             bdt not var = Some nobdt \\<and>\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n  p \\<in> Nodes nb ll\n\ngoal (1 subgoal):\n 1. (\\<And>nort not.\n        \\<lbrakk>var (repb p) \\<le> var p;\n         Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n         Dag p low high not; reduced nort; ordered nort var;\n         set_of nort \\<subseteq> repb ` Nodes nb ll;\n         \\<forall>no\\<in>set_of nort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt not var = Some nobdt \\<and>\n            bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  var (repb p) \\<le> var p\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  Dag p low high not\n  reduced nort\n  ordered nort var\n  set_of nort \\<subseteq> repb ` Nodes nb ll\n  \\<forall>no\\<in>set_of nort. repb no = no\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from wf_lla nb_length_lla"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  nb = length levellista", "have Nodes_in_pret: \"Nodes nb ll \\<subseteq> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  nb = length levellista\n\ngoal (1 subgoal):\n 1. Nodes nb ll \\<subseteq> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> Nodes nb ll \\<subseteq> set_of pret", "apply (rule Nodes_in_pret)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_ll pret ll var; nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> wf_ll pret ll ?var2\n 2. \\<lbrakk>wf_ll pret ll var; nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> nb \\<le> length ll", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Nodes nb ll \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "from pret_dag wf_lla nb_length_lla"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  wf_ll pret ll var\n  nb = length levellista", "have \"Null \\<notin> Nodes nb ll\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  wf_ll pret ll var\n  nb = length levellista\n\ngoal (1 subgoal):\n 1. Null \\<notin> Nodes nb ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> Null \\<notin> Nodes nb ll", "apply (rule Null_notin_Nodes)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 ?low3 ?high3 ?t3\n 2. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> nb \\<le> length ll\n 3. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     nb = length levellista\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?t3 ll ?var3", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Null \\<notin> Nodes nb ll\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with p_in_Nodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  p \\<in> Nodes nb ll\n  repb ` Nodes nb ll \\<subseteq> Nodes nb ll\n  Null \\<notin> Nodes nb ll", "have rp_nNull: \"repb p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  p \\<in> Nodes nb ll\n  repb ` Nodes nb ll \\<subseteq> Nodes nb ll\n  Null \\<notin> Nodes nb ll\n\ngoal (1 subgoal):\n 1. repb p \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repb p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with nort_dag"], ["proof (chain)\npicking this:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p \\<noteq> Null", "have nort_nTip: \"nort\\<noteq> Tip\""], ["proof (prove)\nusing this:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. nort \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  nort \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "have \"\\<exists>postnormt. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) postnormt \\<and>\n      reduced postnormt \\<and> shared postnormt var \\<and>\n      ordered postnormt var \\<and> set_of postnormt \\<subseteq> set_of pret \\<and> \n      (\\<exists>postnormbdt.  \n      bdt postnormt var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt) \\<and> \n      (\\<forall>no \\<in> set_of postnormt. repb no = no)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>postnormt.\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n        postnormt \\<and>\n       reduced postnormt \\<and>\n       shared postnormt var \\<and>\n       ordered postnormt var \\<and>\n       set_of postnormt \\<subseteq> set_of pret \\<and>\n       (\\<exists>postnormbdt.\n           bdt postnormt var = Some postnormbdt \\<and>\n           prebdt \\<sim> postnormbdt) \\<and>\n       (\\<forall>no\\<in>set_of postnormt. repb no = no)", "proof (rule_tac x=nort in exI)"], ["proof (state)\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    reduced nort \\<and>\n    shared nort var \\<and>\n    ordered nort var \\<and>\n    set_of nort \\<subseteq> set_of pret \\<and>\n    (\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and>\n        prebdt \\<sim> postnormbdt) \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no)", "from nort_in_repNodes repbNodes_in_Nodes Nodes_in_pret"], ["proof (chain)\npicking this:\n  set_of nort \\<subseteq> repb ` Nodes nb ll\n  repb ` Nodes nb ll \\<subseteq> Nodes nb ll\n  Nodes nb ll \\<subseteq> set_of pret", "have nort_in_pret: \"set_of nort \\<subseteq> set_of pret\""], ["proof (prove)\nusing this:\n  set_of nort \\<subseteq> repb ` Nodes nb ll\n  repb ` Nodes nb ll \\<subseteq> Nodes nb ll\n  Nodes nb ll \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> set_of pret", "by blast"], ["proof (state)\nthis:\n  set_of nort \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    reduced nort \\<and>\n    shared nort var \\<and>\n    ordered nort var \\<and>\n    set_of nort \\<subseteq> set_of pret \\<and>\n    (\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and>\n        prebdt \\<sim> postnormbdt) \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no)", "from not_dag pret_dag"], ["proof (chain)\npicking this:\n  Dag p low high not\n  Dag p low high pret", "have not_pret: \"not = pret\""], ["proof (prove)\nusing this:\n  Dag p low high not\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. not = pret", "by (simp add: Dag_unique)"], ["proof (state)\nthis:\n  not = pret\n\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    reduced nort \\<and>\n    shared nort var \\<and>\n    ordered nort var \\<and>\n    set_of nort \\<subseteq> set_of pret \\<and>\n    (\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and>\n        prebdt \\<sim> postnormbdt) \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no)", "with bdt_prop prebdt"], ["proof (chain)\npicking this:\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n  bdt pret var = Some prebdt\n  not = pret", "have pret_bdt_prop: \n        \"\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt\""], ["proof (prove)\nusing this:\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n  bdt pret var = Some prebdt\n  not = pret\n\ngoal (1 subgoal):\n 1. \\<exists>postnormbdt.\n       bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt", "by auto"], ["proof (state)\nthis:\n  \\<exists>postnormbdt.\n     bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt\n\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    reduced nort \\<and>\n    shared nort var \\<and>\n    ordered nort var \\<and>\n    set_of nort \\<subseteq> set_of pret \\<and>\n    (\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and>\n        prebdt \\<sim> postnormbdt) \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no)", "from shared_mult_dags"], ["proof (chain)\npicking this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var", "have \"shared nort var\""], ["proof (prove)\nusing this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. shared nort var", "proof (auto simp add: shared_def isomorphic_dags_eq_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "fix st1 st2 bdt1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "assume shared_imp: \n          \"\\<forall>t1 t2. t1\\<in>Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high) \\<and> \n          t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n          \\<longrightarrow>\n          (\\<exists>bdt1. bdt t1 var = Some bdt1 \\<and> bdt t2 var = Some bdt1) \\<longrightarrow> t1 = t2\""], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     (\\<exists>bdt1.\n         bdt t1 var = Some bdt1 \\<and>\n         bdt t2 var = Some bdt1) \\<longrightarrow>\n     t1 = t2\n\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "assume st1_nort: \" st1 \\<le> nort\""], ["proof (state)\nthis:\n  st1 \\<le> nort\n\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "assume st2_nort: \"st2 \\<le> nort\""], ["proof (state)\nthis:\n  st2 \\<le> nort\n\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "assume bdt_st1: \"bdt st1 var = Some bdt1\""], ["proof (state)\nthis:\n  bdt st1 var = Some bdt1\n\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "assume bdt_st2: \" bdt st2 var = Some bdt1\""], ["proof (state)\nthis:\n  bdt st2 var = Some bdt1\n\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "from nort_in_repNodes nort_dag nort_nTip"], ["proof (chain)\npicking this:\n  set_of nort \\<subseteq> repb ` Nodes nb ll\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  nort \\<noteq> Tip", "have nort_in_DagsrNodes: \n          \"nort \\<in> Dags (repb `(Nodes nb ll)) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of nort \\<subseteq> repb ` Nodes nb ll\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  nort \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. nort\n    \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n           (repb \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of nort \\<subseteq> repb ` Nodes nb ll;\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     nort \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> nort\n                      \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of nort \\<subseteq> repb ` Nodes nb ll;\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     nort \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> set_of nort \\<subseteq> repb ` Nodes nb ll\n 2. \\<lbrakk>set_of nort \\<subseteq> repb ` Nodes nb ll;\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     nort \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 (repb \\<propto> low) (repb \\<propto> high)\n                       nort\n 3. \\<lbrakk>set_of nort \\<subseteq> repb ` Nodes nb ll;\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     nort \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> nort \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  nort\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>st\\<^sub>1 st\\<^sub>2 bdt\\<^sub>1.\n       \\<lbrakk>\\<forall>t1 t2.\n                   t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<and>\n                   t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high) \\<longrightarrow>\n                   (\\<exists>bdt\\<^sub>1.\n                       bdt t1 var = Some bdt\\<^sub>1 \\<and>\n                       bdt t2 var = Some bdt\\<^sub>1) \\<longrightarrow>\n                   t1 = t2;\n        st\\<^sub>1 \\<le> nort; st\\<^sub>2 \\<le> nort;\n        bdt st\\<^sub>1 var = Some bdt\\<^sub>1;\n        bdt st\\<^sub>2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> st\\<^sub>1 = st\\<^sub>2", "show \"st1 = st2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st1 = st2", "proof (cases st1)"], ["proof (state)\ngoal (2 subgoals):\n 1. st1 = Tip \\<Longrightarrow> st1 = st2\n 2. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "case Tip"], ["proof (state)\nthis:\n  st1 = Tip\n\ngoal (2 subgoals):\n 1. st1 = Tip \\<Longrightarrow> st1 = st2\n 2. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "note st1_Tip=this"], ["proof (state)\nthis:\n  st1 = Tip\n\ngoal (2 subgoals):\n 1. st1 = Tip \\<Longrightarrow> st1 = st2\n 2. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "with bdt_st1 bdt_st2"], ["proof (chain)\npicking this:\n  bdt st1 var = Some bdt1\n  bdt st2 var = Some bdt1\n  st1 = Tip", "show ?thesis"], ["proof (prove)\nusing this:\n  bdt st1 var = Some bdt1\n  bdt st2 var = Some bdt1\n  st1 = Tip\n\ngoal (1 subgoal):\n 1. st1 = st2", "by auto"], ["proof (state)\nthis:\n  st1 = st2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "case (Node lst1 st1p rst1)"], ["proof (state)\nthis:\n  st1 = Node lst1 st1p rst1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "note st1_Node=this"], ["proof (state)\nthis:\n  st1 = Node lst1 st1p rst1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "then"], ["proof (chain)\npicking this:\n  st1 = Node lst1 st1p rst1", "have st1_nTip: \"st1 \\<noteq> Tip\""], ["proof (prove)\nusing this:\n  st1 = Node lst1 st1p rst1\n\ngoal (1 subgoal):\n 1. st1 \\<noteq> Tip", "by simp"], ["proof (state)\nthis:\n  st1 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st1 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st1 = st2", "proof (cases st2)"], ["proof (state)\ngoal (2 subgoals):\n 1. st2 = Tip \\<Longrightarrow> st1 = st2\n 2. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "case Tip"], ["proof (state)\nthis:\n  st2 = Tip\n\ngoal (2 subgoals):\n 1. st2 = Tip \\<Longrightarrow> st1 = st2\n 2. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "with bdt_st1 bdt_st2"], ["proof (chain)\npicking this:\n  bdt st1 var = Some bdt1\n  bdt st2 var = Some bdt1\n  st2 = Tip", "show ?thesis"], ["proof (prove)\nusing this:\n  bdt st1 var = Some bdt1\n  bdt st2 var = Some bdt1\n  st2 = Tip\n\ngoal (1 subgoal):\n 1. st1 = st2", "by auto"], ["proof (state)\nthis:\n  st1 = st2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "case (Node lst2 st2p rst2)"], ["proof (state)\nthis:\n  st2 = Node lst2 st2p rst2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "note st2_Node=this"], ["proof (state)\nthis:\n  st2 = Node lst2 st2p rst2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "then"], ["proof (chain)\npicking this:\n  st2 = Node lst2 st2p rst2", "have st2_nTip: \"st2 \\<noteq> Tip\""], ["proof (prove)\nusing this:\n  st2 = Node lst2 st2p rst2\n\ngoal (1 subgoal):\n 1. st2 \\<noteq> Tip", "by simp"], ["proof (state)\nthis:\n  st2 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "from nort_in_DagsrNodes st1_nort ord_nort wf_lla st1_nTip"], ["proof (chain)\npicking this:\n  nort\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  st1 \\<le> nort\n  ordered nort var\n  wf_ll pret ll var\n  st1 \\<noteq> Tip", "have st1_in_Dags: \n              \"st1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (prove)\nusing this:\n  nort\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  st1 \\<le> nort\n  ordered nort var\n  wf_ll pret ll var\n  st1 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. st1\n    \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n           (repb \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st1 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> st1\n                      \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high)", "apply (rule Dags_subdags)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st1 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> ?t5\n                      \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high)\n 2. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st1 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> st1 \\<le> ?t5\n 3. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st1 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> st1 \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  st1\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "from nort_in_DagsrNodes st2_nort ord_nort wf_lla  st2_nTip"], ["proof (chain)\npicking this:\n  nort\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  st2 \\<le> nort\n  ordered nort var\n  wf_ll pret ll var\n  st2 \\<noteq> Tip", "have st2_in_Dags: \n              \"st2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (prove)\nusing this:\n  nort\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  st2 \\<le> nort\n  ordered nort var\n  wf_ll pret ll var\n  st2 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. st2\n    \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n           (repb \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st2 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> st2\n                      \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high)", "apply (rule Dags_subdags)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st2 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> ?t5\n                      \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                             (repb \\<propto> high)\n 2. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st2 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> st2 \\<le> ?t5\n 3. \\<lbrakk>nort\n             \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n                    (repb \\<propto> high);\n     st2 \\<le> nort; ordered nort var; wf_ll pret ll var;\n     st2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> st2 \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  st2\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. st2 = Node x21 x22 x23 \\<Longrightarrow> st1 = st2", "from st1_in_Dags st2_in_Dags bdt_st1 bdt_st2 shared_imp"], ["proof (chain)\npicking this:\n  st1\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  st2\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  bdt st1 var = Some bdt1\n  bdt st2 var = Some bdt1\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     (\\<exists>bdt1.\n         bdt t1 var = Some bdt1 \\<and>\n         bdt t2 var = Some bdt1) \\<longrightarrow>\n     t1 = t2", "show \"st1=st2\""], ["proof (prove)\nusing this:\n  st1\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  st2\n  \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low) (repb \\<propto> high)\n  bdt st1 var = Some bdt1\n  bdt st2 var = Some bdt1\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes nb ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     (\\<exists>bdt1.\n         bdt t1 var = Some bdt1 \\<and>\n         bdt t2 var = Some bdt1) \\<longrightarrow>\n     t1 = t2\n\ngoal (1 subgoal):\n 1. st1 = st2", "by simp"], ["proof (state)\nthis:\n  st1 = st2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st1 = st2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st1 = st2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  shared nort var\n\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    reduced nort \\<and>\n    shared nort var \\<and>\n    ordered nort var \\<and>\n    set_of nort \\<subseteq> set_of pret \\<and>\n    (\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and>\n        prebdt \\<sim> postnormbdt) \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no)", "with nort_dag red_nort ord_nort nort_in_pret pret_bdt_prop nort_repb"], ["proof (chain)\npicking this:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  reduced nort\n  ordered nort var\n  set_of nort \\<subseteq> set_of pret\n  \\<exists>postnormbdt.\n     bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt\n  \\<forall>no\\<in>set_of nort. repb no = no\n  shared nort var", "show \"Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n        reduced nort \\<and> shared nort var \\<and> ordered nort var \\<and> \n        set_of nort \\<subseteq> set_of pret \\<and> \n        (\\<exists>postnormbdt. \n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt) \\<and> \n        (\\<forall>no \\<in> set_of nort.  repb no = no)\""], ["proof (prove)\nusing this:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  reduced nort\n  ordered nort var\n  set_of nort \\<subseteq> set_of pret\n  \\<exists>postnormbdt.\n     bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt\n  \\<forall>no\\<in>set_of nort. repb no = no\n  shared nort var\n\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    reduced nort \\<and>\n    shared nort var \\<and>\n    ordered nort var \\<and>\n    set_of nort \\<subseteq> set_of pret \\<and>\n    (\\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and>\n        prebdt \\<sim> postnormbdt) \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> Dag (repb p) (repb \\<propto> low)\n                       (repb \\<propto> high) nort \\<and>\n                      reduced nort \\<and>\n                      shared nort var \\<and>\n                      ordered nort var \\<and>\n                      set_of nort \\<subseteq> set_of pret \\<and>\n                      (\\<exists>postnormbdt.\n                          bdt nort var = Some postnormbdt \\<and>\n                          prebdt \\<sim> postnormbdt) \\<and>\n                      (\\<forall>no\\<in>set_of nort. repb no = no)", "apply (intro conjI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> Dag (repb p) (repb \\<propto> low)\n                       (repb \\<propto> high) nort\n 2. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> reduced nort\n 3. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> shared nort var\n 4. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> ordered nort var\n 5. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> set_of nort \\<subseteq> set_of pret\n 6. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> \\<exists>postnormbdt.\n                         bdt nort var = Some postnormbdt \\<and>\n                         prebdt \\<sim> postnormbdt\n 7. \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     reduced nort; ordered nort var; set_of nort \\<subseteq> set_of pret;\n     \\<exists>postnormbdt.\n        bdt nort var = Some postnormbdt \\<and> prebdt \\<sim> postnormbdt;\n     \\<forall>no\\<in>set_of nort. repb no = no; shared nort var\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>set_of nort. repb no = no", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n  reduced nort \\<and>\n  shared nort var \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> set_of pret \\<and>\n  (\\<exists>postnormbdt.\n      bdt nort var = Some postnormbdt \\<and>\n      prebdt \\<sim> postnormbdt) \\<and>\n  (\\<forall>no\\<in>set_of nort. repb no = no)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>postnormt.\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n      postnormt \\<and>\n     reduced postnormt \\<and>\n     shared postnormt var \\<and>\n     ordered postnormt var \\<and>\n     set_of postnormt \\<subseteq> set_of pret \\<and>\n     (\\<exists>postnormbdt.\n         bdt postnormt var = Some postnormbdt \\<and>\n         prebdt \\<sim> postnormbdt) \\<and>\n     (\\<forall>no\\<in>set_of postnormt. repb no = no)\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "with wf_lla length_lla ord_pret pnN rep_nc_post marking_inverted"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  length levellista = var p + 1\n  ordered pret var\n  p \\<noteq> Null\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt\n  \\<forall>no.\n     no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)\n  \\<exists>postnormt.\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n      postnormt \\<and>\n     reduced postnormt \\<and>\n     shared postnormt var \\<and>\n     ordered postnormt var \\<and>\n     set_of postnormt \\<subseteq> set_of pret \\<and>\n     (\\<exists>postnormbdt.\n         bdt postnormt var = Some postnormbdt \\<and>\n         prebdt \\<sim> postnormbdt) \\<and>\n     (\\<forall>no\\<in>set_of postnormt. repb no = no)", "show ?thesis"], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  length levellista = var p + 1\n  ordered pret var\n  p \\<noteq> Null\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt\n  \\<forall>no.\n     no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)\n  \\<exists>postnormt.\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n      postnormt \\<and>\n     reduced postnormt \\<and>\n     shared postnormt var \\<and>\n     ordered postnormt var \\<and>\n     set_of postnormt \\<subseteq> set_of pret \\<and>\n     (\\<exists>postnormbdt.\n         bdt postnormt var = Some postnormbdt \\<and>\n         prebdt \\<sim> postnormbdt) \\<and>\n     (\\<forall>no\\<in>set_of postnormt. repb no = no)\n\ngoal (1 subgoal):\n 1. (\\<exists>postnormt.\n        Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n         postnormt \\<and>\n        reduced postnormt \\<and>\n        shared postnormt var \\<and>\n        ordered postnormt var \\<and>\n        set_of postnormt \\<subseteq> set_of pret \\<and>\n        (\\<exists>postnormbdt.\n            bdt postnormt var = Some postnormbdt \\<and>\n            prebdt \\<sim> postnormbdt) \\<and>\n        (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n    ordered pret var \\<and>\n    p \\<noteq> Null \\<and>\n    (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n    (\\<forall>no.\n        no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))", "by simp"], ["proof (state)\nthis:\n  (\\<exists>postnormt.\n      Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>postnormt.\n      Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n       postnormt \\<and>\n      reduced postnormt \\<and>\n      shared postnormt var \\<and>\n      ordered postnormt var \\<and>\n      set_of postnormt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postnormbdt.\n          bdt postnormt var = Some postnormbdt \\<and>\n          prebdt \\<sim> postnormbdt) \\<and>\n      (\\<forall>no\\<in>set_of postnormt. repb no = no)) \\<and>\n  ordered pret var \\<and>\n  p \\<noteq> Null \\<and>\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow> rep pt = repb pt) \\<and>\n  (\\<forall>no.\n      no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p))\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "next\n  \\<comment> \\<open>From postcondition inner SPEC to final postcondition\\<close>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "fix var low high p rep levellist marka \"next\" \n    nexta lowb highb pb levellista ll repa pret prebdt \n    and mark::\"ref\\<Rightarrow>bool\" and postnormt postnormbdt"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume ll: \"Levellist levellista nexta ll\""], ["proof (state)\nthis:\n  Levellist levellista nexta ll\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume repoint_spec: \n         \"Dag pb lowb highb postnormt\"\n         \"\\<forall>pt. pt \\<notin> set_of postnormt \\<longrightarrow> low pt = lowb pt \\<and> high pt = highb pt\""], ["proof (state)\nthis:\n  Dag pb lowb highb postnormt\n  \\<forall>pt.\n     pt \\<notin> set_of postnormt \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume pret_dag: \"Dag p low high pret\""], ["proof (state)\nthis:\n  Dag p low high pret\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume ord_pret: \"ordered pret var\""], ["proof (state)\nthis:\n  ordered pret var\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume pnN: \" p \\<noteq> Null\""], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume onemark_pret: \n    \"\\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p\" (is \"\\<forall>n. ?in_pret n \\<longrightarrow> ?eq_mark_p n\")"], ["proof (state)\nthis:\n  \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume pret_bdt: \" bdt pret var = Some prebdt\""], ["proof (state)\nthis:\n  bdt pret var = Some prebdt\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume  wf_ll: \"wf_ll pret ll var\"  and\n    length_ll:\"length levellist =var p + 1\" and\n    wf_marking_ll: \"wf_marking pret mark marka (\\<not> mark p)\""], ["proof (state)\nthis:\n  wf_ll pret ll var\n  length levellist = var p + 1\n  wf_marking pret mark marka (\\<not> mark p)\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume  \n    postnormt_dag: \"Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt\" and\n    reduced_postnormt: \"reduced postnormt\" and\n    shared_postnormt: \"shared postnormt var\" and\n    ordered_postnormt: \"ordered postnormt var\" and\n    subset_pret: \"set_of postnormt \\<subseteq> set_of pret\"and\n    sim_bdt: \"bdt postnormt var = Some postnormbdt\" \"prebdt \\<sim> postnormbdt\"  and\n    postdag_repa: \"\\<forall>no \\<in> set_of postnormt. repa no = no\" and\n    rep_eq: \"\\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt\"  and\n    pret_marked: \"\\<forall>no. no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)\""], ["proof (state)\nthis:\n  Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt\n  reduced postnormt\n  shared postnormt var\n  ordered postnormt var\n  set_of postnormt \\<subseteq> set_of pret\n  bdt postnormt var = Some postnormbdt\n  prebdt \\<sim> postnormbdt\n  \\<forall>no\\<in>set_of postnormt. repa no = no\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt\n  \\<forall>no.\n     no \\<in> set_of pret \\<longrightarrow> marka no = (\\<not> mark p)\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "assume unmodif_next: \"\\<forall>p. p \\<notin> set_of pret \\<longrightarrow> next p = nexta p\""], ["proof (state)\nthis:\n  \\<forall>p. p \\<notin> set_of pret \\<longrightarrow> next p = nexta p\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))\n 2. \\<And>pret prebdt var low high rep mark next p marka nexta levellist ll\n       repa postnormt postnormbdt lowa higha pa.\n       \\<lbrakk>Dag p low high pret;\n        \\<forall>n. n \\<in> set_of pret \\<longrightarrow> mark n = mark p;\n        bdt pret var = Some prebdt; Levellist levellist nexta ll;\n        wf_ll pret ll var; length levellist = var p + 1;\n        wf_marking pret mark marka (\\<not> mark p);\n        \\<forall>p.\n           p \\<notin> set_of pret \\<longrightarrow> next p = nexta p;\n        ordered pret var;\n        Dag (repa p) (repa \\<propto> low) (repa \\<propto> high) postnormt;\n        p \\<noteq> Null; reduced postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt;\n        shared postnormt var; ordered postnormt var;\n        set_of postnormt \\<subseteq> set_of pret;\n        \\<forall>no\\<in>set_of postnormt. repa no = no;\n        bdt postnormt var = Some postnormbdt; prebdt \\<sim> postnormbdt;\n        \\<forall>no.\n           no \\<in> set_of pret \\<longrightarrow>\n           marka no = (\\<not> mark p);\n        Dag pa lowa higha postnormt;\n        \\<forall>pt.\n           pt \\<notin> set_of postnormt \\<longrightarrow>\n           low pt = lowa pt \\<and> high pt = higha pt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            low pt = lowa pt \\<and>\n                            high pt = higha pt \\<and> mark pt = marka pt", "show \"(\\<forall>pt. pt \\<notin> set_of pret \n    \\<longrightarrow> low pt = lowb pt \\<and> high pt = highb pt \\<and> \n    mark pt = marka pt ) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "from ll"], ["proof (chain)\npicking this:\n  Levellist levellista nexta ll", "have length_ll_eq: \"length levellista = length ll\""], ["proof (prove)\nusing this:\n  Levellist levellista nexta ll\n\ngoal (1 subgoal):\n 1. length levellista = length ll", "by (simp add: Levellist_length)"], ["proof (state)\nthis:\n  length levellista = length ll\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "from repoint_spec  pnN subset_pret"], ["proof (chain)\npicking this:\n  Dag pb lowb highb postnormt\n  \\<forall>pt.\n     pt \\<notin> set_of postnormt \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt\n  p \\<noteq> Null\n  set_of postnormt \\<subseteq> set_of pret", "have repoint_nc: \"(\\<forall>pt. pt \\<notin> set_of pret \n      \\<longrightarrow> low pt = lowb pt \\<and> high pt = highb pt) \\<and> Dag pb lowb highb postnormt\""], ["proof (prove)\nusing this:\n  Dag pb lowb highb postnormt\n  \\<forall>pt.\n     pt \\<notin> set_of postnormt \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt\n  p \\<noteq> Null\n  set_of postnormt \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. (\\<forall>pt.\n        pt \\<notin> set_of pret \\<longrightarrow>\n        low pt = lowb pt \\<and> high pt = highb pt) \\<and>\n    Dag pb lowb highb postnormt", "by auto"], ["proof (state)\nthis:\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      low pt = lowb pt \\<and> high pt = highb pt) \\<and>\n  Dag pb lowb highb postnormt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "then"], ["proof (chain)\npicking this:\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      low pt = lowb pt \\<and> high pt = highb pt) \\<and>\n  Dag pb lowb highb postnormt", "have lowhigh_b_eq: \"\\<forall>pt. pt \\<notin> set_of pret \n      \\<longrightarrow> low pt = lowb pt \\<and> high pt = highb pt\""], ["proof (prove)\nusing this:\n  (\\<forall>pt.\n      pt \\<notin> set_of pret \\<longrightarrow>\n      low pt = lowb pt \\<and> high pt = highb pt) \\<and>\n  Dag pb lowb highb postnormt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "from wf_marking_ll pret_dag pnN"], ["proof (chain)\npicking this:\n  wf_marking pret mark marka (\\<not> mark p)\n  Dag p low high pret\n  p \\<noteq> Null", "have mark_b_eq: \"\\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> mark pt = marka pt\""], ["proof (prove)\nusing this:\n  wf_marking pret mark marka (\\<not> mark p)\n  Dag p low high pret\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow> mark pt = marka pt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_marking pret mark marka (\\<not> mark p);\n     Dag p low high pret; p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> \\<forall>pt.\n                         pt \\<notin> set_of pret \\<longrightarrow>\n                         mark pt = marka pt", "apply (simp add: wf_marking_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case pret of Tip \\<Rightarrow> marka = mark\n             | Node lt pa rt \\<Rightarrow>\n                 (\\<forall>n.\n                     n \\<notin> set_of pret \\<longrightarrow>\n                     marka n = mark n) \\<and>\n                 (\\<forall>n.\n                     n \\<in> set_of pret \\<longrightarrow>\n                     marka n = (\\<not> mark p));\n     \\<exists>lt rt.\n        pret = Node lt p rt \\<and>\n        Dag (low p) low high lt \\<and> Dag (high p) low high rt;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> \\<forall>pt.\n                         pt \\<notin> set_of pret \\<longrightarrow>\n                         mark pt = marka pt", "apply (split dag.splits)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>lt rt.\n       \\<lbrakk>p \\<noteq> Null; pret = Tip; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        marka = mark\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            mark pt = marka pt\n 2. \\<And>x21 lt x22 rt x23.\n       \\<lbrakk>p \\<noteq> Null; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        pret = Node x21 x22 x23;\n        (\\<forall>n.\n            n \\<notin> set_of pret \\<longrightarrow>\n            marka n = mark n) \\<and>\n        (\\<forall>n.\n            n \\<in> set_of pret \\<longrightarrow>\n            marka n = (\\<not> mark p))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            mark pt = marka pt", "apply  simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 lt x22 rt x23.\n       \\<lbrakk>p \\<noteq> Null; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        pret = Node x21 x22 x23;\n        (\\<forall>n.\n            n \\<notin> set_of pret \\<longrightarrow>\n            marka n = mark n) \\<and>\n        (\\<forall>n.\n            n \\<in> set_of pret \\<longrightarrow>\n            marka n = (\\<not> mark p))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>pt.\n                            pt \\<notin> set_of pret \\<longrightarrow>\n                            mark pt = marka pt", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 lt x22 rt x23 pt.\n       \\<lbrakk>p \\<noteq> Null; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        pret = Node x21 x22 x23;\n        (\\<forall>n.\n            n \\<notin> set_of pret \\<longrightarrow>\n            marka n = mark n) \\<and>\n        (\\<forall>n.\n            n \\<in> set_of pret \\<longrightarrow>\n            marka n = (\\<not> mark p))\\<rbrakk>\n       \\<Longrightarrow> pt \\<notin> set_of pret \\<longrightarrow>\n                         mark pt = marka pt", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 lt x22 rt x23 pt.\n       \\<lbrakk>p \\<noteq> Null; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        pret = Node x21 x22 x23;\n        (\\<forall>n.\n            n \\<notin> set_of pret \\<longrightarrow>\n            marka n = mark n) \\<and>\n        (\\<forall>n.\n            n \\<in> set_of pret \\<longrightarrow>\n            marka n = (\\<not> mark p));\n        pt \\<notin> set_of pret\\<rbrakk>\n       \\<Longrightarrow> mark pt = marka pt", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 lt x22 rt x23 pt.\n       \\<lbrakk>p \\<noteq> Null; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        pret = Node x21 x22 x23; pt \\<notin> set_of pret;\n        \\<forall>n.\n           n \\<notin> set_of pret \\<longrightarrow> marka n = mark n;\n        \\<forall>n.\n           n \\<in> set_of pret \\<longrightarrow>\n           marka n = (\\<not> mark p)\\<rbrakk>\n       \\<Longrightarrow> mark pt = marka pt", "apply (erule_tac x=pt in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x21 lt x22 rt x23 pt.\n       \\<lbrakk>p \\<noteq> Null; pret = Node lt p rt;\n        Dag (low p) low high lt; Dag (high p) low high rt;\n        pret = Node x21 x22 x23; pt \\<notin> set_of pret;\n        \\<forall>n.\n           n \\<in> set_of pret \\<longrightarrow> marka n = (\\<not> mark p);\n        pt \\<notin> set_of pret \\<longrightarrow>\n        marka pt = mark pt\\<rbrakk>\n       \\<Longrightarrow> mark pt = marka pt", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> mark pt = marka pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "with lowhigh_b_eq rep_eq unmodif_next"], ["proof (chain)\npicking this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt\n  \\<forall>p. p \\<notin> set_of pret \\<longrightarrow> next p = nexta p\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> mark pt = marka pt", "have pret_nc: \"\\<forall>pt. pt \\<notin> set_of pret \n      \\<longrightarrow> rep pt = repa pt \\<and> low pt = lowb pt \\<and> high pt = highb pt \\<and> \n      mark pt = marka pt \\<and> next pt = nexta pt\""], ["proof (prove)\nusing this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> rep pt = repa pt\n  \\<forall>p. p \\<notin> set_of pret \\<longrightarrow> next p = nexta p\n  \\<forall>pt. pt \\<notin> set_of pret \\<longrightarrow> mark pt = marka pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       rep pt = repa pt \\<and>\n       low pt = lowb pt \\<and>\n       high pt = highb pt \\<and>\n       mark pt = marka pt \\<and> next pt = nexta pt", "by blast"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     rep pt = repa pt \\<and>\n     low pt = lowb pt \\<and>\n     high pt = highb pt \\<and> mark pt = marka pt \\<and> next pt = nexta pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "(*    from repoint_nc have rept_dag: \"Dag pb lowb highb postnormt\"\n      by simp\n    with reduced_postnormt shared_postnormt ordered_postnormt subset_pret sim_bdt \n      pret_bdt \n    have post_same_prop: \n      \"\\<exists>postt. Dag pb lowb highb postt \\<and> reduced postt \\<and>\n      shared postt var \\<and> ordered postt var \\<and> set_of postt \\<subseteq> set_of pret \\<and>\n      (\\<exists>postbdt. bdt postt var = Some postbdt \\<and> prebdt \\<sim> postbdt)\" \n      apply -\n      apply (rule_tac x=postnormt in exI)\n      apply fastforce\n      done*)"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     rep pt = repa pt \\<and>\n     low pt = lowb pt \\<and>\n     high pt = highb pt \\<and> mark pt = marka pt \\<and> next pt = nexta pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "from pret_nc"], ["proof (chain)\npicking this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     rep pt = repa pt \\<and>\n     low pt = lowb pt \\<and>\n     high pt = highb pt \\<and> mark pt = marka pt \\<and> next pt = nexta pt", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     rep pt = repa pt \\<and>\n     low pt = lowb pt \\<and>\n     high pt = highb pt \\<and> mark pt = marka pt \\<and> next pt = nexta pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<longrightarrow>\n       low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<longrightarrow>\n     low pt = lowb pt \\<and> high pt = highb pt \\<and> mark pt = marka pt\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "next\n  \\<comment> \\<open>invariant to invariant\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "fix var low high p rep mark pret prebdt levellist ll \"next\" marka n repc \n    and repb :: \"ref \\<Rightarrow> ref\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume ll: \"Levellist levellist next ll\""], ["proof (state)\nthis:\n  Levellist levellist next ll\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume pret_dag: \"Dag p low high pret\""], ["proof (state)\nthis:\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume ord_pret: \" ordered pret var\""], ["proof (state)\nthis:\n  ordered pret var\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume pnN: \"p \\<noteq> Null\""], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume prebdt_pret: \"bdt pret var = Some prebdt\""], ["proof (state)\nthis:\n  bdt pret var = Some prebdt\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume wf_ll: \"wf_ll pret ll var\""], ["proof (state)\nthis:\n  wf_ll pret ll var\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume lll: \"length levellist = var p + 1\""], ["proof (state)\nthis:\n  length levellist = var p + 1\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume n_Suc_var_p: \"n < var p + 1\""], ["proof (state)\nthis:\n  n < var p + 1\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume wf_marking_m_ma: \"wf_marking pret mark marka (\\<not> mark p)\""], ["proof (state)\nthis:\n  wf_marking pret mark marka (\\<not> mark p)\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "(*  assume rep_nc: \" \\<forall>pt. pt \\<notin> set_of pret \\<or> \n    (\\<exists>i. n \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1) \n    \\<longrightarrow> rep pt = repb pt\" *)"], ["proof (state)\nthis:\n  wf_marking pret mark marka (\\<not> mark p)\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume rep_nc:      \"\\<forall>pt i.\n           pt \\<notin> set_of pret \\<or> n \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n           rep pt = repb pt\""], ["proof (state)\nthis:\n  \\<forall>pt i.\n     pt \\<notin> set_of pret \\<or>\n     n \\<le> i \\<and>\n     pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n     rep pt = repb pt\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume repbNodes_in_Nodes: \"repb ` Nodes n ll \\<subseteq> Nodes n ll\""], ["proof (state)\nthis:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume\n    normalize_prop: \"\\<forall>no\\<in>Nodes n ll.\n    var (repb no) \\<le> var no \\<and>\n    (\\<exists>not nort. Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n    Dag no low high not \\<and> reduced nort \\<and> ordered nort var \\<and>\n    set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n    (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n    (\\<exists>nobdt. bdt not var = Some nobdt \\<and> \n    (\\<exists>norbdt. bdt nort var = Some norbdt \\<and> \n    nobdt \\<sim> norbdt)))\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "assume \n    isomorphic_dags_eq: \n    \"\\<forall>t1 t2. t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\\<and>\n    t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \n    \\<longrightarrow> isomorphic_dags_eq t1 t2 var\""], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep mark p pret prebdt marka next levellist ll repb\n       n. \\<lbrakk>Levellist levellist next ll; Dag p low high pret;\n           ordered pret var; p \\<noteq> Null; bdt pret var = Some prebdt;\n           wf_ll pret ll var; length levellist = var p + 1;\n           wf_marking pret mark marka (\\<not> mark p); n \\<le> var p + 1;\n           \\<forall>pt i.\n              pt \\<notin> set_of pret \\<or>\n              n \\<le> i \\<and>\n              pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n              rep pt = repb pt;\n           repb ` Nodes n ll \\<subseteq> Nodes n ll;\n           \\<forall>no\\<in>Nodes n ll.\n              var (repb no) \\<le> var no \\<and>\n              (\\<exists>not nort.\n                  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                   nort \\<and>\n                  Dag no low high not \\<and>\n                  reduced nort \\<and>\n                  ordered nort var \\<and>\n                  set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                  (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                  (\\<exists>nobdt.\n                      bdt not var = Some nobdt \\<and>\n                      (\\<exists>norbdt.\n                          bdt nort var = Some norbdt \\<and>\n                          nobdt \\<sim> norbdt)));\n           \\<forall>t1 t2.\n              t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<and>\n              t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                        (repb \\<propto> high) \\<longrightarrow>\n              isomorphic_dags_eq t1 t2 var;\n           n < var p + 1\\<rbrakk>\n          \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (ll ! n) \\<and>\n                                high no \\<notin> set (ll ! n) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 repb (low no) \\<noteq> Null) \\<and>\n                                (repb \\<propto> low) no\n                                \\<notin> set (ll ! n)) \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                \\<forall>no2\\<in>set (ll ! n).\n                                   var no1 = var no2) \\<and>\n                            (\\<forall>repa.\n                                (\\<forall>no.\n                                    no \\<notin> set\n           (ll ! n) \\<longrightarrow>\n                                    repb no = repa no) \\<and>\n                                (\\<forall>no\\<in>set (ll ! n).\n                                    repa no \\<noteq> Null \\<and>\n                                    (if (repa \\<propto> low) no =\n  (repa \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repa no = (repa \\<propto> low) no\n                                     else repa no \\<in> set (ll ! n) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1)))) \\<longrightarrow>\n                                var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                                n + 1 \\<le> var p + 1 \\<and>\n                                (\\<forall>pt i.\n                                    pt \\<notin> set_of pret \\<or>\n                                    n + 1 \\<le> i \\<and>\n                                    pt \\<in> set (ll ! i) \\<and>\n                                    i < var p + 1 \\<longrightarrow>\n                                    rep pt = repa pt) \\<and>\n                                repa ` Nodes (n + 1) ll\n                                \\<subseteq> Nodes (n + 1) ll \\<and>\n                                (\\<forall>no\\<in>Nodes (n + 1) ll.\n                                    var (repa no) \\<le> var no \\<and>\n                                    (\\<exists>not nort.\n  Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n  Dag no low high not \\<and>\n  reduced nort \\<and>\n  ordered nort var \\<and>\n  set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n  (\\<exists>nobdt.\n      bdt not var = Some nobdt \\<and>\n      (\\<exists>norbdt.\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                                (\\<forall>t1 t2.\n                                    t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                                    t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n        (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                                    isomorphic_dags_eq t1 t2 var))", "show \"(\\<forall>no\\<in>set (ll ! n).\n              no \\<noteq> Null \\<and>\n              (low no = Null) = (high no = Null) \\<and>\n              low no \\<notin> set (ll ! n) \\<and>\n              high no \\<notin> set (ll ! n) \\<and>\n              isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n              (low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null) \\<and> (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n          (\\<forall>no1\\<in>set (ll ! n). \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n          (\\<forall>repa. (\\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repa no) \\<and>\n                  (\\<forall>no\\<in>set (ll ! n).\n                      repa no \\<noteq> Null \\<and>\n                      (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null\n                       then repa no = (repa \\<propto> low) no\n                       else repa no \\<in> set (ll ! n) \\<and>\n                            repa (repa no) = repa no \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                                 (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                                (repa no = repa no1)))) \\<longrightarrow>\n                  var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                  n + 1 \\<le> var p + 1 \\<and>\n                  (\\<forall>pt i. pt \\<notin> set_of pret \\<or> (n + 1 \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n                        rep pt = repa pt) \\<and>\n                  repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n                  (\\<forall>no\\<in>Nodes (n + 1) ll.\n                      var (repa no) \\<le> var no \\<and>\n                      (\\<exists>not nort.\n                          Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n                          Dag no low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt. bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                  (\\<forall>t1 t2.\n                      t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                      t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                      isomorphic_dags_eq t1 t2 var))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "from ll"], ["proof (chain)\npicking this:\n  Levellist levellist next ll", "have length_ll_eq: \"length levellist = length ll\""], ["proof (prove)\nusing this:\n  Levellist levellist next ll\n\ngoal (1 subgoal):\n 1. length levellist = length ll", "by (simp add: Levellist_length)"], ["proof (state)\nthis:\n  length levellist = length ll\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "from n_Suc_var_p lll"], ["proof (chain)\npicking this:\n  n < var p + 1\n  length levellist = var p + 1", "have nsll: \"n < length levellist\""], ["proof (prove)\nusing this:\n  n < var p + 1\n  length levellist = var p + 1\n\ngoal (1 subgoal):\n 1. n < length levellist", "by simp"], ["proof (state)\nthis:\n  n < length levellist\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "hence nseqll: \"n \\<le> length levellist\""], ["proof (prove)\nusing this:\n  n < length levellist\n\ngoal (1 subgoal):\n 1. n \\<le> length levellist", "by simp"], ["proof (state)\nthis:\n  n \\<le> length levellist\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "have srrl_precond: \"(\\<forall>no \\<in> set (ll ! n).\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and>\n      low no \\<notin> set (ll ! n) \\<and>\n      high no \\<notin> set (ll ! n) \\<and> \n      isLeaf_pt no low high = (var no \\<le> 1) \\<and> \n      (low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null) \\<and> \n      (repb \\<propto> low) no \\<notin> set (ll ! n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (ll ! n).\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "assume no_in_lln: \"no \\<in> set (ll ! n)\""], ["proof (state)\nthis:\n  no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> set (ll ! n)", "have no_in_pret_var: \"no \\<in> set_of pret \\<and> var no = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. no \\<in> set_of pret \\<and> var no = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  no \\<in> set_of pret \\<and> var no = n\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "with pret_dag"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret \\<and> var no = n", "have no_nNull: \"no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret \\<and> var no = n\n\ngoal (1 subgoal):\n 1. no \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret;\n     no \\<in> set_of pret \\<and> var no = n\\<rbrakk>\n    \\<Longrightarrow> no \\<noteq> Null", "apply (rule set_of_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret;\n     no \\<in> set_of pret \\<and> var no = n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret;\n     no \\<in> set_of pret \\<and> var no = n\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "from pret_dag prebdt_pret no_in_pret_var"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret \\<and> var no = n", "have balanced_no: \"(low no = Null) = (high no = Null)\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret \\<and> var no = n\n\ngoal (1 subgoal):\n 1. (low no = Null) = (high no = Null)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret \\<and> var no = n\\<rbrakk>\n    \\<Longrightarrow> (low no = Null) = (high no = Null)", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret; var no = n\\<rbrakk>\n    \\<Longrightarrow> (low no = Null) = (high no = Null)", "apply (rule_tac p=p and low=low in balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret; var no = n\\<rbrakk>\n    \\<Longrightarrow> Dag p low high ?t5\n 2. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret; var no = n\\<rbrakk>\n    \\<Longrightarrow> bdt ?t5 ?var5 = Some ?bdt1.5\n 3. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret; var no = n\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t5", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (low no = Null) = (high no = Null)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "have low_no_notin_lln: \"low no \\<notin> set (ll ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "proof (cases \"low no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low no = Null \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. low no = Null \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "note lno_Null=this"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. low no = Null \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no = Null", "have hno_Null: \"high no = Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no = Null\n\ngoal (1 subgoal):\n 1. high no = Null", "by simp"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. low no = Null \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "proof (cases \"low no \\<in> set (ll ! n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  low no \\<in> set (ll ! n)\n\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  low no \\<in> set (ll ! n)", "have \"low no \\<in> set_of pret \\<and> var (low no) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  low no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<in> set_of pret \\<and> var (low no) = n", "by (auto simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  low no \\<in> set_of pret \\<and> var (low no) = n\n\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "with pret_dag"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  low no \\<in> set_of pret \\<and> var (low no) = n", "have \"low no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  low no \\<in> set_of pret \\<and> var (low no) = n\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret;\n     low no \\<in> set_of pret \\<and> var (low no) = n\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null", "apply (rule set_of_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret;\n     low no \\<in> set_of pret \\<and> var (low no) = n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret;\n     low no \\<in> set_of pret \\<and> var (low no) = n\\<rbrakk>\n    \\<Longrightarrow> low no \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "with lno_Null"], ["proof (chain)\npicking this:\n  low no = Null\n  low no \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  low no = Null\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "assume lno_notin_lln: \"low no \\<notin> set (ll ! n)\""], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "then"], ["proof (chain)\npicking this:\n  low no \\<notin> set (ll ! n)", "show ?thesis"], ["proof (prove)\nusing this:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "assume lno_nNull: \"low no \\<noteq> Null\""], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "with lno_nNull pret_dag ord_pret no_in_pret_var"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<noteq> Null", "have var_children_smaller: \"var (low no) < var no \\<and> var (high no) < var no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low no) < var no \\<and> var (high no) < var no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no \\<and> var (high no) < var no", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t5\n 4. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null\n 5. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high no \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) < var no \\<and> var (high no) < var no\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> low no \\<notin> set (ll ! n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "proof (cases \"low no \\<in> set (ll ! n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  low no \\<in> set (ll ! n)\n\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  low no \\<in> set (ll ! n)", "have \"low no \\<in> set_of pret \\<and> var (low no) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  low no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<in> set_of pret \\<and> var (low no) = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  low no \\<in> set_of pret \\<and> var (low no) = n\n\ngoal (2 subgoals):\n 1. low no \\<in> set (ll ! n) \\<Longrightarrow> low no \\<notin> set (ll ! n)\n 2. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "with var_children_smaller no_in_pret_var"], ["proof (chain)\npicking this:\n  var (low no) < var no \\<and> var (high no) < var no\n  no \\<in> set_of pret \\<and> var no = n\n  low no \\<in> set_of pret \\<and> var (low no) = n", "show ?thesis"], ["proof (prove)\nusing this:\n  var (low no) < var no \\<and> var (high no) < var no\n  no \\<in> set_of pret \\<and> var no = n\n  low no \\<in> set_of pret \\<and> var (low no) = n\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "assume \"low no \\<notin> set (ll ! n)\""], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n) \\<Longrightarrow>\n    low no \\<notin> set (ll ! n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "have high_no_notin_lln: \"high no \\<notin> set (ll ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "proof (cases \"high no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow> high no \\<notin> set (ll ! n)\n 2. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow> high no \\<notin> set (ll ! n)\n 2. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "note hno_Null=this"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow> high no \\<notin> set (ll ! n)\n 2. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  high no = Null", "have lno_Null: \"low no = Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  high no = Null\n\ngoal (1 subgoal):\n 1. low no = Null", "by simp"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow> high no \\<notin> set (ll ! n)\n 2. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "proof (cases \"high no \\<in> set (ll ! n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  high no \\<in> set (ll ! n)\n\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  high no \\<in> set (ll ! n)", "have \"high no \\<in> set_of pret \\<and> var (high no) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  high no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<in> set_of pret \\<and> var (high no) = n", "by (auto simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  high no \\<in> set_of pret \\<and> var (high no) = n\n\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "with pret_dag"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  high no \\<in> set_of pret \\<and> var (high no) = n", "have \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  high no \\<in> set_of pret \\<and> var (high no) = n\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret;\n     high no \\<in> set_of pret \\<and> var (high no) = n\\<rbrakk>\n    \\<Longrightarrow> high no \\<noteq> Null", "apply (rule set_of_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret;\n     high no \\<in> set_of pret \\<and> var (high no) = n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret;\n     high no \\<in> set_of pret \\<and> var (high no) = n\\<rbrakk>\n    \\<Longrightarrow> high no \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "with hno_Null"], ["proof (chain)\npicking this:\n  high no = Null\n  high no \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  high no = Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "assume hno_notin_lln: \"high no \\<notin> set (ll ! n)\""], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "then"], ["proof (chain)\npicking this:\n  high no \\<notin> set (ll ! n)", "show ?thesis"], ["proof (prove)\nusing this:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "assume hno_nNull: \"high no \\<noteq> Null\""], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  high no \\<noteq> Null", "have lno_nNull: \"low no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "with hno_nNull pret_dag ord_pret no_in_pret_var"], ["proof (chain)\npicking this:\n  high no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  low no \\<noteq> Null", "have var_children_smaller: \"var (low no) < var no \\<and> var (high no) < var no\""], ["proof (prove)\nusing this:\n  high no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low no) < var no \\<and> var (high no) < var no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>high no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no \\<and> var (high no) < var no", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>high no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>high no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>high no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t5\n 4. \\<lbrakk>high no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null\n 5. \\<lbrakk>high no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high no \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) < var no \\<and> var (high no) < var no\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow> high no \\<notin> set (ll ! n)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "proof (cases \"high no \\<in> set (ll ! n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  high no \\<in> set (ll ! n)\n\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  high no \\<in> set (ll ! n)", "have \"high no \\<in> set_of pret \\<and> var (high no) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  high no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<in> set_of pret \\<and> var (high no) = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  high no \\<in> set_of pret \\<and> var (high no) = n\n\ngoal (2 subgoals):\n 1. high no \\<in> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)\n 2. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "with var_children_smaller no_in_pret_var"], ["proof (chain)\npicking this:\n  var (low no) < var no \\<and> var (high no) < var no\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<in> set_of pret \\<and> var (high no) = n", "show ?thesis"], ["proof (prove)\nusing this:\n  var (low no) < var no \\<and> var (high no) < var no\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<in> set_of pret \\<and> var (high no) = n\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "assume \"high no \\<notin> set (ll ! n)\""], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n) \\<Longrightarrow>\n    high no \\<notin> set (ll ! n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "from no_in_pret_var pret_dag no_nNull"], ["proof (chain)\npicking this:\n  no \\<in> set_of pret \\<and> var no = n\n  Dag p low high pret\n  no \\<noteq> Null", "obtain not where \n        no_dag_ex: \"Dag no low high not\""], ["proof (prove)\nusing this:\n  no \\<in> set_of pret \\<and> var no = n\n  Dag p low high pret\n  no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>not.\n        Dag no low high not \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret \\<and> var no = n; Dag p low high pret;\n     no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (rotate_tac 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; no \\<noteq> Null;\n     \\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret \\<and> var no = n\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule subnode_dag_cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>no \\<noteq> Null;\n     \\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret \\<and> var no = n\\<rbrakk>\n    \\<Longrightarrow> ?no6 \\<in> set_of pret\n 2. \\<lbrakk>no \\<noteq> Null;\n     \\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret \\<and> var no = n;\n     \\<exists>not. Dag ?no6 low high not\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp del: Dag_Ref)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag no low high not\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "with pret_dag prebdt_pret no_in_pret_var"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret \\<and> var no = n\n  Dag no low high not", "obtain nobdt \n        where nobdt_ex: \n        \"bdt not var = Some nobdt\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret \\<and> var no = n\n  Dag no low high not\n\ngoal (1 subgoal):\n 1. (\\<And>nobdt.\n        bdt not var = Some nobdt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nobdt. bdt not var = Some nobdt \\<Longrightarrow> thesis;\n     Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret \\<and> var no = n; Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule subbdt_ex_dag_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>nobdt. bdt not var = Some nobdt \\<Longrightarrow> thesis;\n     bdt pret var = Some prebdt; no \\<in> set_of pret \\<and> var no = n;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var7 = Some ?bdt1.7\n 2. \\<lbrakk>\\<And>nobdt. bdt not var = Some nobdt \\<Longrightarrow> thesis;\n     bdt pret var = Some prebdt; no \\<in> set_of pret \\<and> var no = n;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> Dag ?no7 low high ?not7\n 3. \\<lbrakk>\\<And>nobdt. bdt not var = Some nobdt \\<Longrightarrow> thesis;\n     bdt pret var = Some prebdt; no \\<in> set_of pret \\<and> var no = n;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> ?no7 \\<in> set_of pret\n 4. \\<lbrakk>\\<And>nobdt. bdt not var = Some nobdt \\<Longrightarrow> thesis;\n     bdt pret var = Some prebdt; no \\<in> set_of pret \\<and> var no = n;\n     Dag no low high not;\n     \\<exists>bdt2. bdt ?not7 ?var7 = Some bdt2\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  bdt not var = Some nobdt\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "have isLeaf_var: \"isLeaf_pt no low high = (var no \\<le> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isLeaf_pt no low high = (var no \\<le> 1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow> var no \\<le> 1\n 2. var no \\<le> 1 \\<Longrightarrow> isLeaf_pt no low high", "assume no_isLeaf: \"isLeaf_pt no low high\""], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow> var no \\<le> 1\n 2. var no \\<le> 1 \\<Longrightarrow> isLeaf_pt no low high", "from nobdt_ex no_dag_ex no_isLeaf"], ["proof (chain)\npicking this:\n  bdt not var = Some nobdt\n  Dag no low high not\n  isLeaf_pt no low high", "show \"var no \\<le> 1\""], ["proof (prove)\nusing this:\n  bdt not var = Some nobdt\n  Dag no low high not\n  isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. var no \\<le> 1", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt not var = Some nobdt; Dag no low high not;\n     isLeaf_pt no low high\\<rbrakk>\n    \\<Longrightarrow> var no \\<le> 1", "apply (rule bdt_Some_Leaf_var_le_1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt not var = Some nobdt; Dag no low high not;\n     isLeaf_pt no low high\\<rbrakk>\n    \\<Longrightarrow> Dag no ?low3 ?high3 ?t3\n 2. \\<lbrakk>bdt not var = Some nobdt; Dag no low high not;\n     isLeaf_pt no low high\\<rbrakk>\n    \\<Longrightarrow> bdt ?t3 var = Some ?x3\n 3. \\<lbrakk>bdt not var = Some nobdt; Dag no low high not;\n     isLeaf_pt no low high\\<rbrakk>\n    \\<Longrightarrow> isLeaf_pt no ?low3 ?high3", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var no \\<le> 1 \\<Longrightarrow> isLeaf_pt no low high", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. var no \\<le> 1 \\<Longrightarrow> isLeaf_pt no low high", "assume varno_le_1: \"var no \\<le> 1\""], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var no \\<le> 1 \\<Longrightarrow> isLeaf_pt no low high", "show \"isLeaf_pt no low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isLeaf_pt no low high", "proof (cases \"var no = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow> isLeaf_pt no low high\n 2. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "case True"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow> isLeaf_pt no low high\n 2. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "with nobdt_ex no_nNull no_dag_ex"], ["proof (chain)\npicking this:\n  bdt not var = Some nobdt\n  no \\<noteq> Null\n  Dag no low high not\n  var no = 0", "have \"not = Node Tip no Tip\""], ["proof (prove)\nusing this:\n  bdt not var = Some nobdt\n  no \\<noteq> Null\n  Dag no low high not\n  var no = 0\n\ngoal (1 subgoal):\n 1. not = Node Tip no Tip", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt not var = Some nobdt; no \\<noteq> Null;\n     Dag no low high not; var no = 0\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply (drule bdt_Some_var0_Zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>no \\<noteq> Null; Dag no low high not; var no = 0\\<rbrakk>\n    \\<Longrightarrow> var (root not) = 0\n 2. \\<lbrakk>no \\<noteq> Null; Dag no low high not; var no = 0;\n     nobdt = Zero \\<and> not = Node Tip (root not) Tip\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  not = Node Tip no Tip\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow> isLeaf_pt no low high\n 2. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "with no_dag_ex"], ["proof (chain)\npicking this:\n  Dag no low high not\n  not = Node Tip no Tip", "show \"isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  Dag no low high not\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "assume \"var no \\<noteq> 0\""], ["proof (state)\nthis:\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "with varno_le_1"], ["proof (chain)\npicking this:\n  var no \\<le> 1\n  var no \\<noteq> 0", "have \"var no = 1\""], ["proof (prove)\nusing this:\n  var no \\<le> 1\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no = 1", "by simp"], ["proof (state)\nthis:\n  var no = 1\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "with nobdt_ex no_nNull no_dag_ex"], ["proof (chain)\npicking this:\n  bdt not var = Some nobdt\n  no \\<noteq> Null\n  Dag no low high not\n  var no = 1", "have \"not = Node Tip no Tip\""], ["proof (prove)\nusing this:\n  bdt not var = Some nobdt\n  no \\<noteq> Null\n  Dag no low high not\n  var no = 1\n\ngoal (1 subgoal):\n 1. not = Node Tip no Tip", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt not var = Some nobdt; no \\<noteq> Null;\n     Dag no low high not; var no = 1\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply (drule bdt_Some_var1_One)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>no \\<noteq> Null; Dag no low high not; var no = 1\\<rbrakk>\n    \\<Longrightarrow> var (root not) = 1\n 2. \\<lbrakk>no \\<noteq> Null; Dag no low high not; var no = 1;\n     nobdt = One \\<and> not = Node Tip (root not) Tip\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow> isLeaf_pt no low high", "with no_dag_ex"], ["proof (chain)\npicking this:\n  Dag no low high not\n  not = Node Tip no Tip", "show \"isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  Dag no low high not\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "have repb_low_nNull: \"(low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "assume lno_nNull: \"low no \\<noteq> Null\""], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with no_nNull no_in_pret_var pret_dag"], ["proof (chain)\npicking this:\n  no \\<noteq> Null\n  no \\<in> set_of pret \\<and> var no = n\n  Dag p low high pret\n  low no \\<noteq> Null", "have lno_in_pret: \"low no \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null\n  no \\<in> set_of pret \\<and> var no = n\n  Dag p low high pret\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<in> set_of pret", "apply (rule_tac low=low in subelem_set_of_low)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of pret\n 2. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<noteq> Null\n 3. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null\n 4. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 low ?high4 pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "from lno_nNull balanced_no"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  (low no = Null) = (high no = Null)", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with lno_nNull pret_dag ord_pret no_in_pret_var"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<noteq> Null", "have var_children_smaller: \"var (low no) < var no \\<and> var (high no) < var no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low no) < var no \\<and> var (high no) < var no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no \\<and> var (high no) < var no", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t5\n 4. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null\n 5. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high no \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) < var no \\<and> var (high no) < var no\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with no_in_pret_var"], ["proof (chain)\npicking this:\n  no \\<in> set_of pret \\<and> var no = n\n  var (low no) < var no \\<and> var (high no) < var no", "have var_lno_l_n: \"var (low no) <n\""], ["proof (prove)\nusing this:\n  no \\<in> set_of pret \\<and> var no = n\n  var (low no) < var no \\<and> var (high no) < var no\n\ngoal (1 subgoal):\n 1. var (low no) < n", "by simp"], ["proof (state)\nthis:\n  var (low no) < n\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with wf_ll lno_in_pret nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  low no \\<in> set_of pret\n  n < length levellist\n  var (low no) < n", "have \"low no \\<in> set (ll ! (var (low no)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  low no \\<in> set_of pret\n  n < length levellist\n  var (low no) < n\n\ngoal (1 subgoal):\n 1. low no \\<in> set (ll ! var (low no))", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  low no \\<in> set (ll ! var (low no))\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with lno_in_pret var_lno_l_n"], ["proof (chain)\npicking this:\n  low no \\<in> set_of pret\n  var (low no) < n\n  low no \\<in> set (ll ! var (low no))", "have \"low no \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  low no \\<in> set_of pret\n  var (low no) < n\n  low no \\<in> set (ll ! var (low no))\n\ngoal (1 subgoal):\n 1. low no \\<in> Nodes n ll", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> set_of pret; var (low no) < n;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x<n. low no \\<in> set (ll ! x)", "apply (rule_tac x=\"var (low no)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> set_of pret; var (low no) < n;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> var (low no) < n \\<and>\n                      low no \\<in> set (ll ! var (low no))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "hence \"repb (low no) \\<in> repb ` Nodes n ll\""], ["proof (prove)\nusing this:\n  low no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb (low no) \\<in> repb ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repb (low no) \\<in> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repb (low no) \\<in> repb ` Nodes n ll", "have repb_lno_in_Nodes: \n          \"repb (low no) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repb (low no) \\<in> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repb (low no) \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  repb (low no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "from pret_dag wf_ll nsll"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  wf_ll pret ll var\n  n < length levellist", "have \"Null \\<notin> Nodes n ll\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. Null \\<notin> Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> Null \\<notin> Nodes n ll", "apply (rule Null_notin_Nodes)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 ?low3 ?high3 ?t3\n 2. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> n \\<le> length ll\n 3. \\<lbrakk>Dag p low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?t3 ll ?var3", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Null \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow> repb (low no) \\<noteq> Null", "with repb_lno_in_Nodes"], ["proof (chain)\npicking this:\n  repb (low no) \\<in> Nodes n ll\n  Null \\<notin> Nodes n ll", "show \"repb (low no) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  repb (low no) \\<in> Nodes n ll\n  Null \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb (low no) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repb (low no) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "have Null_notin_lln: \"Null \\<notin> set (ll ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Null \\<notin> set (ll ! n)", "proof (cases \"Null \\<in> set (ll ! n)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. Null \\<in> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)\n 2. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  Null \\<in> set (ll ! n)\n\ngoal (2 subgoals):\n 1. Null \\<in> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)\n 2. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  Null \\<in> set (ll ! n)", "have \"Null \\<in> set_of pret \\<and> var (Null) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  Null \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. Null \\<in> set_of pret \\<and> var Null = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  Null \\<in> set_of pret \\<and> var Null = n\n\ngoal (2 subgoals):\n 1. Null \\<in> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)\n 2. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "with pret_dag"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  Null \\<in> set_of pret \\<and> var Null = n", "have \"Null \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  Null \\<in> set_of pret \\<and> var Null = n\n\ngoal (1 subgoal):\n 1. Null \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret;\n     Null \\<in> set_of pret \\<and> var Null = n\\<rbrakk>\n    \\<Longrightarrow> Null \\<noteq> Null", "apply (rule set_of_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret;\n     Null \\<in> set_of pret \\<and> var Null = n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret;\n     Null \\<in> set_of pret \\<and> var Null = n\\<rbrakk>\n    \\<Longrightarrow> Null \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Null \\<noteq> Null\n\ngoal (2 subgoals):\n 1. Null \\<in> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)\n 2. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Null \\<noteq> Null\n\ngoal (1 subgoal):\n 1. Null \\<notin> set (ll ! n)", "by auto"], ["proof (state)\nthis:\n  Null \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "assume \"Null \\<notin> set (ll ! n)\""], ["proof (state)\nthis:\n  Null \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. Null \\<notin> set (ll ! n) \\<Longrightarrow> Null \\<notin> set (ll ! n)", "thus ?thesis"], ["proof (prove)\nusing this:\n  Null \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. Null \\<notin> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  Null \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Null \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "have \"(repb \\<propto> low) no \\<notin> set (ll ! n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<notin> set (ll ! n)", "proof (cases \"low no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low no = Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)\n 2. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "case True"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. low no = Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)\n 2. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with Null_notin_lln"], ["proof (chain)\npicking this:\n  Null \\<notin> set (ll ! n)\n  low no = Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Null \\<notin> set (ll ! n)\n  low no = Null\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<notin> set (ll ! n)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "assume lno_nNull: \"low no \\<noteq> Null\""], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with no_nNull no_in_pret_var pret_dag"], ["proof (chain)\npicking this:\n  no \\<noteq> Null\n  no \\<in> set_of pret \\<and> var no = n\n  Dag p low high pret\n  low no \\<noteq> Null", "have lno_in_pret: \"low no \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null\n  no \\<in> set_of pret \\<and> var no = n\n  Dag p low high pret\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<in> set_of pret", "apply (rule_tac low=low in subelem_set_of_low)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of pret\n 2. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<noteq> Null\n 3. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null\n 4. \\<lbrakk>no \\<noteq> Null; no \\<in> set_of pret \\<and> var no = n;\n     Dag p low high pret; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 low ?high4 pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "from lno_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null", "have propto_eq_comp: \"(repb \\<propto> low) no = repb (low no)\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no = repb (low no)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) no = repb (low no)\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "from lno_nNull balanced_no"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  (low no = Null) = (high no = Null)", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with lno_nNull pret_dag ord_pret no_in_pret_var"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<noteq> Null", "have var_children_smaller: \"var (low no) < var no \\<and> var (high no) < var no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret \\<and> var no = n\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low no) < var no \\<and> var (high no) < var no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no \\<and> var (high no) < var no", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t5\n 4. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low no \\<noteq> Null\n 5. \\<lbrakk>low no \\<noteq> Null; Dag p low high pret; ordered pret var;\n     no \\<in> set_of pret \\<and> var no = n; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high no \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) < var no \\<and> var (high no) < var no\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with no_in_pret_var"], ["proof (chain)\npicking this:\n  no \\<in> set_of pret \\<and> var no = n\n  var (low no) < var no \\<and> var (high no) < var no", "have var_lno_l_n: \"var (low no) <n\""], ["proof (prove)\nusing this:\n  no \\<in> set_of pret \\<and> var no = n\n  var (low no) < var no \\<and> var (high no) < var no\n\ngoal (1 subgoal):\n 1. var (low no) < n", "by simp"], ["proof (state)\nthis:\n  var (low no) < n\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with wf_ll lno_in_pret nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  low no \\<in> set_of pret\n  n < length levellist\n  var (low no) < n", "have \"low no \\<in> set (ll ! (var (low no)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  low no \\<in> set_of pret\n  n < length levellist\n  var (low no) < n\n\ngoal (1 subgoal):\n 1. low no \\<in> set (ll ! var (low no))", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  low no \\<in> set (ll ! var (low no))\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with lno_in_pret var_lno_l_n"], ["proof (chain)\npicking this:\n  low no \\<in> set_of pret\n  var (low no) < n\n  low no \\<in> set (ll ! var (low no))", "have lno_in_Nodes_n: \"low no \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  low no \\<in> set_of pret\n  var (low no) < n\n  low no \\<in> set (ll ! var (low no))\n\ngoal (1 subgoal):\n 1. low no \\<in> Nodes n ll", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> set_of pret; var (low no) < n;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x<n. low no \\<in> set (ll ! x)", "apply (rule_tac x=\"var (low no)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> set_of pret; var (low no) < n;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> var (low no) < n \\<and>\n                      low no \\<in> set (ll ! var (low no))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "hence \"repb (low no) \\<in> repb ` Nodes n ll\""], ["proof (prove)\nusing this:\n  low no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb (low no) \\<in> repb ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repb (low no) \\<in> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with  repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repb (low no) \\<in> repb ` Nodes n ll", "have repb_lno_in_Nodes: \n          \"repb (low no) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repb (low no) \\<in> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repb (low no) \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  repb (low no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with lno_in_Nodes_n normalize_prop"], ["proof (chain)\npicking this:\n  low no \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  repb (low no) \\<in> Nodes n ll", "have \"var (repb (low no)) \\<le> var (low no)\""], ["proof (prove)\nusing this:\n  low no \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  repb (low no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var (repb (low no)) \\<le> var (low no)", "by auto"], ["proof (state)\nthis:\n  var (repb (low no)) \\<le> var (low no)\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with var_lno_l_n"], ["proof (chain)\npicking this:\n  var (low no) < n\n  var (repb (low no)) \\<le> var (low no)", "have var_rep_lno_l_n: \" var (repb (low no)) < n\""], ["proof (prove)\nusing this:\n  var (low no) < n\n  var (repb (low no)) \\<le> var (low no)\n\ngoal (1 subgoal):\n 1. var (repb (low no)) < n", "by simp"], ["proof (state)\nthis:\n  var (repb (low no)) < n\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with repb_lno_in_Nodes"], ["proof (chain)\npicking this:\n  repb (low no) \\<in> Nodes n ll\n  var (repb (low no)) < n", "have \"\\<exists> k < n. repb (low no) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  repb (low no) \\<in> Nodes n ll\n  var (repb (low no)) < n\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. repb (low no) \\<in> set (ll ! k)", "by (auto simp add: Nodes_def)"], ["proof (state)\nthis:\n  \\<exists>k<n. repb (low no) \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null \\<Longrightarrow>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "with wf_ll propto_eq_comp nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  (repb \\<propto> low) no = repb (low no)\n  n < length levellist\n  \\<exists>k<n. repb (low no) \\<in> set (ll ! k)", "show \" (repb \\<propto> low) no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  (repb \\<propto> low) no = repb (low no)\n  n < length levellist\n  \\<exists>k<n. repb (low no) \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n     n < length levellist;\n     \\<exists>k<n. repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n    \\<Longrightarrow> (repb \\<propto> low) no \\<notin> set (ll ! n)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n        n < length levellist;\n        k < n \\<and> repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) no \\<notin> set (ll ! n)", "apply (rule_tac i=k and j=n in no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n        n < length levellist;\n        k < n \\<and> repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> wf_ll (?pret6 k) ll (?var6 k)\n 2. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n        n < length levellist;\n        k < n \\<and> repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> k < length ll\n 3. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n        n < length levellist;\n        k < n \\<and> repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 4. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n        n < length levellist;\n        k < n \\<and> repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) no \\<in> set (ll ! k)\n 5. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; (repb \\<propto> low) no = repb (low no);\n        n < length levellist;\n        k < n \\<and> repb (low no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> k \\<noteq> n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (ll ! n) \\<Longrightarrow>\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (ll ! n) \\<and>\n       high no \\<notin> set (ll ! n) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        repb (low no) \\<noteq> Null) \\<and>\n       (repb \\<propto> low) no \\<notin> set (ll ! n)", "with no_nNull balanced_no low_no_notin_lln high_no_notin_lln isLeaf_var repb_low_nNull"], ["proof (chain)\npicking this:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (ll ! n)\n  high no \\<notin> set (ll ! n)\n  isLeaf_pt no low high = (var no \\<le> 1)\n  low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null\n  (repb \\<propto> low) no \\<notin> set (ll ! n)", "show \" no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and> high no \\<notin> set (ll ! n) \\<and> \n        isLeaf_pt no low high = (var no \\<le> 1) \\<and> \n        (low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null) \\<and> \n        (repb \\<propto> low) no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (ll ! n)\n  high no \\<notin> set (ll ! n)\n  isLeaf_pt no low high = (var no \\<le> 1)\n  low no \\<noteq> Null \\<longrightarrow> repb (low no) \\<noteq> Null\n  (repb \\<propto> low) no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set (ll ! n) \\<and>\n    high no \\<notin> set (ll ! n) \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     repb (low no) \\<noteq> Null) \\<and>\n    (repb \\<propto> low) no \\<notin> set (ll ! n)", "by auto"], ["proof (state)\nthis:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (ll ! n) \\<and>\n  high no \\<notin> set (ll ! n) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow>\n   repb (low no) \\<noteq> Null) \\<and>\n  (repb \\<propto> low) no \\<notin> set (ll ! n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (ll ! n).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (ll ! n) \\<and>\n     high no \\<notin> set (ll ! n) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      repb (low no) \\<noteq> Null) \\<and>\n     (repb \\<propto> low) no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "have all_nodes_same_var: \"\\<forall>no1 \\<in> set (ll ! n). \\<forall>no2 \\<in> set (ll ! n). var no1 = var no2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set (ll ! n).\n       \\<forall>no2\\<in>set (ll ! n). var no1 = var no2", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1 no2.\n       \\<lbrakk>no1 \\<in> set (ll ! n); no2 \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> var no1 = var no2", "fix no1 no2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1 no2.\n       \\<lbrakk>no1 \\<in> set (ll ! n); no2 \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> var no1 = var no2", "assume \"no1 \\<in> set (ll ! n)\""], ["proof (state)\nthis:\n  no1 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no1 no2.\n       \\<lbrakk>no1 \\<in> set (ll ! n); no2 \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> var no1 = var no2", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  no1 \\<in> set (ll ! n)", "have var_lln_i: \"var no1 = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  no1 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var no1 = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var no1 = n\n\ngoal (1 subgoal):\n 1. \\<And>no1 no2.\n       \\<lbrakk>no1 \\<in> set (ll ! n); no2 \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> var no1 = var no2", "assume \"no2 \\<in> set (ll ! n)\""], ["proof (state)\nthis:\n  no2 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no1 no2.\n       \\<lbrakk>no1 \\<in> set (ll ! n); no2 \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> var no1 = var no2", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  no2 \\<in> set (ll ! n)", "have \"var no2 = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  no2 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var no2 = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var no2 = n\n\ngoal (1 subgoal):\n 1. \\<And>no1 no2.\n       \\<lbrakk>no1 \\<in> set (ll ! n); no2 \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> var no1 = var no2", "with var_lln_i"], ["proof (chain)\npicking this:\n  var no1 = n\n  var no2 = n", "show \" var no1 = var no2\""], ["proof (prove)\nusing this:\n  var no1 = n\n  var no2 = n\n\ngoal (1 subgoal):\n 1. var no1 = var no2", "by simp"], ["proof (state)\nthis:\n  var no1 = var no2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (ll ! n).\n     \\<forall>no2\\<in>set (ll ! n). var no1 = var no2\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "have  \"(\\<forall>repa. (\\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repa no) \\<and>\n                  (\\<forall>no\\<in>set (ll ! n).\n                      repa no \\<noteq> Null \\<and>\n                      (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null\n                       then repa no = (repa \\<propto> low) no\n                       else repa no \\<in> set (ll ! n) \\<and>\n                            repa (repa no) = repa no \\<and>\n                            (\\<forall>no1\\<in>set (ll ! n).\n                                ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                                 (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                                (repa no = repa no1)))) \\<longrightarrow>\n                  var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                  n + 1 \\<le> var p + 1 \\<and>\n                  (\\<forall>pt i. pt \\<notin> set_of pret \\<or> (n + 1 \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n                        rep pt = repa pt) \\<and>\n                  repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n                  (\\<forall>no\\<in>Nodes (n + 1) ll.\n                      var (repa no) \\<le> var no \\<and>\n                      (\\<exists>not nort.\n                          Dag (repa no) (repa \\<propto> low) (repa \\<propto> high) nort \\<and>\n                          Dag no low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt. bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                  (\\<forall>t1 t2.\n                      t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                      t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                      isomorphic_dags_eq t1 t2 var))\"\n      (is \"(\\<forall>repc. ?srrl_post repc \\<longrightarrow> ?norm_inv repc) \")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>repa.\n       (\\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow>\n           repb no = repa no) \\<and>\n       (\\<forall>no\\<in>set (ll ! n).\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no \\<in> set (ll ! n) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set (ll ! n).\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))) \\<longrightarrow>\n       var p + 1 - (n + 1) < var p + 1 - n \\<and>\n       n + 1 \\<le> var p + 1 \\<and>\n       (\\<forall>pt i.\n           pt \\<notin> set_of pret \\<or>\n           n + 1 \\<le> i \\<and>\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n           rep pt = repa pt) \\<and>\n       repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n       (\\<forall>no\\<in>Nodes (n + 1) ll.\n           var (repa no) \\<le> var no \\<and>\n           (\\<exists>not nort.\n               Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                nort \\<and>\n               Dag no low high not \\<and>\n               reduced nort \\<and>\n               ordered nort var \\<and>\n               set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n               (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n               (\\<exists>nobdt.\n                   bdt not var = Some nobdt \\<and>\n                   (\\<exists>norbdt.\n                       bdt nort var = Some norbdt \\<and>\n                       nobdt \\<sim> norbdt)))) \\<and>\n       (\\<forall>t1 t2.\n           t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                     (repa \\<propto> high) \\<and>\n           t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                     (repa \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var)", "proof (intro allI impI, elim conjE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>repa.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repa no;\n        \\<forall>no\\<in>set (ll ! n).\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no \\<in> set (ll ! n) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set (ll ! n).\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\\<rbrakk>\n       \\<Longrightarrow> var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                         n + 1 \\<le> var p + 1 \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             n + 1 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < var p + 1 \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes (n + 1) ll\n                         \\<subseteq> Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>Nodes (n + 1) ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     (\\<exists>norbdt.\n   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var)", "fix repc"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>repa.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repa no;\n        \\<forall>no\\<in>set (ll ! n).\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no \\<in> set (ll ! n) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set (ll ! n).\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\\<rbrakk>\n       \\<Longrightarrow> var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                         n + 1 \\<le> var p + 1 \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             n + 1 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < var p + 1 \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes (n + 1) ll\n                         \\<subseteq> Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>Nodes (n + 1) ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     (\\<exists>norbdt.\n   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var)", "assume repbc_nc: \"\\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\""], ["proof (state)\nthis:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n\ngoal (1 subgoal):\n 1. \\<And>repa.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repa no;\n        \\<forall>no\\<in>set (ll ! n).\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no \\<in> set (ll ! n) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set (ll ! n).\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\\<rbrakk>\n       \\<Longrightarrow> var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                         n + 1 \\<le> var p + 1 \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             n + 1 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < var p + 1 \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes (n + 1) ll\n                         \\<subseteq> Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>Nodes (n + 1) ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     (\\<exists>norbdt.\n   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var)", "assume rep_prop: \" \\<forall>no\\<in>set (ll ! n).\n        repc no \\<noteq> Null \\<and>\n               (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and> low no \\<noteq> Null\n                then repc no = (repc \\<propto> low) no\n                else repc no \\<in> set (ll ! n) \\<and>\n                     repc (repc no) = repc no \\<and>\n                     (\\<forall>no1\\<in>set (ll ! n).\n                         ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                          (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n                         (repc no = repc no1)))\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. \\<And>repa.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repa no;\n        \\<forall>no\\<in>set (ll ! n).\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no \\<in> set (ll ! n) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set (ll ! n).\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\\<rbrakk>\n       \\<Longrightarrow> var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                         n + 1 \\<le> var p + 1 \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             n + 1 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < var p + 1 \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes (n + 1) ll\n                         \\<subseteq> Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>Nodes (n + 1) ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     (\\<exists>norbdt.\n   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var)", "show \"?norm_inv repc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from n_Suc_var_p"], ["proof (chain)\npicking this:\n  n < var p + 1", "have termi: \"var p + 1 - (n + 1) < var p + 1 - n\""], ["proof (prove)\nusing this:\n  n < var p + 1\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n", "by arith"], ["proof (state)\nthis:\n  var p + 1 - (n + 1) < var p + 1 - n\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from wf_ll repbc_nc nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  n < length levellist", "have Nodes_n_rep_nc: \"\\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p = repc p\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  n < length levellist\n\ngoal (1 subgoal):\n 1. \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p = repc p", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p.\n                         p \\<in> Nodes n ll \\<longrightarrow>\n                         repb p = repc p", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>wf_ll pret ll var;\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        n < length levellist\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Nodes n ll \\<longrightarrow>\n                         repb p = repc p", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>wf_ll pret ll var;\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        n < length levellist; p \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repb p = repc p", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>wf_ll pret ll var;\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        n < length levellist; \\<exists>x<n. p \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> repb p = repc p", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>wf_ll pret ll var;\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        n < length levellist; x < n \\<and> p \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> repb p = repc p", "apply (erule_tac x=p in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        x < n \\<and> p \\<in> set (ll ! x);\n        p \\<notin> set (ll ! n) \\<longrightarrow> repb p = repc p\\<rbrakk>\n       \\<Longrightarrow> repb p = repc p", "apply (drule_tac i=x and j=n in no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p x.\n       \\<lbrakk>n < length levellist; x < n \\<and> p \\<in> set (ll ! x);\n        p \\<notin> set (ll ! n) \\<longrightarrow> repb p = repc p\\<rbrakk>\n       \\<Longrightarrow> x < length ll\n 2. \\<And>p x.\n       \\<lbrakk>n < length levellist; x < n \\<and> p \\<in> set (ll ! x);\n        p \\<notin> set (ll ! n) \\<longrightarrow> repb p = repc p\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 3. \\<And>p x.\n       \\<lbrakk>n < length levellist; x < n \\<and> p \\<in> set (ll ! x);\n        p \\<notin> set (ll ! n) \\<longrightarrow> repb p = repc p\\<rbrakk>\n       \\<Longrightarrow> ?no10 p x \\<in> set (ll ! x)\n 4. \\<And>p x.\n       \\<lbrakk>n < length levellist; x < n \\<and> p \\<in> set (ll ! x);\n        p \\<notin> set (ll ! n) \\<longrightarrow> repb p = repc p\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> n\n 5. \\<And>p x.\n       \\<lbrakk>n < length levellist; x < n \\<and> p \\<in> set (ll ! x);\n        p \\<notin> set (ll ! n) \\<longrightarrow> repb p = repc p;\n        ?no10 p x \\<notin> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> repb p = repc p", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p = repc p\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have Nodes_n_rep_in_Nodesn: \n          \"\\<forall> p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> Nodes n ll", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist", "have \"Nodes n ll \\<subseteq> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. Nodes n ll \\<subseteq> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist\\<rbrakk>\n    \\<Longrightarrow> Nodes n ll \\<subseteq> set_of pret", "apply (rule Nodes_in_pret)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist\\<rbrakk>\n    \\<Longrightarrow> wf_ll pret ll ?var2\n 2. \\<lbrakk>wf_ll pret ll var; n < length levellist\\<rbrakk>\n    \\<Longrightarrow> n \\<le> length ll", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Nodes n ll \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with Nodes_n_rep_in_Nodesn"], ["proof (chain)\npicking this:\n  \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> Nodes n ll\n  Nodes n ll \\<subseteq> set_of pret", "have Nodes_n_rep_in_pret: \"\\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> Nodes n ll\n  Nodes n ll \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. \\<forall>p.\n       p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>p.\n                p \\<in> Nodes n ll \\<longrightarrow>\n                repb p \\<in> Nodes n ll;\n     Nodes n ll \\<subseteq> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>p.\n                         p \\<in> Nodes n ll \\<longrightarrow>\n                         repb p \\<in> set_of pret", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>\\<forall>p.\n                   p \\<in> Nodes n ll \\<longrightarrow>\n                   repb p \\<in> Nodes n ll;\n        Nodes n ll \\<subseteq> set_of pret; p \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repb p \\<in> set_of pret", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>p. p \\<in> Nodes n ll \\<longrightarrow> repb p \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "have Nodes_repbc_Dags_eq: \"\\<forall>p t. p \\<in> Nodes n ll \n          \\<longrightarrow> Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t = \n          Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p t.\n       p \\<in> Nodes n ll \\<longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "fix p t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "assume p_in_Nodes: \" p \\<in> Nodes n ll\""], ["proof (state)\nthis:\n  p \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "then"], ["proof (chain)\npicking this:\n  p \\<in> Nodes n ll", "have repp_nc: \"repb p = repc p\""], ["proof (prove)\nusing this:\n  p \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb p = repc p", "by (rule Nodes_n_rep_nc [rule_format])"], ["proof (state)\nthis:\n  repb p = repc p\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "from p_in_Nodes normalize_prop"], ["proof (chain)\npicking this:\n  p \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain nort where\n            nort_repb_dag: \"Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\" and\n            nort_in_repbNodes: \"set_of nort \\<subseteq> repb ` Nodes n ll\""], ["proof (prove)\nusing this:\n  p \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>nort.\n        \\<lbrakk>Dag (repb p) (repb \\<propto> low) (repb \\<propto> high)\n                  nort;\n         set_of nort \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>nort.\n                \\<lbrakk>Dag (repb p) (repb \\<propto> low)\n                          (repb \\<propto> high) nort;\n                 set_of nort \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=p in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nort.\n                \\<lbrakk>Dag (repb p) (repb \\<propto> low)\n                          (repb \\<propto> high) nort;\n                 set_of nort \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> Nodes n ll;\n     var (repb p) \\<le> var p \\<and>\n     (\\<exists>not nort.\n         Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n         Dag p low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>nort.\n                \\<lbrakk>Dag (repb p) (repb \\<propto> low)\n                          (repb \\<propto> high) nort;\n                 set_of nort \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> Nodes n ll; p \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>nort.\n                \\<lbrakk>Dag (repb p) (repb \\<propto> low)\n                          (repb \\<propto> high) nort;\n                 set_of nort \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> Nodes n ll; p \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>nort.\n                \\<lbrakk>Dag (repb p) (repb \\<propto> low)\n                          (repb \\<propto> high) nort;\n                 set_of nort \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> Nodes n ll;\n     var (repb p) \\<le> var p \\<and>\n     (\\<exists>not nort.\n         Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n         Dag p low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  set_of nort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "from nort_in_repbNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have nort_in_Nodesn: \"set_of nort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of nort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "from pret_dag wf_ll nsll"], ["proof (chain)\npicking this:\n  Dag p__ low high pret\n  wf_ll pret ll var\n  n < length levellist", "have \"Null \\<notin> Nodes n ll\""], ["proof (prove)\nusing this:\n  Dag p__ low high pret\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. Null \\<notin> Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p__ low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> Null \\<notin> Nodes n ll", "apply (rule Null_notin_Nodes)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p__ low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 ?low3 ?high3 ?t3\n 2. \\<lbrakk>Dag p__ low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> n \\<le> length ll\n 3. \\<lbrakk>Dag p__ low high pret; wf_ll pret ll var;\n     n < length levellist\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?t3 ll ?var3", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Null \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "with p_in_Nodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  p \\<in> Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  Null \\<notin> Nodes n ll", "have repp_nNull: \"repb p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  p \\<in> Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  Null \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb p \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repb p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "from nort_repb_dag repp_nc"], ["proof (chain)\npicking this:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p = repc p", "have nort_repbc_dag: \"Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\""], ["proof (prove)\nusing this:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p = repc p\n\ngoal (1 subgoal):\n 1. Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort", "by simp"], ["proof (state)\nthis:\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "from nort_in_Nodesn"], ["proof (chain)\npicking this:\n  set_of nort \\<subseteq> Nodes n ll", "have \"\\<forall>x \\<in> set_of nort. x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of nort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> Nodes n ll \\<Longrightarrow>\n    \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>set_of nort \\<subseteq> Nodes n ll;\n        x \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes n ll", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll", "have \"\\<forall>x \\<in> set_of nort. x \\<in> set_of pret \\<and> var x < n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of nort. x \\<in> set_of pret \\<and> var x < n", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         x \\<in> set_of pret \\<and> var x < n", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll;\n        x \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_of pret \\<and> var x < n", "apply (rule wf_ll_Nodes_pret)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll;\n        x \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> wf_ll pret (?levellista5 x) var\n 2. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll;\n        x \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> n < length (?levellista5 x)\n 3. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of nort. x \\<in> Nodes n ll;\n        x \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes n (?levellista5 x)", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of nort. x \\<in> set_of pret \\<and> var x < n\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "with pret_dag prebdt_pret nort_repbc_dag ord_pret wf_ll  nsll repbc_nc"], ["proof (chain)\npicking this:\n  Dag p__ low high pret\n  bdt pret var = Some prebdt\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of nort. x \\<in> set_of pret \\<and> var x < n", "have \n            \"\\<forall> x \\<in> set_of nort. (repc \\<propto> low) x = (repb \\<propto> low) x \\<and> \n            (repc \\<propto> high) x = (repb \\<propto> high) x\""], ["proof (prove)\nusing this:\n  Dag p__ low high pret\n  bdt pret var = Some prebdt\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of nort. x \\<in> set_of pret \\<and> var x < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of nort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply (rule nort_null_comp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 low high ?pret8\n 2. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> bdt ?pret8 ?var8 = Some ?prebdt8\n 3. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> Dag (repc ?no8) (repb \\<propto> low)\n                       (repb \\<propto> high) nort\n 4. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> ordered ?pret8 ?var8\n 5. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret8 ?levellistb8 ?var8\n 6. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> ?nb8 < length ?levellistb8\n 7. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>nt.\n                         nt \\<notin> set\n(?levellistb8 ! ?nb8) \\<longrightarrow>\n                         repb nt = repc nt\n 8. \\<lbrakk>Dag p__ low high pret; bdt pret var = Some prebdt;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         ?var8 x < ?nb8 \\<and> x \\<in> set_of ?pret8", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of nort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "with nort_repbc_dag repp_nc"], ["proof (chain)\npicking this:\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p = repc p\n  \\<forall>x\\<in>set_of nort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x", "have \"Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort = \n            Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort\""], ["proof (prove)\nusing this:\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p = repc p\n  \\<forall>x\\<in>set_of nort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort =\n    Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     repb p = repc p;\n     \\<forall>x\\<in>set_of nort.\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) nort =\n                      Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) nort", "apply (rule heaps_eq_Dag_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     repb p = repc p;\n     \\<forall>x\\<in>set_of nort.\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p;\n        \\<forall>x\\<in>set_of nort.\n           (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n           (repc \\<propto> high) x = (repb \\<propto> high) x;\n        x \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x", "apply (erule_tac x=x in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x\n 2. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        x \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x", "apply (elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        (repc \\<propto> low) x = (repb \\<propto> low) x;\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x\n 2. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        x \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x", "apply (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        (repc \\<propto> low) x = (repb \\<propto> low) x;\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x = (repc \\<propto> low) x\n 2. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        (repc \\<propto> low) x = (repb \\<propto> low) x;\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> high) x = (repc \\<propto> high) x\n 3. \\<And>x.\n       \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        repb p = repc p; x \\<in> set_of nort;\n        x \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> (repb \\<propto> low) x =\n                         (repc \\<propto> low) x \\<and>\n                         (repb \\<propto> high) x = (repc \\<propto> high) x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort =\n  Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. \\<And>p t.\n       p \\<in> Nodes n ll \\<Longrightarrow>\n       Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n       Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "with nort_repbc_dag repp_nc"], ["proof (chain)\npicking this:\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p = repc p\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort =\n  Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort", "show \n            \"Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t = \n            Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (prove)\nusing this:\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\n  repb p = repc p\n  Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort =\n  Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n    Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) t\n 2. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply (rotate_tac 2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) t\n 2. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply (frule_tac Dag_unique)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) ?t2.4\n 2. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p; nort = ?t2.4\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) t\n 3. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply (rotate_tac 1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) ?t2.4\n 2. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p; nort = ?t2.4\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) t\n 3. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p; nort = t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) t\n 2. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply (frule Dag_unique)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) ?t2.5\n 2. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t;\n     nort = ?t2.5\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply (rotate_tac 3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repc \\<propto> low)\n                       (repc \\<propto> high) ?t2.5\n 2. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t;\n     nort = ?t2.5\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) nort;\n     repb p = repc p;\n     Dag (repc p) (repb \\<propto> low) (repb \\<propto> high) nort;\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t;\n     nort = t\\<rbrakk>\n    \\<Longrightarrow> Dag (repc p) (repb \\<propto> low)\n                       (repb \\<propto> high) t", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p t.\n     p \\<in> Nodes n ll \\<longrightarrow>\n     Dag (repb p) (repb \\<propto> low) (repb \\<propto> high) t =\n     Dag (repc p) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from rep_prop"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))", "have repbc_changes: \"\\<forall>no\\<in>set (ll ! n).\n          repc no \\<noteq> Null \\<and>\n          (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and> low no \\<noteq> Null \n          then repc no = (repc \\<propto> low) no\n          else repc no \\<in> set (ll ! n) \\<and> repc (repc no) = repc no \\<and> \n          (\\<forall>no1\\<in>set (ll ! n). ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and> \n          (repc \\<propto> low) no1 = (repc \\<propto> low) no) = (repc no = repc no1)))\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (ll ! n).\n       repc no \\<noteq> Null \\<and>\n       (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repc no = (repc \\<propto> low) no\n        else repc no \\<in> set (ll ! n) \\<and>\n             repc (repc no) = repc no \\<and>\n             (\\<forall>no1\\<in>set (ll ! n).\n                 ((repc \\<propto> high) no1 =\n                  (repc \\<propto> high) no \\<and>\n                  (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n                 (repc no = repc no1)))", "by blast"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from nsll lll"], ["proof (chain)\npicking this:\n  n < length levellist\n  length levellist = var p + 1", "have n_var_prop: \"n + 1 <= var p + 1\""], ["proof (prove)\nusing this:\n  n < length levellist\n  length levellist = var p + 1\n\ngoal (1 subgoal):\n 1. n + 1 \\<le> var p + 1", "by simp"], ["proof (state)\nthis:\n  n + 1 \\<le> var p + 1\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from rep_nc"], ["proof (chain)\npicking this:\n  \\<forall>pt i.\n     pt \\<notin> set_of pret \\<or>\n     n \\<le> i \\<and>\n     pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n     rep pt = repb pt", "have Sucn_repb_nc: \"(\\<forall>pt. pt \\<notin> set_of pret \\<or> \n          (\\<exists>i. n + 1 \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1)  \n          \\<longrightarrow> rep pt = repb pt)\""], ["proof (prove)\nusing this:\n  \\<forall>pt i.\n     pt \\<notin> set_of pret \\<or>\n     n \\<le> i \\<and>\n     pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n     rep pt = repb pt\n\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<or>\n       (\\<exists>i\\<ge>n + 1.\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n       rep pt = repb pt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pt i.\n       pt \\<notin> set_of pret \\<or>\n       n \\<le> i \\<and>\n       pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n       rep pt = repb pt \\<Longrightarrow>\n    \\<forall>pt.\n       pt \\<notin> set_of pret \\<or>\n       (\\<exists>i\\<ge>n + 1.\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n       rep pt = repb pt", "apply (intro allI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pt.\n       \\<lbrakk>\\<forall>pt i.\n                   pt \\<notin> set_of pret \\<or>\n                   n \\<le> i \\<and>\n                   pt \\<in> set (ll ! i) \\<and>\n                   i < var p + 1 \\<longrightarrow>\n                   rep pt = repb pt;\n        pt \\<notin> set_of pret \\<or>\n        (\\<exists>i\\<ge>n + 1.\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1)\\<rbrakk>\n       \\<Longrightarrow> rep pt = repb pt", "apply (erule_tac x=pt in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pt.\n       \\<lbrakk>pt \\<notin> set_of pret \\<or>\n                (\\<exists>i\\<ge>n + 1.\n                    pt \\<in> set (ll ! i) \\<and> i < var p + 1);\n        \\<forall>i.\n           pt \\<notin> set_of pret \\<or>\n           n \\<le> i \\<and>\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n           rep pt = repb pt\\<rbrakk>\n       \\<Longrightarrow> rep pt = repb pt", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pt i.\n       \\<lbrakk>Suc n \\<le> i; pt \\<in> set (ll ! i); i < Suc (var p);\n        rep pt \\<noteq> repb pt; pt \\<in> set_of pret\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i\\<ge>n.\n                            pt \\<in> set (ll ! i) \\<and> i < Suc (var p)", "apply (rule_tac x=\"i\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>pt i.\n       \\<lbrakk>Suc n \\<le> i; pt \\<in> set (ll ! i); i < Suc (var p);\n        rep pt \\<noteq> repb pt; pt \\<in> set_of pret\\<rbrakk>\n       \\<Longrightarrow> n \\<le> i \\<and>\n                         pt \\<in> set (ll ! i) \\<and> i < Suc (var p)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repb pt\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "have repc_nc: \n          \"(\\<forall>pt. pt \\<notin> set_of pret \\<or> \n          (\\<exists>i. n + 1 \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1) \n          \\<longrightarrow> rep pt = repc pt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>pt.\n       pt \\<notin> set_of pret \\<or>\n       (\\<exists>i\\<ge>n + 1.\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n       rep pt = repc pt", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pt.\n       pt \\<notin> set_of pret \\<or>\n       (\\<exists>i\\<ge>n + 1.\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<Longrightarrow>\n       rep pt = repc pt", "fix pt"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pt.\n       pt \\<notin> set_of pret \\<or>\n       (\\<exists>i\\<ge>n + 1.\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<Longrightarrow>\n       rep pt = repc pt", "assume pt_notin_lower_ll: \"pt \\<notin> set_of pret \\<or> \n            (\\<exists>i. n + 1 \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1)\""], ["proof (state)\nthis:\n  pt \\<notin> set_of pret \\<or>\n  (\\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1)\n\ngoal (1 subgoal):\n 1. \\<And>pt.\n       pt \\<notin> set_of pret \\<or>\n       (\\<exists>i\\<ge>n + 1.\n           pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<Longrightarrow>\n       rep pt = repc pt", "show \"rep pt = repc pt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rep pt = repc pt", "proof (cases \"pt \\<notin> set_of pret\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt\n 2. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "case True"], ["proof (state)\nthis:\n  pt \\<notin> set_of pret\n\ngoal (2 subgoals):\n 1. pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt\n 2. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  pt \\<notin> set_of pret", "have \"pt \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  pt \\<notin> set_of pret\n\ngoal (1 subgoal):\n 1. pt \\<notin> set (ll ! n)", "apply (simp add: wf_ll_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; pt \\<notin> set_of pret\\<rbrakk>\n    \\<Longrightarrow> pt \\<notin> set (ll ! n)", "apply (case_tac \"pt \\<in> set (ll ! n)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; pt \\<notin> set_of pret; pt \\<in> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> pt \\<notin> set (ll ! n)\n 2. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; pt \\<notin> set_of pret;\n     pt \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> pt \\<notin> set (ll ! n)", "apply (subgoal_tac \"pt \\<in> set_of pret\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; pt \\<notin> set_of pret; pt \\<in> set (ll ! n);\n     pt \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> pt \\<notin> set (ll ! n)\n 2. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; pt \\<notin> set_of pret; pt \\<in> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> pt \\<in> set_of pret\n 3. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; pt \\<notin> set_of pret;\n     pt \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> pt \\<notin> set (ll ! n)", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pt \\<notin> set (ll ! n)\n\ngoal (2 subgoals):\n 1. pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt\n 2. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)", "have \"repb pt = repc pt\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb pt = repc pt", "by auto"], ["proof (state)\nthis:\n  repb pt = repc pt\n\ngoal (2 subgoals):\n 1. pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt\n 2. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with Sucn_repb_nc True"], ["proof (chain)\npicking this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repb pt\n  pt \\<notin> set_of pret\n  repb pt = repc pt", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repb pt\n  pt \\<notin> set_of pret\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. rep pt = repc pt", "by auto"], ["proof (state)\nthis:\n  rep pt = repc pt\n\ngoal (1 subgoal):\n 1. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "assume pt_in_pret: \"\\<not> pt \\<notin> set_of pret\""], ["proof (state)\nthis:\n  \\<not> pt \\<notin> set_of pret\n\ngoal (1 subgoal):\n 1. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with pt_notin_lower_ll"], ["proof (chain)\npicking this:\n  pt \\<notin> set_of pret \\<or>\n  (\\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1)\n  \\<not> pt \\<notin> set_of pret", "have pt_in_higher_ll: \n              \"\\<exists>i. n + 1 \\<le> i \\<and> pt \\<in> set (ll ! i) \\<and> i < var p + 1\""], ["proof (prove)\nusing this:\n  pt \\<notin> set_of pret \\<or>\n  (\\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1)\n  \\<not> pt \\<notin> set_of pret\n\ngoal (1 subgoal):\n 1. \\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1", "by simp"], ["proof (state)\nthis:\n  \\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1\n\ngoal (1 subgoal):\n 1. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with nsll wf_ll lll"], ["proof (chain)\npicking this:\n  n < length levellist\n  wf_ll pret ll var\n  length levellist = var p + 1\n  \\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1", "have pt_notin_lln: \"pt \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  n < length levellist\n  wf_ll pret ll var\n  length levellist = var p + 1\n  \\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1\n\ngoal (1 subgoal):\n 1. pt \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length levellist; wf_ll pret ll var;\n     length levellist = var p + 1;\n     \\<exists>i\\<ge>n + 1.\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n    \\<Longrightarrow> pt \\<notin> set (ll ! n)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>n < length levellist; wf_ll pret ll var;\n        length levellist = var p + 1;\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n       \\<Longrightarrow> pt \\<notin> set (ll ! n)", "apply (rule_tac i=i and j=n in no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>n < length levellist; wf_ll pret ll var;\n        length levellist = var p + 1;\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n       \\<Longrightarrow> wf_ll (?pret6 i) ll (?var6 i)\n 2. \\<And>i.\n       \\<lbrakk>n < length levellist; wf_ll pret ll var;\n        length levellist = var p + 1;\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n       \\<Longrightarrow> i < length ll\n 3. \\<And>i.\n       \\<lbrakk>n < length levellist; wf_ll pret ll var;\n        length levellist = var p + 1;\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 4. \\<And>i.\n       \\<lbrakk>n < length levellist; wf_ll pret ll var;\n        length levellist = var p + 1;\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n       \\<Longrightarrow> pt \\<in> set (ll ! i)\n 5. \\<And>i.\n       \\<lbrakk>n < length levellist; wf_ll pret ll var;\n        length levellist = var p + 1;\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1\\<rbrakk>\n       \\<Longrightarrow> i \\<noteq> n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)", "have \"repb pt = repc pt\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb pt = repc pt", "by auto"], ["proof (state)\nthis:\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. \\<not> pt \\<notin> set_of pret \\<Longrightarrow> rep pt = repc pt", "with Sucn_repb_nc pt_in_higher_ll"], ["proof (chain)\npicking this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repb pt\n  \\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1\n  repb pt = repc pt", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repb pt\n  \\<exists>i\\<ge>n + 1. pt \\<in> set (ll ! i) \\<and> i < var p + 1\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. rep pt = repc pt", "by auto"], ["proof (state)\nthis:\n  rep pt = repc pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rep pt = repc pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repc pt\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist", "have Nodesn_notin_lln: \"\\<forall>no \\<in> Nodes n ll. no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<n.\n                         \\<forall>no\\<in>set (ll ! y).\n                            no \\<notin> set (ll ! n)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y no.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist; y < n;\n        no \\<in> set (ll ! y); no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>y no.\n       \\<lbrakk>n < length levellist; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no < length ll\n 2. \\<And>y no.\n       \\<lbrakk>n < length levellist; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?j24 y no < length ll\n 3. \\<And>y no.\n       \\<lbrakk>n < length levellist; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?no24 y no \\<in> set (ll ! ?i24 y no)\n 4. \\<And>y no.\n       \\<lbrakk>n < length levellist; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no \\<noteq> ?j24 y no\n 5. \\<And>y no.\n       \\<lbrakk>n < length levellist; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n);\n        ?no24 y no \\<notin> set (ll ! ?j24 y no)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "have Nodesn_repnc: \"\\<forall>no \\<in> Nodes n ll. repb no = repc no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repc no;\n        \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply (erule_tac x=no in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll;\n        no \\<notin> set (ll ! n) \\<longrightarrow>\n        repb no = repc no\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "then"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no", "have repbNodes_repcNodes: \n          \"repb `(Nodes n ll) = repc `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. repb ` Nodes n ll = repc ` Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll = repc ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll \\<subseteq> repc ` Nodes n ll\n 2. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no;\n        x \\<in> repc ` Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no; x = repc xa;\n        xa \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule_tac x=xa in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x = repb (?x28 x xa)\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> ?x28 x xa \\<in> Nodes n ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "have repcNodes_in_Nodes: \n          \"repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> repc ` Nodes (n + 1) ll \\<Longrightarrow>\n       x \\<in> Nodes (n + 1) ll", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> repc ` Nodes (n + 1) ll \\<Longrightarrow>\n       x \\<in> Nodes (n + 1) ll", "assume x_in_repcNodesSucn: \" x \\<in> repc ` Nodes (n + 1) ll\""], ["proof (state)\nthis:\n  x \\<in> repc ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> repc ` Nodes (n + 1) ll \\<Longrightarrow>\n       x \\<in> Nodes (n + 1) ll", "show \"x \\<in> Nodes (n + 1) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "proof (cases \"x \\<in> repc `Nodes n ll\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "case True"], ["proof (state)\nthis:\n  x \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. x \\<in> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "with repbNodes_repcNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  x \\<in> repc ` Nodes n ll", "have \"x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  x \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes n ll", "by auto"], ["proof (state)\nthis:\n  x \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. x \\<in> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "with Nodes_subset"], ["proof (chain)\npicking this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n  x \\<in> Nodes n ll", "show ?thesis"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n  x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "by auto"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "assume \" x \\<notin> repc `Nodes n ll\""], ["proof (state)\nthis:\n  x \\<notin> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "with x_in_repcNodesSucn"], ["proof (chain)\npicking this:\n  x \\<in> repc ` Nodes (n + 1) ll\n  x \\<notin> repc ` Nodes n ll", "have x_in_repclln: \"x \\<in> repc `set (ll ! n)\""], ["proof (prove)\nusing this:\n  x \\<in> repc ` Nodes (n + 1) ll\n  x \\<notin> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> repc ` set (ll ! n)", "apply (auto simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)", "apply (case_tac \"k<n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n; k < n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)\n 2. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n; \\<not> k < n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n; \\<not> k < n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)", "apply (case_tac \"k = n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n; \\<not> k < n;\n        k = n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)\n 2. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n; \\<not> k < n;\n        k \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa k.\n       \\<lbrakk>repc xa\n                \\<notin> repc ` (\\<Union>k\\<in>{k. k < n}. set (ll ! k));\n        x = repc xa; xa \\<in> set (ll ! k); k < Suc n; \\<not> k < n;\n        k \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> repc xa \\<in> repc ` set (ll ! n)", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  x \\<in> repc ` set (ll ! n)\n\ngoal (1 subgoal):\n 1. x \\<notin> repc ` Nodes n ll \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "from x_in_repclln"], ["proof (chain)\npicking this:\n  x \\<in> repc ` set (ll ! n)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> repc ` set (ll ! n)\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "proof (elim imageE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "assume x_repcy: \"x = repc y\""], ["proof (state)\nthis:\n  x = repc y\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "assume y_in_repclln: \"y \\<in> set (ll ! n)\""], ["proof (state)\nthis:\n  y \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "from rep_prop y_in_repclln"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n  y \\<in> set (ll ! n)", "obtain\n                repcy_nNull: \"repc y \\<noteq> Null\" and\n                red_prop: \"(repc \\<propto> low) y = (repc \\<propto> high) y \\<and> \n                low y \\<noteq> Null \\<longrightarrow> repc y = (repc \\<propto> high) y\" and\n                share_prop: \"((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow> low y = Null) \n                \\<longrightarrow> repc y \\<in> set (ll ! n) \\<and> repc (repc y) = repc y \\<and> \n                (\\<forall>no1\\<in>set (ll ! n). \n                ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and> \n                (repc \\<propto> low) no1 = (repc \\<propto> low) y) = (repc y = repc no1))\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n  y \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc y \\<noteq> Null;\n      (repc \\<propto> low) y = (repc \\<propto> high) y \\<and>\n      low y \\<noteq> Null \\<longrightarrow>\n      repc y = (repc \\<propto> high) y;\n      ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n       low y = Null) \\<longrightarrow>\n      repc y \\<in> set (ll ! n) \\<and>\n      repc (repc y) = repc y \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n          (repc y = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit = 4]]"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n  y \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc y \\<noteq> Null;\n      (repc \\<propto> low) y = (repc \\<propto> high) y \\<and>\n      low y \\<noteq> Null \\<longrightarrow>\n      repc y = (repc \\<propto> high) y;\n      ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n       low y = Null) \\<longrightarrow>\n      repc y \\<in> set (ll ! n) \\<and>\n      repc (repc y) = repc y \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n          (repc y = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc y \\<noteq> Null\n  (repc \\<propto> low) y = (repc \\<propto> high) y \\<and>\n  low y \\<noteq> Null \\<longrightarrow>\n  repc y = (repc \\<propto> high) y\n  ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n   low y = Null) \\<longrightarrow>\n  repc y \\<in> set (ll ! n) \\<and>\n  repc (repc y) = repc y \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n      (repc y = repc no1))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "from wf_ll nsll  y_in_repclln"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  y \\<in> set (ll ! n)", "obtain\n                y_in_pret: \"y \\<in> set_of pret\" and\n                vary_n: \"var y = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  y \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>y \\<in> set_of pret; var y = n\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  y \\<in> set_of pret\n  var y = n\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "from y_in_pret pret_dag"], ["proof (chain)\npicking this:\n  y \\<in> set_of pret\n  Dag p low high pret", "have y_nNull: \"y \\<noteq> Null\""], ["proof (prove)\nusing this:\n  y \\<in> set_of pret\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. y \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in> set_of pret; Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> y \\<noteq> Null", "apply (rule set_of_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>y \\<in> set_of pret; Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>y \\<in> set_of pret; Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> y \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  y \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>x = repc xa; xa \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "show \"x \\<in> Nodes (n + 1) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "proof (cases \"low y = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. low y = Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "case True"], ["proof (state)\nthis:\n  low y = Null\n\ngoal (2 subgoals):\n 1. low y = Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "from pret_dag prebdt_pret True y_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  low y = Null\n  y \\<in> set_of pret", "have highy_Null: \"high y = Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  low y = Null\n  y \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high y = Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt; low y = Null;\n     y \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high y = Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; low y = Null;\n     y \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; low y = Null;\n     y \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; low y = Null; y \\<in> set_of pret;\n     (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> high y = Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high y = Null\n\ngoal (2 subgoals):\n 1. low y = Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "with share_prop True"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n   low y = Null) \\<longrightarrow>\n  repc y \\<in> set (ll ! n) \\<and>\n  repc (repc y) = repc y \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n      (repc y = repc no1))\n  low y = Null\n  high y = Null", "obtain \n                  repcy_in_llb: \"repc y \\<in> set (ll ! n)\" and\n                  rry_ry: \" repc (repc y) = repc y\" and\n                  y_other_node_prop: \"\\<forall>no1\\<in>set (ll ! n). \n                  ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and> \n                  (repc \\<propto> low) no1 = (repc \\<propto> low) y) = (repc y = repc no1)\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n   low y = Null) \\<longrightarrow>\n  repc y \\<in> set (ll ! n) \\<and>\n  repc (repc y) = repc y \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n      (repc y = repc no1))\n  low y = Null\n  high y = Null\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc y \\<in> set (ll ! n); repc (repc y) = repc y;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n         (repc y = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  repc y \\<in> set (ll ! n)\n  repc (repc y) = repc y\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n     (repc y = repc no1)\n\ngoal (2 subgoals):\n 1. low y = Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll\n 2. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "from repcy_in_llb  x_repcy"], ["proof (chain)\npicking this:\n  repc y \\<in> set (ll ! n)\n  x = repc y", "show ?thesis"], ["proof (prove)\nusing this:\n  repc y \\<in> set (ll ! n)\n  x = repc y\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "by (auto simp add: Nodes_def)"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "assume lowy_nNull: \"low y \\<noteq> Null\""], ["proof (state)\nthis:\n  low y \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "with pret_dag prebdt_pret y_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  y \\<in> set_of pret\n  low y \\<noteq> Null", "have highy_nNull: \"high y \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  y \\<in> set_of pret\n  low y \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high y \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     y \\<in> set_of pret; low y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high y \\<noteq> Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; y \\<in> set_of pret;\n     low y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; y \\<in> set_of pret;\n     low y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; y \\<in> set_of pret;\n     low y \\<noteq> Null; (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> high y \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high y \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low y \\<noteq> Null \\<Longrightarrow> x \\<in> Nodes (n + 1) ll", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "proof (cases \"(repc \\<propto> low) y = (repc \\<propto> high) y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "case True"], ["proof (state)\nthis:\n  (repc \\<propto> low) y = (repc \\<propto> high) y\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with red_prop lowy_nNull"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) y = (repc \\<propto> high) y \\<and>\n  low y \\<noteq> Null \\<longrightarrow>\n  repc y = (repc \\<propto> high) y\n  low y \\<noteq> Null\n  (repc \\<propto> low) y = (repc \\<propto> high) y", "have \"repc y = (repc \\<propto> high) y\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) y = (repc \\<propto> high) y \\<and>\n  low y \\<noteq> Null \\<longrightarrow>\n  repc y = (repc \\<propto> high) y\n  low y \\<noteq> Null\n  (repc \\<propto> low) y = (repc \\<propto> high) y\n\ngoal (1 subgoal):\n 1. repc y = (repc \\<propto> high) y", "by auto"], ["proof (state)\nthis:\n  repc y = (repc \\<propto> high) y\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with highy_nNull"], ["proof (chain)\npicking this:\n  high y \\<noteq> Null\n  repc y = (repc \\<propto> high) y", "have red_repc_y: \"repc y = repc (high y)\""], ["proof (prove)\nusing this:\n  high y \\<noteq> Null\n  repc y = (repc \\<propto> high) y\n\ngoal (1 subgoal):\n 1. repc y = repc (high y)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repc y = repc (high y)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "from pret_dag ord_pret y_in_pret lowy_nNull  highy_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  y \\<in> set_of pret\n  low y \\<noteq> Null\n  high y \\<noteq> Null", "have \"var (low y) < var y \\<and> var (high y) < var y\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  y \\<in> set_of pret\n  low y \\<noteq> Null\n  high y \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low y) < var y \\<and> var (high y) < var y", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; y \\<in> set_of pret;\n     low y \\<noteq> Null; high y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low y) < var y \\<and> var (high y) < var y", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; y \\<in> set_of pret;\n     low y \\<noteq> Null; high y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; y \\<in> set_of pret;\n     low y \\<noteq> Null; high y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; y \\<in> set_of pret;\n     low y \\<noteq> Null; high y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> y \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; y \\<in> set_of pret;\n     low y \\<noteq> Null; high y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low y \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; y \\<in> set_of pret;\n     low y \\<noteq> Null; high y \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high y \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low y) < var y \\<and> var (high y) < var y\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with  vary_n"], ["proof (chain)\npicking this:\n  var y = n\n  var (low y) < var y \\<and> var (high y) < var y", "have varhighy: \"var (high y) < n\""], ["proof (prove)\nusing this:\n  var y = n\n  var (low y) < var y \\<and> var (high y) < var y\n\ngoal (1 subgoal):\n 1. var (high y) < n", "by auto"], ["proof (state)\nthis:\n  var (high y) < n\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "from y_in_pret y_nNull highy_nNull pret_dag"], ["proof (chain)\npicking this:\n  y \\<in> set_of pret\n  y \\<noteq> Null\n  high y \\<noteq> Null\n  Dag p low high pret", "have \"high y \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  y \\<in> set_of pret\n  y \\<noteq> Null\n  high y \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. high y \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in> set_of pret; y \\<noteq> Null; high y \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> high y \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>y \\<noteq> Null; high y \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> y \\<noteq> Null\n 2. \\<lbrakk>y \\<noteq> Null; high y \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> ?high4 y \\<noteq> Null\n 3. \\<lbrakk>y \\<noteq> Null; high y \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>y \\<noteq> Null; high y \\<noteq> Null; Dag p low high pret;\n     ?high4 y \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high y \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high y \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with wf_ll varhighy"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  var (high y) < n\n  high y \\<in> set_of pret", "have \"high y \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  var (high y) < n\n  high y \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high y \\<in> Nodes n ll", "by (auto simp add: wf_ll_def Nodes_def)"], ["proof (state)\nthis:\n  high y \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with red_repc_y"], ["proof (chain)\npicking this:\n  repc y = repc (high y)\n  high y \\<in> Nodes n ll", "have \"repc y \\<in> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  repc y = repc (high y)\n  high y \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc y \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc y \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with x_repcy"], ["proof (chain)\npicking this:\n  x = repc y\n  repc y \\<in> repc ` Nodes n ll", "have \"x \\<in> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  x = repc y\n  repc y \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  x \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with repbNodes_repcNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  x \\<in> repc ` Nodes n ll", "have \"x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  x \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes n ll", "by auto"], ["proof (state)\nthis:\n  x \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) y = (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll\n 2. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with Nodes_subset"], ["proof (chain)\npicking this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n  x \\<in> Nodes n ll", "show ?thesis"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n  x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "by auto"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "assume \"(repc \\<propto> low) y \\<noteq> (repc \\<propto> high) y\""], ["proof (state)\nthis:\n  (repc \\<propto> low) y \\<noteq> (repc \\<propto> high) y\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with share_prop"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n   low y = Null) \\<longrightarrow>\n  repc y \\<in> set (ll ! n) \\<and>\n  repc (repc y) = repc y \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n      (repc y = repc no1))\n  (repc \\<propto> low) y \\<noteq> (repc \\<propto> high) y", "obtain \n                    repcy_in_llbn: \"repc y \\<in> set (ll ! n)\" and\n                    rry_ry: \"repc (repc y) = repc y\" and \n                    y_other_node_share: \"\\<forall>no1\\<in>set (ll ! n). \n                    ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and> \n                    (repc \\<propto> low) no1 = (repc \\<propto> low) y) = (repc y = repc no1)\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) y = (repc \\<propto> high) y \\<longrightarrow>\n   low y = Null) \\<longrightarrow>\n  repc y \\<in> set (ll ! n) \\<and>\n  repc (repc y) = repc y \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n      (repc y = repc no1))\n  (repc \\<propto> low) y \\<noteq> (repc \\<propto> high) y\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc y \\<in> set (ll ! n); repc (repc y) = repc y;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n         (repc y = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc y \\<in> set (ll ! n)\n  repc (repc y) = repc y\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n     (repc y = repc no1)\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "with repcy_in_llbn  x_repcy"], ["proof (chain)\npicking this:\n  repc y \\<in> set (ll ! n)\n  x = repc y\n  repc y \\<in> set (ll ! n)\n  repc (repc y) = repc y\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n     (repc y = repc no1)", "have \"x \\<in> set (ll ! n)\""], ["proof (prove)\nusing this:\n  repc y \\<in> set (ll ! n)\n  x = repc y\n  repc y \\<in> set (ll ! n)\n  repc (repc y) = repc y\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) y \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) y) =\n     (repc y = repc no1)\n\ngoal (1 subgoal):\n 1. x \\<in> set (ll ! n)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) y \\<noteq>\n    (repc \\<propto> high) y \\<Longrightarrow>\n    x \\<in> Nodes (n + 1) ll", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (ll ! n)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes (n + 1) ll", "by (auto simp add: Nodes_def)"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Nodes (n + 1) ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "have \"(\\<forall>no\\<in>Nodes (n + 1) ll.\n          var (repc no) \\<le> var no \\<and> \n          (\\<exists>not nort. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n          Dag no low high not \\<and>\n          reduced nort \\<and> ordered nort var \\<and> \n          set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and> \n          (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n          (\\<exists>nobdt. bdt not var = Some nobdt \\<and> \n          (\\<exists>norbdt. bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))))\"\n          (is \"\\<forall>no\\<in>Nodes (n + 1) ll. ?Q i no\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll.\n       var (repc no) \\<le> var no \\<and>\n       (\\<exists>not nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           Dag no low high not \\<and>\n           reduced nort \\<and>\n           ordered nort var \\<and>\n           set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n           (\\<exists>nobdt.\n               bdt not var = Some nobdt \\<and>\n               (\\<exists>norbdt.\n                   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> Nodes (n + 1) ll \\<Longrightarrow>\n       var (repc no) \\<le> var no \\<and>\n       (\\<exists>not nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           Dag no low high not \\<and>\n           reduced nort \\<and>\n           ordered nort var \\<and>\n           set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n           (\\<exists>nobdt.\n               bdt not var = Some nobdt \\<and>\n               (\\<exists>norbdt.\n                   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> Nodes (n + 1) ll \\<Longrightarrow>\n       var (repc no) \\<le> var no \\<and>\n       (\\<exists>not nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           Dag no low high not \\<and>\n           reduced nort \\<and>\n           ordered nort var \\<and>\n           set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n           (\\<exists>nobdt.\n               bdt not var = Some nobdt \\<and>\n               (\\<exists>norbdt.\n                   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "assume no_in_Nodes: \"no \\<in> Nodes (n + 1) ll\""], ["proof (state)\nthis:\n  no \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> Nodes (n + 1) ll \\<Longrightarrow>\n       var (repc no) \\<le> var no \\<and>\n       (\\<exists>not nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           Dag no low high not \\<and>\n           reduced nort \\<and>\n           ordered nort var \\<and>\n           set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n           (\\<exists>nobdt.\n               bdt not var = Some nobdt \\<and>\n               (\\<exists>norbdt.\n                   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from wf_ll no_in_Nodes nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  no \\<in> Nodes (n + 1) ll\n  n < length levellist", "have no_in_pret: \"no \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  no \\<in> Nodes (n + 1) ll\n  n < length levellist\n\ngoal (1 subgoal):\n 1. no \\<in> set_of pret", "apply (simp add: wf_ll_def Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     \\<exists>x<Suc n. no \\<in> set (ll ! x); n < length ll\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of pret", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x<Suc n. no \\<in> set (ll ! x); n < length ll;\n     \\<forall>p.\n        p \\<in> set_of pret \\<longrightarrow> p \\<in> set (ll ! var p);\n     \\<forall>k<length ll.\n        \\<forall>p\\<in>set (ll ! k).\n           p \\<in> set_of pret \\<and> var p = k\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of pret", "apply (thin_tac \"\\<forall>q. q \\<in> set_of pret \\<longrightarrow> q \\<in> set (ll ! var q)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x<Suc n. no \\<in> set (ll ! x); n < length ll;\n     \\<forall>k<length ll.\n        \\<forall>p\\<in>set (ll ! k).\n           p \\<in> set_of pret \\<and> var p = k\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of pret", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        \\<forall>k<length ll.\n           \\<forall>p\\<in>set (ll ! k).\n              p \\<in> set_of pret \\<and> var p = k;\n        x < Suc n \\<and> no \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set_of pret", "apply (erule_tac x=x in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        x < length ll \\<longrightarrow>\n        (\\<forall>p\\<in>set (ll ! x).\n            p \\<in> set_of pret \\<and> var p = x)\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set_of pret", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        x < Suc n \\<and> no \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> x < length ll\n 2. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        \\<forall>p\\<in>set (ll ! x).\n           p \\<in> set_of pret \\<and> var p = x\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set_of pret", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        \\<forall>p\\<in>set (ll ! x).\n           p \\<in> set_of pret \\<and> var p = x\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set_of pret", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        no \\<in> set_of pret \\<and> var no = x\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set_of pret\n 2. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        no \\<notin> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> Nodes (n + 1) ll \\<Longrightarrow>\n       var (repc no) \\<le> var no \\<and>\n       (\\<exists>not nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           Dag no low high not \\<and>\n           reduced nort \\<and>\n           ordered nort var \\<and>\n           set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n           (\\<exists>nobdt.\n               bdt not var = Some nobdt \\<and>\n               (\\<exists>norbdt.\n                   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from pret_dag no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret", "have nonNull: \"no\\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. no \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> no \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> Nodes (n + 1) ll \\<Longrightarrow>\n       var (repc no) \\<le> var no \\<and>\n       (\\<exists>not nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           Dag no low high not \\<and>\n           reduced nort \\<and>\n           ordered nort var \\<and>\n           set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n           (\\<exists>nobdt.\n               bdt not var = Some nobdt \\<and>\n               (\\<exists>norbdt.\n                   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "show \"?Q i no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "proof (cases \"no \\<in> Nodes n ll\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "case True"], ["proof (state)\nthis:\n  no \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "note no_in_Nodesn=this"], ["proof (state)\nthis:\n  no \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll nsll  no_in_Nodes"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> Nodes (n + 1) ll\n  no \\<in> Nodes n ll", "have no_notin_llbn: \"no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> Nodes (n + 1) ll\n  no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. no \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     no \\<in> Nodes (n + 1) ll; no \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> no \\<notin> set (ll ! n)", "apply (simp add: Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length ll;\n     \\<exists>x<Suc n. no \\<in> set (ll ! x);\n     \\<exists>x<n. no \\<in> set (ll ! x)\\<rbrakk>\n    \\<Longrightarrow> no \\<notin> set (ll ! n)", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>wf_ll pret ll var; n < length ll;\n        x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> no \\<notin> set (ll ! n)", "apply (drule_tac ?i=xa and ?j=n in no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> xa < length ll\n 2. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 3. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> ?no8 x xa \\<in> set (ll ! xa)\n 4. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> xa \\<noteq> n\n 5. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa);\n        ?no8 x xa \\<notin> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> no \\<notin> set (ll ! n)", "apply arith"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 2. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> ?no8 x xa \\<in> set (ll ! xa)\n 3. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> xa \\<noteq> n\n 4. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa);\n        ?no8 x xa \\<notin> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> no \\<notin> set (ll ! n)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> ?no8 x xa \\<in> set (ll ! xa)\n 2. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> xa \\<noteq> n\n 3. \\<And>x xa.\n       \\<lbrakk>n < length ll; x < Suc n \\<and> no \\<in> set (ll ! x);\n        xa < n \\<and> no \\<in> set (ll ! xa);\n        ?no8 x xa \\<notin> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> no \\<notin> set (ll ! n)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  no \\<notin> set (ll ! n)\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  no \\<notin> set (ll ! n)", "have repb_no_eq_repc_no: \"repb no = repc no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb no = repc no", "by simp"], ["proof (state)\nthis:\n  repb no = repc no\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from repbc_nc no_in_Nodes no_notin_llbn normalize_prop True"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  no \\<in> Nodes (n + 1) ll\n  no \\<notin> set (ll ! n)\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  no \\<in> Nodes n ll", "have varrep_eq_var: \"var (repc no) \\<le> var no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  no \\<in> Nodes (n + 1) ll\n  no \\<notin> set (ll ! n)\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)));\n     no \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     no \\<in> Nodes n ll;\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no\n 2. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     no \\<in> Nodes n ll; no \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     no \\<in> Nodes n ll; no \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no\n 2. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     no \\<in> Nodes n ll;\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     no \\<in> Nodes n ll;\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no", "apply (erule_tac x=no in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<in> Nodes (n + 1) ll; no \\<notin> set (ll ! n);\n     no \\<in> Nodes n ll;\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)));\n     no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\\<rbrakk>\n    \\<Longrightarrow> var (repc no) \\<le> var no", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "moreover"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from True normalize_prop no_in_Nodes"], ["proof (chain)\npicking this:\n  no \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  no \\<in> Nodes (n + 1) ll", "obtain not nort where\n              nort_dag: \"Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\" and\n              ord_nort: \"ordered nort var\" and\n              subset_nort_not:  \"set_of nort \\<subseteq> repb `(Nodes n ll)\" and\n              not_dag:  \" Dag no low high not\" and\n              red_nort: \"reduced nort\" and \n              nort_repb: \"(\\<forall>no\\<in>set_of nort. repb no = no)\" and\n              bdt_prop: \"\\<exists>nobdt norbdt. bdt not var = Some nobdt \\<and> \n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\""], ["proof (prove)\nusing this:\n  no \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  no \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. (\\<And>nort not.\n        \\<lbrakk>Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                  nort;\n         ordered nort var; set_of nort \\<subseteq> repb ` Nodes n ll;\n         Dag no low high not; reduced nort;\n         \\<forall>no\\<in>set_of nort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt not var = Some nobdt \\<and>\n            bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered nort var\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  Dag no low high not\n  reduced nort\n  \\<forall>no\\<in>set_of nort. repb no = no\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "moreover"], ["proof (state)\nthis:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered nort var\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  Dag no low high not\n  reduced nort\n  \\<forall>no\\<in>set_of nort. repb no = no\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from Nodesn_notin_lln repbc_nc nort_repb subset_nort_not repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>set_of nort. repb no = no\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have nort_repc: \n              \"(\\<forall>no\\<in>set_of nort. repc no = no)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>set_of nort. repb no = no\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set_of nort. repc no = no", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        \\<forall>no\\<in>set_of nort. repb no = no;\n        set_of nort \\<subseteq> repc ` Nodes n ll;\n        repc ` Nodes n ll \\<subseteq> Nodes n ll;\n        no \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc no = no", "apply (subgoal_tac \"no \\<in> Nodes n ll\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        \\<forall>no\\<in>set_of nort. repb no = no;\n        set_of nort \\<subseteq> repc ` Nodes n ll;\n        repc ` Nodes n ll \\<subseteq> Nodes n ll; no \\<in> set_of nort;\n        no \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repc no = no\n 2. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        \\<forall>no\\<in>set_of nort. repb no = no;\n        set_of nort \\<subseteq> repc ` Nodes n ll;\n        repc ` Nodes n ll \\<subseteq> Nodes n ll;\n        no \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> no \\<in> Nodes n ll", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        \\<forall>no.\n           no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n        \\<forall>no\\<in>set_of nort. repb no = no;\n        set_of nort \\<subseteq> repc ` Nodes n ll;\n        repc ` Nodes n ll \\<subseteq> Nodes n ll;\n        no \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> no \\<in> Nodes n ll", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of nort. repc no = no\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "moreover"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of nort. repc no = no\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from nort_dag"], ["proof (chain)\npicking this:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort", "have nortnodesnN: \"(\\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null)\""], ["proof (prove)\nusing this:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. \\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n     nort \\<Longrightarrow>\n    \\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>noa.\n       Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n        nort \\<Longrightarrow>\n       noa \\<in> set_of nort \\<longrightarrow> noa \\<noteq> Null", "apply (rule impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>noa.\n       \\<lbrakk>Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        noa \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> noa \\<noteq> Null", "apply (rule set_of_nn)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>noa.\n       \\<lbrakk>Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        noa \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> Dag (?p5 noa) (?low5 noa) (?high5 noa) (?t5 noa)\n 2. \\<And>noa.\n       \\<lbrakk>Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                 nort;\n        noa \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> noa \\<in> set_of (?t5 noa)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "moreover"], ["proof (state)\nthis:\n  \\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have \"Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "from no_notin_llbn repbc_nc"], ["proof (chain)\npicking this:\n  no \\<notin> set (ll ! n)\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no", "have repbc_no: \"repc no = repb no\""], ["proof (prove)\nusing this:\n  no \\<notin> set (ll ! n)\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n\ngoal (1 subgoal):\n 1. repc no = repb no", "by fastforce"], ["proof (state)\nthis:\n  repc no = repb no\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "with nort_dag"], ["proof (chain)\npicking this:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  repc no = repb no", "have nortrepbc_dag: \"Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\""], ["proof (prove)\nusing this:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  repc no = repb no\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort", "by simp"], ["proof (state)\nthis:\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "from wf_ll nseqll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n \\<le> length levellist", "have \"Nodes n ll \\<subseteq> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n \\<le> length levellist\n\ngoal (1 subgoal):\n 1. Nodes n ll \\<subseteq> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n \\<le> length levellist\\<rbrakk>\n    \\<Longrightarrow> Nodes n ll \\<subseteq> set_of pret", "apply (rule Nodes_levellist_subset_t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>wf_ll pret ll var; n \\<le> length levellist\\<rbrakk>\n    \\<Longrightarrow> wf_ll pret ll ?var2\n 2. \\<lbrakk>wf_ll pret ll var; n \\<le> length levellist\\<rbrakk>\n    \\<Longrightarrow> n \\<le> length ll", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n \\<le> length levellist\\<rbrakk>\n    \\<Longrightarrow> n \\<le> length ll", "apply (simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Nodes n ll \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "with repbNodes_in_Nodes subset_nort_not"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  Nodes n ll \\<subseteq> set_of pret", "have subset_nort_pret:  \"set_of nort \\<subseteq> set_of pret\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  Nodes n ll \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> set_of pret", "by simp"], ["proof (state)\nthis:\n  set_of nort \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "have vxsn_in_pret: \"\\<forall> x \\<in> set_of nort. var x < n \\<and> x \\<in> set_of pret\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of nort. var x < n \\<and> x \\<in> set_of pret", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of nort \\<Longrightarrow>\n       var x < n \\<and> x \\<in> set_of pret", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of nort \\<Longrightarrow>\n       var x < n \\<and> x \\<in> set_of pret", "assume x_in_nort: \"x \\<in> set_of nort\""], ["proof (state)\nthis:\n  x \\<in> set_of nort\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of nort \\<Longrightarrow>\n       var x < n \\<and> x \\<in> set_of pret", "from x_in_nort subset_nort_not repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  x \\<in> set_of nort\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have \"x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  x \\<in> set_of nort\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. x \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of nort \\<Longrightarrow>\n       var x < n \\<and> x \\<in> set_of pret", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  x \\<in> Nodes n ll", "have xsn: \"var x < n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var x < n", "apply (simp add: wf_ll_def Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll; \\<exists>xa<n. x \\<in> set (ll ! xa)\\<rbrakk>\n    \\<Longrightarrow> var x < n", "apply (erule conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ll; \\<exists>xa<n. x \\<in> set (ll ! xa);\n     \\<forall>p.\n        p \\<in> set_of pret \\<longrightarrow> p \\<in> set (ll ! var p);\n     \\<forall>k<length ll.\n        \\<forall>p\\<in>set (ll ! k).\n           p \\<in> set_of pret \\<and> var p = k\\<rbrakk>\n    \\<Longrightarrow> var x < n", "apply (thin_tac \" \\<forall>q. q \\<in> set_of pret \\<longrightarrow> q \\<in> set (ll ! var q)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length ll; \\<exists>xa<n. x \\<in> set (ll ! xa);\n     \\<forall>k<length ll.\n        \\<forall>p\\<in>set (ll ! k).\n           p \\<in> set_of pret \\<and> var p = k\\<rbrakk>\n    \\<Longrightarrow> var x < n", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n < length ll;\n        \\<forall>k<length ll.\n           \\<forall>p\\<in>set (ll ! k).\n              p \\<in> set_of pret \\<and> var p = k;\n        xa < n \\<and> x \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> var x < n", "apply (erule_tac x=xa in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n < length ll; xa < n \\<and> x \\<in> set (ll ! xa);\n        xa < length ll \\<longrightarrow>\n        (\\<forall>p\\<in>set (ll ! xa).\n            p \\<in> set_of pret \\<and> var p = xa)\\<rbrakk>\n       \\<Longrightarrow> var x < n", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>n < length ll; xa < n \\<and> x \\<in> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> xa < length ll\n 2. \\<And>xa.\n       \\<lbrakk>n < length ll; xa < n \\<and> x \\<in> set (ll ! xa);\n        \\<forall>p\\<in>set (ll ! xa).\n           p \\<in> set_of pret \\<and> var p = xa\\<rbrakk>\n       \\<Longrightarrow> var x < n", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>n < length ll; xa < n \\<and> x \\<in> set (ll ! xa);\n        \\<forall>p\\<in>set (ll ! xa).\n           p \\<in> set_of pret \\<and> var p = xa\\<rbrakk>\n       \\<Longrightarrow> var x < n", "apply (erule_tac x=x in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>n < length ll; xa < n \\<and> x \\<in> set (ll ! xa);\n        x \\<in> set_of pret \\<and> var x = xa\\<rbrakk>\n       \\<Longrightarrow> var x < n\n 2. \\<And>xa.\n       \\<lbrakk>n < length ll; xa < n \\<and> x \\<in> set (ll ! xa);\n        x \\<notin> set (ll ! xa)\\<rbrakk>\n       \\<Longrightarrow> var x < n", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var x < n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of nort \\<Longrightarrow>\n       var x < n \\<and> x \\<in> set_of pret", "from x_in_nort subset_nort_pret"], ["proof (chain)\npicking this:\n  x \\<in> set_of nort\n  set_of nort \\<subseteq> set_of pret", "have x_in_pret: \"x \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  x \\<in> set_of nort\n  set_of nort \\<subseteq> set_of pret\n\ngoal (1 subgoal):\n 1. x \\<in> set_of pret", "by blast"], ["proof (state)\nthis:\n  x \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set_of nort \\<Longrightarrow>\n       var x < n \\<and> x \\<in> set_of pret", "with xsn"], ["proof (chain)\npicking this:\n  var x < n\n  x \\<in> set_of pret", "show \"var x < n \\<and> x \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  var x < n\n  x \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. var x < n \\<and> x \\<in> set_of pret", "by simp"], ["proof (state)\nthis:\n  var x < n \\<and> x \\<in> set_of pret\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of nort. var x < n \\<and> x \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "with pret_dag prebdt_pret nortrepbc_dag ord_pret wf_ll  nsll \n                repbc_nc"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of nort. var x < n \\<and> x \\<in> set_of pret", "have \"\\<forall> x \\<in> set_of nort. ((repc \\<propto> low) x = (repb \\<propto> low) x \\<and> \n                (repc \\<propto> high) x = (repb \\<propto> high) x)\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of nort. var x < n \\<and> x \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of nort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply (rule nort_null_comp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 low high ?pret8\n 2. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> bdt ?pret8 ?var8 = Some ?prebdt8\n 3. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag (repc ?no8) (repb \\<propto> low)\n                       (repb \\<propto> high) nort\n 4. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ordered ?pret8 ?var8\n 5. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret8 ?levellistb8 ?var8\n 6. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ?nb8 < length ?levellistb8\n 7. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>nt.\n                         nt \\<notin> set\n(?levellistb8 ! ?nb8) \\<longrightarrow>\n                         repb nt = repc nt\n 8. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of nort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         ?var8 x < ?nb8 \\<and> x \\<in> set_of ?pret8", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of nort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "with nort_dag"], ["proof (chain)\npicking this:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  \\<forall>x\\<in>set_of nort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x", "have \"Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort = \n                Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\""], ["proof (prove)\nusing this:\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  \\<forall>x\\<in>set_of nort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort =\n    Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     \\<forall>x\\<in>set_of nort.\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n    \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                       (repc \\<propto> high) nort =\n                      Dag (repc no) (repb \\<propto> low)\n                       (repb \\<propto> high) nort", "apply (rule heaps_eq_Dag_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort;\n     \\<forall>x\\<in>set_of nort.\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of nort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort =\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "with nortrepbc_dag"], ["proof (chain)\npicking this:\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort =\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort =\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) nort\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort", "by simp"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "moreover"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have \"set_of nort \\<subseteq> repc `(Nodes (n + 1) ll)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "have Nodesn_in_NodesSucn: \"Nodes n ll \\<subseteq> Nodes (n + 1) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nodes n ll \\<subseteq> Nodes (n + 1) ll", "by (simp add: Nodes_def set_split)"], ["proof (state)\nthis:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "then"], ["proof (chain)\npicking this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll", "have repbNodesn_in_repbNodesSucn: \n                \"repb `(Nodes n ll) \\<subseteq> repb `(Nodes (n + 1) ll)\""], ["proof (prove)\nusing this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repb ` Nodes n ll \\<subseteq> repb ` Nodes (n + 1) ll", "by blast"], ["proof (state)\nthis:\n  repb ` Nodes n ll \\<subseteq> repb ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "from wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist", "have Nodes_n_notin_lln: \"\\<forall>no \\<in> Nodes n ll. no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "apply (simp add: Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<n.\n                         \\<forall>no\\<in>set (ll ! y).\n                            no \\<notin> set (ll ! n)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y no.\n       \\<lbrakk>wf_ll pret ll var; n < length ll; y < n;\n        no \\<in> set (ll ! y); no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no < length ll\n 2. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?j24 y no < length ll\n 3. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?no24 y no \\<in> set (ll ! ?i24 y no)\n 4. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no \\<noteq> ?j24 y no\n 5. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n);\n        ?no24 y no \\<notin> set (ll ! ?j24 y no)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "have \"\\<forall>no \\<in> Nodes n ll. repb no = repc no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repc no;\n        \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply (erule_tac x=no in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll;\n        no \\<notin> set (ll ! n) \\<longrightarrow>\n        repb no = repc no\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "then"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no", "have repbNodes_repcNodes: \n                \"repb `(Nodes n ll) = repc `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. repb ` Nodes n ll = repc ` Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll = repc ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll \\<subseteq> repc ` Nodes n ll\n 2. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no;\n        x \\<in> repc ` Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no; x = repc xa;\n        xa \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule_tac x=xa in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x = repb (?x28 x xa)\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> ?x28 x xa \\<in> Nodes n ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "from Nodesn_in_NodesSucn"], ["proof (chain)\npicking this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll", "have \"repc `(Nodes n ll) \\<subseteq> repc `(Nodes (n + 1) ll)\""], ["proof (prove)\nusing this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "with repbNodes_repcNodes subset_nort_not repbNodesn_in_repbNodesSucn"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> repb ` Nodes (n + 1) ll\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> repb ` Nodes (n + 1) ll\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "by simp"], ["proof (state)\nthis:\n  set_of nort \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set_of nort \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (2 subgoals):\n 1. no \\<in> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "ultimately"], ["proof (chain)\npicking this:\n  var (repc no) \\<le> var no\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered nort var\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  Dag no low high not\n  reduced nort\n  \\<forall>no\\<in>set_of nort. repb no = no\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n  \\<forall>no\\<in>set_of nort. repc no = no\n  \\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort\n  set_of nort \\<subseteq> repc ` Nodes (n + 1) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  var (repc no) \\<le> var no\n  Dag (repb no) (repb \\<propto> low) (repb \\<propto> high) nort\n  ordered nort var\n  set_of nort \\<subseteq> repb ` Nodes n ll\n  Dag no low high not\n  reduced nort\n  \\<forall>no\\<in>set_of nort. repb no = no\n  \\<exists>nobdt norbdt.\n     bdt not var = Some nobdt \\<and>\n     bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt\n  \\<forall>no\\<in>set_of nort. repc no = no\n  \\<forall>no. no \\<in> set_of nort \\<longrightarrow> no \\<noteq> Null\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort\n  set_of nort \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "by blast"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "assume \" no \\<notin> Nodes n ll\""], ["proof (state)\nthis:\n  no \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with no_in_Nodes"], ["proof (chain)\npicking this:\n  no \\<in> Nodes (n + 1) ll\n  no \\<notin> Nodes n ll", "have no_in_llbn: \"no \\<in> set (ll ! n)\""], ["proof (prove)\nusing this:\n  no \\<in> Nodes (n + 1) ll\n  no \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. no \\<in> set (ll ! n)", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>x<Suc n. no \\<in> set (ll ! x);\n     \\<forall>x<n. no \\<notin> set (ll ! x)\\<rbrakk>\n    \\<Longrightarrow> no \\<in> set (ll ! n)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x<n. no \\<notin> set (ll ! x);\n        x < Suc n \\<and> no \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply (erule_tac x=x in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x < Suc n \\<and> no \\<in> set (ll ! x);\n        x < n \\<longrightarrow> no \\<notin> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply (case_tac \"x<n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>x < Suc n \\<and> no \\<in> set (ll ! x);\n        x < n \\<longrightarrow> no \\<notin> set (ll ! x); x < n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)\n 2. \\<And>x.\n       \\<lbrakk>x < Suc n \\<and> no \\<in> set (ll ! x);\n        x < n \\<longrightarrow> no \\<notin> set (ll ! x);\n        \\<not> x < n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x < Suc n \\<and> no \\<in> set (ll ! x);\n        x < n \\<longrightarrow> no \\<notin> set (ll ! x);\n        \\<not> x < n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x < Suc n \\<and> no \\<in> set (ll ! x);\n        \\<not> x < n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> x < n; x < Suc n; no \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply (case_tac \"x=n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> x < n; x < Suc n; no \\<in> set (ll ! x);\n        x = n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)\n 2. \\<And>x.\n       \\<lbrakk>\\<not> x < n; x < Suc n; no \\<in> set (ll ! x);\n        x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> x < n; x < Suc n; no \\<in> set (ll ! x);\n        x \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> no \\<in> set (ll ! n)", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll  nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> set (ll ! n)", "have varno: \"var no = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var no = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var no = n\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from repbc_changes no_in_llbn"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n  no \\<in> set (ll ! n)", "have repbcno_changes: \"repc no \\<noteq> Null \\<and>\n              ((repc \\<propto> low) no = (repc \\<propto> high) no \\<and> low no \\<noteq> Null \n              \\<longrightarrow> repc no = (repc \\<propto> high) no) \\<and>\n              (((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow> low no = Null) \n              \\<longrightarrow> repc no \\<in> set (ll ! n)  \\<and> repc (repc no) = repc no \\<and> \n              (\\<forall>no1\\<in>set (ll ! n). ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n              (repc \\<propto> low) no1 = (repc \\<propto> low) no) = (repc no = repc no1)))\"\n              (is \"?rnonN \\<and> ?repreduce \\<and> ?repshare\")"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n  no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repc no \\<noteq> Null \\<and>\n    ((repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repc no = (repc \\<propto> high) no) \\<and>\n    (((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n      low no = Null) \\<longrightarrow>\n     repc no \\<in> set (ll ! n) \\<and>\n     repc (repc no) = repc no \\<and>\n     (\\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n         (repc no = repc no1)))", "using [[simp_depth_limit=4]]"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n  no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repc no \\<noteq> Null \\<and>\n    ((repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repc no = (repc \\<propto> high) no) \\<and>\n    (((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n      low no = Null) \\<longrightarrow>\n     repc no \\<in> set (ll ! n) \\<and>\n     repc (repc no) = repc no \\<and>\n     (\\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n         (repc no = repc no1)))", "by (simp split: if_split)"], ["proof (state)\nthis:\n  repc no \\<noteq> Null \\<and>\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n   low no \\<noteq> Null \\<longrightarrow>\n   repc no = (repc \\<propto> high) no) \\<and>\n  (((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n    low no = Null) \\<longrightarrow>\n   repc no \\<in> set (ll ! n) \\<and>\n   repc (repc no) = repc no \\<and>\n   (\\<forall>no1\\<in>set (ll ! n).\n       ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n        (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n       (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "then"], ["proof (chain)\npicking this:\n  repc no \\<noteq> Null \\<and>\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n   low no \\<noteq> Null \\<longrightarrow>\n   repc no = (repc \\<propto> high) no) \\<and>\n  (((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n    low no = Null) \\<longrightarrow>\n   repc no \\<in> set (ll ! n) \\<and>\n   repc (repc no) = repc no \\<and>\n   (\\<forall>no1\\<in>set (ll ! n).\n       ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n        (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n       (repc no = repc no1)))", "obtain \n              rnonN: \"?rnonN\" and\n              repreduce: \"?repreduce\" and\n              repshare: \"?repshare\""], ["proof (prove)\nusing this:\n  repc no \\<noteq> Null \\<and>\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n   low no \\<noteq> Null \\<longrightarrow>\n   repc no = (repc \\<propto> high) no) \\<and>\n  (((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n    low no = Null) \\<longrightarrow>\n   repc no \\<in> set (ll ! n) \\<and>\n   repc (repc no) = repc no \\<and>\n   (\\<forall>no1\\<in>set (ll ! n).\n       ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n        (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n       (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc no \\<noteq> Null;\n      (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n      low no \\<noteq> Null \\<longrightarrow>\n      repc no = (repc \\<propto> high) no;\n      ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n       low no = Null) \\<longrightarrow>\n      repc no \\<in> set (ll ! n) \\<and>\n      repc (repc no) = repc no \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n          (repc no = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  repc no \\<noteq> Null\n  (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n  low no \\<noteq> Null \\<longrightarrow>\n  repc no = (repc \\<propto> high) no\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have repcn_normalize: \"var (repc no) \\<le> var no \\<and>\n              (\\<exists>not nort. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n              Dag no low high not \\<and> reduced nort \\<and> ordered nort var \\<and>\n              set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n              (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n              (\\<exists>nobdt. bdt not var = Some nobdt \\<and> \n              (\\<exists>norbdt. bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\"\n              (is \"?varrep \\<and> ?repcn_prop\" \n                is \"?varrep \\<and> \n                (\\<exists>not nort. ?nort_dag nort \\<and> ?not_dag not \\<and> ?red nort \\<and> \n                ?ord nort \\<and> ?nort_in_Nodes nort \\<and> ?repcno_no_n nort \\<and> ?bdt_equ not nort)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "proof (cases \"high no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "case True"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "note highnoNull=this"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with pret_dag prebdt_pret no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret\n  high no = Null", "have lownoNull: \"low no = Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret\n  high no = Null\n\ngoal (1 subgoal):\n 1. low no = Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     no \\<in> set_of pret; high no = Null\\<rbrakk>\n    \\<Longrightarrow> low no = Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; no \\<in> set_of pret;\n     high no = Null\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; no \\<in> set_of pret;\n     high no = Null\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; no \\<in> set_of pret;\n     high no = Null; (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> low no = Null", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt pret var = Some prebdt; no \\<in> set_of pret;\n     high no = Null; (low no = Null) = (high no = Null)\\<rbrakk>\n    \\<Longrightarrow> low no = Null", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repshare"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  low no = Null", "have repcnoinlln:\"repc no \\<in> set (ll ! n)\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  low no = Null\n\ngoal (1 subgoal):\n 1. repc no \\<in> set (ll ! n)", "by simp"], ["proof (state)\nthis:\n  repc no \\<in> set (ll ! n)\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll  nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  repc no \\<in> set (ll ! n)", "have varrno_n: \"var (repc no) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  repc no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var (repc no) = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var (repc no) = n\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varno"], ["proof (chain)\npicking this:\n  var no = n\n  var (repc no) = n", "have varrep: \"?varrep\""], ["proof (prove)\nusing this:\n  var no = n\n  var (repc no) = n\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from wf_ll  nsll no_in_llbn varrno_n"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> set (ll ! n)\n  var (repc no) = n", "have varrno_varno: \"var (repc no) = var no\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  no \\<in> set (ll ! n)\n  var (repc no) = n\n\ngoal (1 subgoal):\n 1. var (repc no) = var no", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var (repc no) = var no\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from wf_ll  nsll repcnoinlln"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  repc no \\<in> set (ll ! n)", "have rno_in_pret: \"repc no \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  repc no \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repc no \\<in> set_of pret", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  repc no \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from repcnoinlln repshare lownoNull"], ["proof (chain)\npicking this:\n  repc no \\<in> set (ll ! n)\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  low no = Null", "have reprep_eq_rep: \"repc (repc no) = repc no\""], ["proof (prove)\nusing this:\n  repc no \\<in> set (ll ! n)\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  low no = Null\n\ngoal (1 subgoal):\n 1. repc (repc no) = repc no", "by simp"], ["proof (state)\nthis:\n  repc (repc no) = repc no\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repcnoinlln repshare lownoNull"], ["proof (chain)\npicking this:\n  repc no \\<in> set (ll ! n)\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  low no = Null\n  repc (repc no) = repc no", "have repchildreneq: \n                \"((repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and> \n                (repc \\<propto> low) (repc no) = (repc \\<propto> low) no)\""], ["proof (prove)\nusing this:\n  repc no \\<in> set (ll ! n)\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  low no = Null\n  repc (repc no) = repc no\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n    (repc \\<propto> low) (repc no) = (repc \\<propto> low) no", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have repcn_prop: \"?repcn_prop\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>not nort.\n       Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n       Dag no low high not \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n       (\\<exists>nobdt.\n           bdt not var = Some nobdt \\<and>\n           (\\<exists>norbdt.\n               bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>not nort.\n       Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n       Dag no low high not \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n       (\\<exists>nobdt.\n           bdt not var = Some nobdt \\<and>\n           (\\<exists>norbdt.\n               bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply (rule_tac x=\"(Node Tip no Tip)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nort.\n       Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n       Dag no low high (Node Tip no Tip) \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n       (\\<exists>nobdt.\n           bdt (Node Tip no Tip) var = Some nobdt \\<and>\n           (\\<exists>norbdt.\n               bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply (rule_tac x=\"(Node Tip (repc no) Tip)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n     (Node Tip (repc no) Tip) \\<and>\n    Dag no low high (Node Tip no Tip) \\<and>\n    reduced (Node Tip (repc no) Tip) \\<and>\n    ordered (Node Tip (repc no) Tip) var \\<and>\n    set_of (Node Tip (repc no) Tip)\n    \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no) \\<and>\n    (\\<exists>nobdt.\n        bdt (Node Tip no Tip) var = Some nobdt \\<and>\n        (\\<exists>norbdt.\n            bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n            nobdt \\<sim> norbdt))", "apply (intro conjI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n     (Node Tip (repc no) Tip)\n 2. Dag no low high (Node Tip no Tip)\n 3. reduced (Node Tip (repc no) Tip)\n 4. ordered (Node Tip (repc no) Tip) var\n 5. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 7. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. reduced (Node Tip (repc no) Tip)\n 4. ordered (Node Tip (repc no) Tip) var\n 5. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 7. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "prefer 3"], ["proof (prove)\ngoal (7 subgoals):\n 1. reduced (Node Tip (repc no) Tip)\n 2. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 3. Dag no low high (Node Tip no Tip)\n 4. ordered (Node Tip (repc no) Tip) var\n 5. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 7. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. ordered (Node Tip (repc no) Tip) var\n 4. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 5. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 6. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "prefer 3"], ["proof (prove)\ngoal (6 subgoals):\n 1. ordered (Node Tip (repc no) Tip) var\n 2. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 3. Dag no low high (Node Tip no Tip)\n 4. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 5. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 6. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 4. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 5. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 4. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 5. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from pret_dag pnN rno_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  p \\<noteq> Null\n  repc no \\<in> set_of pret", "have rnonN: \"repc no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  p \\<noteq> Null\n  repc no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. repc no \\<noteq> Null", "apply (case_tac \"repc no = Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; p \\<noteq> Null;\n     repc no \\<in> set_of pret; repc no = Null\\<rbrakk>\n    \\<Longrightarrow> repc no \\<noteq> Null\n 2. \\<lbrakk>Dag p low high pret; p \\<noteq> Null;\n     repc no \\<in> set_of pret; repc no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repc no \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc no \\<noteq> Null\n\ngoal (5 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 4. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 5. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from highnoNull repchildreneq"], ["proof (chain)\npicking this:\n  high no = Null\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no", "have rhighNull: \"(repc \\<propto> high) (repc no) = Null\""], ["proof (prove)\nusing this:\n  high no = Null\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc no) = Null", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc no) = Null\n\ngoal (5 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 4. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 5. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from lownoNull repchildreneq"], ["proof (chain)\npicking this:\n  low no = Null\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no", "have rlowNull: \"(repc \\<propto> low) (repc no) = Null\""], ["proof (prove)\nusing this:\n  low no = Null\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc no) = Null", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc no) = Null\n\ngoal (5 subgoals):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null\n 2. Dag no low high (Node Tip no Tip)\n 3. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 4. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 5. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with rhighNull rnonN"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc no) = Null\n  repc no \\<noteq> Null\n  (repc \\<propto> low) (repc no) = Null", "show \"repc no \\<noteq> Null \\<and> (repc \\<propto> low) (repc no) = Null \\<and> \n                  (repc \\<propto> high) (repc no) = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc no) = Null\n  repc no \\<noteq> Null\n  (repc \\<propto> low) (repc no) = Null\n\ngoal (1 subgoal):\n 1. repc no \\<noteq> Null \\<and>\n    (repc \\<propto> low) (repc no) = Null \\<and>\n    (repc \\<propto> high) (repc no) = Null", "by simp"], ["proof (state)\nthis:\n  repc no \\<noteq> Null \\<and>\n  (repc \\<propto> low) (repc no) = Null \\<and>\n  (repc \\<propto> high) (repc no) = Null\n\ngoal (4 subgoals):\n 1. Dag no low high (Node Tip no Tip)\n 2. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 3. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 4. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. Dag no low high (Node Tip no Tip)\n 2. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 3. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 4. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from nonNull lownoNull highnoNull"], ["proof (chain)\npicking this:\n  no \\<noteq> Null\n  low no = Null\n  high no = Null", "show \"?not_dag (Node Tip no Tip)\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null\n  low no = Null\n  high no = Null\n\ngoal (1 subgoal):\n 1. Dag no low high (Node Tip no Tip)", "by simp"], ["proof (state)\nthis:\n  Dag no low high (Node Tip no Tip)\n\ngoal (3 subgoals):\n 1. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 2. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 3. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n 2. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 3. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from no_in_Nodes"], ["proof (chain)\npicking this:\n  no \\<in> Nodes (n + 1) ll", "show \"set_of (Node Tip (repc no) Tip) \\<subseteq>  repc ` Nodes (n + 1) ll\""], ["proof (prove)\nusing this:\n  no \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll", "by simp"], ["proof (state)\nthis:\n  set_of (Node Tip (repc no) Tip) \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 2. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n 2. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "show \"\\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>noa.\n       noa \\<in> set_of (Node Tip (repc no) Tip) \\<Longrightarrow>\n       repc noa = noa", "fix pt"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>noa.\n       noa \\<in> set_of (Node Tip (repc no) Tip) \\<Longrightarrow>\n       repc noa = noa", "assume pt_in_repcLeaf: \"pt \\<in> set_of (Node Tip (repc no) Tip)\""], ["proof (state)\nthis:\n  pt \\<in> set_of (Node Tip (repc no) Tip)\n\ngoal (1 subgoal):\n 1. \\<And>noa.\n       noa \\<in> set_of (Node Tip (repc no) Tip) \\<Longrightarrow>\n       repc noa = noa", "with reprep_eq_rep"], ["proof (chain)\npicking this:\n  repc (repc no) = repc no\n  pt \\<in> set_of (Node Tip (repc no) Tip)", "show \"repc pt = pt\""], ["proof (prove)\nusing this:\n  repc (repc no) = repc no\n  pt \\<in> set_of (Node Tip (repc no) Tip)\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by simp"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of (Node Tip (repc no) Tip). repc no = no\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "show \"?bdt_equ (Node Tip no Tip) (Node Tip (repc no) Tip)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "proof (cases \"var no = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "case True"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "note vno_Null=this"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  var no = 0", "have nobdt: \"bdt (Node Tip no Tip) var = Some Zero\""], ["proof (prove)\nusing this:\n  var no = 0\n\ngoal (1 subgoal):\n 1. bdt (Node Tip no Tip) var = Some Zero", "by simp"], ["proof (state)\nthis:\n  bdt (Node Tip no Tip) var = Some Zero\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from varrep  vno_Null"], ["proof (chain)\npicking this:\n  var (repc no) \\<le> var no\n  var no = 0", "have varrno: \"var (repc no) = 0\""], ["proof (prove)\nusing this:\n  var (repc no) \\<le> var no\n  var no = 0\n\ngoal (1 subgoal):\n 1. var (repc no) = 0", "by simp"], ["proof (state)\nthis:\n  var (repc no) = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  var (repc no) = 0", "have norbdt: \"bdt (Node Tip (repc no) Tip) var = Some Zero\""], ["proof (prove)\nusing this:\n  var (repc no) = 0\n\ngoal (1 subgoal):\n 1. bdt (Node Tip (repc no) Tip) var = Some Zero", "by simp"], ["proof (state)\nthis:\n  bdt (Node Tip (repc no) Tip) var = Some Zero\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from nobdt norbdt vno_Null varrno"], ["proof (chain)\npicking this:\n  bdt (Node Tip no Tip) var = Some Zero\n  bdt (Node Tip (repc no) Tip) var = Some Zero\n  var no = 0\n  var (repc no) = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  bdt (Node Tip no Tip) var = Some Zero\n  bdt (Node Tip (repc no) Tip) var = Some Zero\n  var no = 0\n  var (repc no) = 0\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "by (simp add: cong_eval_def)"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node Tip no Tip) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "assume vno_not_Null: \"var no \\<noteq> 0\""], ["proof (state)\nthis:\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "proof (cases \"var no = 1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. var no = 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "case True"], ["proof (state)\nthis:\n  var no = 1\n\ngoal (2 subgoals):\n 1. var no = 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "note vno_One=this"], ["proof (state)\nthis:\n  var no = 1\n\ngoal (2 subgoals):\n 1. var no = 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  var no = 1", "have nobdt: \"bdt (Node Tip no Tip) var = Some One\""], ["proof (prove)\nusing this:\n  var no = 1\n\ngoal (1 subgoal):\n 1. bdt (Node Tip no Tip) var = Some One", "by simp"], ["proof (state)\nthis:\n  bdt (Node Tip no Tip) var = Some One\n\ngoal (2 subgoals):\n 1. var no = 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from varrno_varno vno_One"], ["proof (chain)\npicking this:\n  var (repc no) = var no\n  var no = 1", "have \"bdt (Node Tip (repc no) Tip) var = Some One\""], ["proof (prove)\nusing this:\n  var (repc no) = var no\n  var no = 1\n\ngoal (1 subgoal):\n 1. bdt (Node Tip (repc no) Tip) var = Some One", "by simp"], ["proof (state)\nthis:\n  bdt (Node Tip (repc no) Tip) var = Some One\n\ngoal (2 subgoals):\n 1. var no = 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with nobdt"], ["proof (chain)\npicking this:\n  bdt (Node Tip no Tip) var = Some One\n  bdt (Node Tip (repc no) Tip) var = Some One", "show ?thesis"], ["proof (prove)\nusing this:\n  bdt (Node Tip no Tip) var = Some One\n  bdt (Node Tip (repc no) Tip) var = Some One\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "by (auto simp add: cong_eval_def)"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node Tip no Tip) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "assume vno_nOne: \"var no \\<noteq> 1\""], ["proof (state)\nthis:\n  var no \\<noteq> 1\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with vno_not_Null"], ["proof (chain)\npicking this:\n  var no \\<noteq> 0\n  var no \\<noteq> 1", "have onesvno: \"1 < var no\""], ["proof (prove)\nusing this:\n  var no \\<noteq> 0\n  var no \\<noteq> 1\n\ngoal (1 subgoal):\n 1. 1 < var no", "by simp"], ["proof (state)\nthis:\n  1 < var no\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from nonNull lownoNull highnoNull"], ["proof (chain)\npicking this:\n  no \\<noteq> Null\n  low no = Null\n  high no = Null", "have no_dag: \"Dag no low high (Node Tip no Tip)\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null\n  low no = Null\n  high no = Null\n\ngoal (1 subgoal):\n 1. Dag no low high (Node Tip no Tip)", "by simp"], ["proof (state)\nthis:\n  Dag no low high (Node Tip no Tip)\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with pret_dag no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret\n  Dag no low high (Node Tip no Tip)", "have not_in_pret: \"(Node Tip no Tip) \\<le> pret\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret\n  Dag no low high (Node Tip no Tip)\n\ngoal (1 subgoal):\n 1. Node Tip no Tip \\<le> pret", "by (metis set_of_subdag)"], ["proof (state)\nthis:\n  Node Tip no Tip \\<le> pret\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with prebdt_pret"], ["proof (chain)\npicking this:\n  bdt pret var = Some prebdt\n  Node Tip no Tip \\<le> pret", "have \"\\<exists>bdt2. bdt (Node Tip no Tip) var = Some bdt2\""], ["proof (prove)\nusing this:\n  bdt pret var = Some prebdt\n  Node Tip no Tip \\<le> pret\n\ngoal (1 subgoal):\n 1. \\<exists>bdt2. bdt (Node Tip no Tip) var = Some bdt2", "by (metis subbdt_ex)"], ["proof (state)\nthis:\n  \\<exists>bdt2. bdt (Node Tip no Tip) var = Some bdt2\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 1 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with onesvno"], ["proof (chain)\npicking this:\n  1 < var no\n  \\<exists>bdt2. bdt (Node Tip no Tip) var = Some bdt2", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < var no\n  \\<exists>bdt2. bdt (Node Tip no Tip) var = Some bdt2\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node Tip no Tip) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "by simp"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node Tip no Tip) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node Tip no Tip) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node Tip no Tip) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node Tip (repc no) Tip) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varrep reprep_eq_rep"], ["proof (chain)\npicking this:\n  var (repc no) \\<le> var no\n  repc (repc no) = repc no\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "show ?thesis"], ["proof (prove)\nusing this:\n  var (repc no) \\<le> var no\n  repc (repc no) = repc no\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "assume hno_nNull: \"high no \\<noteq> Null\""], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with pret_dag prebdt_pret no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret\n  high no \\<noteq> Null", "have lno_nNull: \"low no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  no \\<in> set_of pret\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null", "by (metis balanced_bdt)"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "(*-------------------normalize_prop fuer (high no)------------------------*)"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from no_in_pret nonNull hno_nNull pret_dag"], ["proof (chain)\npicking this:\n  no \\<in> set_of pret\n  no \\<noteq> Null\n  high no \\<noteq> Null\n  Dag p low high pret", "have hno_in_pret: \"high no \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  no \\<in> set_of pret\n  no \\<noteq> Null\n  high no \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. high no \\<in> set_of pret", "by (metis subelem_set_of_high)"], ["proof (state)\nthis:\n  high no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high no \\<in> set_of pret", "have hno_in_ll: \"high no \\<in> set (ll ! (var (high no)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high no \\<in> set (ll ! var (high no))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high no \\<in> set (ll ! var (high no))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from pret_dag ord_pret  no_in_pret lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null", "have varhnos_varno: \"var (high no) < var no\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (high no) < var no", "by (metis var_ordered_children)"], ["proof (state)\nthis:\n  var (high no) < var no\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varno"], ["proof (chain)\npicking this:\n  var no = n\n  var (high no) < var no", "have varhnos_n: \"var (high no) < n\""], ["proof (prove)\nusing this:\n  var no = n\n  var (high no) < var no\n\ngoal (1 subgoal):\n 1. var (high no) < n", "by simp"], ["proof (state)\nthis:\n  var (high no) < n\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with hno_in_ll"], ["proof (chain)\npicking this:\n  high no \\<in> set (ll ! var (high no))\n  var (high no) < n", "have hno_in_Nodesn: \"high no \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  high no \\<in> set (ll ! var (high no))\n  var (high no) < n\n\ngoal (1 subgoal):\n 1. high no \\<in> Nodes n ll", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>high no \\<in> set (ll ! var (high no));\n     var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x<n. high no \\<in> set (ll ! x)", "apply (rule_tac x=\"var (high no)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>high no \\<in> set (ll ! var (high no));\n     var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> var (high no) < n \\<and>\n                      high no \\<in> set (ll ! var (high no))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from wf_ll nsll hno_in_ll   varhnos_n"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  high no \\<in> set (ll ! var (high no))\n  var (high no) < n", "have \"high no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  high no \\<in> set (ll ! var (high no))\n  var (high no) < n\n\ngoal (1 subgoal):\n 1. high no \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     high no \\<in> set (ll ! var (high no)); var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> high no \\<notin> set (ll ! n)", "apply (rule no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     high no \\<in> set (ll ! var (high no)); var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret4 ll ?var4\n 2. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     high no \\<in> set (ll ! var (high no)); var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> ?i4 < length ll\n 3. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     high no \\<in> set (ll ! var (high no)); var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> n < length ll\n 4. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     high no \\<in> set (ll ! var (high no)); var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> high no \\<in> set (ll ! ?i4)\n 5. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     high no \\<in> set (ll ! var (high no)); var (high no) < n\\<rbrakk>\n    \\<Longrightarrow> ?i4 \\<noteq> n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  high no \\<notin> set (ll ! n)", "have repb_repc_high: \"repb (high no) = repc (high no)\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  high no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb (high no) = repc (high no)", "by simp"], ["proof (state)\nthis:\n  repb (high no) = repc (high no)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with normalize_prop hno_in_Nodesn varhnos_varno varno"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  high no \\<in> Nodes n ll\n  var (high no) < var no\n  var no = n\n  repb (high no) = repc (high no)", "have high_normalize: \"var (repc (high no)) \\<le> var (high no) \\<and>\n                (\\<exists>not nort. Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n                Dag (high no) low high not \\<and> reduced nort \\<and>\n                ordered nort var \\<and> set_of nort \\<subseteq> repb `(Nodes n ll) \\<and>\n                (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt. bdt not var = Some nobdt \\<and> bdt nort var = \n                Some norbdt \\<and> nobdt \\<sim> norbdt))\"\n                (is \"?varrep_high \\<and> \n                  (\\<exists>not nort. ?repbchigh_dag nort \\<and> ?high_dag not \\<and> \n                  ?redhigh nort \\<and> ?ordhigh nort \\<and> ?rephigh_in_Nodes nort \\<and> \n                  ?repbno_no nort \\<and> ?highdd_prop not nort)\"\n                  is \"?varrep_high \\<and> ?not_nort_prop\")"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  high no \\<in> Nodes n ll\n  var (high no) < var no\n  var no = n\n  repb (high no) = repc (high no)\n\ngoal (1 subgoal):\n 1. var (repc (high no)) \\<le> var (high no) \\<and>\n    (\\<exists>not nort.\n        Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n         nort \\<and>\n        Dag (high no) low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt not var = Some nobdt \\<and>\n            bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>Nodes n ll.\n                var (repb no) \\<le> var no \\<and>\n                (\\<exists>not nort.\n                    Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                     nort \\<and>\n                    Dag no low high not \\<and>\n                    reduced nort \\<and>\n                    ordered nort var \\<and>\n                    set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                    (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                    (\\<exists>nobdt.\n                        bdt not var = Some nobdt \\<and>\n                        (\\<exists>norbdt.\n                            bdt nort var = Some norbdt \\<and>\n                            nobdt \\<sim> norbdt)));\n     high no \\<in> Nodes n ll; var (high no) < n; var no = n;\n     repb (high no) = repc (high no)\\<rbrakk>\n    \\<Longrightarrow> var (repc (high no)) \\<le> var (high no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (high no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (high no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))", "apply (erule_tac x=\"high no\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>high no \\<in> Nodes n ll; var (high no) < n; var no = n;\n     repb (high no) = repc (high no);\n     var (repb (high no)) \\<le> var (high no) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high no)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high no) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> var (repc (high no)) \\<le> var (high no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (high no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (high no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))\n 2. \\<lbrakk>high no \\<in> Nodes n ll; var (high no) < n; var no = n;\n     repb (high no) = repc (high no); high no \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc (high no)) \\<le> var (high no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (high no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (high no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))", "apply (simp del: Dag_Ref)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>high no \\<in> Nodes n ll; var (high no) < n; var no = n;\n     repb (high no) = repc (high no); high no \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc (high no)) \\<le> var (high no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (high no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (high no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repc (high no)) \\<le> var (high no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (high no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "then"], ["proof (chain)\npicking this:\n  var (repc (high no)) \\<le> var (high no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (high no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "have varrep_high: \"?varrep_high\""], ["proof (prove)\nusing this:\n  var (repc (high no)) \\<le> var (high no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (high no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. var (repc (high no)) \\<le> var (high no)", "by simp"], ["proof (state)\nthis:\n  var (repc (high no)) \\<le> var (high no)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from varhnos_n varrep_high"], ["proof (chain)\npicking this:\n  var (high no) < n\n  var (repc (high no)) \\<le> var (high no)", "have varrephno_s_n: \n                \"var (repc (high no)) < n\""], ["proof (prove)\nusing this:\n  var (high no) < n\n  var (repc (high no)) \\<le> var (high no)\n\ngoal (1 subgoal):\n 1. var (repc (high no)) < n", "by simp"], ["proof (state)\nthis:\n  var (repc (high no)) < n\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from Nodes_subset"], ["proof (chain)\npicking this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista", "have \"Nodes n ll \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. Nodes n ll \\<subseteq> Nodes (Suc n) ll", "by auto"], ["proof (state)\nthis:\n  Nodes n ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with hno_in_Nodesn repcNodes_in_Nodes"], ["proof (chain)\npicking this:\n  high no \\<in> Nodes n ll\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  Nodes n ll \\<subseteq> Nodes (Suc n) ll", "have \"repc (high no) \\<in> Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  high no \\<in> Nodes n ll\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  Nodes n ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high no) \\<in> Nodes (Suc n) ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>high no \\<in> Nodes n ll;\n     repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll;\n     Nodes n ll \\<subseteq> Nodes (Suc n) ll\\<rbrakk>\n    \\<Longrightarrow> repc (high no) \\<in> Nodes (Suc n) ll", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc (high no) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  repc (high no) \\<in> Nodes (Suc n) ll", "have \"repc (high no) \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  repc (high no) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high no) \\<in> set_of pret", "apply (simp add: wf_ll_def Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>p.\n                 p \\<in> set_of pret \\<longrightarrow>\n                 p \\<in> set (ll ! var p)) \\<and>\n             (\\<forall>k<length ll.\n                 \\<forall>p\\<in>set (ll ! k).\n                    p \\<in> set_of pret \\<and> var p = k);\n     n < length ll;\n     \\<exists>x<Suc n. repc (high no) \\<in> set (ll ! x)\\<rbrakk>\n    \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply (elim conjE exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        \\<forall>p.\n           p \\<in> set_of pret \\<longrightarrow> p \\<in> set (ll ! var p);\n        \\<forall>k<length ll.\n           \\<forall>p\\<in>set (ll ! k).\n              p \\<in> set_of pret \\<and> var p = k;\n        x < Suc n; repc (high no) \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply (thin_tac \" \\<forall>q. q \\<in> set_of pret \\<longrightarrow> q \\<in> set (ll ! var q)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        \\<forall>k<length ll.\n           \\<forall>p\\<in>set (ll ! k).\n              p \\<in> set_of pret \\<and> var p = k;\n        x < Suc n; repc (high no) \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply (erule_tac x=x in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n; repc (high no) \\<in> set (ll ! x);\n        x < length ll \\<longrightarrow>\n        (\\<forall>p\\<in>set (ll ! x).\n            p \\<in> set_of pret \\<and> var p = x)\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply (erule impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n;\n        repc (high no) \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> x < length ll\n 2. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n; repc (high no) \\<in> set (ll ! x);\n        \\<forall>p\\<in>set (ll ! x).\n           p \\<in> set_of pret \\<and> var p = x\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n; repc (high no) \\<in> set (ll ! x);\n        \\<forall>p\\<in>set (ll ! x).\n           p \\<in> set_of pret \\<and> var p = x\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply (erule_tac x=\"repc (high no)\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n; repc (high no) \\<in> set (ll ! x);\n        repc (high no) \\<in> set_of pret \\<and>\n        var (repc (high no)) = x\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret\n 2. \\<And>x.\n       \\<lbrakk>n < length ll; x < Suc n; repc (high no) \\<in> set (ll ! x);\n        repc (high no) \\<notin> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc (high no) \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll varrephno_s_n"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  var (repc (high no)) < n\n  repc (high no) \\<in> set_of pret", "have \"\\<exists> k<n. repc (high no) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  var (repc (high no)) < n\n  repc (high no) \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. repc (high no) \\<in> set (ll ! k)", "by (auto simp add: wf_ll_def)"], ["proof (state)\nthis:\n  \\<exists>k<n. repc (high no) \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<exists>k<n. repc (high no) \\<in> set (ll ! k)", "have \"repc (high no) \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<exists>k<n. repc (high no) \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. repc (high no) \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     \\<exists>k<n. repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n    \\<Longrightarrow> repc (high no) \\<notin> set (ll ! n)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<notin> set (ll ! n)", "apply (rule_tac i=k and j=n in no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> wf_ll (?pret5 k) ll (?var5 k)\n 2. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> k < length ll\n 3. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 4. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> repc (high no) \\<in> set (ll ! k)\n 5. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> repc (high no) \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> k \\<noteq> n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc (high no) \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  repc (high no) \\<notin> set (ll ! n)", "have repbchigh_idem: \"repb (repc (high no)) = repc (repc (high no))\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  repc (high no) \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb (repc (high no)) = repc (repc (high no))", "by auto"], ["proof (state)\nthis:\n  repb (repc (high no)) = repc (repc (high no))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from high_normalize"], ["proof (chain)\npicking this:\n  var (repc (high no)) \\<le> var (high no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (high no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "have not_nort_prop_high: \"?not_nort_prop\""], ["proof (prove)\nusing this:\n  var (repc (high no)) \\<le> var (high no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (high no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. \\<exists>not nort.\n       Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n        nort \\<and>\n       Dag (high no) low high not \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n       (\\<exists>nobdt norbdt.\n           bdt not var = Some nobdt \\<and>\n           bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "by (simp del: Dag_Ref)"], ["proof (state)\nthis:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from not_nort_prop_high"], ["proof (chain)\npicking this:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "obtain hnot where high_dag: \"?high_dag hnot\""], ["proof (prove)\nusing this:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. (\\<And>hnot.\n        Dag (high no) low high hnot \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Dag (high no) low high hnot\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist", "have \"\\<forall>no \\<in> Nodes n ll. no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "apply (simp add: Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<n.\n                         \\<forall>no\\<in>set (ll ! y).\n                            no \\<notin> set (ll ! n)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y no.\n       \\<lbrakk>wf_ll pret ll var; n < length ll; y < n;\n        no \\<in> set (ll ! y); no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no < length ll\n 2. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?j24 y no < length ll\n 3. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?no24 y no \\<in> set (ll ! ?i24 y no)\n 4. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no \\<noteq> ?j24 y no\n 5. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n);\n        ?no24 y no \\<notin> set (ll ! ?j24 y no)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "have \"\\<forall>no \\<in> Nodes n ll. repb no = repc no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repc no;\n        \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply (erule_tac x=no in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll;\n        no \\<notin> set (ll ! n) \\<longrightarrow>\n        repb no = repc no\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "then"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no", "have repbNodes_repcNodes: \n                \"repb `(Nodes n ll) = repc `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. repb ` Nodes n ll = repc ` Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll = repc ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll \\<subseteq> repc ` Nodes n ll\n 2. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no;\n        x \\<in> repc ` Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no; x = repc xa;\n        xa \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule_tac x=xa in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x = repb (?x28 x xa)\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> ?x28 x xa \\<in> Nodes n ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "then"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll = repc ` Nodes n ll", "have repcNodes_repbNodes: \n                \"repc `(Nodes n ll) = repb `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll = repb ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes n ll = repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from pret_dag nsll  wf_ll"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  n < length levellist\n  wf_ll pret ll var", "have null_notin_Nodesn: \"Null \\<notin> Nodes n ll\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  n < length levellist\n  wf_ll pret ll var\n\ngoal (1 subgoal):\n 1. Null \\<notin> Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; n < length levellist;\n     wf_ll pret ll var\\<rbrakk>\n    \\<Longrightarrow> Null \\<notin> Nodes n ll", "apply (rule Null_notin_Nodes)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p low high pret; n < length levellist;\n     wf_ll pret ll var\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 ?low3 ?high3 ?t3\n 2. \\<lbrakk>Dag p low high pret; n < length levellist;\n     wf_ll pret ll var\\<rbrakk>\n    \\<Longrightarrow> n \\<le> length ll\n 3. \\<lbrakk>Dag p low high pret; n < length levellist;\n     wf_ll pret ll var\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?t3 ll ?var3", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Null \\<notin> Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from hno_in_Nodesn"], ["proof (chain)\npicking this:\n  high no \\<in> Nodes n ll", "have \"repc (high no) \\<in> repc `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  high no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high no) \\<in> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  repc (high no) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbNodes_in_Nodes repcNodes_repbNodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repc ` Nodes n ll = repb ` Nodes n ll\n  repc (high no) \\<in> repc ` Nodes n ll", "have \"repc (high no) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repc ` Nodes n ll = repb ` Nodes n ll\n  repc (high no) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high no) \\<in> Nodes n ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb ` Nodes n ll \\<subseteq> Nodes n ll;\n     repc ` Nodes n ll = repb ` Nodes n ll;\n     repc (high no) \\<in> repb ` Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> repc (high no) \\<in> Nodes n ll", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc (high no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with null_notin_Nodesn"], ["proof (chain)\npicking this:\n  Null \\<notin> Nodes n ll\n  repc (high no) \\<in> Nodes n ll", "have rhn_nNull: \"repc (high no) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Null \\<notin> Nodes n ll\n  repc (high no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high no) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "(*-------------------normalize_prop fuer (low no)--------------------------*)"], ["proof (state)\nthis:\n  repc (high no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from no_in_pret nonNull lno_nNull pret_dag"], ["proof (chain)\npicking this:\n  no \\<in> set_of pret\n  no \\<noteq> Null\n  low no \\<noteq> Null\n  Dag p low high pret", "have lno_in_pret: \"low no \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  no \\<in> set_of pret\n  no \\<noteq> Null\n  low no \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. low no \\<in> set_of pret", "by (rule subelem_set_of_low)"], ["proof (state)\nthis:\n  low no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  low no \\<in> set_of pret", "have lno_in_ll: \"low no \\<in> set (ll ! (var (low no)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  low no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. low no \\<in> set (ll ! var (low no))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  low no \\<in> set (ll ! var (low no))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from pret_dag ord_pret  no_in_pret lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null", "have varlnos_varno: \"var (low no) < var no\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low no) < var no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; no \\<in> set_of pret;\n     low no \\<noteq> Null; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no", "apply (drule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered pret ?var5\n 2. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?no5 \\<in> set_of pret\n 3. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low ?no5 \\<noteq> Null\n 4. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high ?no5 \\<noteq> Null\n 5. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null;\n     ?var5 (low ?no5) < ?var5 ?no5 \\<and>\n     ?var5 (high ?no5) < ?var5 ?no5\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no", "apply assumption+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null;\n     var (low no) < var no \\<and> var (high no) < var no\\<rbrakk>\n    \\<Longrightarrow> var (low no) < var no", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) < var no\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varno"], ["proof (chain)\npicking this:\n  var no = n\n  var (low no) < var no", "have varlnos_n: \"var (low no) < n\""], ["proof (prove)\nusing this:\n  var no = n\n  var (low no) < var no\n\ngoal (1 subgoal):\n 1. var (low no) < n", "by simp"], ["proof (state)\nthis:\n  var (low no) < n\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with lno_in_ll"], ["proof (chain)\npicking this:\n  low no \\<in> set (ll ! var (low no))\n  var (low no) < n", "have lno_in_Nodesn: \"low no \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  low no \\<in> set (ll ! var (low no))\n  var (low no) < n\n\ngoal (1 subgoal):\n 1. low no \\<in> Nodes n ll", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> set (ll ! var (low no)); var (low no) < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x<n. low no \\<in> set (ll ! x)", "apply (rule_tac x=\"var (low no)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> set (ll ! var (low no)); var (low no) < n\\<rbrakk>\n    \\<Longrightarrow> var (low no) < n \\<and>\n                      low no \\<in> set (ll ! var (low no))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from varlnos_n wf_ll nsll lno_in_ll"], ["proof (chain)\npicking this:\n  var (low no) < n\n  wf_ll pret ll var\n  n < length levellist\n  low no \\<in> set (ll ! var (low no))", "have \"low no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  var (low no) < n\n  wf_ll pret ll var\n  n < length levellist\n  low no \\<in> set (ll ! var (low no))\n\ngoal (1 subgoal):\n 1. low no \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>var (low no) < n; wf_ll pret ll var; n < length levellist;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> low no \\<notin> set (ll ! n)", "apply (rule no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>var (low no) < n; wf_ll pret ll var; n < length levellist;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret4 ll ?var4\n 2. \\<lbrakk>var (low no) < n; wf_ll pret ll var; n < length levellist;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> ?i4 < length ll\n 3. \\<lbrakk>var (low no) < n; wf_ll pret ll var; n < length levellist;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> n < length ll\n 4. \\<lbrakk>var (low no) < n; wf_ll pret ll var; n < length levellist;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> low no \\<in> set (ll ! ?i4)\n 5. \\<lbrakk>var (low no) < n; wf_ll pret ll var; n < length levellist;\n     low no \\<in> set (ll ! var (low no))\\<rbrakk>\n    \\<Longrightarrow> ?i4 \\<noteq> n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  low no \\<notin> set (ll ! n)", "have repb_repc_low: \"repb (low no) = repc (low no)\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  low no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb (low no) = repc (low no)", "by simp"], ["proof (state)\nthis:\n  repb (low no) = repc (low no)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with normalize_prop lno_in_Nodesn varlnos_varno varno"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  low no \\<in> Nodes n ll\n  var (low no) < var no\n  var no = n\n  repb (low no) = repc (low no)", "have low_normalize: \"var (repc (low no)) \\<le> var (low no) \\<and>\n                (\\<exists>not nort. Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n                Dag (low no) low high not \\<and> reduced nort \\<and> ordered nort var \\<and>\n                set_of nort \\<subseteq> repb `(Nodes n ll) \\<and>\n                (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt. bdt not var = Some nobdt \\<and> bdt nort var = Some norbdt \\<and> \n                nobdt \\<sim> norbdt))\"\n                (is \"?varrep_low \\<and> \n                  (\\<exists>not nort. ?repbclow_dag nort \\<and> ?low_dag not \\<and> ?redhigh nort \\<and> \n                  ?ordhigh nort \\<and> ?replow_in_Nodes nort  \\<and> ?low_repno_no nort \n                  \\<and> ?lowdd_prop not nort)\"\n                  is \"?varrep_low \\<and> ?not_nort_prop_low\")"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  low no \\<in> Nodes n ll\n  var (low no) < var no\n  var no = n\n  repb (low no) = repc (low no)\n\ngoal (1 subgoal):\n 1. var (repc (low no)) \\<le> var (low no) \\<and>\n    (\\<exists>not nort.\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         nort \\<and>\n        Dag (low no) low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt not var = Some nobdt \\<and>\n            bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>Nodes n ll.\n                var (repb no) \\<le> var no \\<and>\n                (\\<exists>not nort.\n                    Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                     nort \\<and>\n                    Dag no low high not \\<and>\n                    reduced nort \\<and>\n                    ordered nort var \\<and>\n                    set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                    (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                    (\\<exists>nobdt.\n                        bdt not var = Some nobdt \\<and>\n                        (\\<exists>norbdt.\n                            bdt nort var = Some norbdt \\<and>\n                            nobdt \\<sim> norbdt)));\n     low no \\<in> Nodes n ll; var (low no) < n; var no = n;\n     repb (low no) = repc (low no)\\<rbrakk>\n    \\<Longrightarrow> var (repc (low no)) \\<le> var (low no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (low no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (low no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))", "apply (erule_tac x=\"low no\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>low no \\<in> Nodes n ll; var (low no) < n; var no = n;\n     repb (low no) = repc (low no);\n     var (repb (low no)) \\<le> var (low no) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (low no) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> var (repc (low no)) \\<le> var (low no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (low no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (low no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))\n 2. \\<lbrakk>low no \\<in> Nodes n ll; var (low no) < n; var no = n;\n     repb (low no) = repc (low no); low no \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc (low no)) \\<le> var (low no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (low no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (low no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))", "apply (simp del: Dag_Ref)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<in> Nodes n ll; var (low no) < n; var no = n;\n     repb (low no) = repc (low no); low no \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc (low no)) \\<le> var (low no) \\<and>\n                      (\\<exists>not nort.\n                          Dag (repc (low no)) (repb \\<propto> low)\n                           (repb \\<propto> high) nort \\<and>\n                          Dag (low no) low high not \\<and>\n                          reduced nort \\<and>\n                          ordered nort var \\<and>\n                          set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                          (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                          (\\<exists>nobdt.\n                              bdt not var = Some nobdt \\<and>\n                              (\\<exists>norbdt.\n                                  bdt nort var = Some norbdt \\<and>\n                                  nobdt \\<sim> norbdt)))", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repc (low no)) \\<le> var (low no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (low no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "then"], ["proof (chain)\npicking this:\n  var (repc (low no)) \\<le> var (low no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (low no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "have varrep_low: \"?varrep_low\""], ["proof (prove)\nusing this:\n  var (repc (low no)) \\<le> var (low no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (low no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. var (repc (low no)) \\<le> var (low no)", "by simp"], ["proof (state)\nthis:\n  var (repc (low no)) \\<le> var (low no)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from low_normalize"], ["proof (chain)\npicking this:\n  var (repc (low no)) \\<le> var (low no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (low no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "have not_nort_prop_low: \"?not_nort_prop_low\""], ["proof (prove)\nusing this:\n  var (repc (low no)) \\<le> var (low no) \\<and>\n  (\\<exists>not nort.\n      Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n       nort \\<and>\n      Dag (low no) low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n      (\\<exists>nobdt norbdt.\n          bdt not var = Some nobdt \\<and>\n          bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. \\<exists>not nort.\n       Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n        nort \\<and>\n       Dag (low no) low high not \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n       (\\<exists>nobdt norbdt.\n           bdt not var = Some nobdt \\<and>\n           bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "by (simp del: Dag_Ref)"], ["proof (state)\nthis:\n  \\<exists>not nort.\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (low no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from lno_in_Nodesn"], ["proof (chain)\npicking this:\n  low no \\<in> Nodes n ll", "have \"repc (low no) \\<in> repc `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  low no \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low no) \\<in> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  repc (low no) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repbNodes_in_Nodes repcNodes_repbNodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repc ` Nodes n ll = repb ` Nodes n ll\n  repc (low no) \\<in> repc ` Nodes n ll", "have \"repc (low no) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repc ` Nodes n ll = repb ` Nodes n ll\n  repc (low no) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low no) \\<in> Nodes n ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb ` Nodes n ll \\<subseteq> Nodes n ll;\n     repc ` Nodes n ll = repb ` Nodes n ll;\n     repc (low no) \\<in> repb ` Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> repc (low no) \\<in> Nodes n ll", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc (low no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with null_notin_Nodesn"], ["proof (chain)\npicking this:\n  Null \\<notin> Nodes n ll\n  repc (low no) \\<in> Nodes n ll", "have rln_nNull: \"repc (low no) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Null \\<notin> Nodes n ll\n  repc (low no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (low no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "proof (cases \"repc (low no) = repc (high no)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. repc (low no) = repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "case True"], ["proof (state)\nthis:\n  repc (low no) = repc (high no)\n\ngoal (2 subgoals):\n 1. repc (low no) = repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "note red_case=this"], ["proof (state)\nthis:\n  repc (low no) = repc (high no)\n\ngoal (2 subgoals):\n 1. repc (low no) = repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repreduce lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n  low no \\<noteq> Null \\<longrightarrow>\n  repc no = (repc \\<propto> high) no\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repc (low no) = repc (high no)", "have rno_eq_hrno: \"repc no = repc (high no)\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n  low no \\<noteq> Null \\<longrightarrow>\n  repc no = (repc \\<propto> high) no\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repc (low no) = repc (high no)\n\ngoal (1 subgoal):\n 1. repc no = repc (high no)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repc no = repc (high no)\n\ngoal (2 subgoals):\n 1. repc (low no) = repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from varhnos_varno rno_eq_hrno varrep_high"], ["proof (chain)\npicking this:\n  var (high no) < var no\n  repc no = repc (high no)\n  var (repc (high no)) \\<le> var (high no)", "have varrep: \"?varrep\""], ["proof (prove)\nusing this:\n  var (high no) < var no\n  repc no = repc (high no)\n  var (repc (high no)) \\<le> var (high no)\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no\n\ngoal (2 subgoals):\n 1. repc (low no) = repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from not_nort_prop_high not_nort_prop_low"], ["proof (chain)\npicking this:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n  \\<exists>not nort.\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (low no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "have repcn_prop: \"?repcn_prop\""], ["proof (prove)\nusing this:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n  \\<exists>not nort.\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (low no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. \\<exists>not nort.\n       Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n       Dag no low high not \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n       (\\<exists>nobdt.\n           bdt not var = Some nobdt \\<and>\n           (\\<exists>norbdt.\n               bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>not nort.\n                Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) nort \\<and>\n                Dag (high no) low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt not var = Some nobdt \\<and>\n                    bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n     \\<exists>not nort.\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         nort \\<and>\n        Dag (low no) low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt not var = Some nobdt \\<and>\n            bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>not nort.\n                         Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) nort \\<and>\n                         Dag no low high not \\<and>\n                         reduced nort \\<and>\n                         ordered nort var \\<and>\n                         set_of nort\n                         \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n                         (\\<exists>nobdt.\n                             bdt not var = Some nobdt \\<and>\n                             (\\<exists>norbdt.\n                                 bdt nort var = Some norbdt \\<and>\n                                 nobdt \\<sim> norbdt))", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>not nota nort norta.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) nort \\<and>\n                Dag (high no) low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt not var = Some nobdt \\<and>\n                    bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         norta \\<and>\n        Dag (low no) low high nota \\<and>\n        reduced norta \\<and>\n        ordered norta var \\<and>\n        set_of norta \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of norta. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt nota var = Some nobdt \\<and>\n            bdt norta var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>not nort.\n                            Dag (repc no) (repc \\<propto> low)\n                             (repc \\<propto> high) nort \\<and>\n                            Dag no low high not \\<and>\n                            reduced nort \\<and>\n                            ordered nort var \\<and>\n                            set_of nort\n                            \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                            (\\<forall>no\\<in>set_of nort.\n                                repc no = no) \\<and>\n                            (\\<exists>nobdt.\n                                bdt not var = Some nobdt \\<and>\n                                (\\<exists>norbdt.\n                                    bdt nort var = Some norbdt \\<and>\n                                    nobdt \\<sim> norbdt))", "apply (rename_tac rnot lnot rnort lnort )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort \\<and>\n                Dag (high no) low high rnot \\<and>\n                reduced rnort \\<and>\n                ordered rnort var \\<and>\n                set_of rnort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of rnort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt rnot var = Some nobdt \\<and>\n                    bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort \\<and>\n        Dag (low no) low high lnot \\<and>\n        reduced lnort \\<and>\n        ordered lnort var \\<and>\n        set_of lnort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of lnort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>not nort.\n                            Dag (repc no) (repc \\<propto> low)\n                             (repc \\<propto> high) nort \\<and>\n                            Dag no low high not \\<and>\n                            reduced nort \\<and>\n                            ordered nort var \\<and>\n                            set_of nort\n                            \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                            (\\<forall>no\\<in>set_of nort.\n                                repc no = no) \\<and>\n                            (\\<exists>nobdt.\n                                bdt not var = Some nobdt \\<and>\n                                (\\<exists>norbdt.\n                                    bdt nort var = Some norbdt \\<and>\n                                    nobdt \\<sim> norbdt))", "apply (rule_tac x=\"(Node lnot no rnot)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort \\<and>\n                Dag (high no) low high rnot \\<and>\n                reduced rnort \\<and>\n                ordered rnort var \\<and>\n                set_of rnort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of rnort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt rnot var = Some nobdt \\<and>\n                    bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort \\<and>\n        Dag (low no) low high lnot \\<and>\n        reduced lnort \\<and>\n        ordered lnort var \\<and>\n        set_of lnort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of lnort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nort.\n                            Dag (repc no) (repc \\<propto> low)\n                             (repc \\<propto> high) nort \\<and>\n                            Dag no low high (Node lnot no rnot) \\<and>\n                            reduced nort \\<and>\n                            ordered nort var \\<and>\n                            set_of nort\n                            \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                            (\\<forall>no\\<in>set_of nort.\n                                repc no = no) \\<and>\n                            (\\<exists>nobdt.\n                                bdt (Node lnot no rnot) var =\n                                Some nobdt \\<and>\n                                (\\<exists>norbdt.\n                                    bdt nort var = Some norbdt \\<and>\n                                    nobdt \\<sim> norbdt))", "apply (rule_tac x=rnort in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort \\<and>\n                Dag (high no) low high rnot \\<and>\n                reduced rnort \\<and>\n                ordered rnort var \\<and>\n                set_of rnort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of rnort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt rnot var = Some nobdt \\<and>\n                    bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort \\<and>\n        Dag (low no) low high lnot \\<and>\n        reduced lnort \\<and>\n        ordered lnort var \\<and>\n        set_of lnort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of lnort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort \\<and>\n                         Dag no low high (Node lnot no rnot) \\<and>\n                         reduced rnort \\<and>\n                         ordered rnort var \\<and>\n                         set_of rnort\n                         \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>set_of rnort. repc no = no) \\<and>\n                         (\\<exists>nobdt.\n                             bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                             (\\<exists>norbdt.\n                                 bdt rnort var = Some norbdt \\<and>\n                                 nobdt \\<sim> norbdt))", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort \\<and>\n                         Dag no low high (Node lnot no rnot) \\<and>\n                         reduced rnort \\<and>\n                         ordered rnort var \\<and>\n                         set_of rnort\n                         \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>set_of rnort. repc no = no) \\<and>\n                         (\\<exists>nobdt.\n                             bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                             (\\<exists>norbdt.\n                                 bdt rnort var = Some norbdt \\<and>\n                                 nobdt \\<sim> norbdt))", "apply (intro conjI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)", "prefer 7"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (elim exE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort nobdt nobdta norbdt norbdta.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some nobdt \\<and>\n        bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        bdt lnot var = Some nobdta \\<and>\n        bdt lnort var = Some norbdta \\<and> nobdta \\<sim> norbdta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (rename_tac rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt \\<and>\n        bdt rnort var = Some rnorbdt \\<and> rnobdt \\<sim> rnorbdt;\n        bdt lnot var = Some lnobdt \\<and>\n        bdt lnort var = Some lnorbdt \\<and> lnobdt \\<sim> lnorbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (elim conjE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (case_tac  \"Suc 0 < var no\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (rule_tac x=\"(Bdt_Node lnobdt (var no) rnobdt)\" in exI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt) \\<and>\n                         (\\<exists>norbdt.\n                             bdt rnort var = Some norbdt \\<and>\n                             Bdt_Node lnobdt (var no) rnobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (rule conjI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>norbdt.\n                            bdt rnort var = Some norbdt \\<and>\n                            Bdt_Node lnobdt (var no) rnobdt \\<sim> norbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "prefer 2"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>norbdt.\n                            bdt rnort var = Some norbdt \\<and>\n                            Bdt_Node lnobdt (var no) rnobdt \\<sim> norbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (rule_tac x=rnorbdt in exI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt \\<and>\n                         Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "apply (rule conjI)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "proof -"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume highnort_dag: \n                    \"Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (state)\nthis:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume ord_nort: \" ordered rnort var\""], ["proof (state)\nthis:\n  ordered rnort var\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnort_in_repNodes: \" set_of rnort \\<subseteq>  repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from rnort_in_repNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have nort_in_Nodes: \"set_of rnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from varhnos_n varrep_high"], ["proof (chain)\npicking this:\n  var (high no) < n\n  var (repc (high no)) \\<le> var (high no)", "have vrhnos_n: \"var (repc (high no)) < n\""], ["proof (prove)\nusing this:\n  var (high no) < n\n  var (repc (high no)) \\<le> var (high no)\n\ngoal (1 subgoal):\n 1. var (repc (high no)) < n", "by simp"], ["proof (state)\nthis:\n  var (repc (high no)) < n\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from rhn_nNull highnort_dag"], ["proof (chain)\npicking this:\n  repc (high no) \\<noteq> Null\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "have \"\\<exists>lno rno. rnort = Node lno (repc (high no)) rno\""], ["proof (prove)\nusing this:\n  repc (high no) \\<noteq> Null\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (1 subgoal):\n 1. \\<exists>lno rno. rnort = Node lno (repc (high no)) rno", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>lno rno. rnort = Node lno (repc (high no)) rno\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with highnort_dag rhn_nNull"], ["proof (chain)\npicking this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  repc (high no) \\<noteq> Null\n  \\<exists>lno rno. rnort = Node lno (repc (high no)) rno", "have \"root rnort = repc (high no)\""], ["proof (prove)\nusing this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  repc (high no) \\<noteq> Null\n  \\<exists>lno rno. rnort = Node lno (repc (high no)) rno\n\ngoal (1 subgoal):\n 1. root rnort = repc (high no)", "by auto"], ["proof (state)\nthis:\n  root rnort = repc (high no)\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with ord_nort"], ["proof (chain)\npicking this:\n  ordered rnort var\n  root rnort = repc (high no)", "have \"\\<forall>x \\<in> set_of rnort. var x <= var (repc (high no))\""], ["proof (prove)\nusing this:\n  ordered rnort var\n  root rnort = repc (high no)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. var x \\<le> var (repc (high no))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ordered rnort var; root rnort = repc (high no)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         var x \\<le> var (repc (high no))", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>ordered rnort var; root rnort = repc (high no);\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> var x \\<le> var (repc (high no))", "apply (drule ordered_set_of)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>root rnort = repc (high no); x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> ?x4 x \\<in> set_of rnort\n 2. \\<And>x.\n       \\<lbrakk>root rnort = repc (high no); x \\<in> set_of rnort;\n        var (?x4 x) \\<le> var (root rnort)\\<rbrakk>\n       \\<Longrightarrow> var x \\<le> var (repc (high no))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. var x \\<le> var (repc (high no))\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with vrhnos_n"], ["proof (chain)\npicking this:\n  var (repc (high no)) < n\n  \\<forall>x\\<in>set_of rnort. var x \\<le> var (repc (high no))", "have vxsn: \"\\<forall>x \\<in> set_of rnort. var x < n\""], ["proof (prove)\nusing this:\n  var (repc (high no)) < n\n  \\<forall>x\\<in>set_of rnort. var x \\<le> var (repc (high no))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. var x < n", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. var x < n\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from nort_in_Nodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> Nodes n ll", "have \"\\<forall>x \\<in> set_of rnort. x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll", "have x_in_pret: \"\\<forall>x \\<in> set_of rnort. x \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_of pret", "apply (drule wf_ll_Nodes_pret)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> ?nb5 x < length ll\n 2. \\<And>x.\n       \\<lbrakk>n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> ?x5 x \\<in> Nodes (?nb5 x) ll\n 3. \\<And>x.\n       \\<lbrakk>n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort;\n        ?x5 x \\<in> set_of pret \\<and> var (?x5 x) < ?nb5 x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_of pret", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from vxsn x_in_pret"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set_of rnort. var x < n\n  \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret", "have vxsn_in_nort: \"\\<forall>x \\<in> set_of rnort. var x <n \\<and> x \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set_of rnort. var x < n\n  \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. var x < n \\<and> x \\<in> set_of pret", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. var x < n \\<and> x \\<in> set_of pret\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with pret_dag prebdt_pret highnort_dag ord_pret wf_ll  nsll \n                    repbc_nc"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of rnort. var x < n \\<and> x \\<in> set_of pret", "have \"\\<forall>x \\<in> set_of rnort. (repc \\<propto> low) x = (repb \\<propto> low) x \\<and> \n                    (repc \\<propto> high) x = (repb \\<propto> high) x\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of rnort. var x < n \\<and> x \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply (rule nort_null_comp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 low high ?pret8\n 2. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> bdt ?pret8 ?var8 = Some ?prebdt8\n 3. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag (repc ?no8) (repb \\<propto> low)\n                       (repb \\<propto> high) rnort\n 4. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ordered ?pret8 ?var8\n 5. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret8 ?levellistb8 ?var8\n 6. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ?nb8 < length ?levellistb8\n 7. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>nt.\n                         nt \\<notin> set\n(?levellistb8 ! ?nb8) \\<longrightarrow>\n                         repb nt = repc nt\n 8. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        var x < n \\<and> x \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         ?var8 x < ?nb8 \\<and> x \\<in> set_of ?pret8", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with rno_eq_hrno"], ["proof (chain)\npicking this:\n  repc no = repc (high no)\n  \\<forall>x\\<in>set_of rnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x", "have \"Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort = \n                    Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (prove)\nusing this:\n  repc no = repc (high no)\n  \\<forall>x\\<in>set_of rnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort =\n    Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) rnort", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repc no = repc (high no);\n     \\<forall>x\\<in>set_of rnort.\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n    \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                       (repc \\<propto> high) rnort =\n                      Dag (repc no) (repb \\<propto> low)\n                       (repb \\<propto> high) rnort", "apply (rule heaps_eq_Dag_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repc no = repc (high no);\n     \\<forall>x\\<in>set_of rnort.\n        (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n        (repc \\<propto> high) x = (repb \\<propto> high) x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort =\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with highnort_dag rno_eq_hrno"], ["proof (chain)\npicking this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  repc no = repc (high no)\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort =\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) rnort", "show \"Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort\""], ["proof (prove)\nusing this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  repc no = repc (high no)\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort =\n  Dag (repc no) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort", "by simp"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) rnort\n\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnot_dag: \"Dag (low no) low high lnot\""], ["proof (state)\nthis:\n  Dag (low no) low high lnot\n\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnot_dag: \"Dag (high no) low high rnot\""], ["proof (state)\nthis:\n  Dag (high no) low high rnot\n\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with lnot_dag   nonNull"], ["proof (chain)\npicking this:\n  Dag (low no) low high lnot\n  no \\<noteq> Null\n  Dag (high no) low high rnot", "show \"Dag no low high (Node lnot no rnot)\""], ["proof (prove)\nusing this:\n  Dag (low no) low high lnot\n  no \\<noteq> Null\n  Dag (high no) low high rnot\n\ngoal (1 subgoal):\n 1. Dag no low high (Node lnot no rnot)", "by simp"], ["proof (state)\nthis:\n  Dag no low high (Node lnot no rnot)\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume \" reduced rnort\""], ["proof (state)\nthis:\n  reduced rnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced rnort\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "then"], ["proof (chain)\npicking this:\n  reduced rnort", "show \"reduced rnort\""], ["proof (prove)\nusing this:\n  reduced rnort\n\ngoal (1 subgoal):\n 1. reduced rnort", "by simp"], ["proof (state)\nthis:\n  reduced rnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnort"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume \"ordered rnort var\""], ["proof (state)\nthis:\n  ordered rnort var\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered rnort var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "then"], ["proof (chain)\npicking this:\n  ordered rnort var", "show \"ordered rnort var\""], ["proof (prove)\nusing this:\n  ordered rnort var\n\ngoal (1 subgoal):\n 1. ordered rnort var", "by simp"], ["proof (state)\nthis:\n  ordered rnort var\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnort"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnort_in_Nodes: \" set_of rnort \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "have \"Nodes n ll \\<subseteq> Nodes (n + 1) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nodes n ll \\<subseteq> Nodes (n + 1) ll", "by (simp add: Nodes_def set_split)"], ["proof (state)\nthis:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "then"], ["proof (chain)\npicking this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll", "have \"repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\""], ["proof (prove)\nusing this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with rnort_in_Nodes repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll", "show \" set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnort rnorbdt"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume \" bdt rnort var = Some rnorbdt\""], ["proof (state)\nthis:\n  bdt rnort var = Some rnorbdt\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt rnort var = Some rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "then"], ["proof (chain)\npicking this:\n  bdt rnort var = Some rnorbdt", "show \" bdt rnort var = Some rnorbdt\""], ["proof (prove)\nusing this:\n  bdt rnort var = Some rnorbdt\n\ngoal (1 subgoal):\n 1. bdt rnort var = Some rnorbdt", "by simp"], ["proof (state)\nthis:\n  bdt rnort var = Some rnorbdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rcongeval: \"rnobdt \\<sim> rnorbdt\""], ["proof (state)\nthis:\n  rnobdt \\<sim> rnorbdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnort_dag: \n                    \"Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\""], ["proof (state)\nthis:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnort_dag: \n                    \"Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (state)\nthis:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnorbdt_def: \" bdt lnort var = Some lnorbdt\""], ["proof (state)\nthis:\n  bdt lnort var = Some lnorbdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnorbdt_def: \" bdt rnort var = Some rnorbdt\""], ["proof (state)\nthis:\n  bdt rnort var = Some rnorbdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lcongeval:\"lnobdt \\<sim> lnorbdt\""], ["proof (state)\nthis:\n  lnobdt \\<sim> lnorbdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from red_case lnort_dag rnort_dag"], ["proof (chain)\npicking this:\n  repc (low no) = repc (high no)\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "have lnort_rnort: \"lnort = rnort\""], ["proof (prove)\nusing this:\n  repc (low no) = repc (high no)\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (1 subgoal):\n 1. lnort = rnort", "by (simp add: Dag_unique del: Dag_Ref)"], ["proof (state)\nthis:\n  lnort = rnort\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with lnorbdt_def lcongeval rnorbdt_def"], ["proof (chain)\npicking this:\n  bdt lnort var = Some lnorbdt\n  lnobdt \\<sim> lnorbdt\n  bdt rnort var = Some rnorbdt\n  lnort = rnort", "have lnobdt_rnorbdt: \"lnobdt \\<sim> rnorbdt\""], ["proof (prove)\nusing this:\n  bdt lnort var = Some lnorbdt\n  lnobdt \\<sim> lnorbdt\n  bdt rnort var = Some rnorbdt\n  lnort = rnort\n\ngoal (1 subgoal):\n 1. lnobdt \\<sim> rnorbdt", "by simp"], ["proof (state)\nthis:\n  lnobdt \\<sim> rnorbdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with rcongeval"], ["proof (chain)\npicking this:\n  rnobdt \\<sim> rnorbdt\n  lnobdt \\<sim> rnorbdt", "have \"lnobdt \\<sim> rnobdt\""], ["proof (prove)\nusing this:\n  rnobdt \\<sim> rnorbdt\n  lnobdt \\<sim> rnorbdt\n\ngoal (1 subgoal):\n 1. lnobdt \\<sim> rnobdt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rnobdt \\<sim> rnorbdt; lnobdt \\<sim> rnorbdt\\<rbrakk>\n    \\<Longrightarrow> lnobdt \\<sim> rnobdt", "apply (rule cong_eval_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>rnobdt \\<sim> rnorbdt; lnobdt \\<sim> rnorbdt\\<rbrakk>\n    \\<Longrightarrow> lnobdt \\<sim> ?r2\n 2. \\<lbrakk>rnobdt \\<sim> rnorbdt; lnobdt \\<sim> rnorbdt\\<rbrakk>\n    \\<Longrightarrow> ?r2 \\<sim> rnobdt", "apply (auto simp add: cong_eval_sym)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  lnobdt \\<sim> rnobdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "then"], ["proof (chain)\npicking this:\n  lnobdt \\<sim> rnobdt", "have \" Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt\""], ["proof (prove)\nusing this:\n  lnobdt \\<sim> rnobdt\n\ngoal (1 subgoal):\n 1. Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnobdt \\<sim> rnobdt \\<Longrightarrow>\n    Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt", "apply (simp add: cong_eval_sym [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnobdt \\<sim> rnobdt \\<Longrightarrow>\n    rnobdt \\<sim> Bdt_Node lnobdt (var no) rnobdt", "apply (rule cong_eval_child_high)"], ["proof (prove)\ngoal (1 subgoal):\n 1. lnobdt \\<sim> rnobdt \\<Longrightarrow> lnobdt \\<sim> rnobdt", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with rcongeval"], ["proof (chain)\npicking this:\n  rnobdt \\<sim> rnorbdt\n  Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt", "show \"Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\""], ["proof (prove)\nusing this:\n  rnobdt \\<sim> rnorbdt\n  Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt\n\ngoal (1 subgoal):\n 1. Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rnobdt \\<sim> rnorbdt;\n     Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt\\<rbrakk>\n    \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt", "apply (rotate_tac 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt;\n     rnobdt \\<sim> rnorbdt\\<rbrakk>\n    \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt", "apply (rule cong_eval_trans)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt;\n     rnobdt \\<sim> rnorbdt\\<rbrakk>\n    \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim> ?r2\n 2. \\<lbrakk>Bdt_Node lnobdt (var no) rnobdt \\<sim> rnobdt;\n     rnobdt \\<sim> rnorbdt\\<rbrakk>\n    \\<Longrightarrow> ?r2 \\<sim> rnorbdt", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Bdt_Node lnobdt (var no) rnobdt \\<sim> rnorbdt\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix lnot rnot lnobdt rnobdt"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnot_dag: \"Dag (low no) low high lnot\""], ["proof (state)\nthis:\n  Dag (low no) low high lnot\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnot_dag: \" Dag (high no) low high rnot\""], ["proof (state)\nthis:\n  Dag (high no) low high rnot\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnobdt_def: \" bdt lnot var = Some lnobdt\""], ["proof (state)\nthis:\n  bdt lnot var = Some lnobdt\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnobdt_def: \" bdt rnot var = Some rnobdt\""], ["proof (state)\nthis:\n  bdt rnot var = Some rnobdt\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume onesvarno: \" Suc 0 < var no\""], ["proof (state)\nthis:\n  Suc 0 < var no\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "with rnobdt_def lnot_dag rnot_dag lnobdt_def"], ["proof (chain)\npicking this:\n  bdt rnot var = Some rnobdt\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  bdt lnot var = Some lnobdt\n  Suc 0 < var no", "show \"bdt (Node lnot no rnot) var = \n                    Some (Bdt_Node lnobdt (var no) rnobdt)\""], ["proof (prove)\nusing this:\n  bdt rnot var = Some rnobdt\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  bdt lnot var = Some lnobdt\n  Suc 0 < var no\n\ngoal (1 subgoal):\n 1. bdt (Node lnot no rnot) var = Some (Bdt_Node lnobdt (var no) rnobdt)", "by simp"], ["proof (state)\nthis:\n  bdt (Node lnot no rnot) var = Some (Bdt_Node lnobdt (var no) rnobdt)\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnobdt_def: \" bdt lnot var = Some lnobdt\""], ["proof (state)\nthis:\n  bdt lnot var = Some lnobdt\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnobdt_def: \" bdt rnot var = Some rnobdt\""], ["proof (state)\nthis:\n  bdt rnot var = Some rnobdt\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnorbdt_def: \" bdt rnort var = Some rnorbdt\""], ["proof (state)\nthis:\n  bdt rnort var = Some rnorbdt\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume cong_rno_rnor: \" rnobdt \\<sim> rnorbdt\""], ["proof (state)\nthis:\n  rnobdt \\<sim> rnorbdt\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume lnot_dag: \"Dag (low no) low high lnot\""], ["proof (state)\nthis:\n  Dag (low no) low high lnot\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnot_dag: \"Dag (high no) low high rnot\""], ["proof (state)\nthis:\n  Dag (high no) low high rnot\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume \"\\<not> Suc 0 < var no\""], ["proof (state)\nthis:\n  \\<not> Suc 0 < var no\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "then"], ["proof (chain)\npicking this:\n  \\<not> Suc 0 < var no", "have varnoseq1: \"var no = 0 \\<or> var no = 1\""], ["proof (prove)\nusing this:\n  \\<not> Suc 0 < var no\n\ngoal (1 subgoal):\n 1. var no = 0 \\<or> var no = 1", "by auto"], ["proof (state)\nthis:\n  var no = 0 \\<or> var no = 1\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt rnort var = Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "show \"\\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt \\<and> \n                    (\\<exists>norbdt. bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "proof (cases \"var no = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "case True"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "note vnoNull=this"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with pret_dag ord_pret no_in_pret lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 0\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; no \\<in> set_of pret;\n     low no \\<noteq> Null; high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nobdt.\n                         bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                         (\\<exists>norbdt.\n                             bdt rnort var = Some norbdt \\<and>\n                             nobdt \\<sim> norbdt)", "apply (drule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> ordered pret ?var6\n 2. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> ?no6 \\<in> set_of pret\n 3. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> low ?no6 \\<noteq> Null\n 4. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> high ?no6 \\<noteq> Null\n 5. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0;\n     ?var6 (low ?no6) < ?var6 ?no6 \\<and>\n     ?var6 (high ?no6) < ?var6 ?no6\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nobdt.\n                         bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                         (\\<exists>norbdt.\n                             bdt rnort var = Some norbdt \\<and>\n                             nobdt \\<sim> norbdt)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node lnot no rnot) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "assume \"var no \\<noteq> 0\""], ["proof (state)\nthis:\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with varnoseq1"], ["proof (chain)\npicking this:\n  var no = 0 \\<or> var no = 1\n  var no \\<noteq> 0", "have vnoOne: \"var no = 1\""], ["proof (prove)\nusing this:\n  var no = 0 \\<or> var no = 1\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no = 1", "by simp"], ["proof (state)\nthis:\n  var no = 1\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from pret_dag  ord_pret no_in_pret lno_nNull hno_nNull  \n                      vnoOne"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 1", "have vlvrNull: \"var (low no) = 0 \\<and> var (high no) = 0\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 1\n\ngoal (1 subgoal):\n 1. var (low no) = 0 \\<and> var (high no) = 0", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; no \\<in> set_of pret;\n     low no \\<noteq> Null; high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> var (low no) = 0 \\<and> var (high no) = 0", "apply (drule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> ordered pret ?var6\n 2. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> ?no6 \\<in> set_of pret\n 3. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> low ?no6 \\<noteq> Null\n 4. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> high ?no6 \\<noteq> Null\n 5. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1;\n     ?var6 (low ?no6) < ?var6 ?no6 \\<and>\n     ?var6 (high ?no6) < ?var6 ?no6\\<rbrakk>\n    \\<Longrightarrow> var (low no) = 0 \\<and> var (high no) = 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) = 0 \\<and> var (high no) = 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  var (low no) = 0 \\<and> var (high no) = 0", "have vlNull: \"var (low no) = 0\""], ["proof (prove)\nusing this:\n  var (low no) = 0 \\<and> var (high no) = 0\n\ngoal (1 subgoal):\n 1. var (low no) = 0", "by simp"], ["proof (state)\nthis:\n  var (low no) = 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from vlvrNull"], ["proof (chain)\npicking this:\n  var (low no) = 0 \\<and> var (high no) = 0", "have vrNull: \"var (high no) = 0\""], ["proof (prove)\nusing this:\n  var (low no) = 0 \\<and> var (high no) = 0\n\ngoal (1 subgoal):\n 1. var (high no) = 0", "by simp"], ["proof (state)\nthis:\n  var (high no) = 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from lnobdt_def lnot_dag vlNull  lno_nNull"], ["proof (chain)\npicking this:\n  bdt lnot var = Some lnobdt\n  Dag (low no) low high lnot\n  var (low no) = 0\n  low no \\<noteq> Null", "have lnobdt_Zero: \"lnobdt = Zero\""], ["proof (prove)\nusing this:\n  bdt lnot var = Some lnobdt\n  Dag (low no) low high lnot\n  var (low no) = 0\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. lnobdt = Zero", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt lnot var = Some lnobdt; Dag (low no) low high lnot;\n     var (low no) = 0; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> lnobdt = Zero", "apply (drule bdt_Some_var0_Zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (low no) low high lnot; var (low no) = 0;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (root lnot) = 0\n 2. \\<lbrakk>Dag (low no) low high lnot; var (low no) = 0;\n     low no \\<noteq> Null;\n     lnobdt = Zero \\<and> lnot = Node Tip (root lnot) Tip\\<rbrakk>\n    \\<Longrightarrow> lnobdt = Zero", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  lnobdt = Zero\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from rnobdt_def rnot_dag vrNull  hno_nNull"], ["proof (chain)\npicking this:\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0\n  high no \\<noteq> Null", "have rnobdt_Zero: \"rnobdt = Zero\""], ["proof (prove)\nusing this:\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rnobdt = Zero", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt rnot var = Some rnobdt; Dag (high no) low high rnot;\n     var (high no) = 0; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> rnobdt = Zero", "apply (drule bdt_Some_var0_Zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (high no) low high rnot; var (high no) = 0;\n     high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (root rnot) = 0\n 2. \\<lbrakk>Dag (high no) low high rnot; var (high no) = 0;\n     high no \\<noteq> Null;\n     rnobdt = Zero \\<and> rnot = Node Tip (root rnot) Tip\\<rbrakk>\n    \\<Longrightarrow> rnobdt = Zero", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rnobdt = Zero\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from lnobdt_Zero lnobdt_def"], ["proof (chain)\npicking this:\n  lnobdt = Zero\n  bdt lnot var = Some lnobdt", "have \"bdt lnot var = Some Zero\""], ["proof (prove)\nusing this:\n  lnobdt = Zero\n  bdt lnot var = Some lnobdt\n\ngoal (1 subgoal):\n 1. bdt lnot var = Some Zero", "by simp"], ["proof (state)\nthis:\n  bdt lnot var = Some Zero\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with lnot_dag vlNull"], ["proof (chain)\npicking this:\n  Dag (low no) low high lnot\n  var (low no) = 0\n  bdt lnot var = Some Zero", "have lnot_Node: \"lnot = (Node Tip (low no) Tip)\""], ["proof (prove)\nusing this:\n  Dag (low no) low high lnot\n  var (low no) = 0\n  bdt lnot var = Some Zero\n\ngoal (1 subgoal):\n 1. lnot = Node Tip (low no) Tip", "by auto"], ["proof (state)\nthis:\n  lnot = Node Tip (low no) Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from rnobdt_Zero rnobdt_def rnot_dag vrNull"], ["proof (chain)\npicking this:\n  rnobdt = Zero\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0", "have rnot_Node: \"rnot = (Node Tip (high no) Tip)\""], ["proof (prove)\nusing this:\n  rnobdt = Zero\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0\n\ngoal (1 subgoal):\n 1. rnot = Node Tip (high no) Tip", "by auto"], ["proof (state)\nthis:\n  rnot = Node Tip (high no) Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from pret_dag no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret", "obtain not where \n                      not_ex: \"Dag no low high not\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. (\\<And>not.\n        Dag no low high not \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     Dag p low high pret; no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule dag_setof_exD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ?n6 \\<in> set_of pret\n 2. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret; \\<exists>nt. Dag ?n6 low high nt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag no low high not\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with pret_dag no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret\n  Dag no low high not", "have not_ex_in_pret: \"not <= pret\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret\n  Dag no low high not\n\ngoal (1 subgoal):\n 1. not \\<le> pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> not \\<le> pret", "apply (rule set_of_subdag)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 ?low3 ?high3 pret\n 2. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> Dag ?no3 ?low3 ?high3 not\n 3. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> ?no3 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  not \\<le> pret\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from not_ex lnot_dag rnot_dag   nonNull"], ["proof (chain)\npicking this:\n  Dag no low high not\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  no \\<noteq> Null", "have not_def: \"not = (Node lnot no rnot)\""], ["proof (prove)\nusing this:\n  Dag no low high not\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. not = Node lnot no rnot", "by (simp add: Dag_unique del: Dag_Ref)"], ["proof (state)\nthis:\n  not = Node lnot no rnot\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with not_ex_in_pret prebdt_pret"], ["proof (chain)\npicking this:\n  not \\<le> pret\n  bdt pret var = Some prebdt\n  not = Node lnot no rnot", "have nobdt_ex: \"\\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt\""], ["proof (prove)\nusing this:\n  not \\<le> pret\n  bdt pret var = Some prebdt\n  not = Node lnot no rnot\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>not \\<le> pret; bdt pret var = Some prebdt;\n     not = Node lnot no rnot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nobdt.\n                         bdt (Node lnot no rnot) var = Some nobdt", "apply (rule subbdt_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>not \\<le> pret; bdt pret var = Some prebdt;\n     not = Node lnot no rnot\\<rbrakk>\n    \\<Longrightarrow> Node lnot no rnot \\<le> ?t3\n 2. \\<lbrakk>not \\<le> pret; bdt pret var = Some prebdt;\n     not = Node lnot no rnot\\<rbrakk>\n    \\<Longrightarrow> bdt ?t3 var = Some ?bdt1.3", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt", "obtain nobdt where \n                      nobdt_def: \"bdt (Node lnot no rnot) var = Some nobdt\""], ["proof (prove)\nusing this:\n  \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt\n\ngoal (1 subgoal):\n 1. (\\<And>nobdt.\n        bdt (Node lnot no rnot) var = Some nobdt \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bdt (Node lnot no rnot) var = Some nobdt\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "from not_def"], ["proof (chain)\npicking this:\n  not = Node lnot no rnot", "have \"root not = no\""], ["proof (prove)\nusing this:\n  not = Node lnot no rnot\n\ngoal (1 subgoal):\n 1. root not = no", "by simp"], ["proof (state)\nthis:\n  root not = no\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with nobdt_def vnoOne not_def"], ["proof (chain)\npicking this:\n  bdt (Node lnot no rnot) var = Some nobdt\n  var no = 1\n  not = Node lnot no rnot\n  root not = no", "have \"not = (Node Tip no Tip)\""], ["proof (prove)\nusing this:\n  bdt (Node lnot no rnot) var = Some nobdt\n  var no = 1\n  not = Node lnot no rnot\n  root not = no\n\ngoal (1 subgoal):\n 1. not = Node Tip no Tip", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt (Node lnot no rnot) var = Some nobdt; var no = 1;\n     not = Node lnot no rnot; root not = no\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply (drule bdt_Some_var1_One)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>var no = 1; not = Node lnot no rnot; root not = no\\<rbrakk>\n    \\<Longrightarrow> var (root (Node lnot no rnot)) = 1\n 2. \\<lbrakk>var no = 1; not = Node lnot no rnot; root not = no;\n     nobdt = One \\<and>\n     Node lnot no rnot = Node Tip (root (Node lnot no rnot)) Tip\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with not_def"], ["proof (chain)\npicking this:\n  not = Node lnot no rnot\n  not = Node Tip no Tip", "have \"rnot = Tip\""], ["proof (prove)\nusing this:\n  not = Node lnot no rnot\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. rnot = Tip", "by simp"], ["proof (state)\nthis:\n  rnot = Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "with rnot_Node"], ["proof (chain)\npicking this:\n  rnot = Node Tip (high no) Tip\n  rnot = Tip", "show ?thesis"], ["proof (prove)\nusing this:\n  rnot = Node Tip (high no) Tip\n  rnot = Tip\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "by simp"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node lnot no rnot) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node lnot no rnot) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnort_in_repb_Nodesn: \"set_of rnort \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "assume rnort_repb_no: \"\\<forall>no\\<in>set_of rnort. repb no = no\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of rnort. repb no = no\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "from repbNodes_in_Nodes rnort_in_repb_Nodesn"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of rnort \\<subseteq> repb ` Nodes n ll", "have rnort_in_Nodesn: \"set_of rnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of rnort. repc no = no", "show \"\\<forall>no\\<in>set_of rnort. repc no = no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set_of rnort. repc no = no", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "fix pt"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "assume pt_in_rnort: \" pt \\<in> set_of rnort\""], ["proof (state)\nthis:\n  pt \\<in> set_of rnort\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with rnort_in_Nodesn"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> Nodes n ll\n  pt \\<in> set_of rnort", "have \"pt \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> Nodes n ll\n  pt \\<in> set_of rnort\n\ngoal (1 subgoal):\n 1. pt \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  pt \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with Nodesn_notin_lln"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  pt \\<in> Nodes n ll", "have \"pt \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  pt \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. pt \\<notin> set (ll ! n)", "by auto"], ["proof (state)\nthis:\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)", "have \"repb pt = repc pt\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb pt = repc pt", "by auto"], ["proof (state)\nthis:\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with rnort_repb_no pt_in_rnort"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set_of rnort. repb no = no\n  pt \\<in> set_of rnort\n  repb pt = repc pt", "show \"repc pt = pt\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set_of rnort. repb no = no\n  pt \\<in> set_of rnort\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by auto"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of rnort. repc no = no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (2 subgoals):\n 1. repc (low no) = repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n 2. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varrep"], ["proof (chain)\npicking this:\n  var (repc no) \\<le> var no\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "show ?thesis"], ["proof (prove)\nusing this:\n  var (repc no) \\<le> var no\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "assume share_case_cond: \"repc (low no) \\<noteq> repc (high no)\""], ["proof (state)\nthis:\n  repc (low no) \\<noteq> repc (high no)\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repc (low no) \\<noteq> repc (high no)", "have share_case_cond_propto: \"(repc \\<propto> low) no \\<noteq> (repc \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repc (low no) \\<noteq> repc (high no)\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) no \\<noteq> (repc \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repc \\<propto> low) no \\<noteq> (repc \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with repshare"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  (repc \\<propto> low) no \\<noteq> (repc \\<propto> high) no", "obtain \n                  rno_in_llbn: \"repc no \\<in> set (ll ! n)\" and\n                  rrno_eq_rno: \"repc (repc no) = repc no\" and\n                  twonodes_in_llbn_prop: \"(\\<forall>no1\\<in>set (ll ! n). \n                  ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and> \n                  (repc \\<propto> low) no1 = (repc \\<propto> low) no) = (repc no = repc no1))\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) no = (repc \\<propto> high) no \\<longrightarrow>\n   low no = Null) \\<longrightarrow>\n  repc no \\<in> set (ll ! n) \\<and>\n  repc (repc no) = repc no \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n      (repc no = repc no1))\n  (repc \\<propto> low) no \\<noteq> (repc \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc no \\<in> set (ll ! n); repc (repc no) = repc no;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n         (repc no = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc no \\<in> set (ll ! n)\n  repc (repc no) = repc no\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n     (repc no = repc no1)\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from wf_ll rno_in_llbn  nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  repc no \\<in> set (ll ! n)\n  n < length levellist", "have varrepno_n: \"var (repc no) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  repc no \\<in> set (ll ! n)\n  n < length levellist\n\ngoal (1 subgoal):\n 1. var (repc no) = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var (repc no) = n\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varno"], ["proof (chain)\npicking this:\n  var no = n\n  var (repc no) = n", "have varrep: \"?varrep\""], ["proof (prove)\nusing this:\n  var no = n\n  var (repc no) = n\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "from not_nort_prop_high not_nort_prop_low"], ["proof (chain)\npicking this:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n  \\<exists>not nort.\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (low no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)", "have repcn_prop: \"?repcn_prop\""], ["proof (prove)\nusing this:\n  \\<exists>not nort.\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (high no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n  \\<exists>not nort.\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n      nort \\<and>\n     Dag (low no) low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n     (\\<exists>nobdt norbdt.\n         bdt not var = Some nobdt \\<and>\n         bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. \\<exists>not nort.\n       Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n       Dag no low high not \\<and>\n       reduced nort \\<and>\n       ordered nort var \\<and>\n       set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n       (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n       (\\<exists>nobdt.\n           bdt not var = Some nobdt \\<and>\n           (\\<exists>norbdt.\n               bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "apply-"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>not nort.\n                Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) nort \\<and>\n                Dag (high no) low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt not var = Some nobdt \\<and>\n                    bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n     \\<exists>not nort.\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         nort \\<and>\n        Dag (low no) low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt not var = Some nobdt \\<and>\n            bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>not nort.\n                         Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) nort \\<and>\n                         Dag no low high not \\<and>\n                         reduced nort \\<and>\n                         ordered nort var \\<and>\n                         set_of nort\n                         \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n                         (\\<exists>nobdt.\n                             bdt not var = Some nobdt \\<and>\n                             (\\<exists>norbdt.\n                                 bdt nort var = Some norbdt \\<and>\n                                 nobdt \\<sim> norbdt))", "apply (elim exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>not nota nort norta.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) nort \\<and>\n                Dag (high no) low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt not var = Some nobdt \\<and>\n                    bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         norta \\<and>\n        Dag (low no) low high nota \\<and>\n        reduced norta \\<and>\n        ordered norta var \\<and>\n        set_of norta \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of norta. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt nota var = Some nobdt \\<and>\n            bdt norta var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>not nort.\n                            Dag (repc no) (repc \\<propto> low)\n                             (repc \\<propto> high) nort \\<and>\n                            Dag no low high not \\<and>\n                            reduced nort \\<and>\n                            ordered nort var \\<and>\n                            set_of nort\n                            \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                            (\\<forall>no\\<in>set_of nort.\n                                repc no = no) \\<and>\n                            (\\<exists>nobdt.\n                                bdt not var = Some nobdt \\<and>\n                                (\\<exists>norbdt.\n                                    bdt nort var = Some norbdt \\<and>\n                                    nobdt \\<sim> norbdt))", "apply (rename_tac rnot lnot rnort lnort)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort \\<and>\n                Dag (high no) low high rnot \\<and>\n                reduced rnort \\<and>\n                ordered rnort var \\<and>\n                set_of rnort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of rnort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt rnot var = Some nobdt \\<and>\n                    bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort \\<and>\n        Dag (low no) low high lnot \\<and>\n        reduced lnort \\<and>\n        ordered lnort var \\<and>\n        set_of lnort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of lnort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>not nort.\n                            Dag (repc no) (repc \\<propto> low)\n                             (repc \\<propto> high) nort \\<and>\n                            Dag no low high not \\<and>\n                            reduced nort \\<and>\n                            ordered nort var \\<and>\n                            set_of nort\n                            \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                            (\\<forall>no\\<in>set_of nort.\n                                repc no = no) \\<and>\n                            (\\<exists>nobdt.\n                                bdt not var = Some nobdt \\<and>\n                                (\\<exists>norbdt.\n                                    bdt nort var = Some norbdt \\<and>\n                                    nobdt \\<sim> norbdt))", "apply (rule_tac x=\"Node lnot no rnot\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort \\<and>\n                Dag (high no) low high rnot \\<and>\n                reduced rnort \\<and>\n                ordered rnort var \\<and>\n                set_of rnort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of rnort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt rnot var = Some nobdt \\<and>\n                    bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort \\<and>\n        Dag (low no) low high lnot \\<and>\n        reduced lnort \\<and>\n        ordered lnort var \\<and>\n        set_of lnort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of lnort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nort.\n                            Dag (repc no) (repc \\<propto> low)\n                             (repc \\<propto> high) nort \\<and>\n                            Dag no low high (Node lnot no rnot) \\<and>\n                            reduced nort \\<and>\n                            ordered nort var \\<and>\n                            set_of nort\n                            \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                            (\\<forall>no\\<in>set_of nort.\n                                repc no = no) \\<and>\n                            (\\<exists>nobdt.\n                                bdt (Node lnot no rnot) var =\n                                Some nobdt \\<and>\n                                (\\<exists>norbdt.\n                                    bdt nort var = Some norbdt \\<and>\n                                    nobdt \\<sim> norbdt))", "apply (rule_tac x=\"Node lnort (repc no) rnort\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort \\<and>\n                Dag (high no) low high rnot \\<and>\n                reduced rnort \\<and>\n                ordered rnort var \\<and>\n                set_of rnort \\<subseteq> repb ` Nodes n ll \\<and>\n                (\\<forall>no\\<in>set_of rnort. repb no = no) \\<and>\n                (\\<exists>nobdt norbdt.\n                    bdt rnot var = Some nobdt \\<and>\n                    bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt);\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort \\<and>\n        Dag (low no) low high lnot \\<and>\n        reduced lnort \\<and>\n        ordered lnort var \\<and>\n        set_of lnort \\<subseteq> repb ` Nodes n ll \\<and>\n        (\\<forall>no\\<in>set_of lnort. repb no = no) \\<and>\n        (\\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt)\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high)\n                          (Node lnort (repc no) rnort) \\<and>\n                         Dag no low high (Node lnot no rnot) \\<and>\n                         reduced (Node lnort (repc no) rnort) \\<and>\n                         ordered (Node lnort (repc no) rnort) var \\<and>\n                         set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no) \\<and>\n                         (\\<exists>nobdt.\n                             bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                             (\\<exists>norbdt.\n                                 bdt (Node lnort (repc no) rnort) var =\n                                 Some norbdt \\<and>\n                                 nobdt \\<sim> norbdt))", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high)\n                          (Node lnort (repc no) rnort) \\<and>\n                         Dag no low high (Node lnot no rnot) \\<and>\n                         reduced (Node lnort (repc no) rnort) \\<and>\n                         ordered (Node lnort (repc no) rnort) var \\<and>\n                         set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no) \\<and>\n                         (\\<exists>nobdt.\n                             bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                             (\\<exists>norbdt.\n                                 bdt (Node lnort (repc no) rnort) var =\n                                 Some norbdt \\<and>\n                                 nobdt \\<sim> norbdt))", "apply (intro conjI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)", "prefer 7"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (elim exE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort nobdt nobdta norbdt norbdta.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some nobdt \\<and>\n        bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        bdt lnot var = Some nobdta \\<and>\n        bdt lnort var = Some norbdta \\<and> nobdta \\<sim> norbdta\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (rename_tac rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt \\<and>\n        bdt rnort var = Some rnorbdt \\<and> rnobdt \\<sim> rnorbdt;\n        bdt lnot var = Some lnobdt \\<and>\n        bdt lnort var = Some lnorbdt \\<and> lnobdt \\<sim> lnorbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (elim conjE)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (case_tac  \"Suc 0 < var no\")"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (rule_tac x=\"(Bdt_Node lnobdt (var no) rnobdt)\" in exI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt) \\<and>\n                         (\\<exists>norbdt.\n                             bdt (Node lnort (repc no) rnort) var =\n                             Some norbdt \\<and>\n                             Bdt_Node lnobdt (var no) rnobdt \\<sim> norbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (rule conjI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>norbdt.\n                            bdt (Node lnort (repc no) rnort) var =\n                            Some norbdt \\<and>\n                            Bdt_Node lnobdt (var no) rnobdt \\<sim> norbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "prefer 2"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>norbdt.\n                            bdt (Node lnort (repc no) rnort) var =\n                            Some norbdt \\<and>\n                            Bdt_Node lnobdt (var no) rnobdt \\<sim> norbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (rule_tac x=\"(Bdt_Node lnorbdt (var (repc no)) rnorbdt)\" in exI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some\n                          (Bdt_Node lnorbdt (var (repc no)) rnorbdt) \\<and>\n                         Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "apply (rule conjI)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "proof -"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "assume rnort_dag: \n                    \"Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (state)\nthis:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "assume lnort_dag: \n                    \"Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\""], ["proof (state)\nthis:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "assume rnort_in_repNodes: \"set_of rnort \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "assume lnort_in_repNodes: \"set_of lnort \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "from rnort_in_repNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have rnort_in_Nodes: \"set_of rnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "from lnort_in_repNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have lnort_in_Nodes: \"set_of lnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of lnort \\<subseteq> Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "from rnort_in_Nodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> Nodes n ll", "have rnortx_in_Nodes: \"\\<forall> x \\<in> set_of rnort. x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll", "have \"\\<forall> x \\<in> set_of rnort. x \\<in> set_of pret \\<and> var x < n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret \\<and> var x < n", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         x \\<in> set_of pret \\<and> var x < n", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_of pret \\<and> var x < n", "apply (rule wf_ll_Nodes_pret)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> wf_ll pret (?levellista5 x) var\n 2. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> n < length (?levellista5 x)\n 3. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of rnort. x \\<in> Nodes n ll;\n        x \\<in> set_of rnort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes n (?levellista5 x)", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret \\<and> var x < n\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with pret_dag prebdt_pret rnort_dag ord_pret wf_ll  nsll \n                    repbc_nc"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret \\<and> var x < n", "have \"\\<forall>x \\<in> set_of rnort. (repc \\<propto> low) x = (repb \\<propto> low) x \\<and> \n                    (repc \\<propto> high) x = (repb \\<propto> high) x\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of rnort. x \\<in> set_of pret \\<and> var x < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply (rule nort_null_comp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 low high ?pret8\n 2. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> bdt ?pret8 ?var8 = Some ?prebdt8\n 3. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> Dag (repc ?no8) (repb \\<propto> low)\n                       (repb \\<propto> high) rnort\n 4. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> ordered ?pret8 ?var8\n 5. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret8 ?levellistb8 ?var8\n 6. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> ?nb8 < length ?levellistb8\n 7. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>nt.\n                         nt \\<notin> set\n(?levellistb8 ! ?nb8) \\<longrightarrow>\n                         repb nt = repc nt\n 8. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of rnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of rnort.\n                         ?var8 x < ?nb8 \\<and> x \\<in> set_of ?pret8", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of rnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set_of rnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x", "have \"Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort = \n                    Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set_of rnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort =\n    Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x \\<Longrightarrow>\n    Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort =\n    Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "apply (rule heaps_eq_Dag_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of rnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x \\<Longrightarrow>\n    \\<forall>x\\<in>set_of rnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort =\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with rnort_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort =\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "have rnort_dag_repc: \n                    \"Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort\""], ["proof (prove)\nusing this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort =\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (1 subgoal):\n 1. Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort", "by simp"], ["proof (state)\nthis:\n  Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "from lnort_in_Nodes"], ["proof (chain)\npicking this:\n  set_of lnort \\<subseteq> Nodes n ll", "have lnortx_in_Nodes: \"\\<forall>x \\<in> set_of lnort. x \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll", "have \"\\<forall> x \\<in> set_of lnort. x \\<in> set_of pret \\<and> var x < n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of lnort. x \\<in> set_of pret \\<and> var x < n", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of lnort.\n                         x \\<in> set_of pret \\<and> var x < n", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll;\n        x \\<in> set_of lnort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set_of pret \\<and> var x < n", "apply (rule wf_ll_Nodes_pret)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll;\n        x \\<in> set_of lnort\\<rbrakk>\n       \\<Longrightarrow> wf_ll pret (?levellista5 x) var\n 2. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll;\n        x \\<in> set_of lnort\\<rbrakk>\n       \\<Longrightarrow> n < length (?levellista5 x)\n 3. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        \\<forall>x\\<in>set_of lnort. x \\<in> Nodes n ll;\n        x \\<in> set_of lnort\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Nodes n (?levellista5 x)", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of lnort. x \\<in> set_of pret \\<and> var x < n\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with pret_dag prebdt_pret lnort_dag ord_pret wf_ll  nsll \n                    repbc_nc"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of lnort. x \\<in> set_of pret \\<and> var x < n", "have \"\\<forall> x \\<in> set_of lnort. (repc \\<propto> low) x = (repb \\<propto> low) x \\<and> \n                    (repc \\<propto> high) x = (repb \\<propto> high) x\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  ordered pret var\n  wf_ll pret ll var\n  n < length levellist\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>x\\<in>set_of lnort. x \\<in> set_of pret \\<and> var x < n\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of lnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of lnort.\n                         (repc \\<propto> low) x =\n                         (repb \\<propto> low) x \\<and>\n                         (repc \\<propto> high) x = (repb \\<propto> high) x", "apply (rule nort_null_comp)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 low high ?pret8\n 2. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> bdt ?pret8 ?var8 = Some ?prebdt8\n 3. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> Dag (repc ?no8) (repb \\<propto> low)\n                       (repb \\<propto> high) lnort\n 4. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> ordered ?pret8 ?var8\n 5. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret8 ?levellistb8 ?var8\n 6. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> ?nb8 < length ?levellistb8\n 7. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>nt.\n                         nt \\<notin> set\n(?levellistb8 ! ?nb8) \\<longrightarrow>\n                         repb nt = repc nt\n 8. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort;\n     ordered pret var; wf_ll pret ll var; n < length levellist;\n     \\<forall>no.\n        no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no;\n     \\<forall>x\\<in>set_of lnort.\n        x \\<in> set_of pret \\<and> var x < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set_of lnort.\n                         ?var8 x < ?nb8 \\<and> x \\<in> set_of ?pret8", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set_of lnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set_of lnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x", "have \n                    \"Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort = \n                    Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set_of lnort.\n     (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n     (repc \\<propto> high) x = (repb \\<propto> high) x\n\ngoal (1 subgoal):\n 1. Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort =\n    Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of lnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x \\<Longrightarrow>\n    Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort =\n    Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort", "apply (rule heaps_eq_Dag_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set_of lnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x \\<Longrightarrow>\n    \\<forall>x\\<in>set_of lnort.\n       (repc \\<propto> low) x = (repb \\<propto> low) x \\<and>\n       (repc \\<propto> high) x = (repb \\<propto> high) x", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort =\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with lnort_dag"], ["proof (chain)\npicking this:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort =\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort", "have lnort_dag_repc: \n                    \"Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort\""], ["proof (prove)\nusing this:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort =\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (1 subgoal):\n 1. Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort", "by simp"], ["proof (state)\nthis:\n  Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "from lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null", "have propto_comp: \"(repc \\<propto> low) no = repc (low no) \\<and> \n                    (repc \\<propto> high) no = repc (high no)\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) no = repc (low no) \\<and>\n    (repc \\<propto> high) no = repc (high no)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repc \\<propto> low) no = repc (low no) \\<and>\n  (repc \\<propto> high) no = repc (high no)\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "from rno_in_llbn twonodes_in_llbn_prop rrno_eq_rno"], ["proof (chain)\npicking this:\n  repc no \\<in> set (ll ! n)\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n     (repc no = repc no1)\n  repc (repc no) = repc no", "have \"(repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and> \n                    (repc \\<propto> low) (repc no) = (repc \\<propto> low) no\""], ["proof (prove)\nusing this:\n  repc no \\<in> set (ll ! n)\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n     (repc no = repc no1)\n  repc (repc no) = repc no\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n    (repc \\<propto> low) (repc no) = (repc \\<propto> low) no", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no\n\ngoal (10 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag (repc no) (repc \\<propto> low)\n                          (repc \\<propto> high) (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 10. \\<And>rnot lnot rnort lnort.\n        \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                  (repb \\<propto> high) rnort;\n         Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n          lnort;\n         Dag (high no) low high rnot; Dag (low no) low high lnot;\n         reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n         set_of rnort \\<subseteq> repb ` Nodes n ll;\n         set_of lnort \\<subseteq> repb ` Nodes n ll;\n         \\<forall>no\\<in>set_of rnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt rnot var = Some nobdt \\<and>\n            bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n         \\<forall>no\\<in>set_of lnort. repb no = no;\n         \\<exists>nobdt norbdt.\n            bdt lnot var = Some nobdt \\<and>\n            bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n        \\<Longrightarrow> \\<forall>no\\<in>set_of\n     (Node lnort (repc no) rnort).\n                             repc no = no", "with propto_comp lnort_dag_repc rnort_dag_repc lno_nNull hno_nNull \n                    rnonN"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) no = repc (low no) \\<and>\n  (repc \\<propto> high) no = repc (high no)\n  Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort\n  Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repc no \\<noteq> Null\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no", "show \"Dag(repc no)(repc \\<propto> low)(repc \\<propto> high)(Node lnort (repc no) rnort)\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) no = repc (low no) \\<and>\n  (repc \\<propto> high) no = repc (high no)\n  Dag (repc (low no)) (repc \\<propto> low) (repc \\<propto> high) lnort\n  Dag (repc (high no)) (repc \\<propto> low) (repc \\<propto> high) rnort\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repc no \\<noteq> Null\n  (repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n  (repc \\<propto> low) (repc no) = (repc \\<propto> low) no\n\ngoal (1 subgoal):\n 1. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n     (Node lnort (repc no) rnort)", "by auto"], ["proof (state)\nthis:\n  Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n   (Node lnort (repc no) rnort)\n\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnot_dag: \"Dag (high no) low high rnot\""], ["proof (state)\nthis:\n  Dag (high no) low high rnot\n\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnot_dag: \"Dag (low no) low high lnot\""], ["proof (state)\nthis:\n  Dag (low no) low high lnot\n\ngoal (9 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> Dag no low high (Node lnot no rnot)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 9. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with rnot_dag nonNull"], ["proof (chain)\npicking this:\n  Dag (high no) low high rnot\n  no \\<noteq> Null\n  Dag (low no) low high lnot", "show \"Dag no low high (Node lnot no rnot)\""], ["proof (prove)\nusing this:\n  Dag (high no) low high rnot\n  no \\<noteq> Null\n  Dag (low no) low high lnot\n\ngoal (1 subgoal):\n 1. Dag no low high (Node lnot no rnot)", "by simp"], ["proof (state)\nthis:\n  Dag no low high (Node lnot no rnot)\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix rnort lnort"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_dag: \n                    \"Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (state)\nthis:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_dag: \n                    \"Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\""], ["proof (state)\nthis:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume red_rnort: \"reduced rnort\""], ["proof (state)\nthis:\n  reduced rnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume red_lnort: \" reduced lnort\""], ["proof (state)\nthis:\n  reduced lnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rhn_nNull rnort_dag"], ["proof (chain)\npicking this:\n  repc (high no) \\<noteq> Null\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "obtain lrnort rrnort where \n                    rnort_Node: \"rnort = (Node lrnort (repc (high no)) rrnort)\""], ["proof (prove)\nusing this:\n  repc (high no) \\<noteq> Null\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (1 subgoal):\n 1. (\\<And>lrnort rrnort.\n        rnort = Node lrnort (repc (high no)) rrnort \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rnort = Node lrnort (repc (high no)) rrnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rln_nNull lnort_dag"], ["proof (chain)\npicking this:\n  repc (low no) \\<noteq> Null\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort", "obtain llnort rlnort where \n                    lnort_Node: \"lnort = (Node llnort (repc (low no)) rlnort)\""], ["proof (prove)\nusing this:\n  repc (low no) \\<noteq> Null\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (1 subgoal):\n 1. (\\<And>llnort rlnort.\n        lnort = Node llnort (repc (low no)) rlnort \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lnort = Node llnort (repc (low no)) rlnort\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from twonodes_in_llbn_prop rrno_eq_rno rno_in_llbn hno_nNull lno_nNull"], ["proof (chain)\npicking this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n     (repc no = repc no1)\n  repc (repc no) = repc no\n  repc no \\<in> set (ll ! n)\n  high no \\<noteq> Null\n  low no \\<noteq> Null", "have \"((repc \\<propto> high) (repc no)) = repc (high no) \\<and> \n                    ((repc \\<propto> low) (repc no)) = repc (low no)\""], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n     (repc no = repc no1)\n  repc (repc no) = repc no\n  repc no \\<in> set (ll ! n)\n  high no \\<noteq> Null\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc no) = repc (high no) \\<and>\n    (repc \\<propto> low) (repc no) = repc (low no)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no1\\<in>set (ll ! n).\n                ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                 (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n                (repc no = repc no1);\n     repc (repc no) = repc no; repc no \\<in> set (ll ! n);\n     high no \\<noteq> Null; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> (repc \\<propto> high) (repc no) =\n                      repc (high no) \\<and>\n                      (repc \\<propto> low) (repc no) = repc (low no)", "apply (erule_tac x=\"repc no\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>repc (repc no) = repc no; repc no \\<in> set (ll ! n);\n     high no \\<noteq> Null; low no \\<noteq> Null;\n     ((repc \\<propto> high) (repc no) = (repc \\<propto> high) no \\<and>\n      (repc \\<propto> low) (repc no) = (repc \\<propto> low) no) =\n     (repc no = repc (repc no))\\<rbrakk>\n    \\<Longrightarrow> (repc \\<propto> high) (repc no) =\n                      repc (high no) \\<and>\n                      (repc \\<propto> low) (repc no) = repc (low no)\n 2. \\<lbrakk>repc (repc no) = repc no; repc no \\<in> set (ll ! n);\n     high no \\<noteq> Null; low no \\<noteq> Null;\n     repc no \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> (repc \\<propto> high) (repc no) =\n                      repc (high no) \\<and>\n                      (repc \\<propto> low) (repc no) = repc (low no)", "apply (auto simp add: null_comp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc no) = repc (high no) \\<and>\n  (repc \\<propto> low) (repc no) = repc (low no)\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with share_case_cond"], ["proof (chain)\npicking this:\n  repc (low no) \\<noteq> repc (high no)\n  (repc \\<propto> high) (repc no) = repc (high no) \\<and>\n  (repc \\<propto> low) (repc no) = repc (low no)", "have \"((repc \\<propto> high) (repc no)) \\<noteq> ((repc \\<propto> low) (repc no))\""], ["proof (prove)\nusing this:\n  repc (low no) \\<noteq> repc (high no)\n  (repc \\<propto> high) (repc no) = repc (high no) \\<and>\n  (repc \\<propto> low) (repc no) = repc (low no)\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc no) \\<noteq> (repc \\<propto> low) (repc no)", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc no) \\<noteq> (repc \\<propto> low) (repc no)\n\ngoal (8 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> reduced (Node lnort (repc no) rnort)\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 8. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with red_lnort red_rnort rnort_Node lnort_Node share_case_cond"], ["proof (chain)\npicking this:\n  reduced lnort\n  reduced rnort\n  rnort = Node lrnort (repc (high no)) rrnort\n  lnort = Node llnort (repc (low no)) rlnort\n  repc (low no) \\<noteq> repc (high no)\n  (repc \\<propto> high) (repc no) \\<noteq> (repc \\<propto> low) (repc no)", "show \"reduced (Node lnort (repc no) rnort)\""], ["proof (prove)\nusing this:\n  reduced lnort\n  reduced rnort\n  rnort = Node lrnort (repc (high no)) rrnort\n  lnort = Node llnort (repc (low no)) rlnort\n  repc (low no) \\<noteq> repc (high no)\n  (repc \\<propto> high) (repc no) \\<noteq> (repc \\<propto> low) (repc no)\n\ngoal (1 subgoal):\n 1. reduced (Node lnort (repc no) rnort)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>reduced lnort; reduced rnort;\n     rnort = Node lrnort (repc (high no)) rrnort;\n     lnort = Node llnort (repc (low no)) rlnort;\n     repc (low no) \\<noteq> repc (high no);\n     (repc \\<propto> high) (repc no) \\<noteq>\n     (repc \\<propto> low) (repc no)\\<rbrakk>\n    \\<Longrightarrow> reduced (Node lnort (repc no) rnort)", "apply (rule_tac lp=\"repc (low no)\" and rp=\"repc (high no)\" and \n                      llt=llnort and rlt = rlnort and lrt=lrnort and rrt=rrnort \n                      in reduced_children_parent)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>reduced lnort; reduced rnort;\n     rnort = Node lrnort (repc (high no)) rrnort;\n     lnort = Node llnort (repc (low no)) rlnort;\n     repc (low no) \\<noteq> repc (high no);\n     (repc \\<propto> high) (repc no) \\<noteq>\n     (repc \\<propto> low) (repc no)\\<rbrakk>\n    \\<Longrightarrow> reduced lnort\n 2. \\<lbrakk>reduced lnort; reduced rnort;\n     rnort = Node lrnort (repc (high no)) rrnort;\n     lnort = Node llnort (repc (low no)) rlnort;\n     repc (low no) \\<noteq> repc (high no);\n     (repc \\<propto> high) (repc no) \\<noteq>\n     (repc \\<propto> low) (repc no)\\<rbrakk>\n    \\<Longrightarrow> lnort = Node llnort (repc (low no)) rlnort\n 3. \\<lbrakk>reduced lnort; reduced rnort;\n     rnort = Node lrnort (repc (high no)) rrnort;\n     lnort = Node llnort (repc (low no)) rlnort;\n     repc (low no) \\<noteq> repc (high no);\n     (repc \\<propto> high) (repc no) \\<noteq>\n     (repc \\<propto> low) (repc no)\\<rbrakk>\n    \\<Longrightarrow> reduced rnort\n 4. \\<lbrakk>reduced lnort; reduced rnort;\n     rnort = Node lrnort (repc (high no)) rrnort;\n     lnort = Node llnort (repc (low no)) rlnort;\n     repc (low no) \\<noteq> repc (high no);\n     (repc \\<propto> high) (repc no) \\<noteq>\n     (repc \\<propto> low) (repc no)\\<rbrakk>\n    \\<Longrightarrow> rnort = Node lrnort (repc (high no)) rrnort\n 5. \\<lbrakk>reduced lnort; reduced rnort;\n     rnort = Node lrnort (repc (high no)) rrnort;\n     lnort = Node llnort (repc (low no)) rlnort;\n     repc (low no) \\<noteq> repc (high no);\n     (repc \\<propto> high) (repc no) \\<noteq>\n     (repc \\<propto> low) (repc no)\\<rbrakk>\n    \\<Longrightarrow> repc (low no) \\<noteq> repc (high no)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  reduced (Node lnort (repc no) rnort)\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix lnort rnort"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_dag: \n                    \"Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\""], ["proof (state)\nthis:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume ord_lnort: \"ordered lnort var\""], ["proof (state)\nthis:\n  ordered lnort var\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_dag: \n                    \"Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (state)\nthis:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume ord_rnort: \" ordered rnort var\""], ["proof (state)\nthis:\n  ordered rnort var\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_in_repNodes: \"set_of lnort \\<subseteq> repb `Nodes n ll\""], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_in_repNodes: \"set_of rnort \\<subseteq> repb `Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from lnort_in_repNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have lnort_in_Nodes: \"set_of lnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of lnort \\<subseteq> Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> Nodes n ll\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rnort_in_repNodes repbNodes_in_Nodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll", "have rnort_in_Nodes: \"set_of rnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rhn_nNull rnort_dag"], ["proof (chain)\npicking this:\n  repc (high no) \\<noteq> Null\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort", "obtain lrnort rrnort where \n                    rnort_Node: \"rnort = (Node lrnort (repc (high no)) rrnort)\""], ["proof (prove)\nusing this:\n  repc (high no) \\<noteq> Null\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (1 subgoal):\n 1. (\\<And>lrnort rrnort.\n        rnort = Node lrnort (repc (high no)) rrnort \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rnort = Node lrnort (repc (high no)) rrnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rln_nNull lnort_dag"], ["proof (chain)\npicking this:\n  repc (low no) \\<noteq> Null\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort", "obtain llnort rlnort where \n                    lnort_Node: \"lnort = (Node llnort (repc (low no)) rlnort)\""], ["proof (prove)\nusing this:\n  repc (low no) \\<noteq> Null\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (1 subgoal):\n 1. (\\<And>llnort rlnort.\n        lnort = Node llnort (repc (low no)) rlnort \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lnort = Node llnort (repc (low no)) rlnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from lnort_dag rln_nNull lnort_in_Nodes"], ["proof (chain)\npicking this:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  repc (low no) \\<noteq> Null\n  set_of lnort \\<subseteq> Nodes n ll", "have \"repc (low no) \\<in> set_of lnort\""], ["proof (prove)\nusing this:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  repc (low no) \\<noteq> Null\n  set_of lnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low no) \\<in> set_of lnort", "by auto"], ["proof (state)\nthis:\n  repc (low no) \\<in> set_of lnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with lnort_in_Nodes"], ["proof (chain)\npicking this:\n  set_of lnort \\<subseteq> Nodes n ll\n  repc (low no) \\<in> set_of lnort", "have \"repc (low no) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lnort \\<subseteq> Nodes n ll\n  repc (low no) \\<in> set_of lnort\n\ngoal (1 subgoal):\n 1. repc (low no) \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  repc (low no) \\<in> Nodes n ll\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  repc (low no) \\<in> Nodes n ll", "have vrlno_sn: \"var (repc (low no)) < n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  repc (low no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var (repc (low no)) < n", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     repc (low no) \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc (low no)) < n", "apply (drule wf_ll_Nodes_pret)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < length levellist; repc (low no) \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> ?nb3 < length ll\n 2. \\<lbrakk>n < length levellist; repc (low no) \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> ?x3 \\<in> Nodes ?nb3 ll\n 3. \\<lbrakk>n < length levellist; repc (low no) \\<in> Nodes n ll;\n     ?x3 \\<in> set_of pret \\<and> var ?x3 < ?nb3\\<rbrakk>\n    \\<Longrightarrow> var (repc (low no)) < n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repc (low no)) < n\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rnort_dag rhn_nNull rnort_in_Nodes"], ["proof (chain)\npicking this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  repc (high no) \\<noteq> Null\n  set_of rnort \\<subseteq> Nodes n ll", "have \"repc (high no) \\<in> set_of rnort\""], ["proof (prove)\nusing this:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  repc (high no) \\<noteq> Null\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high no) \\<in> set_of rnort", "by auto"], ["proof (state)\nthis:\n  repc (high no) \\<in> set_of rnort\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with rnort_in_Nodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> Nodes n ll\n  repc (high no) \\<in> set_of rnort", "have \"repc (high no) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> Nodes n ll\n  repc (high no) \\<in> set_of rnort\n\ngoal (1 subgoal):\n 1. repc (high no) \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  repc (high no) \\<in> Nodes n ll\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  repc (high no) \\<in> Nodes n ll", "have vrhno_sn: \"var (repc (high no)) < n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  repc (high no) \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var (repc (high no)) < n", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     repc (high no) \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repc (high no)) < n", "apply (drule wf_ll_Nodes_pret)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>n < length levellist; repc (high no) \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> ?nb3 < length ll\n 2. \\<lbrakk>n < length levellist; repc (high no) \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> ?x3 \\<in> Nodes ?nb3 ll\n 3. \\<lbrakk>n < length levellist; repc (high no) \\<in> Nodes n ll;\n     ?x3 \\<in> set_of pret \\<and> var ?x3 < ?nb3\\<rbrakk>\n    \\<Longrightarrow> var (repc (high no)) < n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repc (high no)) < n\n\ngoal (7 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered (Node lnort (repc no) rnort) var\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 7. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with varrepno_n vrlno_sn lnort_dag ord_lnort rnort_dag rnort_Node \n                    lnort_Node ord_rnort"], ["proof (chain)\npicking this:\n  var (repc no) = n\n  var (repc (low no)) < n\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  ordered lnort var\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  rnort = Node lrnort (repc (high no)) rrnort\n  lnort = Node llnort (repc (low no)) rlnort\n  ordered rnort var\n  var (repc (high no)) < n", "show \"ordered (Node lnort (repc no) rnort) var\""], ["proof (prove)\nusing this:\n  var (repc no) = n\n  var (repc (low no)) < n\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n  ordered lnort var\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n  rnort = Node lrnort (repc (high no)) rrnort\n  lnort = Node llnort (repc (low no)) rlnort\n  ordered rnort var\n  var (repc (high no)) < n\n\ngoal (1 subgoal):\n 1. ordered (Node lnort (repc no) rnort) var", "by auto"], ["proof (state)\nthis:\n  ordered (Node lnort (repc no) rnort) var\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix lnort rnort"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_in_Nodes: \"set_of lnort \\<subseteq> repb `Nodes n ll\""], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_in_Nodes: \"set_of rnort \\<subseteq> repb `Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from lnort_in_Nodes repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have lnort_in_repcNodes: \"set_of lnort \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of lnort \\<subseteq> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> repc ` Nodes n ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from rnort_in_Nodes repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rnort_in_repcNodes: \"set_of rnort \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repc ` Nodes n ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "have nNodessubset: \"Nodes n ll \\<subseteq> Nodes (n+1) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Nodes n ll \\<subseteq> Nodes (n + 1) ll", "by (simp add: Nodes_subset)"], ["proof (state)\nthis:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "then"], ["proof (chain)\npicking this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll", "have repc_Nodes_subset:\n                    \"repc `Nodes n ll \\<subseteq> repc `Nodes (n+1) ll\""], ["proof (prove)\nusing this:\n  Nodes n ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from no_in_Nodes"], ["proof (chain)\npicking this:\n  no \\<in> Nodes (n + 1) ll", "have \"repc no \\<in> repc `Nodes (n+1) ll\""], ["proof (prove)\nusing this:\n  no \\<in> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc no \\<in> repc ` Nodes (n + 1) ll", "by blast"], ["proof (state)\nthis:\n  repc no \\<in> repc ` Nodes (n + 1) ll\n\ngoal (6 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> set_of (Node lnort (repc no) rnort)\n                         \\<subseteq> repc ` Nodes (n + 1) ll\n 6. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with repc_Nodes_subset lnort_in_repcNodes rnort_in_repcNodes"], ["proof (chain)\npicking this:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n  set_of lnort \\<subseteq> repc ` Nodes n ll\n  set_of rnort \\<subseteq> repc ` Nodes n ll\n  repc no \\<in> repc ` Nodes (n + 1) ll", "show \"set_of (Node lnort (repc no) rnort) \\<subseteq> \n                    repc `Nodes (n + 1) ll\""], ["proof (prove)\nusing this:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (n + 1) ll\n  set_of lnort \\<subseteq> repc ` Nodes n ll\n  set_of rnort \\<subseteq> repc ` Nodes n ll\n  repc no \\<in> repc ` Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. set_of (Node lnort (repc no) rnort) \\<subseteq> repc ` Nodes (n + 1) ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll;\n     set_of lnort \\<subseteq> repc ` Nodes n ll;\n     set_of rnort \\<subseteq> repc ` Nodes n ll;\n     repc no \\<in> repc ` Nodes (Suc n) ll\\<rbrakk>\n    \\<Longrightarrow> set_of lnort\n                      \\<subseteq> repc ` Nodes (Suc n) ll \\<and>\n                      set_of rnort \\<subseteq> repc ` Nodes (Suc n) ll", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set_of (Node lnort (repc no) rnort) \\<subseteq> repc ` Nodes (n + 1) ll\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnobdt_def: \" bdt lnot var = Some lnobdt\""], ["proof (state)\nthis:\n  bdt lnot var = Some lnobdt\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnobdt_def: \" bdt rnot var = Some rnobdt\""], ["proof (state)\nthis:\n  bdt rnot var = Some rnobdt\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnorbdt_def: \" bdt rnort var = Some rnorbdt\""], ["proof (state)\nthis:\n  bdt rnort var = Some rnorbdt\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume cong_rno_rnor: \" rnobdt \\<sim> rnorbdt\""], ["proof (state)\nthis:\n  rnobdt \\<sim> rnorbdt\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnot_dag: \"Dag (low no) low high lnot\""], ["proof (state)\nthis:\n  Dag (low no) low high lnot\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnot_dag: \"Dag (high no) low high rnot\""], ["proof (state)\nthis:\n  Dag (high no) low high rnot\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume \"\\<not> Suc 0 < var no\""], ["proof (state)\nthis:\n  \\<not> Suc 0 < var no\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "then"], ["proof (chain)\npicking this:\n  \\<not> Suc 0 < var no", "have varnoseq1: \"var no = 0 \\<or> var no = 1\""], ["proof (prove)\nusing this:\n  \\<not> Suc 0 < var no\n\ngoal (1 subgoal):\n 1. var no = 0 \\<or> var no = 1", "by auto"], ["proof (state)\nthis:\n  var no = 0 \\<or> var no = 1\n\ngoal (5 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        \\<not> Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nobdt.\n                            bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                            (\\<exists>norbdt.\n                                bdt (Node lnort (repc no) rnort) var =\n                                Some norbdt \\<and>\n                                nobdt \\<sim> norbdt)\n 5. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "show \"\\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt \\<and> \n                    (\\<exists>norbdt. bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and> \n                    nobdt \\<sim> norbdt)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "proof (cases \"var no = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "case True"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "note vnoNull=this"], ["proof (state)\nthis:\n  var no = 0\n\ngoal (2 subgoals):\n 1. var no = 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)\n 2. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with pret_dag ord_pret no_in_pret lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 0\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; no \\<in> set_of pret;\n     low no \\<noteq> Null; high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nobdt.\n                         bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                         (\\<exists>norbdt.\n                             bdt (Node lnort (repc no) rnort) var =\n                             Some norbdt \\<and>\n                             nobdt \\<sim> norbdt)", "apply (drule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> ordered pret ?var6\n 2. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> ?no6 \\<in> set_of pret\n 3. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> low ?no6 \\<noteq> Null\n 4. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0\\<rbrakk>\n    \\<Longrightarrow> high ?no6 \\<noteq> Null\n 5. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 0;\n     ?var6 (low ?no6) < ?var6 ?no6 \\<and>\n     ?var6 (high ?no6) < ?var6 ?no6\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nobdt.\n                         bdt (Node lnot no rnot) var = Some nobdt \\<and>\n                         (\\<exists>norbdt.\n                             bdt (Node lnort (repc no) rnort) var =\n                             Some norbdt \\<and>\n                             nobdt \\<sim> norbdt)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node lnot no rnot) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "assume \"var no \\<noteq> 0\""], ["proof (state)\nthis:\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with varnoseq1"], ["proof (chain)\npicking this:\n  var no = 0 \\<or> var no = 1\n  var no \\<noteq> 0", "have vnoOne: \"var no = 1\""], ["proof (prove)\nusing this:\n  var no = 0 \\<or> var no = 1\n  var no \\<noteq> 0\n\ngoal (1 subgoal):\n 1. var no = 1", "by simp"], ["proof (state)\nthis:\n  var no = 1\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from pret_dag  ord_pret no_in_pret lno_nNull hno_nNull  \n                      vnoOne"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 1", "have vlvrNull: \"var (low no) = 0 \\<and> var (high no) = 0\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  no \\<in> set_of pret\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  var no = 1\n\ngoal (1 subgoal):\n 1. var (low no) = 0 \\<and> var (high no) = 0", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; no \\<in> set_of pret;\n     low no \\<noteq> Null; high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> var (low no) = 0 \\<and> var (high no) = 0", "apply (drule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> ordered pret ?var6\n 2. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> ?no6 \\<in> set_of pret\n 3. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> low ?no6 \\<noteq> Null\n 4. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1\\<rbrakk>\n    \\<Longrightarrow> high ?no6 \\<noteq> Null\n 5. \\<lbrakk>ordered pret var; no \\<in> set_of pret; low no \\<noteq> Null;\n     high no \\<noteq> Null; var no = 1;\n     ?var6 (low ?no6) < ?var6 ?no6 \\<and>\n     ?var6 (high ?no6) < ?var6 ?no6\\<rbrakk>\n    \\<Longrightarrow> var (low no) = 0 \\<and> var (high no) = 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low no) = 0 \\<and> var (high no) = 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  var (low no) = 0 \\<and> var (high no) = 0", "have vlNull: \"var (low no) = 0\""], ["proof (prove)\nusing this:\n  var (low no) = 0 \\<and> var (high no) = 0\n\ngoal (1 subgoal):\n 1. var (low no) = 0", "by simp"], ["proof (state)\nthis:\n  var (low no) = 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from vlvrNull"], ["proof (chain)\npicking this:\n  var (low no) = 0 \\<and> var (high no) = 0", "have vrNull: \"var (high no) = 0\""], ["proof (prove)\nusing this:\n  var (low no) = 0 \\<and> var (high no) = 0\n\ngoal (1 subgoal):\n 1. var (high no) = 0", "by simp"], ["proof (state)\nthis:\n  var (high no) = 0\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from lnobdt_def lnot_dag vlNull  lno_nNull"], ["proof (chain)\npicking this:\n  bdt lnot var = Some lnobdt\n  Dag (low no) low high lnot\n  var (low no) = 0\n  low no \\<noteq> Null", "have lnobdt_Zero: \"lnobdt = Zero\""], ["proof (prove)\nusing this:\n  bdt lnot var = Some lnobdt\n  Dag (low no) low high lnot\n  var (low no) = 0\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. lnobdt = Zero", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt lnot var = Some lnobdt; Dag (low no) low high lnot;\n     var (low no) = 0; low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> lnobdt = Zero", "apply (drule bdt_Some_var0_Zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (low no) low high lnot; var (low no) = 0;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (root lnot) = 0\n 2. \\<lbrakk>Dag (low no) low high lnot; var (low no) = 0;\n     low no \\<noteq> Null;\n     lnobdt = Zero \\<and> lnot = Node Tip (root lnot) Tip\\<rbrakk>\n    \\<Longrightarrow> lnobdt = Zero", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  lnobdt = Zero\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from rnobdt_def rnot_dag vrNull  hno_nNull"], ["proof (chain)\npicking this:\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0\n  high no \\<noteq> Null", "have rnobdt_Zero: \"rnobdt = Zero\""], ["proof (prove)\nusing this:\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rnobdt = Zero", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt rnot var = Some rnobdt; Dag (high no) low high rnot;\n     var (high no) = 0; high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> rnobdt = Zero", "apply (drule bdt_Some_var0_Zero)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag (high no) low high rnot; var (high no) = 0;\n     high no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (root rnot) = 0\n 2. \\<lbrakk>Dag (high no) low high rnot; var (high no) = 0;\n     high no \\<noteq> Null;\n     rnobdt = Zero \\<and> rnot = Node Tip (root rnot) Tip\\<rbrakk>\n    \\<Longrightarrow> rnobdt = Zero", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rnobdt = Zero\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from lnobdt_Zero lnobdt_def"], ["proof (chain)\npicking this:\n  lnobdt = Zero\n  bdt lnot var = Some lnobdt", "have \"bdt lnot var = Some Zero\""], ["proof (prove)\nusing this:\n  lnobdt = Zero\n  bdt lnot var = Some lnobdt\n\ngoal (1 subgoal):\n 1. bdt lnot var = Some Zero", "by simp"], ["proof (state)\nthis:\n  bdt lnot var = Some Zero\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with lnot_dag vlNull"], ["proof (chain)\npicking this:\n  Dag (low no) low high lnot\n  var (low no) = 0\n  bdt lnot var = Some Zero", "have lnot_Node: \"lnot = (Node Tip (low no) Tip)\""], ["proof (prove)\nusing this:\n  Dag (low no) low high lnot\n  var (low no) = 0\n  bdt lnot var = Some Zero\n\ngoal (1 subgoal):\n 1. lnot = Node Tip (low no) Tip", "by auto"], ["proof (state)\nthis:\n  lnot = Node Tip (low no) Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from rnobdt_Zero rnobdt_def rnot_dag vrNull"], ["proof (chain)\npicking this:\n  rnobdt = Zero\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0", "have rnot_Node: \"rnot = (Node Tip (high no) Tip)\""], ["proof (prove)\nusing this:\n  rnobdt = Zero\n  bdt rnot var = Some rnobdt\n  Dag (high no) low high rnot\n  var (high no) = 0\n\ngoal (1 subgoal):\n 1. rnot = Node Tip (high no) Tip", "by auto"], ["proof (state)\nthis:\n  rnot = Node Tip (high no) Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from pret_dag no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret", "obtain not \n                      where not_ex: \"Dag no low high not\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. (\\<And>not.\n        Dag no low high not \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     Dag p low high pret; no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule dag_setof_exD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> ?n6 \\<in> set_of pret\n 2. \\<lbrakk>\\<And>not. Dag no low high not \\<Longrightarrow> thesis;\n     no \\<in> set_of pret; \\<exists>nt. Dag ?n6 low high nt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag no low high not\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with pret_dag no_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  no \\<in> set_of pret\n  Dag no low high not", "have not_ex_in_pret: \"not <= pret\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  no \\<in> set_of pret\n  Dag no low high not\n\ngoal (1 subgoal):\n 1. not \\<le> pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> not \\<le> pret", "apply (rule set_of_subdag)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> Dag ?p3 ?low3 ?high3 pret\n 2. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> Dag ?no3 ?low3 ?high3 not\n 3. \\<lbrakk>Dag p low high pret; no \\<in> set_of pret;\n     Dag no low high not\\<rbrakk>\n    \\<Longrightarrow> ?no3 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  not \\<le> pret\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from not_ex lnot_dag rnot_dag   nonNull"], ["proof (chain)\npicking this:\n  Dag no low high not\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  no \\<noteq> Null", "have not_def: \"not = (Node lnot no rnot)\""], ["proof (prove)\nusing this:\n  Dag no low high not\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. not = Node lnot no rnot", "by (simp add: Dag_unique del: Dag_Ref)"], ["proof (state)\nthis:\n  not = Node lnot no rnot\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with not_ex_in_pret prebdt_pret"], ["proof (chain)\npicking this:\n  not \\<le> pret\n  bdt pret var = Some prebdt\n  not = Node lnot no rnot", "have nobdt_ex: \"\\<exists> nobdt. bdt (Node lnot no rnot) var = Some nobdt\""], ["proof (prove)\nusing this:\n  not \\<le> pret\n  bdt pret var = Some prebdt\n  not = Node lnot no rnot\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>not \\<le> pret; bdt pret var = Some prebdt;\n     not = Node lnot no rnot\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nobdt.\n                         bdt (Node lnot no rnot) var = Some nobdt", "apply (rule subbdt_ex)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>not \\<le> pret; bdt pret var = Some prebdt;\n     not = Node lnot no rnot\\<rbrakk>\n    \\<Longrightarrow> Node lnot no rnot \\<le> ?t3\n 2. \\<lbrakk>not \\<le> pret; bdt pret var = Some prebdt;\n     not = Node lnot no rnot\\<rbrakk>\n    \\<Longrightarrow> bdt ?t3 var = Some ?bdt1.3", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "then"], ["proof (chain)\npicking this:\n  \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt", "obtain nobdt where \n                      nobdt_def: \"bdt (Node lnot no rnot) var = Some nobdt\""], ["proof (prove)\nusing this:\n  \\<exists>nobdt. bdt (Node lnot no rnot) var = Some nobdt\n\ngoal (1 subgoal):\n 1. (\\<And>nobdt.\n        bdt (Node lnot no rnot) var = Some nobdt \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bdt (Node lnot no rnot) var = Some nobdt\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "from not_def"], ["proof (chain)\npicking this:\n  not = Node lnot no rnot", "have \"root not = no\""], ["proof (prove)\nusing this:\n  not = Node lnot no rnot\n\ngoal (1 subgoal):\n 1. root not = no", "by simp"], ["proof (state)\nthis:\n  root not = no\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with nobdt_def vnoOne not_def"], ["proof (chain)\npicking this:\n  bdt (Node lnot no rnot) var = Some nobdt\n  var no = 1\n  not = Node lnot no rnot\n  root not = no", "have \"not = (Node Tip no Tip)\""], ["proof (prove)\nusing this:\n  bdt (Node lnot no rnot) var = Some nobdt\n  var no = 1\n  not = Node lnot no rnot\n  root not = no\n\ngoal (1 subgoal):\n 1. not = Node Tip no Tip", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bdt (Node lnot no rnot) var = Some nobdt; var no = 1;\n     not = Node lnot no rnot; root not = no\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply (drule bdt_Some_var1_One)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>var no = 1; not = Node lnot no rnot; root not = no\\<rbrakk>\n    \\<Longrightarrow> var (root (Node lnot no rnot)) = 1\n 2. \\<lbrakk>var no = 1; not = Node lnot no rnot; root not = no;\n     nobdt = One \\<and>\n     Node lnot no rnot = Node Tip (root (Node lnot no rnot)) Tip\\<rbrakk>\n    \\<Longrightarrow> not = Node Tip no Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with not_def"], ["proof (chain)\npicking this:\n  not = Node lnot no rnot\n  not = Node Tip no Tip", "have \"rnot = Tip\""], ["proof (prove)\nusing this:\n  not = Node lnot no rnot\n  not = Node Tip no Tip\n\ngoal (1 subgoal):\n 1. rnot = Tip", "by simp"], ["proof (state)\nthis:\n  rnot = Tip\n\ngoal (1 subgoal):\n 1. var no \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "with rnot_Node"], ["proof (chain)\npicking this:\n  rnot = Node Tip (high no) Tip\n  rnot = Tip", "show ?thesis"], ["proof (prove)\nusing this:\n  rnot = Node Tip (high no) Tip\n  rnot = Tip\n\ngoal (1 subgoal):\n 1. \\<exists>nobdt.\n       bdt (Node lnot no rnot) var = Some nobdt \\<and>\n       (\\<exists>norbdt.\n           bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n           nobdt \\<sim> norbdt)", "by simp"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node lnot no rnot) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nobdt.\n     bdt (Node lnot no rnot) var = Some nobdt \\<and>\n     (\\<exists>norbdt.\n         bdt (Node lnort (repc no) rnort) var = Some norbdt \\<and>\n         nobdt \\<sim> norbdt)\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix lnot rnot lnobdt rnobdt"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnot_dag: \"Dag (low no) low high lnot\""], ["proof (state)\nthis:\n  Dag (low no) low high lnot\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnot_dag: \" Dag (high no) low high rnot\""], ["proof (state)\nthis:\n  Dag (high no) low high rnot\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnobdt_def: \" bdt lnot var = Some lnobdt\""], ["proof (state)\nthis:\n  bdt lnot var = Some lnobdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnobdt_def: \" bdt rnot var = Some rnobdt\""], ["proof (state)\nthis:\n  bdt rnot var = Some rnobdt\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume onesvarno: \" Suc 0 < var no\""], ["proof (state)\nthis:\n  Suc 0 < var no\n\ngoal (4 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnot no rnot) var =\n                         Some (Bdt_Node lnobdt (var no) rnobdt)\n 4. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with rnobdt_def lnot_dag rnot_dag lnobdt_def"], ["proof (chain)\npicking this:\n  bdt rnot var = Some rnobdt\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  bdt lnot var = Some lnobdt\n  Suc 0 < var no", "show \"bdt (Node lnot no rnot) var = \n                    Some (Bdt_Node lnobdt (var no) rnobdt)\""], ["proof (prove)\nusing this:\n  bdt rnot var = Some rnobdt\n  Dag (low no) low high lnot\n  Dag (high no) low high rnot\n  bdt lnot var = Some lnobdt\n  Suc 0 < var no\n\ngoal (1 subgoal):\n 1. bdt (Node lnot no rnot) var = Some (Bdt_Node lnobdt (var no) rnobdt)", "by simp"], ["proof (state)\nthis:\n  bdt (Node lnot no rnot) var = Some (Bdt_Node lnobdt (var no) rnobdt)\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_dag: \n                    \"Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\""], ["proof (state)\nthis:\n  Dag (repc (high no)) (repb \\<propto> low) (repb \\<propto> high) rnort\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_dag: \n                    \"Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\""], ["proof (state)\nthis:\n  Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high) lnort\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnorbdt_def: \" bdt rnort var = Some rnorbdt\""], ["proof (state)\nthis:\n  bdt rnort var = Some rnorbdt\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnorbdt_def: \"bdt lnort var = Some lnorbdt\""], ["proof (state)\nthis:\n  bdt lnort var = Some lnorbdt\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume varno_bOne: \"Suc 0 < var no\""], ["proof (state)\nthis:\n  Suc 0 < var no\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with varno"], ["proof (chain)\npicking this:\n  var no = n\n  Suc 0 < var no", "have \"Suc 0 < n\""], ["proof (prove)\nusing this:\n  var no = n\n  Suc 0 < var no\n\ngoal (1 subgoal):\n 1. Suc 0 < n", "by simp"], ["proof (state)\nthis:\n  Suc 0 < n\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with varrepno_n"], ["proof (chain)\npicking this:\n  var (repc no) = n\n  Suc 0 < n", "have \"Suc 0 < var (repc no)\""], ["proof (prove)\nusing this:\n  var (repc no) = n\n  Suc 0 < n\n\ngoal (1 subgoal):\n 1. Suc 0 < var (repc no)", "by simp"], ["proof (state)\nthis:\n  Suc 0 < var (repc no)\n\ngoal (3 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> bdt (Node lnort (repc no) rnort) var =\n                         Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n 2. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 3. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with rnorbdt_def lnorbdt_def"], ["proof (chain)\npicking this:\n  bdt rnort var = Some rnorbdt\n  bdt lnort var = Some lnorbdt\n  Suc 0 < var (repc no)", "show \"bdt (Node lnort (repc no) rnort) var = \n                    Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\""], ["proof (prove)\nusing this:\n  bdt rnort var = Some rnorbdt\n  bdt lnort var = Some lnorbdt\n  Suc 0 < var (repc no)\n\ngoal (1 subgoal):\n 1. bdt (Node lnort (repc no) rnort) var =\n    Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)", "by simp"], ["proof (state)\nthis:\n  bdt (Node lnort (repc no) rnort) var =\n  Some (Bdt_Node lnorbdt (var (repc no)) rnorbdt)\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix rnobdt lnobdt rnorbdt lnorbdt"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lcong_eval: \"lnobdt \\<sim> lnorbdt\""], ["proof (state)\nthis:\n  lnobdt \\<sim> lnorbdt\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rcong_eval: \" rnobdt \\<sim> rnorbdt\""], ["proof (state)\nthis:\n  rnobdt \\<sim> rnorbdt\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from varno varrepno_n"], ["proof (chain)\npicking this:\n  var no = n\n  var (repc no) = n", "have \"var (repc no) = var no\""], ["proof (prove)\nusing this:\n  var no = n\n  var (repc no) = n\n\ngoal (1 subgoal):\n 1. var (repc no) = var no", "by simp"], ["proof (state)\nthis:\n  var (repc no) = var no\n\ngoal (2 subgoals):\n 1. \\<And>rnot lnot rnort lnort rnobdt lnobdt rnorbdt lnorbdt.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        bdt rnot var = Some rnobdt; bdt lnot var = Some lnobdt;\n        bdt rnort var = Some rnorbdt; rnobdt \\<sim> rnorbdt;\n        bdt lnort var = Some lnorbdt; lnobdt \\<sim> lnorbdt;\n        Suc 0 < var no\\<rbrakk>\n       \\<Longrightarrow> Bdt_Node lnobdt (var no) rnobdt \\<sim>\n                         Bdt_Node lnorbdt (var (repc no)) rnorbdt\n 2. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "with lcong_eval rcong_eval"], ["proof (chain)\npicking this:\n  lnobdt \\<sim> lnorbdt\n  rnobdt \\<sim> rnorbdt\n  var (repc no) = var no", "show \"Bdt_Node lnobdt (var no) rnobdt \\<sim> \n                    Bdt_Node lnorbdt (var (repc no)) rnorbdt\""], ["proof (prove)\nusing this:\n  lnobdt \\<sim> lnorbdt\n  rnobdt \\<sim> rnorbdt\n  var (repc no) = var no\n\ngoal (1 subgoal):\n 1. Bdt_Node lnobdt (var no) rnobdt \\<sim>\n    Bdt_Node lnorbdt (var (repc no)) rnorbdt", "apply (unfold cong_eval_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>eval lnobdt = eval lnorbdt; eval rnobdt = eval rnorbdt;\n     var (repc no) = var no\\<rbrakk>\n    \\<Longrightarrow> eval (Bdt_Node lnobdt (var no) rnobdt) =\n                      eval (Bdt_Node lnorbdt (var (repc no)) rnorbdt)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>eval lnobdt = eval lnorbdt; eval rnobdt = eval rnorbdt;\n        var (repc no) = var no\\<rbrakk>\n       \\<Longrightarrow> eval (Bdt_Node lnobdt (var no) rnobdt) x =\n                         eval (Bdt_Node lnorbdt (var (repc no)) rnorbdt) x", "by simp"], ["proof (state)\nthis:\n  Bdt_Node lnobdt (var no) rnobdt \\<sim>\n  Bdt_Node lnorbdt (var (repc no)) rnorbdt\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "fix rnot lnot rnort lnort"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_repb: \"\\<forall>no\\<in>set_of lnort. repb no = no\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of lnort. repb no = no\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_repb: \"\\<forall>no\\<in>set_of rnort. repb no = no\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of rnort. repb no = no\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume rnort_in_repb_Nodesn: \"set_of rnort \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "assume lnort_in_repb_Nodesn: \"set_of lnort \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from repbNodes_in_Nodes rnort_in_repb_Nodesn"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of rnort \\<subseteq> repb ` Nodes n ll", "have rnort_in_Nodesn: \"set_of rnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of rnort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rnort \\<subseteq> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "from repbNodes_in_Nodes lnort_in_repb_Nodesn"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of lnort \\<subseteq> repb ` Nodes n ll", "have lnort_in_Nodesn: \"set_of lnort \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  set_of lnort \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of lnort \\<subseteq> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of lnort \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "have rnort_repc: \"\\<forall>no\\<in>set_of rnort. repc no = no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set_of rnort. repc no = no", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "fix pt"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "assume pt_in_rnort: \" pt \\<in> set_of rnort\""], ["proof (state)\nthis:\n  pt \\<in> set_of rnort\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with rnort_in_Nodesn"], ["proof (chain)\npicking this:\n  set_of rnort \\<subseteq> Nodes n ll\n  pt \\<in> set_of rnort", "have \"pt \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rnort \\<subseteq> Nodes n ll\n  pt \\<in> set_of rnort\n\ngoal (1 subgoal):\n 1. pt \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  pt \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with Nodesn_notin_lln"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  pt \\<in> Nodes n ll", "have \"pt \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  pt \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. pt \\<notin> set (ll ! n)", "by auto"], ["proof (state)\nthis:\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)", "have \"repb pt = repc pt\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb pt = repc pt", "by auto"], ["proof (state)\nthis:\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of rnort \\<Longrightarrow> repc no = no", "with rnort_repb pt_in_rnort"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set_of rnort. repb no = no\n  pt \\<in> set_of rnort\n  repb pt = repc pt", "show \"repc pt = pt\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set_of rnort. repb no = no\n  pt \\<in> set_of rnort\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by auto"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of rnort. repc no = no\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "have lnort_repc: \"\\<forall>no\\<in>set_of lnort. repc no = no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set_of lnort. repc no = no", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of lnort \\<Longrightarrow> repc no = no", "fix pt"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of lnort \\<Longrightarrow> repc no = no", "assume pt_in_lnort: \" pt \\<in> set_of lnort\""], ["proof (state)\nthis:\n  pt \\<in> set_of lnort\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of lnort \\<Longrightarrow> repc no = no", "with lnort_in_Nodesn"], ["proof (chain)\npicking this:\n  set_of lnort \\<subseteq> Nodes n ll\n  pt \\<in> set_of lnort", "have \"pt \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lnort \\<subseteq> Nodes n ll\n  pt \\<in> set_of lnort\n\ngoal (1 subgoal):\n 1. pt \\<in> Nodes n ll", "by blast"], ["proof (state)\nthis:\n  pt \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of lnort \\<Longrightarrow> repc no = no", "with Nodesn_notin_lln"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  pt \\<in> Nodes n ll", "have \"pt \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n  pt \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. pt \\<notin> set (ll ! n)", "by auto"], ["proof (state)\nthis:\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of lnort \\<Longrightarrow> repc no = no", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)", "have \"repb pt = repc pt\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  pt \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repb pt = repc pt", "by auto"], ["proof (state)\nthis:\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. \\<And>no. no \\<in> set_of lnort \\<Longrightarrow> repc no = no", "with lnort_repb pt_in_lnort"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set_of lnort. repb no = no\n  pt \\<in> set_of lnort\n  repb pt = repc pt", "show \"repc pt = pt\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set_of lnort. repb no = no\n  pt \\<in> set_of lnort\n  repb pt = repc pt\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by auto"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of lnort. repc no = no\n\ngoal (1 subgoal):\n 1. \\<And>rnot lnot rnort lnort.\n       \\<lbrakk>Dag (repc (high no)) (repb \\<propto> low)\n                 (repb \\<propto> high) rnort;\n        Dag (repc (low no)) (repb \\<propto> low) (repb \\<propto> high)\n         lnort;\n        Dag (high no) low high rnot; Dag (low no) low high lnot;\n        reduced rnort; reduced lnort; ordered rnort var; ordered lnort var;\n        set_of rnort \\<subseteq> repb ` Nodes n ll;\n        set_of lnort \\<subseteq> repb ` Nodes n ll;\n        \\<forall>no\\<in>set_of rnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt rnot var = Some nobdt \\<and>\n           bdt rnort var = Some norbdt \\<and> nobdt \\<sim> norbdt;\n        \\<forall>no\\<in>set_of lnort. repb no = no;\n        \\<exists>nobdt norbdt.\n           bdt lnot var = Some nobdt \\<and>\n           bdt lnort var = Some norbdt \\<and> nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set_of\n    (Node lnort (repc no) rnort).\n                            repc no = no", "show \"\\<forall>no\\<in>set_of (Node lnort (repc no) rnort). repc no = no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set_of (Node lnort (repc no) rnort). repc no = no", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>noa.\n       noa \\<in> set_of (Node lnort (repc no) rnort) \\<Longrightarrow>\n       repc noa = noa", "fix pt"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>noa.\n       noa \\<in> set_of (Node lnort (repc no) rnort) \\<Longrightarrow>\n       repc noa = noa", "assume pt_in_rept: \"pt \\<in> set_of (Node lnort (repc no) rnort)\""], ["proof (state)\nthis:\n  pt \\<in> set_of (Node lnort (repc no) rnort)\n\ngoal (1 subgoal):\n 1. \\<And>noa.\n       noa \\<in> set_of (Node lnort (repc no) rnort) \\<Longrightarrow>\n       repc noa = noa", "show \"repc pt = pt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc pt = pt", "proof (cases \"pt \\<in> set_of lnort\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pt \\<in> set_of lnort \\<Longrightarrow> repc pt = pt\n 2. pt \\<notin> set_of lnort \\<Longrightarrow> repc pt = pt", "case True"], ["proof (state)\nthis:\n  pt \\<in> set_of lnort\n\ngoal (2 subgoals):\n 1. pt \\<in> set_of lnort \\<Longrightarrow> repc pt = pt\n 2. pt \\<notin> set_of lnort \\<Longrightarrow> repc pt = pt", "with lnort_repc"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set_of lnort. repc no = no\n  pt \\<in> set_of lnort", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set_of lnort. repc no = no\n  pt \\<in> set_of lnort\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by auto"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal (1 subgoal):\n 1. pt \\<notin> set_of lnort \\<Longrightarrow> repc pt = pt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pt \\<notin> set_of lnort \\<Longrightarrow> repc pt = pt", "assume pt_notin_lnort: \"pt \\<notin> set_of lnort\""], ["proof (state)\nthis:\n  pt \\<notin> set_of lnort\n\ngoal (1 subgoal):\n 1. pt \\<notin> set_of lnort \\<Longrightarrow> repc pt = pt", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. repc pt = pt", "proof (cases \"pt \\<in> set_of rnort\")"], ["proof (state)\ngoal (2 subgoals):\n 1. pt \\<in> set_of rnort \\<Longrightarrow> repc pt = pt\n 2. pt \\<notin> set_of rnort \\<Longrightarrow> repc pt = pt", "case True"], ["proof (state)\nthis:\n  pt \\<in> set_of rnort\n\ngoal (2 subgoals):\n 1. pt \\<in> set_of rnort \\<Longrightarrow> repc pt = pt\n 2. pt \\<notin> set_of rnort \\<Longrightarrow> repc pt = pt", "with rnort_repc"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set_of rnort. repc no = no\n  pt \\<in> set_of rnort", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set_of rnort. repc no = no\n  pt \\<in> set_of rnort\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by auto"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal (1 subgoal):\n 1. pt \\<notin> set_of rnort \\<Longrightarrow> repc pt = pt", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. pt \\<notin> set_of rnort \\<Longrightarrow> repc pt = pt", "assume pt_notin_rnort: \"pt \\<notin> set_of rnort\""], ["proof (state)\nthis:\n  pt \\<notin> set_of rnort\n\ngoal (1 subgoal):\n 1. pt \\<notin> set_of rnort \\<Longrightarrow> repc pt = pt", "with pt_notin_lnort pt_in_rept"], ["proof (chain)\npicking this:\n  pt \\<notin> set_of lnort\n  pt \\<in> set_of (Node lnort (repc no) rnort)\n  pt \\<notin> set_of rnort", "have \"pt = repc no\""], ["proof (prove)\nusing this:\n  pt \\<notin> set_of lnort\n  pt \\<in> set_of (Node lnort (repc no) rnort)\n  pt \\<notin> set_of rnort\n\ngoal (1 subgoal):\n 1. pt = repc no", "by simp"], ["proof (state)\nthis:\n  pt = repc no\n\ngoal (1 subgoal):\n 1. pt \\<notin> set_of rnort \\<Longrightarrow> repc pt = pt", "with rrno_eq_rno"], ["proof (chain)\npicking this:\n  repc (repc no) = repc no\n  pt = repc no", "show \"repc pt = pt\""], ["proof (prove)\nusing this:\n  repc (repc no) = repc no\n  pt = repc no\n\ngoal (1 subgoal):\n 1. repc pt = pt", "by simp"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc pt = pt\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set_of (Node lnort (repc no) rnort). repc no = no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. repc (low no) \\<noteq> repc (high no) \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with varrep rrno_eq_rno"], ["proof (chain)\npicking this:\n  var (repc no) \\<le> var no\n  repc (repc no) = repc no\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))", "show ?thesis"], ["proof (prove)\nusing this:\n  var (repc no) \\<le> var no\n  repc (repc no) = repc no\n  \\<exists>not nort.\n     Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n     Dag no low high not \\<and>\n     reduced nort \\<and>\n     ordered nort var \\<and>\n     set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n     (\\<exists>nobdt.\n         bdt not var = Some nobdt \\<and>\n         (\\<exists>norbdt.\n             bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt))\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. no \\<notin> Nodes n ll \\<Longrightarrow>\n    var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "with rnonN"], ["proof (chain)\npicking this:\n  repc no \\<noteq> Null\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "show ?thesis"], ["proof (prove)\nusing this:\n  repc no \\<noteq> Null\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. var (repc no) \\<le> var no \\<and>\n    (\\<exists>not nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        Dag no low high not \\<and>\n        reduced nort \\<and>\n        ordered nort var \\<and>\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n        (\\<exists>nobdt.\n            bdt not var = Some nobdt \\<and>\n            (\\<exists>norbdt.\n                bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "by simp"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var (repc no) \\<le> var no \\<and>\n  (\\<exists>not nort.\n      Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n      Dag no low high not \\<and>\n      reduced nort \\<and>\n      ordered nort var \\<and>\n      set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n      (\\<exists>nobdt.\n          bdt not var = Some nobdt \\<and>\n          (\\<exists>norbdt.\n              bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "note while_while_prop=this"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist", "have \"\\<forall>no \\<in> Nodes n ll. no \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "apply (simp add: Nodes_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y<n.\n                         \\<forall>no\\<in>set (ll ! y).\n                            no \\<notin> set (ll ! n)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y no.\n       \\<lbrakk>wf_ll pret ll var; n < length ll; y < n;\n        no \\<in> set (ll ! y); no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> False", "apply (drule no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no < length ll\n 2. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?j24 y no < length ll\n 3. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?no24 y no \\<in> set (ll ! ?i24 y no)\n 4. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n)\\<rbrakk>\n       \\<Longrightarrow> ?i24 y no \\<noteq> ?j24 y no\n 5. \\<And>y no.\n       \\<lbrakk>n < length ll; y < n; no \\<in> set (ll ! y);\n        no \\<in> set (ll ! n);\n        ?no24 y no \\<notin> set (ll ! ?j24 y no)\\<rbrakk>\n       \\<Longrightarrow> False", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)", "have \"\\<forall>no \\<in> Nodes n ll. repb no = repc no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes n ll. repb no = repc no", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no.\n                   no \\<notin> set (ll ! n) \\<longrightarrow>\n                   repb no = repc no;\n        \\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply (erule_tac x=no in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. no \\<notin> set (ll ! n);\n        no \\<in> Nodes n ll;\n        no \\<notin> set (ll ! n) \\<longrightarrow>\n        repb no = repc no\\<rbrakk>\n       \\<Longrightarrow> repb no = repc no", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "then"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no", "have repbNodes_repcNodes: \n          \"repb `(Nodes n ll) = repc `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll. repb no = repc no\n\ngoal (1 subgoal):\n 1. repb ` Nodes n ll = repc ` Nodes n ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll = repc ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repb ` Nodes n ll \\<subseteq> repc ` Nodes n ll\n 2. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes n ll. repb no = repc no \\<Longrightarrow>\n    repc ` Nodes n ll \\<subseteq> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no;\n        x \\<in> repc ` Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>\\<forall>no\\<in>Nodes n ll. repb no = repc no; x = repc xa;\n        xa \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply (erule_tac x=xa in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll;\n        xa \\<notin> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> repb ` Nodes n ll", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> x = repb (?x28 x xa)\n 2. \\<And>x xa.\n       \\<lbrakk>x = repc xa; xa \\<in> Nodes n ll; repb xa = repc xa\\<rbrakk>\n       \\<Longrightarrow> ?x28 x xa \\<in> Nodes n ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "then"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll = repc ` Nodes n ll", "have repcNodes_repbNodes: \n          \"repc `(Nodes n ll) = repb `(Nodes n ll)\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll = repb ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes n ll = repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "have repbc_dags_eq: \n          \"Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) = \n          Dags (repb  ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n    Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n    Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n    \\<subseteq> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high)\n 2. Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n    \\<subseteq> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high)", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                (repc \\<propto> high) \\<Longrightarrow>\n       x \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                (repb \\<propto> high)\n 2. Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n    \\<subseteq> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high)", "apply (erule Dags.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Dags (repb ` Nodes n ll)\n                                  (repb \\<propto> low) (repb \\<propto> high)\n 2. Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n    \\<subseteq> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n    \\<subseteq> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high)", "prefer 4"], ["proof (prove)\ngoal (4 subgoals):\n 1. Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n    \\<subseteq> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high)\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "apply rule"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x.\n       x \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                (repb \\<propto> high) \\<Longrightarrow>\n       x \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                (repc \\<propto> high)\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "apply (erule Dags.cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<in> Dags (repc ` Nodes n ll)\n                                  (repc \\<propto> low) (repc \\<propto> high)\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "apply (rule DagsI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 6. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 6. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "fix x p t"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 6. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_in_repcNodes: \"set_of t \\<subseteq> repc ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repc ` Nodes n ll\n\ngoal (6 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 6. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume x_t: \"x=t\""], ["proof (state)\nthis:\n  x = t\n\ngoal (6 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repb ` Nodes n ll\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 6. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with t_in_repcNodes repcNodes_repbNodes"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repc ` Nodes n ll\n  repc ` Nodes n ll = repb ` Nodes n ll\n  x = t", "show \"set_of x \\<subseteq> repb ` Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repc ` Nodes n ll\n  repc ` Nodes n ll = repb ` Nodes n ll\n  x = t\n\ngoal (1 subgoal):\n 1. set_of x \\<subseteq> repb ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of x \\<subseteq> repb ` Nodes n ll\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "fix x p t"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_in_repcNodes: \"set_of t \\<subseteq> repc ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repc ` Nodes n ll\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_dag: \"Dag p (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (state)\nthis:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume x_t: \"x=t\""], ["proof (state)\nthis:\n  x = t\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t", "have \"p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply (case_tac \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; p = Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null\n 2. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null", "obtain lt rt where t_Node: \"t=Node lt p rt\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        t = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from t_in_repcNodes t_dag t_nTip t_Node"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repc ` Nodes n ll\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t \\<noteq> Tip\n  t = Node lt p rt", "obtain q where \n            rq_p: \"repc q = p\" and q_in_Nodes: \"q \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repc ` Nodes n ll\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t \\<noteq> Tip\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>repc q = p; q \\<in> Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>q.\n                \\<lbrakk>repc q = p; q \\<in> Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> repc ` Nodes n ll \\<and>\n     set_of lt \\<subseteq> repc ` Nodes n ll \\<and>\n     set_of rt \\<subseteq> repc ` Nodes n ll;\n     p \\<noteq> Null \\<and>\n     Dag ((repc \\<propto> low) p) (repc \\<propto> low) (repc \\<propto> high)\n      lt \\<and>\n     Dag ((repc \\<propto> high) p) (repc \\<propto> low)\n      (repc \\<propto> high) rt;\n     t = Node lt p rt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>q.\n                \\<lbrakk>repc q = p; q \\<in> Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t = Node lt p rt; p \\<in> repc ` Nodes n ll; p \\<noteq> Null;\n     set_of lt \\<subseteq> repc ` Nodes n ll;\n     set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag ((repc \\<propto> low) p) (repc \\<propto> low) (repc \\<propto> high)\n      lt;\n     Dag ((repc \\<propto> high) p) (repc \\<propto> low)\n      (repc \\<propto> high) rt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>repc q = p; q \\<in> Nodes n ll\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t = Node lt p rt; p \\<noteq> Null;\n        set_of lt \\<subseteq> repc ` Nodes n ll;\n        set_of rt \\<subseteq> repc ` Nodes n ll;\n        Dag ((repc \\<propto> low) p) (repc \\<propto> low)\n         (repc \\<propto> high) lt;\n        Dag ((repc \\<propto> high) p) (repc \\<propto> low)\n         (repc \\<propto> high) rt;\n        p = repc x; x \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc q = p\n  q \\<in> Nodes n ll\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from q_in_Nodes"], ["proof (chain)\npicking this:\n  q \\<in> Nodes n ll", "have \"repb q = repc q\""], ["proof (prove)\nusing this:\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb q = repc q", "by (rule Nodes_n_rep_nc [rule_format])"], ["proof (state)\nthis:\n  repb q = repc q\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with rq_p"], ["proof (chain)\npicking this:\n  repc q = p\n  repb q = repc q", "have repbq_p: \"repb q = p\""], ["proof (prove)\nusing this:\n  repc q = p\n  repb q = repc q\n\ngoal (1 subgoal):\n 1. repb q = p", "by simp"], ["proof (state)\nthis:\n  repb q = p\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from q_in_Nodes"], ["proof (chain)\npicking this:\n  q \\<in> Nodes n ll", "have \"Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t = \n            Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (prove)\nusing this:\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n    Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t", "by (rule Nodes_repbc_Dags_eq [rule_format])"], ["proof (state)\nthis:\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with t_dag rq_p"], ["proof (chain)\npicking this:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  repc q = p\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t", "have \"Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t\""], ["proof (prove)\nusing this:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  repc q = p\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t", "by simp"], ["proof (state)\nthis:\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t\n\ngoal (5 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p7 x t p) (repb \\<propto> low)\n                          (repb \\<propto> high) x\n 5. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with repbq_p x_t"], ["proof (chain)\npicking this:\n  repb q = p\n  x = t\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t", "show \"Dag p (repb \\<propto> low) (repb \\<propto> high) x\""], ["proof (prove)\nusing this:\n  repb q = p\n  x = t\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t\n\ngoal (1 subgoal):\n 1. Dag p (repb \\<propto> low) (repb \\<propto> high) x", "by simp"], ["proof (state)\nthis:\n  Dag p (repb \\<propto> low) (repb \\<propto> high) x\n\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "fix x p t"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_in_repcNodes: \"set_of t \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repb ` Nodes n ll\n\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume x_t: \"x=t\""], ["proof (state)\nthis:\n  x = t\n\ngoal (4 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> set_of x \\<subseteq> repc ` Nodes n ll\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 4. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with t_in_repcNodes repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n  x = t", "show \"set_of x \\<subseteq> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n  x = t\n\ngoal (1 subgoal):\n 1. set_of x \\<subseteq> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  set_of x \\<subseteq> repc ` Nodes n ll\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "fix x p t"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_in_repcNodes: \"set_of t \\<subseteq> repb ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repb ` Nodes n ll\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_dag: \"Dag p (repb \\<propto> low) (repb \\<propto> high) t\""], ["proof (state)\nthis:\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume x_t: \"x=t\""], ["proof (state)\nthis:\n  x = t\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t", "have \"p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repb \\<propto> low) (repb \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply (case_tac \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repb \\<propto> low) (repb \\<propto> high) t; p = Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null\n 2. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n  p \\<noteq> Null", "obtain lt rt where t_Node: \"t=Node lt p rt\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        t = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from t_in_repcNodes t_dag t_nTip t_Node"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repb ` Nodes n ll\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n  t \\<noteq> Tip\n  t = Node lt p rt", "obtain q where \n            rq_p: \"repb q = p\" and q_in_Nodes: \"q \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repb ` Nodes n ll\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n  t \\<noteq> Tip\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        \\<lbrakk>repb q = p; q \\<in> Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>q.\n                \\<lbrakk>repb q = p; q \\<in> Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> repb ` Nodes n ll \\<and>\n     set_of lt \\<subseteq> repb ` Nodes n ll \\<and>\n     set_of rt \\<subseteq> repb ` Nodes n ll;\n     p \\<noteq> Null \\<and>\n     Dag ((repb \\<propto> low) p) (repb \\<propto> low) (repb \\<propto> high)\n      lt \\<and>\n     Dag ((repb \\<propto> high) p) (repb \\<propto> low)\n      (repb \\<propto> high) rt;\n     t = Node lt p rt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>q.\n                \\<lbrakk>repb q = p; q \\<in> Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t = Node lt p rt; p \\<in> repb ` Nodes n ll; p \\<noteq> Null;\n     set_of lt \\<subseteq> repb ` Nodes n ll;\n     set_of rt \\<subseteq> repb ` Nodes n ll;\n     Dag ((repb \\<propto> low) p) (repb \\<propto> low) (repb \\<propto> high)\n      lt;\n     Dag ((repb \\<propto> high) p) (repb \\<propto> low)\n      (repb \\<propto> high) rt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>repb q = p; q \\<in> Nodes n ll\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t = Node lt p rt; p \\<noteq> Null;\n        set_of lt \\<subseteq> repb ` Nodes n ll;\n        set_of rt \\<subseteq> repb ` Nodes n ll;\n        Dag ((repb \\<propto> low) p) (repb \\<propto> low)\n         (repb \\<propto> high) lt;\n        Dag ((repb \\<propto> high) p) (repb \\<propto> low)\n         (repb \\<propto> high) rt;\n        p = repb x; x \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb q = p\n  q \\<in> Nodes n ll\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from q_in_Nodes"], ["proof (chain)\npicking this:\n  q \\<in> Nodes n ll", "have \"repb q = repc q\""], ["proof (prove)\nusing this:\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repb q = repc q", "by (rule Nodes_n_rep_nc [rule_format])"], ["proof (state)\nthis:\n  repb q = repc q\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with rq_p"], ["proof (chain)\npicking this:\n  repb q = p\n  repb q = repc q", "have repbq_p: \"repc q = p\""], ["proof (prove)\nusing this:\n  repb q = p\n  repb q = repc q\n\ngoal (1 subgoal):\n 1. repc q = p", "by simp"], ["proof (state)\nthis:\n  repc q = p\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "from q_in_Nodes"], ["proof (chain)\npicking this:\n  q \\<in> Nodes n ll", "have \"Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t = \n            Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (prove)\nusing this:\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n    Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t", "by (rule Nodes_repbc_Dags_eq [rule_format])"], ["proof (state)\nthis:\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with t_dag rq_p"], ["proof (chain)\npicking this:\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n  repb q = p\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t", "have \"Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (prove)\nusing this:\n  Dag p (repb \\<propto> low) (repb \\<propto> high) t\n  repb q = p\n  Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) t =\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t", "by simp"], ["proof (state)\nthis:\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (3 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> Dag (?p15 x t p) (repc \\<propto> low)\n                          (repc \\<propto> high) x\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 3. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with repbq_p x_t"], ["proof (chain)\npicking this:\n  repc q = p\n  x = t\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t", "show \"Dag p (repc \\<propto> low) (repc \\<propto> high) x\""], ["proof (prove)\nusing this:\n  repc q = p\n  x = t\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. Dag p (repc \\<propto> low) (repc \\<propto> high) x", "by simp"], ["proof (state)\nthis:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) x\n\ngoal (2 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "fix x p and t :: \"dag\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume x_t: \"x = t\""], ["proof (state)\nthis:\n  x = t\n\ngoal (2 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (2 subgoals):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repb ` Nodes n ll;\n        Dag p (repb \\<propto> low) (repb \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip\n 2. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with x_t"], ["proof (chain)\npicking this:\n  x = t\n  t \\<noteq> Tip", "show \"x\\<noteq> Tip\""], ["proof (prove)\nusing this:\n  x = t\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. x \\<noteq> Tip", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "fix x p and t :: \"dag\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume x_t: \"x = t\""], ["proof (state)\nthis:\n  x = t\n\ngoal (1 subgoal):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x t p.\n       \\<lbrakk>x = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> x \\<noteq> Tip", "with x_t"], ["proof (chain)\npicking this:\n  x = t\n  t \\<noteq> Tip", "show \"x\\<noteq> Tip\""], ["proof (prove)\nusing this:\n  x = t\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. x \\<noteq> Tip", "by simp"], ["proof (state)\nthis:\n  x \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from pret_dag wf_ll nsll"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  wf_ll pret ll var\n  n < length levellist", "have null_notin_Nodes_Suc_n: \"Null \\<notin> Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  wf_ll pret ll var\n  n < length levellist\n\ngoal (1 subgoal):\n 1. Null \\<notin> Nodes (Suc n) ll", "by  - (rule Null_notin_Nodes,auto simp add: length_ll_eq)"], ["proof (state)\nthis:\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "{"], ["proof (state)\nthis:\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "fix t1 t2"], ["proof (state)\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "assume t1_in_DagsNodesn: \n            \"t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "assume t2_notin_DagsNodesn: \n            \"t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "assume t2_in_DagsNodesSucn: \n            \"t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "assume isomorphic_dags_eq_asm: \n            \"\\<forall>t1 t2. t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \n            \\<and> t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \n            \\<longrightarrow> isomorphic_dags_eq t1 t2 var\""], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "assume repbc_Dags: \n            \"Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) = \n            Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (state)\nthis:\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from t1_in_DagsNodesn repbc_Dags"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "have t1_repb_subnode: \n            \"t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n              (repb \\<propto> high)", "by simp"], ["proof (state)\nthis:\n  t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n            (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from t2_in_DagsNodesSucn"], ["proof (chain)\npicking this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)", "have t2_in_DagsNodesSucn: \n            \"t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n              (repc \\<propto> high)", "by simp"], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from repbNodes_in_Nodes repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have repcNodesn_in_Nodesn: \"repc `Nodes n ll \\<subseteq> Nodes n ll\""], ["proof (prove)\nusing this:\n  repb ` Nodes n ll \\<subseteq> Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from t1_in_DagsNodesn"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)", "obtain q where \n            Dag_q_Nodes_n: \n            \"Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and> q \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n        q \\<in> Nodes n ll \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof (elim Dags.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "fix p t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume t1_t: \"t1 = t\""], ["proof (state)\nthis:\n  t1 = t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume t_in_repcNodesn: \"set_of t \\<subseteq> repc ` Nodes n ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume t_dag: \"Dag p (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (state)\nthis:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "assume obtain_prop: \"\\<And>q. Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and> \n              q \\<in> Nodes n ll \\<Longrightarrow> ?thesis\""], ["proof (state)\nthis:\n  Dag (repc ?q2) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  ?q2 \\<in> Nodes n ll \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "from t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t", "have \"p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply (case_tac \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; p = Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null\n 2. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "with t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null", "obtain lt rt where t_Node: \"t=Node lt p rt\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        t = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "from t_in_repcNodesn t_dag t_nTip t_Node"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repc ` Nodes n ll\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t \\<noteq> Tip\n  t = Node lt p rt", "obtain k where \n              rk_p: \"repc k = p\" and k_in_Nodes: \"k \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repc ` Nodes n ll\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t \\<noteq> Tip\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>repc k = p; k \\<in> Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>repc k = p; k \\<in> Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     p \\<in> repc ` Nodes n ll \\<and>\n     set_of lt \\<subseteq> repc ` Nodes n ll \\<and>\n     set_of rt \\<subseteq> repc ` Nodes n ll;\n     p \\<noteq> Null \\<and>\n     Dag ((repc \\<propto> low) p) (repc \\<propto> low) (repc \\<propto> high)\n      lt \\<and>\n     Dag ((repc \\<propto> high) p) (repc \\<propto> low)\n      (repc \\<propto> high) rt;\n     t = Node lt p rt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>k.\n                \\<lbrakk>repc k = p; k \\<in> Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t = Node lt p rt; p \\<in> repc ` Nodes n ll; p \\<noteq> Null;\n     set_of lt \\<subseteq> repc ` Nodes n ll;\n     set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag ((repc \\<propto> low) p) (repc \\<propto> low) (repc \\<propto> high)\n      lt;\n     Dag ((repc \\<propto> high) p) (repc \\<propto> low)\n      (repc \\<propto> high) rt\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule imageE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>repc k = p; k \\<in> Nodes n ll\\<rbrakk>\n                   \\<Longrightarrow> thesis;\n        t = Node lt p rt; p \\<noteq> Null;\n        set_of lt \\<subseteq> repc ` Nodes n ll;\n        set_of rt \\<subseteq> repc ` Nodes n ll;\n        Dag ((repc \\<propto> low) p) (repc \\<propto> low)\n         (repc \\<propto> high) lt;\n        Dag ((repc \\<propto> high) p) (repc \\<propto> low)\n         (repc \\<propto> high) rt;\n        p = repc x; x \\<in> Nodes n ll\\<rbrakk>\n       \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc k = p\n  k \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>\\<And>q.\n                   Dag (repc q) (repc \\<propto> low) (repc \\<propto> high)\n                    t1 \\<and>\n                   q \\<in> Nodes n ll \\<Longrightarrow>\n                   thesis;\n        t1 = t; set_of t \\<subseteq> repc ` Nodes n ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> thesis", "with t1_t t_dag obtain_prop rk_p k_in_Nodes"], ["proof (chain)\npicking this:\n  t1 = t\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  Dag (repc ?q2) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  ?q2 \\<in> Nodes n ll \\<Longrightarrow>\n  thesis\n  repc k = p\n  k \\<in> Nodes n ll\n  repc k = p\n  k \\<in> Nodes n ll", "show ?thesis"], ["proof (prove)\nusing this:\n  t1 = t\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  Dag (repc ?q2) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  ?q2 \\<in> Nodes n ll \\<Longrightarrow>\n  thesis\n  repc k = p\n  k \\<in> Nodes n ll\n  repc k = p\n  k \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. thesis", "by auto"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with wf_ll  nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll", "have varq_sn: \"(var q < n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var q < n", "apply (simp add: Nodes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n     (\\<exists>x<n. q \\<in> set (ll ! x))\\<rbrakk>\n    \\<Longrightarrow> var q < n", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n     \\<exists>x<n. q \\<in> set (ll ! x)\\<rbrakk>\n    \\<Longrightarrow> var q < n", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n        x < n \\<and> q \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> var q < n", "apply (simp add: wf_ll_def length_ll_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>(\\<forall>p.\n                    p \\<in> set_of pret \\<longrightarrow>\n                    p \\<in> set (ll ! var p)) \\<and>\n                (\\<forall>k<length ll.\n                    \\<forall>p\\<in>set (ll ! k).\n                       p \\<in> set_of pret \\<and> var p = k);\n        n < length ll;\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n        x < n \\<and> q \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> var q < n", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n        \\<forall>p.\n           p \\<in> set_of pret \\<longrightarrow> p \\<in> set (ll ! var p);\n        \\<forall>k<length ll.\n           \\<forall>p\\<in>set (ll ! k).\n              p \\<in> set_of pret \\<and> var p = k;\n        x < n; q \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> var q < n", "apply (thin_tac \" \\<forall>q. q \\<in> set_of pret \\<longrightarrow> q \\<in> set (ll ! var q)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n        \\<forall>k<length ll.\n           \\<forall>p\\<in>set (ll ! k).\n              p \\<in> set_of pret \\<and> var p = k;\n        x < n; q \\<in> set (ll ! x)\\<rbrakk>\n       \\<Longrightarrow> var q < n", "apply (erule_tac x=x in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>n < length ll;\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1; x < n;\n        q \\<in> set (ll ! x);\n        x < length ll \\<longrightarrow>\n        (\\<forall>p\\<in>set (ll ! x).\n            p \\<in> set_of pret \\<and> var p = x)\\<rbrakk>\n       \\<Longrightarrow> var q < n", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var q < n\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from Dag_q_Nodes_n"], ["proof (chain)\npicking this:\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll", "have q_in_Nodesn: \"q \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. q \\<in> Nodes n ll", "by simp"], ["proof (state)\nthis:\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "then"], ["proof (chain)\npicking this:\n  q \\<in> Nodes n ll", "have \"\\<exists> k<n. q \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. q \\<in> set (ll ! k)", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  \\<exists>k<n. q \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<exists>k<n. q \\<in> set (ll ! k)", "have \"q \\<notin> set (ll ! n)\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  \\<exists>k<n. q \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. q \\<notin> set (ll ! n)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wf_ll pret ll var; n < length levellist;\n     \\<exists>k<n. q \\<in> set (ll ! k)\\<rbrakk>\n    \\<Longrightarrow> q \\<notin> set (ll ! n)", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> q \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> q \\<notin> set (ll ! n)", "apply (rule_tac i=k and j=n in no_in_one_ll)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> q \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> wf_ll (?pret5 k) ll (?var5 k)\n 2. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> q \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> k < length ll\n 3. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> q \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> n < length ll\n 4. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> q \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> q \\<in> set (ll ! k)\n 5. \\<And>k.\n       \\<lbrakk>wf_ll pret ll var; n < length levellist;\n        k < n \\<and> q \\<in> set (ll ! k)\\<rbrakk>\n       \\<Longrightarrow> k \\<noteq> n", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  q \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with repbc_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  q \\<notin> set (ll ! n)", "have repbc_q: \"repc q = repb q\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set (ll ! n) \\<longrightarrow> repb no = repc no\n  q \\<notin> set (ll ! n)\n\ngoal (1 subgoal):\n 1. repc q = repb q", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no.\n                no \\<notin> set (ll ! n) \\<longrightarrow>\n                repb no = repc no;\n     q \\<notin> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> repc q = repb q", "apply (erule_tac x=q in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<notin> set (ll ! n);\n     q \\<notin> set (ll ! n) \\<longrightarrow> repb q = repc q\\<rbrakk>\n    \\<Longrightarrow> repc q = repb q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repc q = repb q\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from normalize_prop q_in_Nodesn"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  q \\<in> Nodes n ll", "have \"var (repb q) <= var q\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  q \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. var (repb q) \\<le> var q", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>Nodes n ll.\n                var (repb no) \\<le> var no \\<and>\n                (\\<exists>not nort.\n                    Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n                     nort \\<and>\n                    Dag no low high not \\<and>\n                    reduced nort \\<and>\n                    ordered nort var \\<and>\n                    set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n                    (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n                    (\\<exists>nobdt.\n                        bdt not var = Some nobdt \\<and>\n                        (\\<exists>norbdt.\n                            bdt nort var = Some norbdt \\<and>\n                            nobdt \\<sim> norbdt)));\n     q \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repb q) \\<le> var q", "apply (erule_tac x=q in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>q \\<in> Nodes n ll;\n     var (repb q) \\<le> var q \\<and>\n     (\\<exists>not nort.\n         Dag (repb q) (repb \\<propto> low) (repb \\<propto> high) nort \\<and>\n         Dag q low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> var (repb q) \\<le> var q\n 2. \\<lbrakk>q \\<in> Nodes n ll; q \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> var (repb q) \\<le> var q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repb q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with repbc_q"], ["proof (chain)\npicking this:\n  repc q = repb q\n  var (repb q) \\<le> var q", "have var_repc_q: \"var (repc q) <= var q\""], ["proof (prove)\nusing this:\n  repc q = repb q\n  var (repb q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var (repc q) \\<le> var q", "by simp"], ["proof (state)\nthis:\n  var (repc q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with varq_sn"], ["proof (chain)\npicking this:\n  var q < n\n  var (repc q) \\<le> var q", "have var_repc_q_n: \"var (repc q) < n\""], ["proof (prove)\nusing this:\n  var q < n\n  var (repc q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var (repc q) < n", "by simp"], ["proof (state)\nthis:\n  var (repc q) < n\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from Nodes_subset Dag_q_Nodes_n while_while_prop"], ["proof (chain)\npicking this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have ord_t1_var_rep: \"ordered t1 var \\<and> var (repc q) <= var q\""], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. ordered t1 var \\<and> var (repc q) \\<le> var q", "apply (elim conjE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i levellista.\n                Nodes i levellista \\<subseteq> Nodes (Suc i) levellista;\n     \\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)));\n     Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n     q \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var \\<and> var (repc q) \\<le> var q", "apply (erule_tac x=q in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>i levellista.\n                Nodes i levellista \\<subseteq> Nodes (Suc i) levellista;\n     Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n     q \\<in> Nodes n ll;\n     var (repc q) \\<le> var q \\<and>\n     (\\<exists>not nort.\n         Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n         Dag q low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var \\<and> var (repc q) \\<le> var q\n 2. \\<lbrakk>\\<And>i levellista.\n                Nodes i levellista \\<subseteq> Nodes (Suc i) levellista;\n     Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1;\n     q \\<in> Nodes n ll; q \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var \\<and> var (repc q) \\<le> var q", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ordered t1 var \\<and> var (repc q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "then"], ["proof (chain)\npicking this:\n  ordered t1 var \\<and> var (repc q) \\<le> var q", "have ord_t1: \"ordered t1 var\""], ["proof (prove)\nusing this:\n  ordered t1 var \\<and> var (repc q) \\<le> var q\n\ngoal (1 subgoal):\n 1. ordered t1 var", "by simp"], ["proof (state)\nthis:\n  ordered t1 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from ord_t1_var_rep"], ["proof (chain)\npicking this:\n  ordered t1 var \\<and> var (repc q) \\<le> var q", "have varrep_q: \"var (repc q) <= var q\""], ["proof (prove)\nusing this:\n  ordered t1 var \\<and> var (repc q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var (repc q) \\<le> var q", "by simp"], ["proof (state)\nthis:\n  var (repc q) \\<le> var q\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from t2_in_DagsNodesSucn"], ["proof (chain)\npicking this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)", "have ord_t2: \"ordered t2 var\""], ["proof (prove)\nusing this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. ordered t2 var", "proof (elim Dags.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "fix p t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t_in_repcNodes: \"set_of t \\<subseteq> repc ` Nodes (Suc n) ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t2t: \"t2 = t\""], ["proof (state)\nthis:\n  t2 = t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t_dag: \"Dag p (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (state)\nthis:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "from t_in_repcNodes"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll", "have x_in_repcNodesSucn:  \n              \"\\<forall>x. x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of t \\<subseteq> repc ` Nodes (Suc n) ll \\<Longrightarrow>\n    \\<forall>x.\n       x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "from t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t", "have \"p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply (case_tac \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; p = Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null\n 2. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "with t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null", "obtain lt rt where t_Node: \"t=Node lt p rt\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        t = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "then"], ["proof (chain)\npicking this:\n  t = Node lt p rt", "have \"p \\<in> set_of t\""], ["proof (prove)\nusing this:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. p \\<in> set_of t", "by auto"], ["proof (state)\nthis:\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "with x_in_repcNodesSucn"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n  p \\<in> set_of t", "have \"p \\<in> repc ` Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. p \\<in> repc ` Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  p \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "then"], ["proof (chain)\npicking this:\n  p \\<in> repc ` Nodes (Suc n) ll", "obtain a where repca_p: \"p=repc a\" and \n              a_in_NodesSucn: \"a \\<in> Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  p \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>p = repc a; a \\<in> Nodes (Suc n) ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = repc a\n  a \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "with repca_p while_while_prop t_dag t2t"], ["proof (chain)\npicking this:\n  p = repc a\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t2 = t\n  p = repc a\n  a \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  p = repc a\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t2 = t\n  p = repc a\n  a \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. ordered t2 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = repc a;\n     \\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)));\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t; p = repc a;\n     a \\<in> Nodes (Suc n) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (erule_tac x=a in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     var (repc a) \\<le> var a \\<and>\n     (\\<exists>not nort.\n         Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n         Dag a low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (elim conjE exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (subgoal_tac \"nort = t\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 2. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> nort = t\n 3. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> nort = t\n 2. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 3. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (simp add: Dag_unique)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ordered t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ordered t2 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from while_while_prop"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have while_prop_part: \n            \"\\<forall>no \\<in> Nodes (Suc n) ll. \n            var (repc no) <= var no\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no", "by auto"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from while_while_prop"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have rep_rep_nort: \n            \"\\<forall>no\\<in>Nodes (n + 1) ll. (\\<exists>nort. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and> \n            (\\<forall>no\\<in>set_of nort. repc no = no))\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll.\n       \\<exists>nort.\n          Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n           nort \\<and>\n          (\\<forall>no\\<in>set_of nort. repc no = no)", "by auto"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     \\<exists>nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from repcNodes_in_Nodes null_notin_Nodes_Suc_n"], ["proof (chain)\npicking this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  Null \\<notin> Nodes (Suc n) ll", "have \"\\<forall>no \\<in> Nodes (n+1) ll. repc no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with rep_rep_nort"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     \\<exists>nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null", "have \"\\<forall> no \\<in> Nodes (n+1) ll. repc (repc no) = (repc no)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     \\<exists>nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll.\n                \\<exists>nort.\n                   Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n                    nort \\<and>\n                   (\\<forall>no\\<in>set_of nort. repc no = no);\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes (n + 1) ll.\n                         repc (repc no) = repc no", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll.\n                   \\<exists>nort.\n                      Dag (repc no) (repc \\<propto> low)\n                       (repc \\<propto> high) nort \\<and>\n                      (\\<forall>no\\<in>set_of nort. repc no = no);\n        \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll; no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll; no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        repc no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (subgoal_tac \"repc no \\<in> set_of nort\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no);\n        repc no \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 3. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (elim conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        \\<forall>no\\<in>set_of nort. repc no = no\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 3. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule_tac x=\"repc no\" in ballE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        repc (repc no) = repc no\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        repc no \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 3. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 4. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        repc no \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 3. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (Suc n) ll; repc no \\<noteq> Null;\n        (\\<exists>lt rt.\n            nort = Node lt (repc no) rt \\<and>\n            Dag ((repc \\<propto> low) (repc no)) (repc \\<propto> low)\n             (repc \\<propto> high) lt \\<and>\n            Dag ((repc \\<propto> high) (repc no)) (repc \\<propto> low)\n             (repc \\<propto> high) rt) \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (Suc n) ll; repc no \\<noteq> Null;\n        \\<exists>lt rt.\n           nort = Node lt (repc no) rt \\<and>\n           Dag ((repc \\<propto> low) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) lt \\<and>\n           Dag ((repc \\<propto> high) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) rt;\n        \\<forall>no\\<in>set_of nort. repc no = no\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (thin_tac \"\\<forall>no\\<in>set_of nort. repc no = no\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (Suc n) ll; repc no \\<noteq> Null;\n        \\<exists>lt rt.\n           nort = Node lt (repc no) rt \\<and>\n           Dag ((repc \\<propto> low) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) lt \\<and>\n           Dag ((repc \\<propto> high) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) rt\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with t2_in_DagsNodesSucn t2_notin_DagsNodesn ord_t2 while_prop_part \n            wf_ll nsll  repcNodes_in_Nodes"], ["proof (chain)\npicking this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  ordered t2 var\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n  wf_ll pret ll var\n  n < length levellist\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no", "obtain a where\n            t2_repc_dag: \"Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\" and\n            a_in_lln: \"a \\<in> set (ll ! n)\""], ["proof (prove)\nusing this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  ordered t2 var\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n  wf_ll pret ll var\n  n < length levellist\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n         a \\<in> set (ll ! n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule restrict_root_Node)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> t2 \\<notin> Dags (repc ` Nodes n ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high)\n 2. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> ordered t2 ?var12\n 3. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes (Suc n) ll.\n                         ?var12 (repc no) \\<le> ?var12 no \\<and>\n                         repc (repc no) = repc no\n 4. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret12 ll ?var12\n 5. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> n < length ll\n 6. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n 7. \\<lbrakk>\\<And>a.\n                \\<lbrakk>Dag (repc a) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     \\<exists>q.\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t2 \\<and>\n        q \\<in> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  a \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  a \\<in> set (ll ! n)", "have a_in_pret: \"a \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  a \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. a \\<in> set_of pret", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  a \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from wf_ll nsll  a_in_lln"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  a \\<in> set (ll ! n)", "have vara_n: \"var a = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  a \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var a = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var a = n\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from a_in_lln rep_prop"], ["proof (chain)\npicking this:\n  a \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))", "obtain\n            repp_nNull: \" repc a \\<noteq> Null\" and\n            repp_reduce: \"(repc \\<propto> low) a = (repc \\<propto> high) a \\<and> low a \\<noteq> Null \n            \\<longrightarrow> repc a = (repc \\<propto> high) a\" and\n            repp_share: \"((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow> low a = Null) \n            \\<longrightarrow> repc a \\<in> set (ll ! n) \\<and>\n            repc (repc a) = repc a \\<and> \n            (\\<forall>no1\\<in>set (ll ! n). ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and> \n            (repc \\<propto> low) no1 = (repc \\<propto> low) a) = (repc a = repc no1))\""], ["proof (prove)\nusing this:\n  a \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a \\<noteq> Null;\n      (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n      low a \\<noteq> Null \\<longrightarrow>\n      repc a = (repc \\<propto> high) a;\n      ((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow>\n       low a = Null) \\<longrightarrow>\n      repc a \\<in> set (ll ! n) \\<and>\n      repc (repc a) = repc a \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n          (repc a = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=4]]"], ["proof (prove)\nusing this:\n  a \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a \\<noteq> Null;\n      (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n      low a \\<noteq> Null \\<longrightarrow>\n      repc a = (repc \\<propto> high) a;\n      ((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow>\n       low a = Null) \\<longrightarrow>\n      repc a \\<in> set (ll ! n) \\<and>\n      repc (repc a) = repc a \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n          (repc a = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc a \\<noteq> Null\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null \\<longrightarrow>\n  repc a = (repc \\<propto> high) a\n  ((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow>\n   low a = Null) \\<longrightarrow>\n  repc a \\<in> set (ll ! n) \\<and>\n  repc (repc a) = repc a \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n      (repc a = repc no1))\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from t2_repc_dag a_in_lln repp_nNull"], ["proof (chain)\npicking this:\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  a \\<in> set (ll ! n)\n  repc a \\<noteq> Null", "obtain lt2 rt2 where \n            t2_Node: \"t2 = (Node lt2 (repc a) rt2)\""], ["proof (prove)\nusing this:\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  a \\<in> set (ll ! n)\n  repc a \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt2 rt2.\n        t2 = Node lt2 (repc a) rt2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t2 = Node lt2 (repc a) rt2\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "have \"isomorphic_dags_eq t1 t2 var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof (cases \"(repc \\<propto> low) a = (repc \\<propto> high) a \\<and> low a \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "case True"], ["proof (state)\nthis:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "note red=this"], ["proof (state)\nthis:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null", "have red_case: \"(repc \\<propto> low) a = (repc \\<propto> high) a\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a = (repc \\<propto> high) a\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from red"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null", "have low_nNull: \"low a \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low a \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  low a \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with pret_dag prebdt_pret a_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a \\<in> set_of pret\n  low a \\<noteq> Null", "have highp_nNull: \"high a \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a \\<in> set_of pret\n  low a \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     a \\<in> set_of pret; low a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a \\<noteq> Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; a \\<in> set_of pret;\n     low a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; a \\<in> set_of pret;\n     low a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; a \\<in> set_of pret;\n     low a \\<noteq> Null; (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> high a \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag ord_pret a_in_pret low_nNull highp_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  a \\<in> set_of pret\n  low a \\<noteq> Null\n  high a \\<noteq> Null", "have var_children_smaller: \"var (low a) < var a \\<and> var (high a) < var a\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  a \\<in> set_of pret\n  low a \\<noteq> Null\n  high a \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low a) < var a \\<and> var (high a) < var a", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a \\<in> set_of pret;\n     low a \\<noteq> Null; high a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low a) < var a \\<and> var (high a) < var a", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a \\<in> set_of pret;\n     low a \\<noteq> Null; high a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; a \\<in> set_of pret;\n     low a \\<noteq> Null; high a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; a \\<in> set_of pret;\n     low a \\<noteq> Null; high a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; a \\<in> set_of pret;\n     low a \\<noteq> Null; high a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low a \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; a \\<in> set_of pret;\n     low a \\<noteq> Null; high a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low a) < var a \\<and> var (high a) < var a\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag a_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  a \\<in> set_of pret", "have a_nNull: \"a \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  a \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. a \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; a \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; a \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; a \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a_in_pret highp_nNull pret_dag"], ["proof (chain)\npicking this:\n  a \\<in> set_of pret\n  high a \\<noteq> Null\n  Dag p low high pret\n  a \\<noteq> Null", "have \"high a \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a \\<in> set_of pret\n  high a \\<noteq> Null\n  Dag p low high pret\n  a \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<in> set_of pret; high a \\<noteq> Null; Dag p low high pret;\n     a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>high a \\<noteq> Null; Dag p low high pret;\n     a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> Null\n 2. \\<lbrakk>high a \\<noteq> Null; Dag p low high pret;\n     a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?high4 a \\<noteq> Null\n 3. \\<lbrakk>high a \\<noteq> Null; Dag p low high pret;\n     a \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>high a \\<noteq> Null; Dag p low high pret; a \\<noteq> Null;\n     ?high4 a \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high a \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high a \\<in> set_of pret", "have \"high a \\<in> set (ll ! (var (high a)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high a \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high a \\<in> set (ll ! var (high a))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high a \\<in> set (ll ! var (high a))\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a_in_lln t2_repc_dag var_children_smaller vara_n"], ["proof (chain)\npicking this:\n  a \\<in> set (ll ! n)\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a) < var a \\<and> var (high a) < var a\n  var a = n\n  high a \\<in> set (ll ! var (high a))", "have \"\\<exists> k<n. (high a) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a \\<in> set (ll ! n)\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a) < var a \\<and> var (high a) < var a\n  var a = n\n  high a \\<in> set (ll ! var (high a))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. high a \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. high a \\<in> set (ll ! k)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. high a \\<in> set (ll ! k)", "have higha_in_Nodesn: \"(high a) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. high a \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high a \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  high a \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  high a \\<in> Nodes n ll", "have rhigha_in_rNodesn: \"repc (high a) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  high a \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (high a) \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from higha_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  high a \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain rt where \n              rt_dag:  \"Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high) rt\" and\n              rt_in_repbNort: \"set_of rt \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  high a \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>rt.\n        \\<lbrakk>Dag (repb (high a)) (repb \\<propto> low)\n                  (repb \\<propto> high) rt;\n         set_of rt \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>rt.\n                \\<lbrakk>Dag (repb (high a)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt;\n                 set_of rt \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"high a\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>rt.\n                \\<lbrakk>Dag (repb (high a)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt;\n                 set_of rt \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a \\<in> Nodes n ll;\n     var (repb (high a)) \\<le> var (high a) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high a) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>rt.\n                \\<lbrakk>Dag (repb (high a)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt;\n                 set_of rt \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a \\<in> Nodes n ll; high a \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high) rt\n  set_of rt \\<subseteq> repb ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rt \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rt_in_repcNodesn: \"set_of rt \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rt \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rt \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rt \\<subseteq> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt_dag higha_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high) rt\n  high a \\<in> Nodes n ll", "have repcrt_dag: \"Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt\""], ["proof (prove)\nusing this:\n  Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high) rt\n  high a \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high)\n              rt;\n     high a \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high)\n              rt;\n     Dag (repb (high a)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "have rt_nTip: \"rt \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rt \\<noteq> Tip", "have \"repc (high a) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "note rhigha_in_rNodesn"], ["proof (state)\nthis:\n  repc (high a) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (high a) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "have \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (high a) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (high a) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (high a) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high a) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (high a) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt \\<noteq> Tip", "with repcrt_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt\n  repc (high a) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt\n  repc (high a) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  rt \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rt \\<noteq> Tip\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from a_nNull a_in_pret low_nNull pret_dag"], ["proof (chain)\npicking this:\n  a \\<noteq> Null\n  a \\<in> set_of pret\n  low a \\<noteq> Null\n  Dag p low high pret", "have \"low a \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a \\<noteq> Null\n  a \\<in> set_of pret\n  low a \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. low a \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> Null; a \\<in> set_of pret; low a \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> low a \\<in> set_of pret", "apply (drule subelem_set_of_low)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a \\<noteq> Null; low a \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> a \\<noteq> Null\n 2. \\<lbrakk>a \\<noteq> Null; low a \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> ?low4 a \\<noteq> Null\n 3. \\<lbrakk>a \\<noteq> Null; low a \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>a \\<noteq> Null; low a \\<noteq> Null; Dag p low high pret;\n     ?low4 a \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> low a \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low a \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  low a \\<in> set_of pret", "have \"low a \\<in> set (ll ! (var (low a)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  low a \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. low a \\<in> set (ll ! var (low a))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  low a \\<in> set (ll ! var (low a))\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a_in_lln t2_repc_dag var_children_smaller vara_n"], ["proof (chain)\npicking this:\n  a \\<in> set (ll ! n)\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a) < var a \\<and> var (high a) < var a\n  var a = n\n  low a \\<in> set (ll ! var (low a))", "have \"\\<exists>k<n. (low a) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a \\<in> set (ll ! n)\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a) < var a \\<and> var (high a) < var a\n  var a = n\n  low a \\<in> set (ll ! var (low a))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. low a \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. low a \\<in> set (ll ! k)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. low a \\<in> set (ll ! k)", "have \"(low a) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. low a \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. low a \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  low a \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  low a \\<in> Nodes n ll", "have rlow_in_rNodesn: \"repc (low a) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  low a \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (low a) \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n    low a \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "from repp_reduce low_nNull  highp_nNull  red_case"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null \\<longrightarrow>\n  repc a = (repc \\<propto> high) a\n  low a \\<noteq> Null\n  high a \\<noteq> Null\n  (repc \\<propto> low) a = (repc \\<propto> high) a", "have repc_p_def: \"repc a = repc (high a)\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n  low a \\<noteq> Null \\<longrightarrow>\n  repc a = (repc \\<propto> high) a\n  low a \\<noteq> Null\n  high a \\<noteq> Null\n  (repc \\<propto> low) a = (repc \\<propto> high) a\n\ngoal (1 subgoal):\n 1. repc a = repc (high a)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repc a = repc (high a)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "with rt_in_repcNodesn repcrt_dag rhigha_in_rNodesn a_in_lln t2_repc_dag\n                repc_p_def  rt_nTip"], ["proof (chain)\npicking this:\n  set_of rt \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt\n  repc (high a) \\<in> repc ` Nodes n ll\n  a \\<in> set (ll ! n)\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  repc a = repc (high a)\n  rt \\<noteq> Tip\n  repc a = repc (high a)", "have t2_in_Dags_Nodesn: \n                \"t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of rt \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt\n  repc (high a) \\<in> repc ` Nodes n ll\n  a \\<in> set (ll ! n)\n  Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2\n  repc a = repc (high a)\n  rt \\<noteq> Tip\n  repc a = repc (high a)\n\ngoal (1 subgoal):\n 1. t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n              (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 3. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt \\<noteq> Tip; repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 3. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply (subgoal_tac \"t2=rt\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt \\<noteq> Tip; repc a = repc (high a); t2 = rt\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt \\<noteq> Tip; repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> t2 = rt\n 3. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 4. \\<lbrakk>set_of rt \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a)) (repc \\<propto> low) (repc \\<propto> high) rt;\n     repc (high a) \\<in> repc ` Nodes n ll; a \\<in> set (ll ! n);\n     Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a = repc (high a); rt \\<noteq> Tip;\n     repc a = repc (high a)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply (auto simp add: Dag_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "from t1_in_DagsNodesn t2_in_Dags_Nodesn repbc_dags_eq isomorphic_dags_eq_asm"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var", "show shared_t1_t2: \"isomorphic_dags_eq t1 t2 var\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var\\<rbrakk>\n    \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "apply (erule_tac x=t1 in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high);\n     \\<forall>t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var\\<rbrakk>\n    \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "apply (erule_tac x=t2 in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high);\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\\<rbrakk>\n    \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "assume share: \" \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and> low a \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n          low a \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n          low a \\<noteq> Null)", "have share: \"(repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or> low a = Null\""], ["proof (prove)\nusing this:\n  \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n          low a \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or>\n    low a = Null", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n          low a \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or>\n    low a = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or> low a = Null\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with repp_share"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow>\n   low a = Null) \\<longrightarrow>\n  repc a \\<in> set (ll ! n) \\<and>\n  repc (repc a) = repc a \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n      (repc a = repc no1))\n  (repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or> low a = Null", "obtain \n              ra_in_llbn: \"repc a \\<in> set (ll ! n)\" and \n              rra_ra: \"repc (repc a) = repc a\" and\n              two_nodes_share: \"(\\<forall>no1\\<in>set (ll ! n). \n              ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and> \n              (repc \\<propto> low) no1 = (repc \\<propto> low) a) = (repc a = repc no1))\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow>\n   low a = Null) \\<longrightarrow>\n  repc a \\<in> set (ll ! n) \\<and>\n  repc (repc a) = repc a \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n      (repc a = repc no1))\n  (repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or> low a = Null\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a \\<in> set (ll ! n); repc (repc a) = repc a;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n         (repc a = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=3]]"], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) a = (repc \\<propto> high) a \\<longrightarrow>\n   low a = Null) \\<longrightarrow>\n  repc a \\<in> set (ll ! n) \\<and>\n  repc (repc a) = repc a \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n      (repc a = repc no1))\n  (repc \\<propto> low) a \\<noteq> (repc \\<propto> high) a \\<or> low a = Null\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a \\<in> set (ll ! n); repc (repc a) = repc a;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n         (repc a = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  repc a \\<in> set (ll ! n)\n  repc (repc a) = repc a\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a) =\n     (repc a = repc no1)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from wf_ll ra_in_llbn  nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  repc a \\<in> set (ll ! n)\n  n < length levellist", "have var_repc_a_n: \"var (repc a) = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  repc a \\<in> set (ll ! n)\n  n < length levellist\n\ngoal (1 subgoal):\n 1. var (repc a) = n", "by (auto simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var (repc a) = n\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a = (repc \\<propto> high) a \\<and>\n            low a \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof (auto simp add: isomorphic_dags_eq_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>bdt t1 var = Some bdt\\<^sub>1;\n        bdt t2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> t1 = t2", "fix bdt1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>bdt t1 var = Some bdt\\<^sub>1;\n        bdt t2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> t1 = t2", "assume bdt_t1: \"bdt t1 var = Some bdt1\""], ["proof (state)\nthis:\n  bdt t1 var = Some bdt1\n\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>bdt t1 var = Some bdt\\<^sub>1;\n        bdt t2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> t1 = t2", "assume bdt_t2: \"bdt t2 var = Some bdt1\""], ["proof (state)\nthis:\n  bdt t2 var = Some bdt1\n\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>bdt t1 var = Some bdt\\<^sub>1;\n        bdt t2 var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> t1 = t2", "show \"t1 = t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t1 = t2", "proof (cases t1)"], ["proof (state)\ngoal (2 subgoals):\n 1. t1 = Tip \\<Longrightarrow> t1 = t2\n 2. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "case Tip"], ["proof (state)\nthis:\n  t1 = Tip\n\ngoal (2 subgoals):\n 1. t1 = Tip \\<Longrightarrow> t1 = t2\n 2. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "with bdt_t1"], ["proof (chain)\npicking this:\n  bdt t1 var = Some bdt1\n  t1 = Tip", "show ?thesis"], ["proof (prove)\nusing this:\n  bdt t1 var = Some bdt1\n  t1 = Tip\n\ngoal (1 subgoal):\n 1. t1 = t2", "by simp"], ["proof (state)\nthis:\n  t1 = t2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "case (Node lt1 p1 rt1)"], ["proof (state)\nthis:\n  t1 = Node lt1 p1 rt1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "note t1_Node=this"], ["proof (state)\nthis:\n  t1 = Node lt1 p1 rt1\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "with Dag_q_Nodes_n"], ["proof (chain)\npicking this:\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n  t1 = Node lt1 p1 rt1", "have \"p1=(repc q)\""], ["proof (prove)\nusing this:\n  Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n  q \\<in> Nodes n ll\n  t1 = Node lt1 p1 rt1\n\ngoal (1 subgoal):\n 1. p1 = repc q", "by simp"], ["proof (state)\nthis:\n  p1 = repc q\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "with t2_Node bdt_t1 bdt_t2 t1_Node"], ["proof (chain)\npicking this:\n  t2 = Node lt2 (repc a) rt2\n  bdt t1 var = Some bdt1\n  bdt t2 var = Some bdt1\n  t1 = Node lt1 p1 rt1\n  p1 = repc q", "have \"var (repc q) = var (repc a)\""], ["proof (prove)\nusing this:\n  t2 = Node lt2 (repc a) rt2\n  bdt t1 var = Some bdt1\n  bdt t2 var = Some bdt1\n  t1 = Node lt1 p1 rt1\n  p1 = repc q\n\ngoal (1 subgoal):\n 1. var (repc q) = var (repc a)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t2 = Node lt2 (repc a) rt2; bdt t1 var = Some bdt1;\n     bdt t2 var = Some bdt1; t1 = Node lt1 p1 rt1; p1 = repc q\\<rbrakk>\n    \\<Longrightarrow> var (repc q) = var (repc a)", "apply (rule same_bdt_var)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t2 = Node lt2 (repc a) rt2; bdt t1 var = Some bdt1;\n     bdt t2 var = Some bdt1; t1 = Node lt1 p1 rt1; p1 = repc q\\<rbrakk>\n    \\<Longrightarrow> bdt (Node ?lt1.5 (repc q) ?rt1.5) var = Some ?bdt1.5\n 2. \\<lbrakk>t2 = Node lt2 (repc a) rt2; bdt t1 var = Some bdt1;\n     bdt t2 var = Some bdt1; t1 = Node lt1 p1 rt1; p1 = repc q\\<rbrakk>\n    \\<Longrightarrow> bdt (Node ?lt2.5 (repc a) ?rt2.5) var = Some ?bdt1.5", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (repc q) = var (repc a)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22 x23. t1 = Node x21 x22 x23 \\<Longrightarrow> t1 = t2", "with var_repc_q_n var_repc_a_n"], ["proof (chain)\npicking this:\n  var (repc q) < n\n  var (repc a) = n\n  var (repc q) = var (repc a)", "show ?thesis"], ["proof (prove)\nusing this:\n  var (repc q) < n\n  var (repc a) = n\n  var (repc q) = var (repc a)\n\ngoal (1 subgoal):\n 1. t1 = t2", "by simp"], ["proof (state)\nthis:\n  t1 = t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t1 = t2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?t1.4\n           \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n   ?t2.4\n   \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n             (repc \\<propto> high);\n   ?t2.4\n   \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n          (repc \\<propto> high);\n   \\<forall>t1 t2.\n      t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                (repb \\<propto> high) \\<and>\n      t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                (repb \\<propto> high) \\<longrightarrow>\n      isomorphic_dags_eq t1 t2 var;\n   Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n   Dags (repb ` Nodes n ll) (repb \\<propto> low)\n    (repb \\<propto> high)\\<rbrakk>\n  \\<Longrightarrow> isomorphic_dags_eq ?t1.4 ?t2.4 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "note mixed_Dags_case = this"], ["proof (state)\nthis:\n  \\<lbrakk>?t1.4\n           \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n   ?t2.4\n   \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n             (repc \\<propto> high);\n   ?t2.4\n   \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n          (repc \\<propto> high);\n   \\<forall>t1 t2.\n      t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                (repb \\<propto> high) \\<and>\n      t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                (repb \\<propto> high) \\<longrightarrow>\n      isomorphic_dags_eq t1 t2 var;\n   Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n   Dags (repb ` Nodes n ll) (repb \\<propto> low)\n    (repb \\<propto> high)\\<rbrakk>\n  \\<Longrightarrow> isomorphic_dags_eq ?t1.4 ?t2.4 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from repbc_dags_eq isomorphic_dags_eq"], ["proof (chain)\npicking this:\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var", "have dags_shared: \n          \"\\<forall>t1 t2. t1 \\<in> Dags (repc ` Nodes (Suc n) ll)(repc \\<propto> low)(repc \\<propto> high)\\<and>\n          t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low) (repc \\<propto> high) \n          \\<longrightarrow> isomorphic_dags_eq t1 t2 var\""], ["proof (prove)\nusing this:\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<forall>t1 t2.\n       t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                 (repc \\<propto> high) \\<and>\n       t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                 (repc \\<propto> high) \\<longrightarrow>\n       isomorphic_dags_eq t1 t2 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n              (repc \\<propto> high) =\n             Dags (repb ` Nodes n ll) (repb \\<propto> low)\n              (repb \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t1 t2.\n                         t1 \\<in> Dags (repc ` Nodes (Suc n) ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high) \\<and>\n                         t2 \\<in> Dags (repc ` Nodes (Suc n) ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high) \\<longrightarrow>\n                         isomorphic_dags_eq t1 t2 var", "apply (rule Dags_Nodes_cases)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var =\n                         isomorphic_dags_eq t2 t1 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 4. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "apply (rule isomorphic_dags_eq_sym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "fix t1 t2"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t1_in_Dagsn: \n            \"t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t2_in_Dagsn: \n            \"t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume isomorphic_dags_eq_asm: \n            \"\\<forall>t1 t2. t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \\<and>\n            t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \n            \\<longrightarrow> isomorphic_dags_eq t1 t2 var\""], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume repb_repc_Dags: \n            \"Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) = \n            Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (state)\nthis:\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (3 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 3. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "with t1_in_Dagsn t2_in_Dagsn isomorphic_dags_eq_asm"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "show \"isomorphic_dags_eq t1 t2 var\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "by simp"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "fix t1 t2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t1_in_DagsNodesn: \n            \"t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t2_notin_DagsNodesn: \n            \"t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t2_in_DagsNodesSucn: \n            \"t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume isomorphic_dags_eq_asm: \n            \"\\<forall>t1 t2. t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \\<and>\n            t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high) \n            \\<longrightarrow> isomorphic_dags_eq t1 t2 var\""], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume repbc_Dags: \n            \"Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) = \n            Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\""], ["proof (state)\nthis:\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (2 subgoals):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var\n 2. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from t1_in_DagsNodesn t2_notin_DagsNodesn t2_in_DagsNodesSucn \n            isomorphic_dags_eq_asm repbc_Dags"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "show \"isomorphic_dags_eq t1 t2 var\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "apply (rule mixed_Dags_case)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)\n 2. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<notin> Dags (repc ` Nodes n ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high)\n 3. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<in> Dags (repc ` Nodes (Suc n) ll)\n                                (repc \\<propto> low) (repc \\<propto> high)\n 4. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t1 t2.\n                         t1 \\<in> Dags (repb ` Nodes n ll)\n                                   (repb \\<propto> low)\n                                   (repb \\<propto> high) \\<and>\n                         t2 \\<in> Dags (repb ` Nodes n ll)\n                                   (repb \\<propto> low)\n                                   (repb \\<propto> high) \\<longrightarrow>\n                         isomorphic_dags_eq t1 t2 var\n 5. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high) =\n                      Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                       (repb \\<propto> high)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "fix t1 t2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t1_in_DagsNodesSucn: \n            \"t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t1_notin_DagsNodesn: \n            \"t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t2_in_DagsNodesSucn: \n            \"t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "assume t2_notin_DagsNodesn: \n            \"t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (state)\nthis:\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "(* ab hier gehts um t1 *)"], ["proof (state)\nthis:\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from t1_in_DagsNodesSucn"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)", "have ord_t1: \"ordered t1 var\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. ordered t1 var", "proof (elim Dags.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "fix p t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "assume t_in_repcNodes: \"set_of t \\<subseteq> repc ` Nodes (Suc n) ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "assume t2t: \"t1 = t\""], ["proof (state)\nthis:\n  t1 = t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "assume t_dag: \"Dag p (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (state)\nthis:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "from t_in_repcNodes"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll", "have x_in_repcNodesSucn:  \n              \"\\<forall> x. x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of t \\<subseteq> repc ` Nodes (Suc n) ll \\<Longrightarrow>\n    \\<forall>x.\n       x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "from t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t", "have \"p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply (case_tac \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; p = Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null\n 2. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "with t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null", "obtain lt rt where t_Node: \"t=Node lt p rt\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        t = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "then"], ["proof (chain)\npicking this:\n  t = Node lt p rt", "have \"p \\<in> set_of t\""], ["proof (prove)\nusing this:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. p \\<in> set_of t", "by auto"], ["proof (state)\nthis:\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "with x_in_repcNodesSucn"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n  p \\<in> set_of t", "have \"p \\<in> repc ` Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. p \\<in> repc ` Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  p \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "then"], ["proof (chain)\npicking this:\n  p \\<in> repc ` Nodes (Suc n) ll", "obtain a where \n              repca_p: \"p=repc a\" and a_in_NodesSucn: \"a \\<in> Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  p \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>p = repc a; a \\<in> Nodes (Suc n) ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = repc a\n  a \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t1 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var", "with repca_p while_while_prop t_dag t2t"], ["proof (chain)\npicking this:\n  p = repc a\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t1 = t\n  p = repc a\n  a \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  p = repc a\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t1 = t\n  p = repc a\n  a \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. ordered t1 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = repc a;\n     \\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)));\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t; p = repc a;\n     a \\<in> Nodes (Suc n) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var", "apply (erule_tac x=a in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t1 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     var (repc a) \\<le> var a \\<and>\n     (\\<exists>not nort.\n         Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n         Dag a low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t1 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var", "apply (elim conjE exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t1 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var", "apply (subgoal_tac \"nort = t\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var\n 2. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> nort = t\n 3. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t1 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> nort = t\n 2. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var\n 3. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t1 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var", "apply (simp add: Dag_unique)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t1 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t1 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t1 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t1 var", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ordered t1 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ordered t1 var\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from while_while_prop"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have while_prop_part: \"\\<forall>no \\<in> Nodes (Suc n) ll. \n            var (repc no) <= var no\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no", "by auto"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from while_while_prop"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "have rep_rep_nort: \n            \"\\<forall>no\\<in>Nodes (n + 1) ll. \n               (\\<exists>nort. Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and> \n               (\\<forall>no\\<in>set_of nort. repc no = no))\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll.\n       \\<exists>nort.\n          Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n           nort \\<and>\n          (\\<forall>no\\<in>set_of nort. repc no = no)", "by auto"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     \\<exists>nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from repcNodes_in_Nodes null_notin_Nodes_Suc_n"], ["proof (chain)\npicking this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  Null \\<notin> Nodes (Suc n) ll", "have \"\\<forall> no \\<in> Nodes (n+1) ll. repc no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "with rep_rep_nort"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     \\<exists>nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null", "have rep_rep_no:  \"\\<forall>no \\<in> Nodes (n+1) ll. repc (repc no) = (repc no)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     \\<exists>nort.\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll.\n                \\<exists>nort.\n                   Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n                    nort \\<and>\n                   (\\<forall>no\\<in>set_of nort. repc no = no);\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes (n + 1) ll.\n                         repc (repc no) = repc no", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll.\n                   \\<exists>nort.\n                      Dag (repc no) (repc \\<propto> low)\n                       (repc \\<propto> high) nort \\<and>\n                      (\\<forall>no\\<in>set_of nort. repc no = no);\n        \\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll; no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll; no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>\\<forall>no\\<in>Nodes (n + 1) ll. repc no \\<noteq> Null;\n        no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        repc no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (subgoal_tac \"repc no \\<in> set_of nort\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no);\n        repc no \\<in> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 3. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (elim conjE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        \\<forall>no\\<in>set_of nort. repc no = no\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 3. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (erule_tac x=\"repc no\" in ballE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        repc (repc no) = repc no\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        repc no \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 3. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 4. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        repc no \\<in> set_of nort;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort;\n        repc no \\<notin> set_of nort\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no\n 2. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 3. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll; repc no \\<noteq> Null;\n        Dag (repc no) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (Suc n) ll; repc no \\<noteq> Null;\n        (\\<exists>lt rt.\n            nort = Node lt (repc no) rt \\<and>\n            Dag ((repc \\<propto> low) (repc no)) (repc \\<propto> low)\n             (repc \\<propto> high) lt \\<and>\n            Dag ((repc \\<propto> high) (repc no)) (repc \\<propto> low)\n             (repc \\<propto> high) rt) \\<and>\n        (\\<forall>no\\<in>set_of nort. repc no = no)\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (elim conjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (Suc n) ll; repc no \\<noteq> Null;\n        \\<exists>lt rt.\n           nort = Node lt (repc no) rt \\<and>\n           Dag ((repc \\<propto> low) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) lt \\<and>\n           Dag ((repc \\<propto> high) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) rt;\n        \\<forall>no\\<in>set_of nort. repc no = no\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply (thin_tac \"\\<forall>no\\<in>set_of nort. repc no = no\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>no nort.\n       \\<lbrakk>no \\<in> Nodes (Suc n) ll; repc no \\<noteq> Null;\n        \\<exists>lt rt.\n           nort = Node lt (repc no) rt \\<and>\n           Dag ((repc \\<propto> low) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) lt \\<and>\n           Dag ((repc \\<propto> high) (repc no)) (repc \\<propto> low)\n            (repc \\<propto> high) rt\\<rbrakk>\n       \\<Longrightarrow> repc no \\<in> set_of nort\n 2. \\<And>no.\n       \\<lbrakk>no \\<in> Nodes (n + 1) ll;\n        \\<exists>nort.\n           Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n            nort \\<and>\n           (\\<forall>no\\<in>set_of nort. repc no = no);\n        no \\<notin> Nodes (n + 1) ll\\<rbrakk>\n       \\<Longrightarrow> repc (repc no) = repc no", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "with t1_in_DagsNodesSucn t1_notin_DagsNodesn ord_t1 while_prop_part wf_ll \n            nsll  repcNodes_in_Nodes"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  ordered t1 var\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n  wf_ll pret ll var\n  n < length levellist\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no", "obtain a1 where\n            t1_repc_dag: \"Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\" and\n            a1_in_lln: \"a1 \\<in> set (ll ! n)\""], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  ordered t1 var\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n  wf_ll pret ll var\n  n < length levellist\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\n\ngoal (1 subgoal):\n 1. (\\<And>a1.\n        \\<lbrakk>Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high)\n                  t1;\n         a1 \\<in> set (ll ! n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule restrict_root_Node)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> t1 \\<notin> Dags (repc ` Nodes n ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high)\n 2. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> ordered t1 ?var12\n 3. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes (Suc n) ll.\n                         ?var12 (repc no) \\<le> ?var12 no \\<and>\n                         repc (repc no) = repc no\n 4. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret12 ll ?var12\n 5. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> n < length ll\n 6. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\\<rbrakk>\n    \\<Longrightarrow> repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n 7. \\<lbrakk>\\<And>a1.\n                \\<lbrakk>Dag (repc a1) (repc \\<propto> low)\n                          (repc \\<propto> high) t1;\n                 a1 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t1 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     \\<exists>q.\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t1 \\<and>\n        q \\<in> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  a1 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  a1 \\<in> set (ll ! n)", "have a1_in_pret: \"a1 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  a1 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. a1 \\<in> set_of pret", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from wf_ll nsll  a1_in_lln"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  a1 \\<in> set (ll ! n)", "have vara1_n: \"var a1 = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  a1 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var a1 = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var a1 = n\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from a1_in_lln rep_prop"], ["proof (chain)\npicking this:\n  a1 \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))", "obtain\n            repa1_nNull: \" repc a1 \\<noteq> Null\" and\n            repa1_reduce: \"(repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and> low a1 \\<noteq> Null \n            \\<longrightarrow> repc a1 = (repc \\<propto> high) a1\" and\n            repa1_share: \"((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow> low a1 = Null) \n            \\<longrightarrow> repc a1 \\<in> set (ll ! n) \\<and> repc (repc a1) = repc a1 \\<and> \n            (\\<forall>no1\\<in>set (ll ! n). ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and> \n            (repc \\<propto> low) no1 = (repc \\<propto> low) a1) = (repc a1 = repc no1))\""], ["proof (prove)\nusing this:\n  a1 \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a1 \\<noteq> Null;\n      (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n      low a1 \\<noteq> Null \\<longrightarrow>\n      repc a1 = (repc \\<propto> high) a1;\n      ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow>\n       low a1 = Null) \\<longrightarrow>\n      repc a1 \\<in> set (ll ! n) \\<and>\n      repc (repc a1) = repc a1 \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n          (repc a1 = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=4]]"], ["proof (prove)\nusing this:\n  a1 \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a1 \\<noteq> Null;\n      (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n      low a1 \\<noteq> Null \\<longrightarrow>\n      repc a1 = (repc \\<propto> high) a1;\n      ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow>\n       low a1 = Null) \\<longrightarrow>\n      repc a1 \\<in> set (ll ! n) \\<and>\n      repc (repc a1) = repc a1 \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n          (repc a1 = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc a1 \\<noteq> Null\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null \\<longrightarrow>\n  repc a1 = (repc \\<propto> high) a1\n  ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow>\n   low a1 = Null) \\<longrightarrow>\n  repc a1 \\<in> set (ll ! n) \\<and>\n  repc (repc a1) = repc a1 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n      (repc a1 = repc no1))\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from t1_repc_dag a1_in_lln repa1_nNull"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  a1 \\<in> set (ll ! n)\n  repc a1 \\<noteq> Null", "obtain lt1 rt1 where \n            t1_Node: \"t1 = (Node lt1 (repc a1) rt1)\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  a1 \\<in> set (ll ! n)\n  repc a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt1 rt1.\n        t1 = Node lt1 (repc a1) rt1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t1 = Node lt1 (repc a1) rt1\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "(* ab hier gehts um t2 *)"], ["proof (state)\nthis:\n  t1 = Node lt1 (repc a1) rt1\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from t2_in_DagsNodesSucn"], ["proof (chain)\npicking this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)", "have ord_t2: \"ordered t2 var\""], ["proof (prove)\nusing this:\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. ordered t2 var", "proof (elim Dags.cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "fix p t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t_in_repcNodes: \"set_of t \\<subseteq> repc ` Nodes (Suc n) ll\""], ["proof (state)\nthis:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t_nTip: \" t \\<noteq> Tip\""], ["proof (state)\nthis:\n  t \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t2t: \"t2 = t\""], ["proof (state)\nthis:\n  t2 = t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "assume t_dag: \"Dag p (repc \\<propto> low) (repc \\<propto> high) t\""], ["proof (state)\nthis:\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "from t_in_repcNodes"], ["proof (chain)\npicking this:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll", "have x_in_repcNodesSucn:  \n              \"\\<forall> x. x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  set_of t \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_of t \\<subseteq> repc ` Nodes (Suc n) ll \\<Longrightarrow>\n    \\<forall>x.\n       x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "from t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t", "have \"p \\<noteq> Null\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n\ngoal (1 subgoal):\n 1. p \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply (case_tac \"p=Null\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; p = Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null\n 2. \\<lbrakk>t \\<noteq> Tip;\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     p \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> p \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "with t_nTip t_dag"], ["proof (chain)\npicking this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null", "obtain lt rt where t_Node: \"t=Node lt p rt\""], ["proof (prove)\nusing this:\n  t \\<noteq> Tip\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  p \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt rt.\n        t = Node lt p rt \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "then"], ["proof (chain)\npicking this:\n  t = Node lt p rt", "have \"p \\<in> set_of t\""], ["proof (prove)\nusing this:\n  t = Node lt p rt\n\ngoal (1 subgoal):\n 1. p \\<in> set_of t", "by auto"], ["proof (state)\nthis:\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "with x_in_repcNodesSucn"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n  p \\<in> set_of t", "have \"p \\<in> repc ` Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set_of t \\<longrightarrow> x \\<in> repc ` Nodes (Suc n) ll\n  p \\<in> set_of t\n\ngoal (1 subgoal):\n 1. p \\<in> repc ` Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  p \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "then"], ["proof (chain)\npicking this:\n  p \\<in> repc ` Nodes (Suc n) ll", "obtain a where \n              repca_p: \"p=repc a\" and a_in_NodesSucn: \"a \\<in> Nodes (Suc n) ll\""], ["proof (prove)\nusing this:\n  p \\<in> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>p = repc a; a \\<in> Nodes (Suc n) ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p = repc a\n  a \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       \\<lbrakk>t2 = t; set_of t \\<subseteq> repc ` Nodes (Suc n) ll;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n        t \\<noteq> Tip\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var", "with repca_p while_while_prop t_dag t2t"], ["proof (chain)\npicking this:\n  p = repc a\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t2 = t\n  p = repc a\n  a \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  p = repc a\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  Dag p (repc \\<propto> low) (repc \\<propto> high) t\n  t2 = t\n  p = repc a\n  a \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. ordered t2 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = repc a;\n     \\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)));\n     Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t; p = repc a;\n     a \\<in> Nodes (Suc n) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (erule_tac x=a in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     var (repc a) \\<le> var a \\<and>\n     (\\<exists>not nort.\n         Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort \\<and>\n         Dag a low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (elim conjE exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (subgoal_tac \"nort = t\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 2. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> nort = t\n 3. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt\\<rbrakk>\n       \\<Longrightarrow> nort = t\n 2. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 3. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply (simp add: Dag_unique)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>not nort nobdt norbdt.\n       \\<lbrakk>p = repc a;\n        Dag p (repc \\<propto> low) (repc \\<propto> high) t; t2 = t;\n        p = repc a; a \\<in> Nodes (Suc n) ll; var (repc a) \\<le> var a;\n        Dag (repc a) (repc \\<propto> low) (repc \\<propto> high) nort;\n        Dag a low high not; reduced nort; ordered nort var;\n        set_of nort \\<subseteq> repc ` Nodes (n + 1) ll;\n        \\<forall>no\\<in>set_of nort. repc no = no; bdt not var = Some nobdt;\n        bdt nort var = Some norbdt; nobdt \\<sim> norbdt; nort = t\\<rbrakk>\n       \\<Longrightarrow> ordered t2 var\n 2. \\<lbrakk>p = repc a; Dag p (repc \\<propto> low) (repc \\<propto> high) t;\n     t2 = t; p = repc a; a \\<in> Nodes (Suc n) ll;\n     a \\<notin> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 var", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ordered t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ordered t2 var\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from rep_rep_no t2_in_DagsNodesSucn t2_notin_DagsNodesn ord_t2 while_prop_part wf_ll \n            nsll  repcNodes_in_Nodes"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  ordered t2 var\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n  wf_ll pret ll var\n  n < length levellist\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll", "obtain a2 where\n            t2_repc_dag: \"Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\" and\n            a2_in_lln: \"a2 \\<in> set (ll ! n)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  ordered t2 var\n  \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no\n  wf_ll pret ll var\n  n < length levellist\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. (\\<And>a2.\n        \\<lbrakk>Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high)\n                  t2;\n         a2 \\<in> set (ll ! n)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (drule restrict_root_Node)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> t2 \\<notin> Dags (repc ` Nodes n ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high)\n 2. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> ordered t2 ?var12\n 3. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>Nodes (Suc n) ll.\n                         ?var12 (repc no) \\<le> ?var12 no \\<and>\n                         repc (repc no) = repc no\n 4. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> wf_ll ?pret12 ll ?var12\n 5. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> n < length ll\n 6. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\\<rbrakk>\n    \\<Longrightarrow> repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n 7. \\<lbrakk>\\<And>a2.\n                \\<lbrakk>Dag (repc a2) (repc \\<propto> low)\n                          (repc \\<propto> high) t2;\n                 a2 \\<in> set (ll ! n)\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     \\<forall>no\\<in>Nodes (n + 1) ll. repc (repc no) = repc no;\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     ordered t2 var;\n     \\<forall>no\\<in>Nodes (Suc n) ll. var (repc no) \\<le> var no;\n     wf_ll pret ll var; n < length levellist;\n     repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll;\n     \\<exists>q.\n        Dag (repc q) (repc \\<propto> low) (repc \\<propto> high) t2 \\<and>\n        q \\<in> set (ll ! n)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (auto simp add: length_ll_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  a2 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "with wf_ll nsll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  a2 \\<in> set (ll ! n)", "have a2_in_pret: \"a2 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  a2 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. a2 \\<in> set_of pret", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from wf_ll nsll  a2_in_lln"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  n < length levellist\n  a2 \\<in> set (ll ! n)", "have vara2_n: \"var a2 = n\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  n < length levellist\n  a2 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. var a2 = n", "by (simp add: wf_ll_def length_ll_eq)"], ["proof (state)\nthis:\n  var a2 = n\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from a2_in_lln rep_prop"], ["proof (chain)\npicking this:\n  a2 \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))", "obtain\n            repa2_nNull: \" repc a2 \\<noteq> Null\" and\n            repa2_reduce: \"(repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and> low a2 \\<noteq> Null \n            \\<longrightarrow> repc a2 = (repc \\<propto> high) a2\" and\n            repa2_share: \"((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow> low a2 = Null) \n            \\<longrightarrow> repc a2 \\<in> set (ll ! n) \\<and> repc (repc a2) = repc a2 \\<and> \n            (\\<forall>no1\\<in>set (ll ! n). ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and> \n            (repc \\<propto> low) no1 = (repc \\<propto> low) a2) = (repc a2 = repc no1))\""], ["proof (prove)\nusing this:\n  a2 \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a2 \\<noteq> Null;\n      (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n      low a2 \\<noteq> Null \\<longrightarrow>\n      repc a2 = (repc \\<propto> high) a2;\n      ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow>\n       low a2 = Null) \\<longrightarrow>\n      repc a2 \\<in> set (ll ! n) \\<and>\n      repc (repc a2) = repc a2 \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n          (repc a2 = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit = 4]]"], ["proof (prove)\nusing this:\n  a2 \\<in> set (ll ! n)\n  \\<forall>no\\<in>set (ll ! n).\n     repc no \\<noteq> Null \\<and>\n     (if (repc \\<propto> low) no = (repc \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repc no = (repc \\<propto> low) no\n      else repc no \\<in> set (ll ! n) \\<and>\n           repc (repc no) = repc no \\<and>\n           (\\<forall>no1\\<in>set (ll ! n).\n               ((repc \\<propto> high) no1 = (repc \\<propto> high) no \\<and>\n                (repc \\<propto> low) no1 = (repc \\<propto> low) no) =\n               (repc no = repc no1)))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a2 \\<noteq> Null;\n      (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n      low a2 \\<noteq> Null \\<longrightarrow>\n      repc a2 = (repc \\<propto> high) a2;\n      ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow>\n       low a2 = Null) \\<longrightarrow>\n      repc a2 \\<in> set (ll ! n) \\<and>\n      repc (repc a2) = repc a2 \\<and>\n      (\\<forall>no1\\<in>set (ll ! n).\n          ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n           (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n          (repc a2 = repc no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null \\<longrightarrow>\n  repc a2 = (repc \\<propto> high) a2\n  ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow>\n   low a2 = Null) \\<longrightarrow>\n  repc a2 \\<in> set (ll ! n) \\<and>\n  repc (repc a2) = repc a2 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n      (repc a2 = repc no1))\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "from t2_repc_dag a2_in_lln repa2_nNull"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  a2 \\<in> set (ll ! n)\n  repc a2 \\<noteq> Null", "obtain lt2 rt2 where \n            t2_Node: \"t2 = (Node lt2 (repc a2) rt2)\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  a2 \\<in> set (ll ! n)\n  repc a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lt2 rt2.\n        t2 = Node lt2 (repc a2) rt2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                 (repc \\<propto> high) =\n                Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                 (repb \\<propto> high);\n        \\<forall>t1 t2.\n           t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<and>\n           t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                     (repb \\<propto> high) \\<longrightarrow>\n           isomorphic_dags_eq t1 t2 var;\n        t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high);\n        t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n        t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                     (repc \\<propto> high)\\<rbrakk>\n       \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "show \"isomorphic_dags_eq t1 t2 var\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof (cases \"(repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and> low a1 \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "case True"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "note t1_red_cond=this"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with t1_red_cond"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null", "have t1_red_case: \"(repc \\<propto> low) a1 = (repc \\<propto> high) a1\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from t1_red_cond"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null", "have lowa1_nNull: \"low a1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low a1 \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  low a1 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with pret_dag prebdt_pret a1_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null", "have higha1_nNull: \"high a1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a1 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     a1 \\<in> set_of pret; low a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<noteq> Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a1 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag ord_pret a1_in_pret lowa1_nNull higha1_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n  high a1 \\<noteq> Null", "have var_children_smaller_a1: \"var (low a1) < var a1 \\<and> var (high a1) < var a1\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n  high a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low a1) < var a1 \\<and> var (high a1) < var a1", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low a1) < var a1 \\<and> var (high a1) < var a1", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a1 \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low a1 \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag a1_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  a1 \\<in> set_of pret", "have a1_nNull: \"a1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. a1 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a1 \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a1 \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a1 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a1_in_pret higha1_nNull pret_dag"], ["proof (chain)\npicking this:\n  a1 \\<in> set_of pret\n  high a1 \\<noteq> Null\n  Dag p low high pret\n  a1 \\<noteq> Null", "have \"high a1 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a1 \\<in> set_of pret\n  high a1 \\<noteq> Null\n  Dag p low high pret\n  a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a1 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a1 \\<in> set_of pret; high a1 \\<noteq> Null;\n     Dag p low high pret; a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret;\n     a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a1 \\<noteq> Null\n 2. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret;\n     a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?high4 a1 \\<noteq> Null\n 3. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret;\n     a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret; a1 \\<noteq> Null;\n     ?high4 a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a1 \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high a1 \\<in> set_of pret", "have \"high a1 \\<in> set (ll ! (var (high a1)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high a1 \\<in> set (ll ! var (high a1))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high a1 \\<in> set (ll ! var (high a1))\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a1_in_lln t1_repc_dag var_children_smaller_a1 vara1_n"], ["proof (chain)\npicking this:\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n  var a1 = n\n  high a1 \\<in> set (ll ! var (high a1))", "have \"\\<exists>k<n. (high a1) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n  var a1 = n\n  high a1 \\<in> set (ll ! var (high a1))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. high a1 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. high a1 \\<in> set (ll ! k)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. high a1 \\<in> set (ll ! k)", "have higha1_in_Nodesn: \"(high a1) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. high a1 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high a1 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  high a1 \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  high a1 \\<in> Nodes n ll", "have rhigha1_in_rNodesn: \"repc (high a1) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  high a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (high a1) \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from higha1_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  high a1 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain rt1 where \n              rt1_dag:  \"Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1\" and\n              rt1_in_repbNort: \"set_of rt1 \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  high a1 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>rt1.\n        \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                  (repb \\<propto> high) rt1;\n         set_of rt1 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>rt1.\n                \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt1;\n                 set_of rt1 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a1 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"high a1\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>rt1.\n                \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt1;\n                 set_of rt1 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a1 \\<in> Nodes n ll;\n     var (repb (high a1)) \\<le> var (high a1) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high a1) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>rt1.\n                \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt1;\n                 set_of rt1 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a1 \\<in> Nodes n ll; high a1 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1\n  set_of rt1 \\<subseteq> repb ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt1_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rt1 \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rt1_in_repcNodesn: \"set_of rt1 \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rt1 \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rt1 \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rt1 \\<subseteq> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt1_dag higha1_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1\n  high a1 \\<in> Nodes n ll", "have repcrt1_dag: \"Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\""], ["proof (prove)\nusing this:\n  Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1\n  high a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high)\n              rt1;\n     high a1 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a1)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt1", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high)\n              rt1;\n     Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a1)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "have rt1_nTip: \"rt1 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "have \"repc (high a1) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "note rhigha1_in_rNodesn"], ["proof (state)\nthis:\n  repc (high a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (high a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "have \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (high a1) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (high a1) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (high a1) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high a1) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (high a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "with repcrt1_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n  repc (high a1) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n  repc (high a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  rt1 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rt1 \\<noteq> Tip\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from repa1_reduce lowa1_nNull  higha1_nNull  t1_red_case"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null \\<longrightarrow>\n  repc a1 = (repc \\<propto> high) a1\n  low a1 \\<noteq> Null\n  high a1 \\<noteq> Null\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1", "have repc_a1_def: \"repc a1 = repc (high a1)\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n  low a1 \\<noteq> Null \\<longrightarrow>\n  repc a1 = (repc \\<propto> high) a1\n  low a1 \\<noteq> Null\n  high a1 \\<noteq> Null\n  (repc \\<propto> low) a1 = (repc \\<propto> high) a1\n\ngoal (1 subgoal):\n 1. repc a1 = repc (high a1)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repc a1 = repc (high a1)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with rt1_in_repcNodesn repcrt1_dag rhigha1_in_rNodesn a1_in_lln \n              t1_repc_dag repc_a1_def  rt1_nTip"], ["proof (chain)\npicking this:\n  set_of rt1 \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n  repc (high a1) \\<in> repc ` Nodes n ll\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  repc a1 = repc (high a1)\n  rt1 \\<noteq> Tip\n  repc a1 = repc (high a1)", "have t1_in_Dags_Nodesn: \n              \"t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of rt1 \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n  repc (high a1) \\<in> repc ` Nodes n ll\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  repc a1 = repc (high a1)\n  rt1 \\<noteq> Tip\n  repc a1 = repc (high a1)\n\ngoal (1 subgoal):\n 1. t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n              (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> set_of t1 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t1\n 3. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<noteq> Tip", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1 \\<noteq> Tip; repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> set_of t1 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t1\n 3. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<noteq> Tip", "apply (subgoal_tac \"t1=rt1\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1 \\<noteq> Tip; repc a1 = repc (high a1); t1 = rt1\\<rbrakk>\n    \\<Longrightarrow> set_of t1 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1 \\<noteq> Tip; repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> t1 = rt1\n 3. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t1\n 4. \\<lbrakk>set_of rt1 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     repc a1 = repc (high a1); rt1 \\<noteq> Tip;\n     repc a1 = repc (high a1)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<noteq> Tip", "apply (auto simp add: Dag_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n    low a1 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof (cases \"(repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and> low a2 \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "case True"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "note t2_red_cond=this"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with t2_red_cond"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null", "have t2_red_case: \"(repc \\<propto> low) a2 = (repc \\<propto> high) a2\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from t2_red_cond"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null", "have lowa2_nNull: \"low a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low a2 \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  low a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with pret_dag prebdt_pret a2_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null", "have higha2_nNull: \"high a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a2 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     a2 \\<in> set_of pret; low a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag ord_pret a2_in_pret lowa2_nNull higha2_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null", "have var_children_smaller_a2: \n                \"var (low a2) < var a2 \\<and> var (high a2) < var a2\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low a2) < var a2 \\<and> var (high a2) < var a2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low a2) < var a2 \\<and> var (high a2) < var a2", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low a2 \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag a2_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  a2 \\<in> set_of pret", "have a2_nNull: \"a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. a2 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a2_in_pret higha2_nNull pret_dag"], ["proof (chain)\npicking this:\n  a2 \\<in> set_of pret\n  high a2 \\<noteq> Null\n  Dag p low high pret\n  a2 \\<noteq> Null", "have \"high a2 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a2 \\<in> set_of pret\n  high a2 \\<noteq> Null\n  Dag p low high pret\n  a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a2 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a2 \\<in> set_of pret; high a2 \\<noteq> Null;\n     Dag p low high pret; a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null\n 2. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?high4 a2 \\<noteq> Null\n 3. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret; a2 \\<noteq> Null;\n     ?high4 a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a2 \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high a2 \\<in> set_of pret", "have \"high a2 \\<in> set (ll ! (var (high a2)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high a2 \\<in> set (ll ! var (high a2))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high a2 \\<in> set (ll ! var (high a2))\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a2_in_lln t2_repc_dag var_children_smaller_a2 vara2_n"], ["proof (chain)\npicking this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  high a2 \\<in> set (ll ! var (high a2))", "have \"\\<exists> k<n. (high a2) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  high a2 \\<in> set (ll ! var (high a2))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. high a2 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)", "have higha2_in_Nodesn: \"(high a2) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high a2 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  high a2 \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  high a2 \\<in> Nodes n ll", "have rhigha2_in_rNodesn: \"repc (high a2) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from higha2_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  high a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain rt2 where \n                rt2_dag:  \"Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\" and\n                rt2_in_repbNort: \"set_of rt2 \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  high a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>rt2.\n        \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                  (repb \\<propto> high) rt2;\n         set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>rt2.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2;\n                 set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"high a2\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>rt2.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2;\n                 set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll;\n     var (repb (high a2)) \\<le> var (high a2) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high a2) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>rt2.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2;\n                 set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll; high a2 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\n  set_of rt2 \\<subseteq> repb ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt2_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rt2 \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rt2_in_repcNodesn: \"set_of rt2 \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rt2 \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rt2 \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rt2 \\<subseteq> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt2_dag higha2_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\n  high a2 \\<in> Nodes n ll", "have repcrt2_dag: \"Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\""], ["proof (prove)\nusing this:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n              rt2;\n     high a2 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt2", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n              rt2;\n     Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "have rt2_nTip: \"rt2 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "have \"repc (high a2) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "note rhigha2_in_rNodesn"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "have \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (high a2) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (high a2) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (high a2) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high a2) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (high a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "with repcrt2_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  rt2 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rt2 \\<noteq> Tip\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from repa2_reduce lowa2_nNull  higha2_nNull  t2_red_case"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null \\<longrightarrow>\n  repc a2 = (repc \\<propto> high) a2\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2", "have repc_a2_def: \"repc a2 = repc (high a2)\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null \\<longrightarrow>\n  repc a2 = (repc \\<propto> high) a2\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2\n\ngoal (1 subgoal):\n 1. repc a2 = repc (high a2)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repc a2 = repc (high a2)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with rt2_in_repcNodesn repcrt2_dag rhigha2_in_rNodesn a2_in_lln \n                t2_repc_dag repc_a2_def  rt2_nTip"], ["proof (chain)\npicking this:\n  set_of rt2 \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  repc a2 = repc (high a2)\n  rt2 \\<noteq> Tip\n  repc a2 = repc (high a2)", "have t2_in_Dags_Nodesn: \n                \"t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of rt2 \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  repc a2 = repc (high a2)\n  rt2 \\<noteq> Tip\n  repc a2 = repc (high a2)\n\ngoal (1 subgoal):\n 1. t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n              (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 3. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2 \\<noteq> Tip; repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 3. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply (subgoal_tac \"t2=rt2\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2 \\<noteq> Tip; repc a2 = repc (high a2); t2 = rt2\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2 \\<noteq> Tip; repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 = rt2\n 3. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 4. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply (auto simp add: Dag_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from isomorphic_dags_eq t1_in_Dags_Nodesn t2_in_Dags_Nodesn repbc_dags_eq"], ["proof (chain)\npicking this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "by auto"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "assume t2_share_cond: \n                \"\\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and> low a2 \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n          low a2 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from t1_in_Dags_Nodesn t2_notin_DagsNodesn t2_in_DagsNodesSucn \n                isomorphic_dags_eq repbc_dags_eq"], ["proof (chain)\npicking this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "show ?thesis"], ["proof (prove)\nusing this:\n  t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> isomorphic_dags_eq t1 t2 var", "apply (rule mixed_Dags_case)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)\n 2. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<notin> Dags (repc ` Nodes n ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high)\n 3. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<in> Dags (repc ` Nodes (Suc n) ll)\n                                (repc \\<propto> low) (repc \\<propto> high)\n 4. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t1 t2.\n                         t1 \\<in> Dags (repb ` Nodes n ll)\n                                   (repb \\<propto> low)\n                                   (repb \\<propto> high) \\<and>\n                         t2 \\<in> Dags (repb ` Nodes n ll)\n                                   (repb \\<propto> low)\n                                   (repb \\<propto> high) \\<longrightarrow>\n                         isomorphic_dags_eq t1 t2 var\n 5. \\<lbrakk>t1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t2 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high) =\n                      Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                       (repb \\<propto> high)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "assume t1_share_cond: \n              \"\\<not>((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and> low a1 \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n          low a1 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with repa1_share"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow>\n   low a1 = Null) \\<longrightarrow>\n  repc a1 \\<in> set (ll ! n) \\<and>\n  repc (repc a1) = repc a1 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n      (repc a1 = repc no1))\n  \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n          low a1 \\<noteq> Null)", "obtain\n              repca1_in_llbn: \"repc a1 \\<in> set (ll ! n)\" and \n              reprepa1: \"repc (repc a1) = repc a1\" and\n              twonodes_llbn_a1: \n              \"(\\<forall>no1\\<in>set (ll ! n). ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and> \n              (repc \\<propto> low) no1 = (repc \\<propto> low) a1) = (repc a1 = repc no1))\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow>\n   low a1 = Null) \\<longrightarrow>\n  repc a1 \\<in> set (ll ! n) \\<and>\n  repc (repc a1) = repc a1 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n      (repc a1 = repc no1))\n  \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n          low a1 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a1 \\<in> set (ll ! n); repc (repc a1) = repc a1;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n         (repc a1 = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<longrightarrow>\n   low a1 = Null) \\<longrightarrow>\n  repc a1 \\<in> set (ll ! n) \\<and>\n  repc (repc a1) = repc a1 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n      (repc a1 = repc no1))\n  \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n          low a1 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a1 \\<in> set (ll ! n); repc (repc a1) = repc a1;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n         (repc a1 = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc a1 \\<in> set (ll ! n)\n  repc (repc a1) = repc a1\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n     (repc a1 = repc no1)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a1 = (repc \\<propto> high) a1 \\<and>\n            low a1 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof (cases \"(repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and> low a2 \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "case True"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "note t2_red_cond=this"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with t2_red_cond"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null", "have t2_red_case: \"(repc \\<propto> low) a2 = (repc \\<propto> high) a2\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from t2_red_cond"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null", "have lowa2_nNull: \"low a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low a2 \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  low a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with pret_dag prebdt_pret a2_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null", "have higha2_nNull: \"high a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  bdt pret var = Some prebdt\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a2 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; bdt pret var = Some prebdt;\n     a2 \\<in> set_of pret; low a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply (drule balanced_bdt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>bdt pret var = Some prebdt; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> bdt pret ?var4 = Some ?bdt1.4\n 2. \\<lbrakk>bdt pret var = Some prebdt; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?no4 \\<in> set_of pret\n 3. \\<lbrakk>bdt pret var = Some prebdt; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; (low ?no4 = Null) = (high ?no4 = Null)\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag ord_pret a2_in_pret lowa2_nNull higha2_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null", "have var_children_smaller_a2: \n                \"var (low a2) < var a2 \\<and> var (high a2) < var a2\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low a2) < var a2 \\<and> var (high a2) < var a2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low a2) < var a2 \\<and> var (high a2) < var a2", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low a2 \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from pret_dag a2_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  a2 \\<in> set_of pret", "have a2_nNull: \"a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. a2 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a2 \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a2_in_pret higha2_nNull pret_dag"], ["proof (chain)\npicking this:\n  a2 \\<in> set_of pret\n  high a2 \\<noteq> Null\n  Dag p low high pret\n  a2 \\<noteq> Null", "have \"high a2 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a2 \\<in> set_of pret\n  high a2 \\<noteq> Null\n  Dag p low high pret\n  a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a2 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a2 \\<in> set_of pret; high a2 \\<noteq> Null;\n     Dag p low high pret; a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null\n 2. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?high4 a2 \\<noteq> Null\n 3. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret; a2 \\<noteq> Null;\n     ?high4 a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a2 \\<in> set_of pret\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high a2 \\<in> set_of pret", "have \"high a2 \\<in> set (ll ! (var (high a2)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high a2 \\<in> set (ll ! var (high a2))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high a2 \\<in> set (ll ! var (high a2))\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with a2_in_lln t2_repc_dag var_children_smaller_a2 vara2_n"], ["proof (chain)\npicking this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  high a2 \\<in> set (ll ! var (high a2))", "have \"\\<exists> k<n. (high a2) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  high a2 \\<in> set (ll ! var (high a2))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. high a2 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)", "have higha2_in_Nodesn: \"(high a2) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high a2 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  high a2 \\<in> Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  high a2 \\<in> Nodes n ll", "have rhigha2_in_rNodesn: \"repc (high a2) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from higha2_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  high a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain rt2 where \n                rt2_dag:  \"Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\" and\n                rt2_in_repbNort: \"set_of rt2 \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  high a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>rt2.\n        \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                  (repb \\<propto> high) rt2;\n         set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>rt2.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2;\n                 set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"high a2\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>rt2.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2;\n                 set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll;\n     var (repb (high a2)) \\<le> var (high a2) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high a2) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>rt2.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2;\n                 set_of rt2 \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll; high a2 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\n  set_of rt2 \\<subseteq> repb ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt2_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rt2 \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rt2_in_repcNodesn: \"set_of rt2 \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rt2 \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rt2 \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rt2 \\<subseteq> repc ` Nodes n ll\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from rt2_dag higha2_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\n  high a2 \\<in> Nodes n ll", "have repcrt2_dag: \"Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\""], ["proof (prove)\nusing this:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n              rt2;\n     high a2 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt2", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n              rt2;\n     Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "have rt2_nTip: \"rt2 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "have \"repc (high a2) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "note rhigha2_in_rNodesn"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "have \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (high a2) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (high a2) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (high a2) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high a2) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (high a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "with repcrt2_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  rt2 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rt2 \\<noteq> Tip\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from repa2_reduce lowa2_nNull  higha2_nNull  t2_red_case"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null \\<longrightarrow>\n  repc a2 = (repc \\<propto> high) a2\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2", "have repc_a2_def: \"repc a2 = repc (high a2)\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n  low a2 \\<noteq> Null \\<longrightarrow>\n  repc a2 = (repc \\<propto> high) a2\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n  (repc \\<propto> low) a2 = (repc \\<propto> high) a2\n\ngoal (1 subgoal):\n 1. repc a2 = repc (high a2)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repc a2 = repc (high a2)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with rt2_in_repcNodesn repcrt2_dag rhigha2_in_rNodesn a2_in_lln \n                t2_repc_dag repc_a2_def  rt2_nTip"], ["proof (chain)\npicking this:\n  set_of rt2 \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  repc a2 = repc (high a2)\n  rt2 \\<noteq> Tip\n  repc a2 = repc (high a2)", "have t2_in_Dags_Nodesn: \n                \"t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of rt2 \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n  repc (high a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  repc a2 = repc (high a2)\n  rt2 \\<noteq> Tip\n  repc a2 = repc (high a2)\n\ngoal (1 subgoal):\n 1. t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n              (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 3. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2 \\<noteq> Tip; repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 3. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply (subgoal_tac \"t2=rt2\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2 \\<noteq> Tip; repc a2 = repc (high a2); t2 = rt2\\<rbrakk>\n    \\<Longrightarrow> set_of t2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2 \\<noteq> Tip; repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 = rt2\n 3. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> Dag ?p8 (repc \\<propto> low) (repc \\<propto> high) t2\n 4. \\<lbrakk>set_of rt2 \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     repc a2 = repc (high a2); rt2 \\<noteq> Tip;\n     repc a2 = repc (high a2)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<noteq> Tip", "apply (auto simp add: Dag_unique)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from t2_in_Dags_Nodesn t1_notin_DagsNodesn t1_in_DagsNodesSucn \n                isomorphic_dags_eq repbc_dags_eq"], ["proof (chain)\npicking this:\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "have \"isomorphic_dags_eq t2 t1 var\""], ["proof (prove)\nusing this:\n  t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n               (repc \\<propto> high)\n  t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n            (repc \\<propto> high)\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t2 t1 var", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> isomorphic_dags_eq t2 t1 var", "apply (rule mixed_Dags_case)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                                (repc \\<propto> high)\n 2. \\<lbrakk>t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<notin> Dags (repc ` Nodes n ll)\n                                   (repc \\<propto> low)\n                                   (repc \\<propto> high)\n 3. \\<lbrakk>t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> t1 \\<in> Dags (repc ` Nodes (Suc n) ll)\n                                (repc \\<propto> low) (repc \\<propto> high)\n 4. \\<lbrakk>t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>t1 t2.\n                         t1 \\<in> Dags (repb ` Nodes n ll)\n                                   (repb \\<propto> low)\n                                   (repb \\<propto> high) \\<and>\n                         t2 \\<in> Dags (repb ` Nodes n ll)\n                                   (repb \\<propto> low)\n                                   (repb \\<propto> high) \\<longrightarrow>\n                         isomorphic_dags_eq t1 t2 var\n 5. \\<lbrakk>t2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high);\n     t1 \\<notin> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                  (repc \\<propto> high);\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high);\n     \\<forall>t1 t2.\n        t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<and>\n        t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                  (repb \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var;\n     Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n     Dags (repb ` Nodes n ll) (repb \\<propto> low)\n      (repb \\<propto> high)\\<rbrakk>\n    \\<Longrightarrow> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                       (repc \\<propto> high) =\n                      Dags (repb ` Nodes n ll) (repb \\<propto> low)\n                       (repb \\<propto> high)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  isomorphic_dags_eq t2 t1 var\n\ngoal (2 subgoals):\n 1. (repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n    low a2 \\<noteq> Null \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var\n 2. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "then"], ["proof (chain)\npicking this:\n  isomorphic_dags_eq t2 t1 var", "show ?thesis"], ["proof (prove)\nusing this:\n  isomorphic_dags_eq t2 t1 var\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "by (simp add: isomorphic_dags_eq_sym)"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "assume t2_shared_cond: \n                \"\\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and> low a2 \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n          low a2 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "with repa2_share"], ["proof (chain)\npicking this:\n  ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow>\n   low a2 = Null) \\<longrightarrow>\n  repc a2 \\<in> set (ll ! n) \\<and>\n  repc (repc a2) = repc a2 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n      (repc a2 = repc no1))\n  \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n          low a2 \\<noteq> Null)", "obtain\n                repca2_in_llbn: \"repc a2 \\<in> set (ll ! n)\" and \n                reprepa2: \"repc (repc a2) = repc a2\" and\n                twonodes_llbn_a2: \"(\\<forall>no1\\<in>set (ll ! n). \n                ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and> \n                (repc \\<propto> low) no1 = (repc \\<propto> low) a2) = (repc a2 = repc no1))\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow>\n   low a2 = Null) \\<longrightarrow>\n  repc a2 \\<in> set (ll ! n) \\<and>\n  repc (repc a2) = repc a2 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n      (repc a2 = repc no1))\n  \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n          low a2 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a2 \\<in> set (ll ! n); repc (repc a2) = repc a2;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n         (repc a2 = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<longrightarrow>\n   low a2 = Null) \\<longrightarrow>\n  repc a2 \\<in> set (ll ! n) \\<and>\n  repc (repc a2) = repc a2 \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n       (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n      (repc a2 = repc no1))\n  \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n          low a2 \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repc a2 \\<in> set (ll ! n); repc (repc a2) = repc a2;\n      \\<forall>no1\\<in>set (ll ! n).\n         ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n          (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n         (repc a2 = repc no1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repc a2 \\<in> set (ll ! n)\n  repc (repc a2) = repc a2\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n     (repc a2 = repc no1)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from twonodes_llbn_a2 a1_in_lln"], ["proof (chain)\npicking this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n     (repc a2 = repc no1)\n  a1 \\<in> set (ll ! n)", "have share_a1_a2: \n                \"((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and> \n                (repc \\<propto> low) a1 = (repc \\<propto> low) a2) = (repc a2 = repc a1)\""], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n     (repc a2 = repc no1)\n  a1 \\<in> set (ll ! n)\n\ngoal (1 subgoal):\n 1. ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n     (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n    (repc a2 = repc a1)", "by auto"], ["proof (state)\nthis:\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from twonodes_llbn_a1 repca1_in_llbn reprepa1"], ["proof (chain)\npicking this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n     (repc a1 = repc no1)\n  repc a1 \\<in> set (ll ! n)\n  repc (repc a1) = repc a1", "have children_repc_eq_a1: \"(repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and> \n                (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\""], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a1 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a1) =\n     (repc a1 = repc no1)\n  repc a1 \\<in> set (ll ! n)\n  repc (repc a1) = repc a1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n    (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from twonodes_llbn_a2 repca2_in_llbn reprepa2"], ["proof (chain)\npicking this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n     (repc a2 = repc no1)\n  repc a2 \\<in> set (ll ! n)\n  repc (repc a2) = repc a2", "have children_repc_eq_a2: \"(repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and> \n                (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\""], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set (ll ! n).\n     ((repc \\<propto> high) no1 = (repc \\<propto> high) a2 \\<and>\n      (repc \\<propto> low) no1 = (repc \\<propto> low) a2) =\n     (repc a2 = repc no1)\n  repc a2 \\<in> set (ll ! n)\n  repc (repc a2) = repc a2\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n    (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. \\<not> ((repc \\<propto> low) a2 = (repc \\<propto> high) a2 \\<and>\n            low a2 \\<noteq> Null) \\<Longrightarrow>\n    isomorphic_dags_eq t1 t2 var", "from  t1_Node t2_Node"], ["proof (chain)\npicking this:\n  t1 = Node lt1 (repc a1) rt1\n  t2 = Node lt2 (repc a2) rt2", "show ?thesis"], ["proof (prove)\nusing this:\n  t1 = Node lt1 (repc a1) rt1\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq t1 t2 var", "proof (clarsimp simp add: isomorphic_dags_eq_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>t1 = Node lt1 (repc a1) rt1; t2 = Node lt2 (repc a2) rt2;\n        bdt (Node lt1 (repc a1) rt1) var = Some bdt\\<^sub>1;\n        bdt (Node lt2 (repc a2) rt2) var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "fix bdt1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>t1 = Node lt1 (repc a1) rt1; t2 = Node lt2 (repc a2) rt2;\n        bdt (Node lt1 (repc a1) rt1) var = Some bdt\\<^sub>1;\n        bdt (Node lt2 (repc a2) rt2) var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "assume t1_bdt: \"bdt (Node lt1 (repc a1) rt1) var = Some bdt1\""], ["proof (state)\nthis:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>t1 = Node lt1 (repc a1) rt1; t2 = Node lt2 (repc a2) rt2;\n        bdt (Node lt1 (repc a1) rt1) var = Some bdt\\<^sub>1;\n        bdt (Node lt2 (repc a2) rt2) var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "assume t2_bdt: \"bdt (Node lt2 (repc a2) rt2) var = Some bdt1\""], ["proof (state)\nthis:\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n\ngoal (1 subgoal):\n 1. \\<And>bdt\\<^sub>1.\n       \\<lbrakk>t1 = Node lt1 (repc a1) rt1; t2 = Node lt2 (repc a2) rt2;\n        bdt (Node lt1 (repc a1) rt1) var = Some bdt\\<^sub>1;\n        bdt (Node lt2 (repc a2) rt2) var = Some bdt\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "show \"lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "proof (cases bdt1)"], ["proof (state)\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "case Zero"], ["proof (state)\nthis:\n  bdt1 = Zero\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t1_bdt t1_Node"], ["proof (chain)\npicking this:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n  t1 = Node lt1 (repc a1) rt1\n  bdt1 = Zero", "obtain\n                    lt1_Tip: \"lt1 = Tip\" and\n                    rt1_Tip: \"rt1 = Tip\""], ["proof (prove)\nusing this:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n  t1 = Node lt1 (repc a1) rt1\n  bdt1 = Zero\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>lt1 = Tip; rt1 = Tip\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  lt1 = Tip\n  rt1 = Tip\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from Zero t2_bdt t2_Node"], ["proof (chain)\npicking this:\n  bdt1 = Zero\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n  t2 = Node lt2 (repc a2) rt2", "obtain \n                    lt2_Tip: \"lt2 = Tip\" and\n                    rt2_Tip: \"rt2 = Tip\""], ["proof (prove)\nusing this:\n  bdt1 = Zero\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>lt2 = Tip; rt2 = Tip\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  lt2 = Tip\n  rt2 = Tip\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t1_repc_dag t1_Node lt1_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  lt1 = Tip", "have \"(repc \\<propto> low) (repc a1) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  lt1 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc a1) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc a1) = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a1"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> low) (repc a1) = Null", "have repc_low_a1_Null: \"(repc \\<propto> low) a1 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> low) (repc a1) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a1 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t1_repc_dag t1_Node rt1_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  rt1 = Tip", "have \"(repc \\<propto> high) (repc a1) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  rt1 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a1) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a1) = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a1"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> high) (repc a1) = Null", "have repc_high_a1_Null: \"(repc \\<propto> high) a1 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> high) (repc a1) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a1 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) a1 = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_repc_dag t2_Node lt2_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  lt2 = Tip", "have \"(repc \\<propto> low) (repc a2) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  lt2 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc a2) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc a2) = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a2"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> low) (repc a2) = Null", "have repc_low_a2_Null: \"(repc \\<propto> low) a2 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> low) (repc a2) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a2 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_repc_dag t2_Node rt2_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  rt2 = Tip", "have \"(repc \\<propto> high) (repc a2) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  rt2 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a2) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a2) = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a2"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> high) (repc a2) = Null", "have repc_high_a2_Null: \"(repc \\<propto> high) a2 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> high) (repc a2) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a2 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) a2 = Null\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with share_a1_a2   repc_low_a1_Null repc_high_a1_Null \n                    repc_low_a2_Null repc_high_a2_Null"], ["proof (chain)\npicking this:\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)\n  (repc \\<propto> low) a1 = Null\n  (repc \\<propto> high) a1 = Null\n  (repc \\<propto> low) a2 = Null\n  (repc \\<propto> high) a2 = Null\n  (repc \\<propto> high) a2 = Null", "have \"repc a2 = repc a1\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)\n  (repc \\<propto> low) a1 = Null\n  (repc \\<propto> high) a1 = Null\n  (repc \\<propto> low) a2 = Null\n  (repc \\<propto> high) a2 = Null\n  (repc \\<propto> high) a2 = Null\n\ngoal (1 subgoal):\n 1. repc a2 = repc a1", "by auto"], ["proof (state)\nthis:\n  repc a2 = repc a1\n\ngoal (3 subgoals):\n 1. bdt1 = Zero \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 3. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt1_Tip rt1_Tip lt2_Tip rt2_Tip"], ["proof (chain)\npicking this:\n  lt1 = Tip\n  rt1 = Tip\n  lt2 = Tip\n  rt2 = Tip\n  repc a2 = repc a1", "show ?thesis"], ["proof (prove)\nusing this:\n  lt1 = Tip\n  rt1 = Tip\n  lt2 = Tip\n  rt2 = Tip\n  repc a2 = repc a1\n\ngoal (1 subgoal):\n 1. lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "by auto"], ["proof (state)\nthis:\n  lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "case One"], ["proof (state)\nthis:\n  bdt1 = One\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t1_bdt t1_Node"], ["proof (chain)\npicking this:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n  t1 = Node lt1 (repc a1) rt1\n  bdt1 = One", "obtain\n                    lt1_Tip: \"lt1 = Tip\" and\n                    rt1_Tip: \"rt1 = Tip\""], ["proof (prove)\nusing this:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n  t1 = Node lt1 (repc a1) rt1\n  bdt1 = One\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>lt1 = Tip; rt1 = Tip\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  lt1 = Tip\n  rt1 = Tip\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from One t2_bdt t2_Node"], ["proof (chain)\npicking this:\n  bdt1 = One\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n  t2 = Node lt2 (repc a2) rt2", "obtain \n                    lt2_Tip: \"lt2 = Tip\" and\n                    rt2_Tip: \"rt2 = Tip\""], ["proof (prove)\nusing this:\n  bdt1 = One\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>lt2 = Tip; rt2 = Tip\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  lt2 = Tip\n  rt2 = Tip\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t1_repc_dag t1_Node lt1_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  lt1 = Tip", "have \"(repc \\<propto> low) (repc a1) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  lt1 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc a1) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc a1) = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a1"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> low) (repc a1) = Null", "have repc_low_a1_Null: \"(repc \\<propto> low) a1 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> low) (repc a1) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a1 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t1_repc_dag t1_Node rt1_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  rt1 = Tip", "have \"(repc \\<propto> high) (repc a1) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  rt1 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a1) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a1) = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a1"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> high) (repc a1) = Null", "have repc_high_a1_Null: \"(repc \\<propto> high) a1 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  (repc \\<propto> high) (repc a1) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a1 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) a1 = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_repc_dag t2_Node lt2_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  lt2 = Tip", "have \"(repc \\<propto> low) (repc a2) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  lt2 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc a2) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc a2) = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a2"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> low) (repc a2) = Null", "have repc_low_a2_Null: \"(repc \\<propto> low) a2 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> low) (repc a2) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a2 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_repc_dag t2_Node rt2_Tip"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  rt2 = Tip", "have \"(repc \\<propto> high) (repc a2) = Null\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  rt2 = Tip\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a2) = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a2) = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with children_repc_eq_a2"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> high) (repc a2) = Null", "have repc_high_a2_Null: \"(repc \\<propto> high) a2 = Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  (repc \\<propto> high) (repc a2) = Null\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a2 = Null", "by simp"], ["proof (state)\nthis:\n  (repc \\<propto> high) a2 = Null\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with share_a1_a2   repc_low_a1_Null repc_high_a1_Null \n                    repc_low_a2_Null repc_high_a2_Null"], ["proof (chain)\npicking this:\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)\n  (repc \\<propto> low) a1 = Null\n  (repc \\<propto> high) a1 = Null\n  (repc \\<propto> low) a2 = Null\n  (repc \\<propto> high) a2 = Null\n  (repc \\<propto> high) a2 = Null", "have \"repc a2 = repc a1\""], ["proof (prove)\nusing this:\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)\n  (repc \\<propto> low) a1 = Null\n  (repc \\<propto> high) a1 = Null\n  (repc \\<propto> low) a2 = Null\n  (repc \\<propto> high) a2 = Null\n  (repc \\<propto> high) a2 = Null\n\ngoal (1 subgoal):\n 1. repc a2 = repc a1", "by auto"], ["proof (state)\nthis:\n  repc a2 = repc a1\n\ngoal (2 subgoals):\n 1. bdt1 = One \\<Longrightarrow>\n    lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n 2. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt1_Tip rt1_Tip lt2_Tip rt2_Tip"], ["proof (chain)\npicking this:\n  lt1 = Tip\n  rt1 = Tip\n  lt2 = Tip\n  rt2 = Tip\n  repc a2 = repc a1", "show ?thesis"], ["proof (prove)\nusing this:\n  lt1 = Tip\n  rt1 = Tip\n  lt2 = Tip\n  rt2 = Tip\n  repc a2 = repc a1\n\ngoal (1 subgoal):\n 1. lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "by auto"], ["proof (state)\nthis:\n  lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "case (Bdt_Node lbdt v rbdt)"], ["proof (state)\nthis:\n  bdt1 = Bdt_Node lbdt v rbdt\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "note bdt_Node_case=this"], ["proof (state)\nthis:\n  bdt1 = Bdt_Node lbdt v rbdt\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t1_bdt t1_Node"], ["proof (chain)\npicking this:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n  t1 = Node lt1 (repc a1) rt1\n  bdt1 = Bdt_Node lbdt v rbdt", "obtain\n                    lbdt_def_lt1: \"bdt lt1 var = Some lbdt\" and\n                    rbdt_def_rt1: \"bdt rt1 var = Some rbdt\""], ["proof (prove)\nusing this:\n  bdt (Node lt1 (repc a1) rt1) var = Some bdt1\n  t1 = Node lt1 (repc a1) rt1\n  bdt1 = Bdt_Node lbdt v rbdt\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>bdt lt1 var = Some lbdt; bdt rt1 var = Some rbdt\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bdt lt1 var = Some lbdt\n  bdt rt1 var = Some rbdt\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_bdt bdt_Node_case t2_Node"], ["proof (chain)\npicking this:\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n  bdt1 = Bdt_Node lbdt v rbdt\n  t2 = Node lt2 (repc a2) rt2", "obtain\n                    lbdt_def_lt2: \"bdt lt2 var = Some lbdt\" and\n                    rbdt_def_rt2: \"bdt rt2 var = Some rbdt\""], ["proof (prove)\nusing this:\n  bdt (Node lt2 (repc a2) rt2) var = Some bdt1\n  bdt1 = Bdt_Node lbdt v rbdt\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>bdt lt2 var = Some lbdt; bdt rt2 var = Some rbdt\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  bdt lt2 var = Some lbdt\n  bdt rt2 var = Some rbdt\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lbdt_def_lt1 t1_Node t1_repc_dag children_repc_eq_a1"], ["proof (chain)\npicking this:\n  bdt lt1 var = Some lbdt\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1", "have \"(repc \\<propto> low) a1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  bdt lt1 var = Some lbdt\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a1 \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a1 \\<noteq> Null", "have low_a1_nNull: \"(low a1) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low a1 \\<noteq> Null", "by (auto simp: null_comp_def)"], ["proof (state)\nthis:\n  low a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rbdt_def_rt1 t1_Node t1_repc_dag children_repc_eq_a1"], ["proof (chain)\npicking this:\n  bdt rt1 var = Some rbdt\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1", "have \"(repc \\<propto> high) a1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  bdt rt1 var = Some rbdt\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a1 \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) a1 \\<noteq> Null", "have high_a1_nNull: \"(high a1) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a1 \\<noteq> Null", "by (auto simp: null_comp_def)"], ["proof (state)\nthis:\n  high a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lbdt_def_lt2 t2_Node t2_repc_dag children_repc_eq_a2"], ["proof (chain)\npicking this:\n  bdt lt2 var = Some lbdt\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2", "have \"(repc \\<propto> low) a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  bdt lt2 var = Some lbdt\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a2 \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> low) a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a2 \\<noteq> Null", "have low_a2_nNull: \"(low a2) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low a2 \\<noteq> Null", "by (auto simp: null_comp_def)"], ["proof (state)\nthis:\n  low a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rbdt_def_rt2 t2_Node t2_repc_dag children_repc_eq_a2"], ["proof (chain)\npicking this:\n  bdt rt2 var = Some rbdt\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2", "have \"(repc \\<propto> high) a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  bdt rt2 var = Some rbdt\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a2 \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  (repc \\<propto> high) a2 \\<noteq> Null", "have high_a2_nNull: \"(high a2) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repc \\<propto> high) a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a2 \\<noteq> Null", "by (auto simp: null_comp_def)"], ["proof (state)\nthis:\n  high a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "(*hier gehts um t1*)"], ["proof (state)\nthis:\n  high a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from pret_dag ord_pret a1_in_pret low_a1_nNull high_a1_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n  high a1 \\<noteq> Null", "have var_children_smaller_a1: \n                    \"var (low a1) < var a1 \\<and> var (high a1) < var a1\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n  high a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low a1) < var a1 \\<and> var (high a1) < var a1", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low a1) < var a1 \\<and> var (high a1) < var a1", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a1 \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low a1 \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; a1 \\<in> set_of pret;\n     low a1 \\<noteq> Null; high a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from pret_dag a1_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  a1 \\<in> set_of pret", "have a1_nNull: \"a1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. a1 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a1 \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a1 \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "(*hier gehts um rt1 *)"], ["proof (state)\nthis:\n  a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with a1_in_pret high_a1_nNull pret_dag"], ["proof (chain)\npicking this:\n  a1 \\<in> set_of pret\n  high a1 \\<noteq> Null\n  Dag p low high pret\n  a1 \\<noteq> Null", "have \"high a1 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a1 \\<in> set_of pret\n  high a1 \\<noteq> Null\n  Dag p low high pret\n  a1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a1 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a1 \\<in> set_of pret; high a1 \\<noteq> Null;\n     Dag p low high pret; a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret;\n     a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a1 \\<noteq> Null\n 2. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret;\n     a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?high4 a1 \\<noteq> Null\n 3. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret;\n     a1 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>high a1 \\<noteq> Null; Dag p low high pret; a1 \\<noteq> Null;\n     ?high4 a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high a1 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high a1 \\<in> set_of pret", "have \"high a1 \\<in> set (ll ! (var (high a1)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high a1 \\<in> set (ll ! var (high a1))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high a1 \\<in> set (ll ! var (high a1))\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with a1_in_lln t1_repc_dag var_children_smaller_a1 vara1_n"], ["proof (chain)\npicking this:\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n  var a1 = n\n  high a1 \\<in> set (ll ! var (high a1))", "have \"\\<exists> k<n. (high a1) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n  var a1 = n\n  high a1 \\<in> set (ll ! var (high a1))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. high a1 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. high a1 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. high a1 \\<in> set (ll ! k)", "have higha1_in_Nodesn: \"(high a1) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. high a1 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high a1 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  high a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  high a1 \\<in> Nodes n ll", "have rhigha1_in_rNodesn: \n                    \"repc (high a1) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  high a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (high a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from higha1_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  high a1 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain rt1h where\n                    rt1_dag:  \"Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1h\" and\n                    rt1_in_repbNort: \"set_of rt1h \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  high a1 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>rt1h.\n        \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                  (repb \\<propto> high) rt1h;\n         set_of rt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>rt1h.\n                \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt1h;\n                 set_of rt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a1 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"high a1\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>rt1h.\n                \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt1h;\n                 set_of rt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a1 \\<in> Nodes n ll;\n     var (repb (high a1)) \\<le> var (high a1) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high a1) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>rt1h.\n                \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt1h;\n                 set_of rt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a1 \\<in> Nodes n ll; high a1 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1h\n  set_of rt1h \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rt1_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rt1h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rt1_in_repcNodesn: \"set_of rt1h \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rt1h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rt1h \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rt1h \\<subseteq> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rt1_dag higha1_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1h\n  high a1 \\<in> Nodes n ll", "have repcrt1_dag: \n                    \"Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\""], ["proof (prove)\nusing this:\n  Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) rt1h\n  high a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high)\n              rt1h;\n     high a1 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a1)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt1h", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high)\n              rt1h;\n     Dag (repb (high a1)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a1)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt1h", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t1_Node t1_repc_dag high_a1_nNull children_repc_eq_a1"], ["proof (chain)\npicking this:\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  high a1 \\<noteq> Null\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1", "have \"Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\""], ["proof (prove)\nusing this:\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  high a1 \\<noteq> Null\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with repcrt1_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1", "have rt1h_rt1: \"rt1h = rt1\""], ["proof (prove)\nusing this:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1\n\ngoal (1 subgoal):\n 1. rt1h = rt1", "by (simp add: Dag_unique)"], ["proof (state)\nthis:\n  rt1h = rt1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "have rt1_nTip: \"rt1 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "have \"repc (high a1) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "note rhigha1_in_rNodesn"], ["proof (state)\nthis:\n  repc (high a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (high a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "have \n                        \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (high a1) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (high a1) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (high a1) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a1) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high a1) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (high a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "with repcrt1_dag rt1h_rt1"], ["proof (chain)\npicking this:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n  rt1h = rt1\n  repc (high a1) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n  rt1h = rt1\n  repc (high a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt1 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  rt1 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rt1 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with rt1_in_repcNodesn repcrt1_dag rhigha1_in_rNodesn a1_in_lln \n                    t1_repc_dag  rt1h_rt1"], ["proof (chain)\npicking this:\n  set_of rt1h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n  repc (high a1) \\<in> repc ` Nodes n ll\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  rt1h = rt1\n  rt1 \\<noteq> Tip", "have rt1_in_Dags_Nodesn: \n                    \"rt1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of rt1h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h\n  repc (high a1) \\<in> repc ` Nodes n ll\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  rt1h = rt1\n  rt1 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. rt1\n    \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n           (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of rt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1h = rt1; rt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> rt1\n                      \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                             (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1h = rt1; rt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> set_of rt1 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1h = rt1; rt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> Dag ?p7 (repc \\<propto> low) (repc \\<propto> high) rt1\n 3. \\<lbrakk>set_of rt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a1)) (repc \\<propto> low) (repc \\<propto> high) rt1h;\n     repc (high a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     rt1h = rt1; rt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> rt1 \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "(*hier gehts um lt1 *)"], ["proof (state)\nthis:\n  rt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from a1_nNull a1_in_pret low_a1_nNull pret_dag"], ["proof (chain)\npicking this:\n  a1 \\<noteq> Null\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n  Dag p low high pret", "have \"low a1 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a1 \\<noteq> Null\n  a1 \\<in> set_of pret\n  low a1 \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. low a1 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a1 \\<noteq> Null; a1 \\<in> set_of pret; low a1 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> low a1 \\<in> set_of pret", "apply (drule subelem_set_of_low)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a1 \\<noteq> Null; low a1 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> a1 \\<noteq> Null\n 2. \\<lbrakk>a1 \\<noteq> Null; low a1 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> ?low4 a1 \\<noteq> Null\n 3. \\<lbrakk>a1 \\<noteq> Null; low a1 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>a1 \\<noteq> Null; low a1 \\<noteq> Null; Dag p low high pret;\n     ?low4 a1 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> low a1 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  low a1 \\<in> set_of pret", "have \n                    \"low a1 \\<in> set (ll ! (var (low a1)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  low a1 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. low a1 \\<in> set (ll ! var (low a1))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  low a1 \\<in> set (ll ! var (low a1))\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with a1_in_lln t1_repc_dag var_children_smaller_a1 vara1_n"], ["proof (chain)\npicking this:\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n  var a1 = n\n  low a1 \\<in> set (ll ! var (low a1))", "have \"\\<exists> k<n. (low a1) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  var (low a1) < var a1 \\<and> var (high a1) < var a1\n  var a1 = n\n  low a1 \\<in> set (ll ! var (low a1))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. low a1 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. low a1 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. low a1 \\<in> set (ll ! k)", "have lowa1_in_Nodesn: \"(low a1) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. low a1 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. low a1 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  low a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  low a1 \\<in> Nodes n ll", "have rlowa1_in_rNodesn: \"repc (low a1) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  low a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (low a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lowa1_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  low a1 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain lt1h where\n                    lt1_dag:  \"Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high) lt1h\" and\n                    lt1_in_repbNort: \"set_of lt1h \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  low a1 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>lt1h.\n        \\<lbrakk>Dag (repb (low a1)) (repb \\<propto> low)\n                  (repb \\<propto> high) lt1h;\n         set_of lt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>lt1h.\n                \\<lbrakk>Dag (repb (low a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) lt1h;\n                 set_of lt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     low a1 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"low a1\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>lt1h.\n                \\<lbrakk>Dag (repb (low a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) lt1h;\n                 set_of lt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     low a1 \\<in> Nodes n ll;\n     var (repb (low a1)) \\<le> var (low a1) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (low a1) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>lt1h.\n                \\<lbrakk>Dag (repb (low a1)) (repb \\<propto> low)\n                          (repb \\<propto> high) lt1h;\n                 set_of lt1h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     low a1 \\<in> Nodes n ll; low a1 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high) lt1h\n  set_of lt1h \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lt1_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of lt1h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have lt1_in_repcNodesn: \"set_of lt1h \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lt1h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of lt1h \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of lt1h \\<subseteq> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lt1_dag lowa1_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high) lt1h\n  low a1 \\<in> Nodes n ll", "have repclt1_dag: \"Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\""], ["proof (prove)\nusing this:\n  Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high) lt1h\n  low a1 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high)\n              lt1h;\n     low a1 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (low a1)) (repc \\<propto> low)\n                       (repc \\<propto> high) lt1h", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high)\n              lt1h;\n     Dag (repb (low a1)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (low a1)) (repc \\<propto> low)\n                       (repc \\<propto> high) lt1h", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t1_Node t1_repc_dag low_a1_nNull children_repc_eq_a1"], ["proof (chain)\npicking this:\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  low a1 \\<noteq> Null\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1", "have \"Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1\""], ["proof (prove)\nusing this:\n  t1 = Node lt1 (repc a1) rt1\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  low a1 \\<noteq> Null\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with repclt1_dag"], ["proof (chain)\npicking this:\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1", "have lt1h_lt1: \"lt1h = lt1\""], ["proof (prove)\nusing this:\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1\n\ngoal (1 subgoal):\n 1. lt1h = lt1", "by (simp add: Dag_unique)"], ["proof (state)\nthis:\n  lt1h = lt1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "have lt1_nTip: \"lt1 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt1 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt1 \\<noteq> Tip", "have \"repc (low a1) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "note rlowa1_in_rNodesn"], ["proof (state)\nthis:\n  repc (low a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (low a1) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "have \n                        \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (low a1) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (low a1) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (low a1) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a1) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (low a1) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (low a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. lt1 \\<noteq> Tip", "with repclt1_dag lt1h_lt1"], ["proof (chain)\npicking this:\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n  lt1h = lt1\n  repc (low a1) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n  lt1h = lt1\n  repc (low a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. lt1 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  lt1 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt1 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt1_in_repcNodesn repclt1_dag rlowa1_in_rNodesn a1_in_lln \n                    t1_repc_dag  lt1h_lt1"], ["proof (chain)\npicking this:\n  set_of lt1h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n  repc (low a1) \\<in> repc ` Nodes n ll\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  lt1h = lt1\n  lt1 \\<noteq> Tip", "have lt1_in_Dags_Nodesn: \n                    \"lt1 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of lt1h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h\n  repc (low a1) \\<in> repc ` Nodes n ll\n  a1 \\<in> set (ll ! n)\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  lt1h = lt1\n  lt1 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. lt1\n    \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n           (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of lt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h;\n     repc (low a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     lt1h = lt1; lt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> lt1\n                      \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                             (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of lt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h;\n     repc (low a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     lt1h = lt1; lt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> set_of lt1 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of lt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h;\n     repc (low a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     lt1h = lt1; lt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> Dag ?p7 (repc \\<propto> low) (repc \\<propto> high) lt1\n 3. \\<lbrakk>set_of lt1h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a1)) (repc \\<propto> low) (repc \\<propto> high) lt1h;\n     repc (low a1) \\<in> repc ` Nodes n ll; a1 \\<in> set (ll ! n);\n     Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1;\n     lt1h = lt1; lt1 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> lt1 \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  lt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "(*hier gehts um t2*)"], ["proof (state)\nthis:\n  lt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from pret_dag ord_pret a2_in_pret low_a2_nNull high_a2_nNull"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  ordered pret var\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null", "have var_children_smaller_a2: \n                    \"var (low a2) < var a2 \\<and> var (high a2) < var a2\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  ordered pret var\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  high a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. var (low a2) < var a2 \\<and> var (high a2) < var a2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> var (low a2) < var a2 \\<and> var (high a2) < var a2", "apply (rule var_ordered_children)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p5 low high ?t5\n 2. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ordered ?t5 var\n 3. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> set_of ?t5\n 4. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low a2 \\<noteq> Null\n 5. \\<lbrakk>Dag p low high pret; ordered pret var; a2 \\<in> set_of pret;\n     low a2 \\<noteq> Null; high a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from pret_dag a2_in_pret"], ["proof (chain)\npicking this:\n  Dag p low high pret\n  a2 \\<in> set_of pret", "have a2_nNull: \"a2 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  Dag p low high pret\n  a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. a2 \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null", "apply (rule set_of_nn [rule_format])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p2 ?low2 ?high2 ?t2\n 2. \\<lbrakk>Dag p low high pret; a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<in> set_of ?t2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "(*hier gehts um rt1 *)"], ["proof (state)\nthis:\n  a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with a2_in_pret high_a2_nNull pret_dag"], ["proof (chain)\npicking this:\n  a2 \\<in> set_of pret\n  high a2 \\<noteq> Null\n  Dag p low high pret\n  a2 \\<noteq> Null", "have \"high a2 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a2 \\<in> set_of pret\n  high a2 \\<noteq> Null\n  Dag p low high pret\n  a2 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high a2 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a2 \\<in> set_of pret; high a2 \\<noteq> Null;\n     Dag p low high pret; a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<in> set_of pret", "apply (drule subelem_set_of_high)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null\n 2. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> ?high4 a2 \\<noteq> Null\n 3. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret;\n     a2 \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>high a2 \\<noteq> Null; Dag p low high pret; a2 \\<noteq> Null;\n     ?high4 a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> high a2 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  high a2 \\<in> set_of pret", "have \"high a2 \\<in> set (ll ! (var (high a2)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  high a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. high a2 \\<in> set (ll ! var (high a2))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  high a2 \\<in> set (ll ! var (high a2))\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with a2_in_lln t2_repc_dag var_children_smaller_a2 vara2_n"], ["proof (chain)\npicking this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  high a2 \\<in> set (ll ! var (high a2))", "have \"\\<exists> k<n. (high a2) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  high a2 \\<in> set (ll ! var (high a2))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. high a2 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)", "have higha2_in_Nodesn: \"(high a2) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. high a2 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. high a2 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  high a2 \\<in> Nodes n ll", "have rhigha2_in_rNodesn: \n                    \"repc (high a2) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from higha2_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  high a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain rt2h where\n                    rt2_dag:  \"Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2h\" and\n                    rt2_in_repbNort: \"set_of rt2h \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  high a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>rt2h.\n        \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                  (repb \\<propto> high) rt2h;\n         set_of rt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>rt2h.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2h;\n                 set_of rt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"high a2\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>rt2h.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2h;\n                 set_of rt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll;\n     var (repb (high a2)) \\<le> var (high a2) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (high a2) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>rt2h.\n                \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) rt2h;\n                 set_of rt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     high a2 \\<in> Nodes n ll; high a2 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2h\n  set_of rt2h \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rt2_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of rt2h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have rt2_in_repcNodesn: \"set_of rt2h \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of rt2h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of rt2h \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of rt2h \\<subseteq> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rt2_dag higha2_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2h\n  high a2 \\<in> Nodes n ll", "have repcrt2_dag: \n                    \"Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\""], ["proof (prove)\nusing this:\n  Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) rt2h\n  high a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n              rt2h;\n     high a2 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt2h", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high)\n              rt2h;\n     Dag (repb (high a2)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (high a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) rt2h", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_Node t2_repc_dag high_a2_nNull children_repc_eq_a2"], ["proof (chain)\npicking this:\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  high a2 \\<noteq> Null\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2", "have \"Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\""], ["proof (prove)\nusing this:\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  high a2 \\<noteq> Null\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with repcrt2_dag"], ["proof (chain)\npicking this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2", "have rt2h_rt2: \"rt2h = rt2\""], ["proof (prove)\nusing this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2\n\ngoal (1 subgoal):\n 1. rt2h = rt2", "by (simp add: Dag_unique)"], ["proof (state)\nthis:\n  rt2h = rt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "have rt2_nTip: \"rt2 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "have \"repc (high a2) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "note rhigha2_in_rNodesn"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (high a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "have \n                        \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (high a2) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (high a2) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (high a2) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (high a2) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (high a2) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (high a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "with repcrt2_dag rt2h_rt2"], ["proof (chain)\npicking this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n  rt2h = rt2\n  repc (high a2) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n  rt2h = rt2\n  repc (high a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. rt2 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  rt2 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rt2 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with rt2_in_repcNodesn repcrt2_dag rhigha2_in_rNodesn a2_in_lln \n                    t2_repc_dag  rt2h_rt2"], ["proof (chain)\npicking this:\n  set_of rt2h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n  repc (high a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  rt2h = rt2\n  rt2 \\<noteq> Tip", "have rt2_in_Dags_Nodesn: \n                    \"rt2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of rt2h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h\n  repc (high a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  rt2h = rt2\n  rt2 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. rt2\n    \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n           (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of rt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2h = rt2; rt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> rt2\n                      \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                             (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of rt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2h = rt2; rt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> set_of rt2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of rt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2h = rt2; rt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> Dag ?p7 (repc \\<propto> low) (repc \\<propto> high) rt2\n 3. \\<lbrakk>set_of rt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (high a2)) (repc \\<propto> low) (repc \\<propto> high) rt2h;\n     repc (high a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     rt2h = rt2; rt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> rt2 \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "(*hier gehts um lt2 *)"], ["proof (state)\nthis:\n  rt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from a2_nNull a2_in_pret low_a2_nNull pret_dag"], ["proof (chain)\npicking this:\n  a2 \\<noteq> Null\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  Dag p low high pret", "have \"low a2 \\<in> set_of pret\""], ["proof (prove)\nusing this:\n  a2 \\<noteq> Null\n  a2 \\<in> set_of pret\n  low a2 \\<noteq> Null\n  Dag p low high pret\n\ngoal (1 subgoal):\n 1. low a2 \\<in> set_of pret", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a2 \\<noteq> Null; a2 \\<in> set_of pret; low a2 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> low a2 \\<in> set_of pret", "apply (drule subelem_set_of_low)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>a2 \\<noteq> Null; low a2 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> a2 \\<noteq> Null\n 2. \\<lbrakk>a2 \\<noteq> Null; low a2 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> ?low4 a2 \\<noteq> Null\n 3. \\<lbrakk>a2 \\<noteq> Null; low a2 \\<noteq> Null;\n     Dag p low high pret\\<rbrakk>\n    \\<Longrightarrow> Dag ?p4 ?low4 ?high4 pret\n 4. \\<lbrakk>a2 \\<noteq> Null; low a2 \\<noteq> Null; Dag p low high pret;\n     ?low4 a2 \\<in> set_of pret\\<rbrakk>\n    \\<Longrightarrow> low a2 \\<in> set_of pret", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with wf_ll"], ["proof (chain)\npicking this:\n  wf_ll pret ll var\n  low a2 \\<in> set_of pret", "have \"low a2 \\<in> set (ll ! (var (low a2)))\""], ["proof (prove)\nusing this:\n  wf_ll pret ll var\n  low a2 \\<in> set_of pret\n\ngoal (1 subgoal):\n 1. low a2 \\<in> set (ll ! var (low a2))", "by (simp add: wf_ll_def)"], ["proof (state)\nthis:\n  low a2 \\<in> set (ll ! var (low a2))\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with a2_in_lln t2_repc_dag var_children_smaller_a2 vara2_n"], ["proof (chain)\npicking this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  low a2 \\<in> set (ll ! var (low a2))", "have \"\\<exists> k<n. (low a2) \\<in> set (ll ! k)\""], ["proof (prove)\nusing this:\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  var (low a2) < var a2 \\<and> var (high a2) < var a2\n  var a2 = n\n  low a2 \\<in> set (ll ! var (low a2))\n\ngoal (1 subgoal):\n 1. \\<exists>k<n. low a2 \\<in> set (ll ! k)", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<n. low a2 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<n. low a2 \\<in> set (ll ! k)", "have lowa2_in_Nodesn: \"(low a2) \\<in> Nodes n ll\""], ["proof (prove)\nusing this:\n  \\<exists>k<n. low a2 \\<in> set (ll ! k)\n\ngoal (1 subgoal):\n 1. low a2 \\<in> Nodes n ll", "by (simp add: Nodes_def)"], ["proof (state)\nthis:\n  low a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  low a2 \\<in> Nodes n ll", "have rlowa2_in_rNodesn: \"repc (low a2) \\<in> repc ` Nodes n ll\""], ["proof (prove)\nusing this:\n  low a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<in> repc ` Nodes n ll", "by simp"], ["proof (state)\nthis:\n  repc (low a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lowa2_in_Nodesn normalize_prop"], ["proof (chain)\npicking this:\n  low a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))", "obtain lt2h where\n                    lt2_dag:  \"Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high) lt2h\" and\n                    lt2_in_repbNort: \"set_of lt2h \\<subseteq> repb `Nodes n ll\""], ["proof (prove)\nusing this:\n  low a2 \\<in> Nodes n ll\n  \\<forall>no\\<in>Nodes n ll.\n     var (repb no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n\ngoal (1 subgoal):\n 1. (\\<And>lt2h.\n        \\<lbrakk>Dag (repb (low a2)) (repb \\<propto> low)\n                  (repb \\<propto> high) lt2h;\n         set_of lt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>lt2h.\n                \\<lbrakk>Dag (repb (low a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) lt2h;\n                 set_of lt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     low a2 \\<in> Nodes n ll;\n     \\<forall>no\\<in>Nodes n ll.\n        var (repb no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repb no) (repb \\<propto> low) (repb \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=\"low a2\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>lt2h.\n                \\<lbrakk>Dag (repb (low a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) lt2h;\n                 set_of lt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     low a2 \\<in> Nodes n ll;\n     var (repb (low a2)) \\<le> var (low a2) \\<and>\n     (\\<exists>not nort.\n         Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high)\n          nort \\<and>\n         Dag (low a2) low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repb ` Nodes n ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repb no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and>\n                 nobdt \\<sim> norbdt)))\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>lt2h.\n                \\<lbrakk>Dag (repb (low a2)) (repb \\<propto> low)\n                          (repb \\<propto> high) lt2h;\n                 set_of lt2h \\<subseteq> repb ` Nodes n ll\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     low a2 \\<in> Nodes n ll; low a2 \\<notin> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high) lt2h\n  set_of lt2h \\<subseteq> repb ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lt2_in_repbNort repbNodes_repcNodes"], ["proof (chain)\npicking this:\n  set_of lt2h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll", "have lt2_in_repcNodesn: \"set_of lt2h \\<subseteq> repc `Nodes n ll\""], ["proof (prove)\nusing this:\n  set_of lt2h \\<subseteq> repb ` Nodes n ll\n  repb ` Nodes n ll = repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. set_of lt2h \\<subseteq> repc ` Nodes n ll", "by blast"], ["proof (state)\nthis:\n  set_of lt2h \\<subseteq> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lt2_dag lowa2_in_Nodesn"], ["proof (chain)\npicking this:\n  Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high) lt2h\n  low a2 \\<in> Nodes n ll", "have repclt2_dag: \"Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\""], ["proof (prove)\nusing this:\n  Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high) lt2h\n  low a2 \\<in> Nodes n ll\n\ngoal (1 subgoal):\n 1. Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high)\n              lt2h;\n     low a2 \\<in> Nodes n ll\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (low a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) lt2h", "apply (drule Nodes_repbc_Dags_eq [rule_format])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high)\n              lt2h;\n     Dag (repb (low a2)) (repb \\<propto> low) (repb \\<propto> high) ?t2 =\n     Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high)\n      ?t2\\<rbrakk>\n    \\<Longrightarrow> Dag (repc (low a2)) (repc \\<propto> low)\n                       (repc \\<propto> high) lt2h", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from t2_Node t2_repc_dag low_a2_nNull children_repc_eq_a2"], ["proof (chain)\npicking this:\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  low a2 \\<noteq> Null\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2", "have \"Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2\""], ["proof (prove)\nusing this:\n  t2 = Node lt2 (repc a2) rt2\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  low a2 \\<noteq> Null\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with repclt2_dag"], ["proof (chain)\npicking this:\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2", "have lt2h_lt2: \"lt2h = lt2\""], ["proof (prove)\nusing this:\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2\n\ngoal (1 subgoal):\n 1. lt2h = lt2", "by (simp add: Dag_unique)"], ["proof (state)\nthis:\n  lt2h = lt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "have lt2_nTip: \"lt2 \\<noteq> Tip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lt2 \\<noteq> Tip", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lt2 \\<noteq> Tip", "have \"repc (low a2) \\<noteq> Null\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "note rlowa2_in_rNodesn"], ["proof (state)\nthis:\n  repc (low a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc (low a2) \\<in> repc ` Nodes n ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "have \n                        \"repc `Nodes n ll \\<subseteq> repc `Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "using Nodes_subset"], ["proof (prove)\nusing this:\n  Nodes ?i ?levellista \\<subseteq> Nodes (Suc ?i) ?levellista\n\ngoal (1 subgoal):\n 1. repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll", "by blast"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "also"], ["proof (state)\nthis:\n  repc ` Nodes n ll \\<subseteq> repc ` Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "have \"\\<dots> \\<subseteq> Nodes (Suc n) ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "using repcNodes_in_Nodes"], ["proof (prove)\nusing this:\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n\ngoal (1 subgoal):\n 1. repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll", "by simp"], ["proof (state)\nthis:\n  repc ` Nodes (Suc n) ll \\<subseteq> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "finally"], ["proof (chain)\npicking this:\n  repc (low a2) \\<in> Nodes (Suc n) ll", "show ?thesis"], ["proof (prove)\nusing this:\n  repc (low a2) \\<in> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "using null_notin_Nodes_Suc_n"], ["proof (prove)\nusing this:\n  repc (low a2) \\<in> Nodes (Suc n) ll\n  Null \\<notin> Nodes (Suc n) ll\n\ngoal (1 subgoal):\n 1. repc (low a2) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repc (low a2) \\<noteq> Null\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repc (low a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. lt2 \\<noteq> Tip", "with repclt2_dag lt2h_lt2"], ["proof (chain)\npicking this:\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n  lt2h = lt2\n  repc (low a2) \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n  lt2h = lt2\n  repc (low a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. lt2 \\<noteq> Tip", "by auto"], ["proof (state)\nthis:\n  lt2 \\<noteq> Tip\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt2 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt2_in_repcNodesn repclt2_dag rlowa2_in_rNodesn a2_in_lln \n                    t2_repc_dag  lt2h_lt2"], ["proof (chain)\npicking this:\n  set_of lt2h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n  repc (low a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  lt2h = lt2\n  lt2 \\<noteq> Tip", "have lt2_in_Dags_Nodesn: \n                    \"lt2 \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\""], ["proof (prove)\nusing this:\n  set_of lt2h \\<subseteq> repc ` Nodes n ll\n  Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h\n  repc (low a2) \\<in> repc ` Nodes n ll\n  a2 \\<in> set (ll ! n)\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  lt2h = lt2\n  lt2 \\<noteq> Tip\n\ngoal (1 subgoal):\n 1. lt2\n    \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n           (repc \\<propto> high)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set_of lt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h;\n     repc (low a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     lt2h = lt2; lt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> lt2\n                      \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low)\n                             (repc \\<propto> high)", "apply (rule DagsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>set_of lt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h;\n     repc (low a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     lt2h = lt2; lt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> set_of lt2 \\<subseteq> repc ` Nodes n ll\n 2. \\<lbrakk>set_of lt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h;\n     repc (low a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     lt2h = lt2; lt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> Dag ?p7 (repc \\<propto> low) (repc \\<propto> high) lt2\n 3. \\<lbrakk>set_of lt2h \\<subseteq> repc ` Nodes n ll;\n     Dag (repc (low a2)) (repc \\<propto> low) (repc \\<propto> high) lt2h;\n     repc (low a2) \\<in> repc ` Nodes n ll; a2 \\<in> set (ll ! n);\n     Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2;\n     lt2h = lt2; lt2 \\<noteq> Tip\\<rbrakk>\n    \\<Longrightarrow> lt2 \\<noteq> Tip", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  lt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from isomorphic_dags_eq lt1_in_Dags_Nodesn lt2_in_Dags_Nodesn repbc_dags_eq"], ["proof (chain)\npicking this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  lt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  lt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "have shared_lt1_lt2: \"isomorphic_dags_eq lt1 lt2 var\""], ["proof (prove)\nusing this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  lt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  lt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq lt1 lt2 var", "by auto"], ["proof (state)\nthis:\n  isomorphic_dags_eq lt1 lt2 var\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from isomorphic_dags_eq rt1_in_Dags_Nodesn rt2_in_Dags_Nodesn repbc_dags_eq"], ["proof (chain)\npicking this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  rt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  rt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)", "have shared_rt1_rt2: \"isomorphic_dags_eq rt1 rt2 var\""], ["proof (prove)\nusing this:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<and>\n     t2 \\<in> Dags (repb ` Nodes n ll) (repb \\<propto> low)\n               (repb \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  rt1\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  rt2\n  \\<in> Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high)\n  Dags (repc ` Nodes n ll) (repc \\<propto> low) (repc \\<propto> high) =\n  Dags (repb ` Nodes n ll) (repb \\<propto> low) (repb \\<propto> high)\n\ngoal (1 subgoal):\n 1. isomorphic_dags_eq rt1 rt2 var", "by auto"], ["proof (state)\nthis:\n  isomorphic_dags_eq rt1 rt2 var\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from shared_lt1_lt2 lbdt_def_lt1 lbdt_def_lt2"], ["proof (chain)\npicking this:\n  isomorphic_dags_eq lt1 lt2 var\n  bdt lt1 var = Some lbdt\n  bdt lt2 var = Some lbdt", "have lt1_lt2: \"lt1 = lt2\""], ["proof (prove)\nusing this:\n  isomorphic_dags_eq lt1 lt2 var\n  bdt lt1 var = Some lbdt\n  bdt lt2 var = Some lbdt\n\ngoal (1 subgoal):\n 1. lt1 = lt2", "by (auto simp add: isomorphic_dags_eq_def)"], ["proof (state)\nthis:\n  lt1 = lt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  lt1 = lt2", "have root_lt1_lt2: \"root lt1 = root lt2\""], ["proof (prove)\nusing this:\n  lt1 = lt2\n\ngoal (1 subgoal):\n 1. root lt1 = root lt2", "by auto"], ["proof (state)\nthis:\n  root lt1 = root lt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lt1_nTip t1_repc_dag t1_Node"], ["proof (chain)\npicking this:\n  lt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1", "have \"(repc \\<propto> low) (repc a1) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  lt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc a1) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt1_nTip t1_repc_dag t1_Node"], ["proof (chain)\npicking this:\n  lt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> low) (repc a1) \\<noteq> Null", "obtain llt1 lt1p rlt1 where \n                    lt1_Node: \"lt1 = Node llt1 lt1p rlt1\""], ["proof (prove)\nusing this:\n  lt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> low) (repc a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>llt1 lt1p rlt1.\n        lt1 = Node llt1 lt1p rlt1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lt1 = Node llt1 lt1p rlt1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t1_repc_dag t1_Node children_repc_eq_a1 lt1_nTip"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  lt1 \\<noteq> Tip\n  lt1 = Node llt1 lt1p rlt1", "have root_lt1: \"root lt1 = (repc \\<propto> low) a1\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  lt1 \\<noteq> Tip\n  lt1 = Node llt1 lt1p rlt1\n\ngoal (1 subgoal):\n 1. root lt1 = (repc \\<propto> low) a1", "by auto"], ["proof (state)\nthis:\n  root lt1 = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from lt2_nTip t2_repc_dag t2_Node"], ["proof (chain)\npicking this:\n  lt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2", "have \"(repc \\<propto> low) (repc a2) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  lt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) (repc a2) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> low) (repc a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt2_nTip t2_repc_dag t2_Node"], ["proof (chain)\npicking this:\n  lt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> low) (repc a2) \\<noteq> Null", "obtain llt2 lt2p rlt2 where \n                    lt2_Node: \"lt2 = Node llt2 lt2p rlt2\""], ["proof (prove)\nusing this:\n  lt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> low) (repc a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>llt2 lt2p rlt2.\n        lt2 = Node llt2 lt2p rlt2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  lt2 = Node llt2 lt2p rlt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t2_repc_dag t2_Node children_repc_eq_a2 lt2_nTip"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  lt2 \\<noteq> Tip\n  lt2 = Node llt2 lt2p rlt2", "have root_lt2: \"root lt2 = (repc \\<propto> low) a2\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  lt2 \\<noteq> Tip\n  lt2 = Node llt2 lt2p rlt2\n\ngoal (1 subgoal):\n 1. root lt2 = (repc \\<propto> low) a2", "by auto"], ["proof (state)\nthis:\n  root lt2 = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from root_lt1_lt2 root_lt2 root_lt1"], ["proof (chain)\npicking this:\n  root lt1 = root lt2\n  root lt2 = (repc \\<propto> low) a2\n  root lt1 = (repc \\<propto> low) a1", "have low_a1_a2: \"(repc \\<propto> low) a1 = (repc \\<propto> low) a2\""], ["proof (prove)\nusing this:\n  root lt1 = root lt2\n  root lt2 = (repc \\<propto> low) a2\n  root lt1 = (repc \\<propto> low) a1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> low) a1 = (repc \\<propto> low) a2", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> low) a1 = (repc \\<propto> low) a2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from shared_rt1_rt2 rbdt_def_rt1 rbdt_def_rt2"], ["proof (chain)\npicking this:\n  isomorphic_dags_eq rt1 rt2 var\n  bdt rt1 var = Some rbdt\n  bdt rt2 var = Some rbdt", "have rt1_rt2: \"rt1 = rt2\""], ["proof (prove)\nusing this:\n  isomorphic_dags_eq rt1 rt2 var\n  bdt rt1 var = Some rbdt\n  bdt rt2 var = Some rbdt\n\ngoal (1 subgoal):\n 1. rt1 = rt2", "by (auto simp add: isomorphic_dags_eq_def)"], ["proof (state)\nthis:\n  rt1 = rt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "then"], ["proof (chain)\npicking this:\n  rt1 = rt2", "have root_rt1_rt2: \"root rt1 = root rt2\""], ["proof (prove)\nusing this:\n  rt1 = rt2\n\ngoal (1 subgoal):\n 1. root rt1 = root rt2", "by auto"], ["proof (state)\nthis:\n  root rt1 = root rt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rt1_nTip t1_repc_dag t1_Node"], ["proof (chain)\npicking this:\n  rt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1", "have \"(repc \\<propto> high) (repc a1) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  rt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a1) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with rt1_nTip t1_repc_dag t1_Node"], ["proof (chain)\npicking this:\n  rt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> high) (repc a1) \\<noteq> Null", "obtain lrt1 rt1p rrt1 where \n                    rt1_Node: \"rt1 = Node lrt1 rt1p rrt1\""], ["proof (prove)\nusing this:\n  rt1 \\<noteq> Tip\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> high) (repc a1) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lrt1 rt1p rrt1.\n        rt1 = Node lrt1 rt1p rrt1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rt1 = Node lrt1 rt1p rrt1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t1_repc_dag t1_Node children_repc_eq_a1 rt1_nTip"], ["proof (chain)\npicking this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  rt1 \\<noteq> Tip\n  rt1 = Node lrt1 rt1p rrt1", "have root_rt1: \"root rt1 = (repc \\<propto> high) a1\""], ["proof (prove)\nusing this:\n  Dag (repc a1) (repc \\<propto> low) (repc \\<propto> high) t1\n  t1 = Node lt1 (repc a1) rt1\n  (repc \\<propto> high) (repc a1) = (repc \\<propto> high) a1 \\<and>\n  (repc \\<propto> low) (repc a1) = (repc \\<propto> low) a1\n  rt1 \\<noteq> Tip\n  rt1 = Node lrt1 rt1p rrt1\n\ngoal (1 subgoal):\n 1. root rt1 = (repc \\<propto> high) a1", "by auto"], ["proof (state)\nthis:\n  root rt1 = (repc \\<propto> high) a1\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from rt2_nTip t2_repc_dag t2_Node"], ["proof (chain)\npicking this:\n  rt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2", "have \"(repc \\<propto> high) (repc a2) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  rt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) (repc a2) \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) (repc a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with rt2_nTip t2_repc_dag t2_Node"], ["proof (chain)\npicking this:\n  rt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> high) (repc a2) \\<noteq> Null", "obtain lrt2 rt2p rrt2 where \n                    rt2_Node: \"rt2 = Node lrt2 rt2p rrt2\""], ["proof (prove)\nusing this:\n  rt2 \\<noteq> Tip\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> high) (repc a2) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<And>lrt2 rt2p rrt2.\n        rt2 = Node lrt2 rt2p rrt2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  rt2 = Node lrt2 rt2p rrt2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with t2_repc_dag t2_Node children_repc_eq_a2 rt2_nTip"], ["proof (chain)\npicking this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  rt2 \\<noteq> Tip\n  rt2 = Node lrt2 rt2p rrt2", "have root_rt2: \"root rt2 = (repc \\<propto> high) a2\""], ["proof (prove)\nusing this:\n  Dag (repc a2) (repc \\<propto> low) (repc \\<propto> high) t2\n  t2 = Node lt2 (repc a2) rt2\n  (repc \\<propto> high) (repc a2) = (repc \\<propto> high) a2 \\<and>\n  (repc \\<propto> low) (repc a2) = (repc \\<propto> low) a2\n  rt2 \\<noteq> Tip\n  rt2 = Node lrt2 rt2p rrt2\n\ngoal (1 subgoal):\n 1. root rt2 = (repc \\<propto> high) a2", "by auto"], ["proof (state)\nthis:\n  root rt2 = (repc \\<propto> high) a2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from root_rt1_rt2 root_rt2 root_rt1"], ["proof (chain)\npicking this:\n  root rt1 = root rt2\n  root rt2 = (repc \\<propto> high) a2\n  root rt1 = (repc \\<propto> high) a1", "have high_a1_a2: \"(repc \\<propto> high) a1 = (repc \\<propto> high) a2\""], ["proof (prove)\nusing this:\n  root rt1 = root rt2\n  root rt2 = (repc \\<propto> high) a2\n  root rt1 = (repc \\<propto> high) a1\n\ngoal (1 subgoal):\n 1. (repc \\<propto> high) a1 = (repc \\<propto> high) a2", "by auto"], ["proof (state)\nthis:\n  (repc \\<propto> high) a1 = (repc \\<propto> high) a2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "from low_a1_a2 high_a1_a2 share_a1_a2"], ["proof (chain)\npicking this:\n  (repc \\<propto> low) a1 = (repc \\<propto> low) a2\n  (repc \\<propto> high) a1 = (repc \\<propto> high) a2\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)", "have \"repc a1 = repc a2\""], ["proof (prove)\nusing this:\n  (repc \\<propto> low) a1 = (repc \\<propto> low) a2\n  (repc \\<propto> high) a1 = (repc \\<propto> high) a2\n  ((repc \\<propto> high) a1 = (repc \\<propto> high) a2 \\<and>\n   (repc \\<propto> low) a1 = (repc \\<propto> low) a2) =\n  (repc a2 = repc a1)\n\ngoal (1 subgoal):\n 1. repc a1 = repc a2", "by auto"], ["proof (state)\nthis:\n  repc a1 = repc a2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33.\n       bdt1 = Bdt_Node x31 x32 x33 \\<Longrightarrow>\n       lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "with lt1_lt2 rt1_rt2"], ["proof (chain)\npicking this:\n  lt1 = lt2\n  rt1 = rt2\n  repc a1 = repc a2", "show ?thesis"], ["proof (prove)\nusing this:\n  lt1 = lt2\n  rt1 = rt2\n  repc a1 = repc a2\n\ngoal (1 subgoal):\n 1. lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2", "by auto"], ["proof (state)\nthis:\n  lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lt1 = lt2 \\<and> repc a1 = repc a2 \\<and> rt1 = rt2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isomorphic_dags_eq t1 t2 var\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high) \\<and>\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "from termi dags_shared while_while_prop repcNodes_in_Nodes repc_nc n_var_prop \n          wf_marking_m_ma"], ["proof (chain)\npicking this:\n  var p + 1 - (n + 1) < var p + 1 - n\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high) \\<and>\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repc pt\n  n + 1 \\<le> var p + 1\n  wf_marking pret mark marka (\\<not> mark p)", "show ?thesis"], ["proof (prove)\nusing this:\n  var p + 1 - (n + 1) < var p + 1 - n\n  \\<forall>t1 t2.\n     t1 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high) \\<and>\n     t2 \\<in> Dags (repc ` Nodes (Suc n) ll) (repc \\<propto> low)\n               (repc \\<propto> high) \\<longrightarrow>\n     isomorphic_dags_eq t1 t2 var\n  \\<forall>no\\<in>Nodes (n + 1) ll.\n     var (repc no) \\<le> var no \\<and>\n     (\\<exists>not nort.\n         Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n          nort \\<and>\n         Dag no low high not \\<and>\n         reduced nort \\<and>\n         ordered nort var \\<and>\n         set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n         (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n         (\\<exists>nobdt.\n             bdt not var = Some nobdt \\<and>\n             (\\<exists>norbdt.\n                 bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll\n  \\<forall>pt.\n     pt \\<notin> set_of pret \\<or>\n     (\\<exists>i\\<ge>n + 1.\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1) \\<longrightarrow>\n     rep pt = repc pt\n  n + 1 \\<le> var p + 1\n  wf_marking pret mark marka (\\<not> mark p)\n\ngoal (1 subgoal):\n 1. var p + 1 - (n + 1) < var p + 1 - n \\<and>\n    n + 1 \\<le> var p + 1 \\<and>\n    (\\<forall>pt i.\n        pt \\<notin> set_of pret \\<or>\n        n + 1 \\<le> i \\<and>\n        pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n        rep pt = repc pt) \\<and>\n    repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n    (\\<forall>no\\<in>Nodes (n + 1) ll.\n        var (repc no) \\<le> var no \\<and>\n        (\\<exists>not nort.\n            Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n             nort \\<and>\n            Dag no low high not \\<and>\n            reduced nort \\<and>\n            ordered nort var \\<and>\n            set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n            (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n            (\\<exists>nobdt.\n                bdt not var = Some nobdt \\<and>\n                (\\<exists>norbdt.\n                    bdt nort var = Some norbdt \\<and>\n                    nobdt \\<sim> norbdt)))) \\<and>\n    (\\<forall>t1 t2.\n        t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<and>\n        t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                  (repc \\<propto> high) \\<longrightarrow>\n        isomorphic_dags_eq t1 t2 var)", "by auto"], ["proof (state)\nthis:\n  var p + 1 - (n + 1) < var p + 1 - n \\<and>\n  n + 1 \\<le> var p + 1 \\<and>\n  (\\<forall>pt i.\n      pt \\<notin> set_of pret \\<or>\n      n + 1 \\<le> i \\<and>\n      pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n      rep pt = repc pt) \\<and>\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>Nodes (n + 1) ll.\n      var (repc no) \\<le> var no \\<and>\n      (\\<exists>not nort.\n          Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n           nort \\<and>\n          Dag no low high not \\<and>\n          reduced nort \\<and>\n          ordered nort var \\<and>\n          set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n          (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n          (\\<exists>nobdt.\n              bdt not var = Some nobdt \\<and>\n              (\\<exists>norbdt.\n                  bdt nort var = Some norbdt \\<and>\n                  nobdt \\<sim> norbdt)))) \\<and>\n  (\\<forall>t1 t2.\n      t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                (repc \\<propto> high) \\<and>\n      t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                (repc \\<propto> high) \\<longrightarrow>\n      isomorphic_dags_eq t1 t2 var)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var p + 1 - (n + 1) < var p + 1 - n \\<and>\n  n + 1 \\<le> var p + 1 \\<and>\n  (\\<forall>pt i.\n      pt \\<notin> set_of pret \\<or>\n      n + 1 \\<le> i \\<and>\n      pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n      rep pt = repc pt) \\<and>\n  repc ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n  (\\<forall>no\\<in>Nodes (n + 1) ll.\n      var (repc no) \\<le> var no \\<and>\n      (\\<exists>not nort.\n          Dag (repc no) (repc \\<propto> low) (repc \\<propto> high)\n           nort \\<and>\n          Dag no low high not \\<and>\n          reduced nort \\<and>\n          ordered nort var \\<and>\n          set_of nort \\<subseteq> repc ` Nodes (n + 1) ll \\<and>\n          (\\<forall>no\\<in>set_of nort. repc no = no) \\<and>\n          (\\<exists>nobdt.\n              bdt not var = Some nobdt \\<and>\n              (\\<exists>norbdt.\n                  bdt nort var = Some norbdt \\<and>\n                  nobdt \\<sim> norbdt)))) \\<and>\n  (\\<forall>t1 t2.\n      t1 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                (repc \\<propto> high) \\<and>\n      t2 \\<in> Dags (repc ` Nodes (n + 1) ll) (repc \\<propto> low)\n                (repc \\<propto> high) \\<longrightarrow>\n      isomorphic_dags_eq t1 t2 var)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>repa.\n     (\\<forall>no.\n         no \\<notin> set (ll ! n) \\<longrightarrow>\n         repb no = repa no) \\<and>\n     (\\<forall>no\\<in>set (ll ! n).\n         repa no \\<noteq> Null \\<and>\n         (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n             low no \\<noteq> Null\n          then repa no = (repa \\<propto> low) no\n          else repa no \\<in> set (ll ! n) \\<and>\n               repa (repa no) = repa no \\<and>\n               (\\<forall>no1\\<in>set (ll ! n).\n                   ((repa \\<propto> high) no1 =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                   (repa no = repa no1)))) \\<longrightarrow>\n     var p + 1 - (n + 1) < var p + 1 - n \\<and>\n     n + 1 \\<le> var p + 1 \\<and>\n     (\\<forall>pt i.\n         pt \\<notin> set_of pret \\<or>\n         n + 1 \\<le> i \\<and>\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n         rep pt = repa pt) \\<and>\n     repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>Nodes (n + 1) ll.\n         var (repa no) \\<le> var no \\<and>\n         (\\<exists>not nort.\n             Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n              nort \\<and>\n             Dag no low high not \\<and>\n             reduced nort \\<and>\n             ordered nort var \\<and>\n             set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n             (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n             (\\<exists>nobdt.\n                 bdt not var = Some nobdt \\<and>\n                 (\\<exists>norbdt.\n                     bdt nort var = Some norbdt \\<and>\n                     nobdt \\<sim> norbdt)))) \\<and>\n     (\\<forall>t1 t2.\n         t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                   (repa \\<propto> high) \\<and>\n         t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                   (repa \\<propto> high) \\<longrightarrow>\n         isomorphic_dags_eq t1 t2 var)\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "with srrl_precond all_nodes_same_var"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (ll ! n).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (ll ! n) \\<and>\n     high no \\<notin> set (ll ! n) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      repb (low no) \\<noteq> Null) \\<and>\n     (repb \\<propto> low) no \\<notin> set (ll ! n)\n  \\<forall>no1\\<in>set (ll ! n).\n     \\<forall>no2\\<in>set (ll ! n). var no1 = var no2\n  \\<forall>repa.\n     (\\<forall>no.\n         no \\<notin> set (ll ! n) \\<longrightarrow>\n         repb no = repa no) \\<and>\n     (\\<forall>no\\<in>set (ll ! n).\n         repa no \\<noteq> Null \\<and>\n         (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n             low no \\<noteq> Null\n          then repa no = (repa \\<propto> low) no\n          else repa no \\<in> set (ll ! n) \\<and>\n               repa (repa no) = repa no \\<and>\n               (\\<forall>no1\\<in>set (ll ! n).\n                   ((repa \\<propto> high) no1 =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                   (repa no = repa no1)))) \\<longrightarrow>\n     var p + 1 - (n + 1) < var p + 1 - n \\<and>\n     n + 1 \\<le> var p + 1 \\<and>\n     (\\<forall>pt i.\n         pt \\<notin> set_of pret \\<or>\n         n + 1 \\<le> i \\<and>\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n         rep pt = repa pt) \\<and>\n     repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>Nodes (n + 1) ll.\n         var (repa no) \\<le> var no \\<and>\n         (\\<exists>not nort.\n             Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n              nort \\<and>\n             Dag no low high not \\<and>\n             reduced nort \\<and>\n             ordered nort var \\<and>\n             set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n             (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n             (\\<exists>nobdt.\n                 bdt not var = Some nobdt \\<and>\n                 (\\<exists>norbdt.\n                     bdt nort var = Some norbdt \\<and>\n                     nobdt \\<sim> norbdt)))) \\<and>\n     (\\<forall>t1 t2.\n         t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                   (repa \\<propto> high) \\<and>\n         t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                   (repa \\<propto> high) \\<longrightarrow>\n         isomorphic_dags_eq t1 t2 var)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (ll ! n).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (ll ! n) \\<and>\n     high no \\<notin> set (ll ! n) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      repb (low no) \\<noteq> Null) \\<and>\n     (repb \\<propto> low) no \\<notin> set (ll ! n)\n  \\<forall>no1\\<in>set (ll ! n).\n     \\<forall>no2\\<in>set (ll ! n). var no1 = var no2\n  \\<forall>repa.\n     (\\<forall>no.\n         no \\<notin> set (ll ! n) \\<longrightarrow>\n         repb no = repa no) \\<and>\n     (\\<forall>no\\<in>set (ll ! n).\n         repa no \\<noteq> Null \\<and>\n         (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n             low no \\<noteq> Null\n          then repa no = (repa \\<propto> low) no\n          else repa no \\<in> set (ll ! n) \\<and>\n               repa (repa no) = repa no \\<and>\n               (\\<forall>no1\\<in>set (ll ! n).\n                   ((repa \\<propto> high) no1 =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                   (repa no = repa no1)))) \\<longrightarrow>\n     var p + 1 - (n + 1) < var p + 1 - n \\<and>\n     n + 1 \\<le> var p + 1 \\<and>\n     (\\<forall>pt i.\n         pt \\<notin> set_of pret \\<or>\n         n + 1 \\<le> i \\<and>\n         pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n         rep pt = repa pt) \\<and>\n     repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n     (\\<forall>no\\<in>Nodes (n + 1) ll.\n         var (repa no) \\<le> var no \\<and>\n         (\\<exists>not nort.\n             Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n              nort \\<and>\n             Dag no low high not \\<and>\n             reduced nort \\<and>\n             ordered nort var \\<and>\n             set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n             (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n             (\\<exists>nobdt.\n                 bdt not var = Some nobdt \\<and>\n                 (\\<exists>norbdt.\n                     bdt nort var = Some norbdt \\<and>\n                     nobdt \\<sim> norbdt)))) \\<and>\n     (\\<forall>t1 t2.\n         t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                   (repa \\<propto> high) \\<and>\n         t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                   (repa \\<propto> high) \\<longrightarrow>\n         isomorphic_dags_eq t1 t2 var)\n\ngoal (1 subgoal):\n 1. (\\<forall>no\\<in>set (ll ! n).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (ll ! n) \\<and>\n        high no \\<notin> set (ll ! n) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         repb (low no) \\<noteq> Null) \\<and>\n        (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n    (\\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n    (\\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set (ll ! n).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (ll ! n) \\<and>\n                high no \\<notin> set (ll ! n) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 repb (low no) \\<noteq> Null) \\<and>\n                (repb \\<propto> low) no \\<notin> set (ll ! n);\n     \\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2;\n     \\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var)\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>no\\<in>set (ll ! n).\n                          no \\<noteq> Null \\<and>\n                          (low no = Null) = (high no = Null) \\<and>\n                          low no \\<notin> set (ll ! n) \\<and>\n                          high no \\<notin> set (ll ! n) \\<and>\n                          isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                          (low no \\<noteq> Null \\<longrightarrow>\n                           repb (low no) \\<noteq> Null) \\<and>\n                          (repb \\<propto> low) no\n                          \\<notin> set (ll ! n)) \\<and>\n                      (\\<forall>no1\\<in>set (ll ! n).\n                          \\<forall>no2\\<in>set (ll ! n).\n                             var no1 = var no2) \\<and>\n                      (\\<forall>repa.\n                          (\\<forall>no.\n                              no \\<notin> set (ll ! n) \\<longrightarrow>\n                              repb no = repa no) \\<and>\n                          (\\<forall>no\\<in>set (ll ! n).\n                              repa no \\<noteq> Null \\<and>\n                              (if (repa \\<propto> low) no =\n                                  (repa \\<propto> high) no \\<and>\n                                  low no \\<noteq> Null\n                               then repa no = (repa \\<propto> low) no\n                               else repa no \\<in> set (ll ! n) \\<and>\n                                    repa (repa no) = repa no \\<and>\n                                    (\\<forall>no1\\<in>set (ll ! n).\n  ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n   (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n  (repa no = repa no1)))) \\<longrightarrow>\n                          var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                          n + 1 \\<le> var p + 1 \\<and>\n                          (\\<forall>pt i.\n                              pt \\<notin> set_of pret \\<or>\n                              n + 1 \\<le> i \\<and>\n                              pt \\<in> set (ll ! i) \\<and>\n                              i < var p + 1 \\<longrightarrow>\n                              rep pt = repa pt) \\<and>\n                          repa ` Nodes (n + 1) ll\n                          \\<subseteq> Nodes (n + 1) ll \\<and>\n                          (\\<forall>no\\<in>Nodes (n + 1) ll.\n                              var (repa no) \\<le> var no \\<and>\n                              (\\<exists>not nort.\n                                  Dag (repa no) (repa \\<propto> low)\n                                   (repa \\<propto> high) nort \\<and>\n                                  Dag no low high not \\<and>\n                                  reduced nort \\<and>\n                                  ordered nort var \\<and>\n                                  set_of nort\n                                  \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                                  (\\<forall>no\\<in>set_of nort.\nrepa no = no) \\<and>\n                                  (\\<exists>nobdt.\nbdt not var = Some nobdt \\<and>\n(\\<exists>norbdt.\n    bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                          (\\<forall>t1 t2.\n                              t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n  (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                              t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n  (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                              isomorphic_dags_eq t1 t2 var))", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<forall>no\\<in>set (ll ! n).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (ll ! n) \\<and>\n                high no \\<notin> set (ll ! n) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 repb (low no) \\<noteq> Null) \\<and>\n                (repb \\<propto> low) no \\<notin> set (ll ! n);\n     \\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2;\n     \\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no\\<in>set (ll ! n).\n                         no \\<noteq> Null \\<and>\n                         (low no = Null) = (high no = Null) \\<and>\n                         low no \\<notin> set (ll ! n) \\<and>\n                         high no \\<notin> set (ll ! n) \\<and>\n                         isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                         (low no \\<noteq> Null \\<longrightarrow>\n                          repb (low no) \\<noteq> Null) \\<and>\n                         (repb \\<propto> low) no \\<notin> set (ll ! n)\n 2. \\<lbrakk>\\<forall>no\\<in>set (ll ! n).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (ll ! n) \\<and>\n                high no \\<notin> set (ll ! n) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 repb (low no) \\<noteq> Null) \\<and>\n                (repb \\<propto> low) no \\<notin> set (ll ! n);\n     \\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2;\n     \\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>no1\\<in>set (ll ! n).\n                         \\<forall>no2\\<in>set (ll ! n). var no1 = var no2\n 3. \\<lbrakk>\\<forall>no\\<in>set (ll ! n).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (ll ! n) \\<and>\n                high no \\<notin> set (ll ! n) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 repb (low no) \\<noteq> Null) \\<and>\n                (repb \\<propto> low) no \\<notin> set (ll ! n);\n     \\<forall>no1\\<in>set (ll ! n).\n        \\<forall>no2\\<in>set (ll ! n). var no1 = var no2;\n     \\<forall>repa.\n        (\\<forall>no.\n            no \\<notin> set (ll ! n) \\<longrightarrow>\n            repb no = repa no) \\<and>\n        (\\<forall>no\\<in>set (ll ! n).\n            repa no \\<noteq> Null \\<and>\n            (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n                low no \\<noteq> Null\n             then repa no = (repa \\<propto> low) no\n             else repa no \\<in> set (ll ! n) \\<and>\n                  repa (repa no) = repa no \\<and>\n                  (\\<forall>no1\\<in>set (ll ! n).\n                      ((repa \\<propto> high) no1 =\n                       (repa \\<propto> high) no \\<and>\n                       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                      (repa no = repa no1)))) \\<longrightarrow>\n        var p + 1 - (n + 1) < var p + 1 - n \\<and>\n        n + 1 \\<le> var p + 1 \\<and>\n        (\\<forall>pt i.\n            pt \\<notin> set_of pret \\<or>\n            n + 1 \\<le> i \\<and>\n            pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n            rep pt = repa pt) \\<and>\n        repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n        (\\<forall>no\\<in>Nodes (n + 1) ll.\n            var (repa no) \\<le> var no \\<and>\n            (\\<exists>not nort.\n                Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n                 nort \\<and>\n                Dag no low high not \\<and>\n                reduced nort \\<and>\n                ordered nort var \\<and>\n                set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n                (\\<exists>nobdt.\n                    bdt not var = Some nobdt \\<and>\n                    (\\<exists>norbdt.\n                        bdt nort var = Some norbdt \\<and>\n                        nobdt \\<sim> norbdt)))) \\<and>\n        (\\<forall>t1 t2.\n            t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<and>\n            t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                      (repa \\<propto> high) \\<longrightarrow>\n            isomorphic_dags_eq t1 t2 var)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>repa.\n                         (\\<forall>no.\n                             no \\<notin> set (ll ! n) \\<longrightarrow>\n                             repb no = repa no) \\<and>\n                         (\\<forall>no\\<in>set (ll ! n).\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set (ll ! n) \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set (ll ! n).\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1)))) \\<longrightarrow>\n                         var p + 1 - (n + 1) < var p + 1 - n \\<and>\n                         n + 1 \\<le> var p + 1 \\<and>\n                         (\\<forall>pt i.\n                             pt \\<notin> set_of pret \\<or>\n                             n + 1 \\<le> i \\<and>\n                             pt \\<in> set (ll ! i) \\<and>\n                             i < var p + 1 \\<longrightarrow>\n                             rep pt = repa pt) \\<and>\n                         repa ` Nodes (n + 1) ll\n                         \\<subseteq> Nodes (n + 1) ll \\<and>\n                         (\\<forall>no\\<in>Nodes (n + 1) ll.\n                             var (repa no) \\<le> var no \\<and>\n                             (\\<exists>not nort.\n                                 Dag (repa no) (repa \\<propto> low)\n                                  (repa \\<propto> high) nort \\<and>\n                                 Dag no low high not \\<and>\n                                 reduced nort \\<and>\n                                 ordered nort var \\<and>\n                                 set_of nort\n                                 \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n                                 (\\<forall>no\\<in>set_of nort.\n                                     repa no = no) \\<and>\n                                 (\\<exists>nobdt.\n                                     bdt not var = Some nobdt \\<and>\n                                     (\\<exists>norbdt.\n   bdt nort var = Some norbdt \\<and> nobdt \\<sim> norbdt)))) \\<and>\n                         (\\<forall>t1 t2.\n                             t1 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<and>\n                             t2 \\<in> Dags (repa ` Nodes (n + 1) ll)\n (repa \\<propto> low) (repa \\<propto> high) \\<longrightarrow>\n                             isomorphic_dags_eq t1 t2 var)", "apply assumption+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<forall>no\\<in>set (ll ! n).\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and>\n      low no \\<notin> set (ll ! n) \\<and>\n      high no \\<notin> set (ll ! n) \\<and>\n      isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n      (low no \\<noteq> Null \\<longrightarrow>\n       repb (low no) \\<noteq> Null) \\<and>\n      (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n  (\\<forall>repa.\n      (\\<forall>no.\n          no \\<notin> set (ll ! n) \\<longrightarrow>\n          repb no = repa no) \\<and>\n      (\\<forall>no\\<in>set (ll ! n).\n          repa no \\<noteq> Null \\<and>\n          (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n              low no \\<noteq> Null\n           then repa no = (repa \\<propto> low) no\n           else repa no \\<in> set (ll ! n) \\<and>\n                repa (repa no) = repa no \\<and>\n                (\\<forall>no1\\<in>set (ll ! n).\n                    ((repa \\<propto> high) no1 =\n                     (repa \\<propto> high) no \\<and>\n                     (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                    (repa no = repa no1)))) \\<longrightarrow>\n      var p + 1 - (n + 1) < var p + 1 - n \\<and>\n      n + 1 \\<le> var p + 1 \\<and>\n      (\\<forall>pt i.\n          pt \\<notin> set_of pret \\<or>\n          n + 1 \\<le> i \\<and>\n          pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n          rep pt = repa pt) \\<and>\n      repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>Nodes (n + 1) ll.\n          var (repa no) \\<le> var no \\<and>\n          (\\<exists>not nort.\n              Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n               nort \\<and>\n              Dag no low high not \\<and>\n              reduced nort \\<and>\n              ordered nort var \\<and>\n              set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n              (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n              (\\<exists>nobdt.\n                  bdt not var = Some nobdt \\<and>\n                  (\\<exists>norbdt.\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt)))) \\<and>\n      (\\<forall>t1 t2.\n          t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                    (repa \\<propto> high) \\<and>\n          t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                    (repa \\<propto> high) \\<longrightarrow>\n          isomorphic_dags_eq t1 t2 var))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>no\\<in>set (ll ! n).\n      no \\<noteq> Null \\<and>\n      (low no = Null) = (high no = Null) \\<and>\n      low no \\<notin> set (ll ! n) \\<and>\n      high no \\<notin> set (ll ! n) \\<and>\n      isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n      (low no \\<noteq> Null \\<longrightarrow>\n       repb (low no) \\<noteq> Null) \\<and>\n      (repb \\<propto> low) no \\<notin> set (ll ! n)) \\<and>\n  (\\<forall>no1\\<in>set (ll ! n).\n      \\<forall>no2\\<in>set (ll ! n). var no1 = var no2) \\<and>\n  (\\<forall>repa.\n      (\\<forall>no.\n          no \\<notin> set (ll ! n) \\<longrightarrow>\n          repb no = repa no) \\<and>\n      (\\<forall>no\\<in>set (ll ! n).\n          repa no \\<noteq> Null \\<and>\n          (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n              low no \\<noteq> Null\n           then repa no = (repa \\<propto> low) no\n           else repa no \\<in> set (ll ! n) \\<and>\n                repa (repa no) = repa no \\<and>\n                (\\<forall>no1\\<in>set (ll ! n).\n                    ((repa \\<propto> high) no1 =\n                     (repa \\<propto> high) no \\<and>\n                     (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                    (repa no = repa no1)))) \\<longrightarrow>\n      var p + 1 - (n + 1) < var p + 1 - n \\<and>\n      n + 1 \\<le> var p + 1 \\<and>\n      (\\<forall>pt i.\n          pt \\<notin> set_of pret \\<or>\n          n + 1 \\<le> i \\<and>\n          pt \\<in> set (ll ! i) \\<and> i < var p + 1 \\<longrightarrow>\n          rep pt = repa pt) \\<and>\n      repa ` Nodes (n + 1) ll \\<subseteq> Nodes (n + 1) ll \\<and>\n      (\\<forall>no\\<in>Nodes (n + 1) ll.\n          var (repa no) \\<le> var no \\<and>\n          (\\<exists>not nort.\n              Dag (repa no) (repa \\<propto> low) (repa \\<propto> high)\n               nort \\<and>\n              Dag no low high not \\<and>\n              reduced nort \\<and>\n              ordered nort var \\<and>\n              set_of nort \\<subseteq> repa ` Nodes (n + 1) ll \\<and>\n              (\\<forall>no\\<in>set_of nort. repa no = no) \\<and>\n              (\\<exists>nobdt.\n                  bdt not var = Some nobdt \\<and>\n                  (\\<exists>norbdt.\n                      bdt nort var = Some norbdt \\<and>\n                      nobdt \\<sim> norbdt)))) \\<and>\n      (\\<forall>t1 t2.\n          t1 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                    (repa \\<propto> high) \\<and>\n          t2 \\<in> Dags (repa ` Nodes (n + 1) ll) (repa \\<propto> low)\n                    (repa \\<propto> high) \\<longrightarrow>\n          isomorphic_dags_eq t1 t2 var))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}