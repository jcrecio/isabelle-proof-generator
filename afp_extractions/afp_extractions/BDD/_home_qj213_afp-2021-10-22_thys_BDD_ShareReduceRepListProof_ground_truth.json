{"file_name": "/home/qj213/afp-2021-10-22/thys/BDD/ShareReduceRepListProof.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BDD", "problem_names": ["lemma (in ShareReduceRepList_impl) ShareReduceRepList_modifies:\n  shows \"\\<forall>\\<sigma>. \\<Gamma>\\<turnstile>{\\<sigma>}  PROC ShareReduceRepList (\\<acute>nodeslist)\n        {t. t may_only_modify_globals \\<sigma> in [rep]}\"", "lemma hd_filter_app: \"\\<lbrakk>filter P xs \\<noteq> []; zs=xs@ys\\<rbrakk> \\<Longrightarrow> \n       hd (filter P zs) =  hd (filter P xs)\"", "lemma (in ShareReduceRepList_impl) ShareReduceRepList_spec_total: \ndefines \"var_eq \\<equiv> (\\<lambda>ns var. (\\<forall>no1 \\<in> set ns. \\<forall>no2 \\<in> set ns. no1\\<rightarrow>var = no2\\<rightarrow>var))\"\nshows\n  \"\\<forall>\\<sigma> ns. \\<Gamma>\\<turnstile>\\<^sub>t\n   \\<lbrace>\\<sigma>. List \\<acute>nodeslist \\<acute>next ns \\<and>\n       (\\<forall>no \\<in> set ns.\n            no \\<noteq> Null \\<and> ((no\\<rightarrow>\\<acute>low = Null) = (no\\<rightarrow>\\<acute>high = Null)) \\<and> \n             no\\<rightarrow>\\<acute>low \\<notin> set ns \\<and> no\\<rightarrow>\\<acute>high \\<notin> set ns \\<and>\n             (isLeaf_pt no \\<acute>low \\<acute>high = (no\\<rightarrow>\\<acute>var \\<le> 1)) \\<and>\n             (no\\<rightarrow>\\<acute>low \\<noteq> Null \\<longrightarrow> (no\\<rightarrow>\\<acute>low)\\<rightarrow>\\<acute>rep \\<noteq> Null) \\<and>\n             ((\\<acute>rep \\<propto> \\<acute>low) no \\<notin> set ns)) \\<and>\n        var_eq ns \\<acute>var\\<rbrace> \n    PROC  ShareReduceRepList (\\<acute>nodeslist)\n   \\<lbrace>(\\<forall>no. no \\<notin> set ns \\<longrightarrow> no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep = no\\<rightarrow>\\<acute>rep)  \\<and>\n    (\\<forall>no \\<in> set ns. no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and> \n      (if ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and> no\\<rightarrow> \\<^bsup>\\<sigma>\\<^esup>low \\<noteq> Null) \n       then (no\\<rightarrow>\\<acute>rep = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no )\n       else ((no\\<rightarrow>\\<acute>rep) \\<in> set ns \\<and> no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<acute>rep = no\\<rightarrow>\\<acute>rep \\<and> \n             (\\<forall> no1 \\<in> set ns. \n                 ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no1 = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and> \n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no1 = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no) = (no\\<rightarrow>\\<acute>rep = no1\\<rightarrow>\\<acute>rep)))))\\<rbrace>\""], "translations": [["", "lemma (in ShareReduceRepList_impl) ShareReduceRepList_modifies:\n  shows \"\\<forall>\\<sigma>. \\<Gamma>\\<turnstile>{\\<sigma>}  PROC ShareReduceRepList (\\<acute>nodeslist)\n        {t. t may_only_modify_globals \\<sigma> in [rep]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<Gamma>\n          \\<turnstile> {\\<sigma>} PROC ShareReduceRepList(\\<acute>nodeslist)\n                       {t. t may_only_modify_globals \\<sigma> in [rep]}", "apply (hoare_rule HoarePartial.ProcRec1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       \\<Gamma>,(\\<Union>\\<sigma>.\n                    {({\\<sigma>}, ShareReduceRepList_'proc,\n                      {t. t may_only_modify_globals \\<sigma> in [rep]},\n                      {})})\n          \\<turnstile> {\\<sigma>}\n                       \\<acute>node :== \\<acute>nodeslist;;\n                       WHILE \\<acute>node \\<noteq> Null \n                       DO IF \\<not> isLeaf_pt \\<acute>node \\<acute>low\n                                     \\<acute>high \\<and>\n                             \\<acute>node\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep =\n                             \\<acute>node\\<rightarrow>\\<acute>high\\<rightarrow>\\<acute>rep\n                          THEN \\<acute>node\\<rightarrow>\\<acute>rep :==\n                               \\<acute>node\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep\n                          ELSE CALL ShareRep(\\<acute>nodeslist,\\<acute>node)\n                          FI;;\n                          \\<acute>node :==\n                          \\<acute>node\\<rightarrow>\\<acute>next \n                       OD\n                       {t. t may_only_modify_globals \\<sigma> in [rep]}", "apply (vcg spec=modifies)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma hd_filter_app: \"\\<lbrakk>filter P xs \\<noteq> []; zs=xs@ys\\<rbrakk> \\<Longrightarrow> \n       hd (filter P zs) =  hd (filter P xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>filter P xs \\<noteq> []; zs = xs @ ys\\<rbrakk>\n    \\<Longrightarrow> hd (filter P zs) = hd (filter P xs)", "by (induct xs arbitrary: n m) auto"], ["", "lemma (in ShareReduceRepList_impl) ShareReduceRepList_spec_total: \ndefines \"var_eq \\<equiv> (\\<lambda>ns var. (\\<forall>no1 \\<in> set ns. \\<forall>no2 \\<in> set ns. no1\\<rightarrow>var = no2\\<rightarrow>var))\"\nshows\n  \"\\<forall>\\<sigma> ns. \\<Gamma>\\<turnstile>\\<^sub>t\n   \\<lbrace>\\<sigma>. List \\<acute>nodeslist \\<acute>next ns \\<and>\n       (\\<forall>no \\<in> set ns.\n            no \\<noteq> Null \\<and> ((no\\<rightarrow>\\<acute>low = Null) = (no\\<rightarrow>\\<acute>high = Null)) \\<and> \n             no\\<rightarrow>\\<acute>low \\<notin> set ns \\<and> no\\<rightarrow>\\<acute>high \\<notin> set ns \\<and>\n             (isLeaf_pt no \\<acute>low \\<acute>high = (no\\<rightarrow>\\<acute>var \\<le> 1)) \\<and>\n             (no\\<rightarrow>\\<acute>low \\<noteq> Null \\<longrightarrow> (no\\<rightarrow>\\<acute>low)\\<rightarrow>\\<acute>rep \\<noteq> Null) \\<and>\n             ((\\<acute>rep \\<propto> \\<acute>low) no \\<notin> set ns)) \\<and>\n        var_eq ns \\<acute>var\\<rbrace> \n    PROC  ShareReduceRepList (\\<acute>nodeslist)\n   \\<lbrace>(\\<forall>no. no \\<notin> set ns \\<longrightarrow> no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep = no\\<rightarrow>\\<acute>rep)  \\<and>\n    (\\<forall>no \\<in> set ns. no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and> \n      (if ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and> no\\<rightarrow> \\<^bsup>\\<sigma>\\<^esup>low \\<noteq> Null) \n       then (no\\<rightarrow>\\<acute>rep = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no )\n       else ((no\\<rightarrow>\\<acute>rep) \\<in> set ns \\<and> no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<acute>rep = no\\<rightarrow>\\<acute>rep \\<and> \n             (\\<forall> no1 \\<in> set ns. \n                 ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no1 = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and> \n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no1 = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no) = (no\\<rightarrow>\\<acute>rep = no1\\<rightarrow>\\<acute>rep)))))\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> ns.\n       \\<Gamma>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. List \\<acute>nodeslist\n             \\<acute>next ns \\<and>\n            (\\<forall>no\\<in>set ns.\n                no \\<noteq> Null \\<and>\n                (no\\<rightarrow>\\<acute>low = Null) =\n                (no\\<rightarrow>\\<acute>high = Null) \\<and>\n                no\\<rightarrow>\\<acute>low \\<notin> set ns \\<and>\n                no\\<rightarrow>\\<acute>high \\<notin> set ns \\<and>\n                isLeaf_pt no \\<acute>low \\<acute>high =\n                (no\\<rightarrow>\\<acute>var \\<le> 1) \\<and>\n                (no\\<rightarrow>\\<acute>low \\<noteq> Null \\<longrightarrow>\n                 no\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep \\<noteq>\n                 Null) \\<and>\n                (\\<acute>rep \\<propto> \\<acute>low) no\n                \\<notin> set ns) \\<and>\n            var_eq ns \\<acute>var\\<rbrace>\n                               PROC ShareReduceRepList(\\<acute>nodeslist)\n                               \\<lbrace>(\\<forall>no.\n      no \\<notin> set ns \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep no = no\\<rightarrow>\\<acute>rep) \\<and>\n  (\\<forall>no\\<in>set ns.\n      no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and>\n      (if (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no =\n          (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and>\n          \\<^bsup>\\<sigma>\\<^esup>low no \\<noteq> Null\n       then no\\<rightarrow>\\<acute>rep =\n            (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no\n       else no\\<rightarrow>\\<acute>rep \\<in> set ns \\<and>\n            no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<acute>rep =\n            no\\<rightarrow>\\<acute>rep \\<and>\n            (\\<forall>no1\\<in>set ns.\n                ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no1 =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n                  no \\<and>\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no1 =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no) =\n                (no\\<rightarrow>\\<acute>rep =\n                 no1\\<rightarrow>\\<acute>rep))))\\<rbrace>", "apply (hoare_rule HoareTotal.ProcNoRec1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma> ns.\n       \\<Gamma>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. List \\<acute>nodeslist\n             \\<acute>next ns \\<and>\n            (\\<forall>no\\<in>set ns.\n                no \\<noteq> Null \\<and>\n                (no\\<rightarrow>\\<acute>low = Null) =\n                (no\\<rightarrow>\\<acute>high = Null) \\<and>\n                no\\<rightarrow>\\<acute>low \\<notin> set ns \\<and>\n                no\\<rightarrow>\\<acute>high \\<notin> set ns \\<and>\n                isLeaf_pt no \\<acute>low \\<acute>high =\n                (no\\<rightarrow>\\<acute>var \\<le> 1) \\<and>\n                (no\\<rightarrow>\\<acute>low \\<noteq> Null \\<longrightarrow>\n                 no\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep \\<noteq>\n                 Null) \\<and>\n                (\\<acute>rep \\<propto> \\<acute>low) no\n                \\<notin> set ns) \\<and>\n            var_eq ns \\<acute>var\\<rbrace>\n                               \\<acute>node :== \\<acute>nodeslist;;\n                               WHILE \\<acute>node \\<noteq> Null \n                               DO IF \\<not> isLeaf_pt \\<acute>node\n       \\<acute>low \\<acute>high \\<and>\n                                     \\<acute>node\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep =\n                                     \\<acute>node\\<rightarrow>\\<acute>high\\<rightarrow>\\<acute>rep\n                                  THEN \\<acute>node\\<rightarrow>\\<acute>rep :==\n \\<acute>node\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep\n                                  ELSE CALL ShareRep(\\<acute>nodeslist,\n                                    \\<acute>node)\n                                  FI;;\n                                  \\<acute>node :==\n                                  \\<acute>node\\<rightarrow>\\<acute>next \n                               OD\n                               \\<lbrace>(\\<forall>no.\n      no \\<notin> set ns \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep no = no\\<rightarrow>\\<acute>rep) \\<and>\n  (\\<forall>no\\<in>set ns.\n      no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and>\n      (if (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no =\n          (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and>\n          \\<^bsup>\\<sigma>\\<^esup>low no \\<noteq> Null\n       then no\\<rightarrow>\\<acute>rep =\n            (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no\n       else no\\<rightarrow>\\<acute>rep \\<in> set ns \\<and>\n            no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<acute>rep =\n            no\\<rightarrow>\\<acute>rep \\<and>\n            (\\<forall>no1\\<in>set ns.\n                ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no1 =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n                  no \\<and>\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no1 =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no) =\n                (no\\<rightarrow>\\<acute>rep =\n                 no1\\<rightarrow>\\<acute>rep))))\\<rbrace>", "apply (hoare_rule anno=\n       \" \\<acute>node :== \\<acute>nodeslist;;\n         WHILE (\\<acute>node \\<noteq> Null ) \n         INV \\<lbrace>\\<exists>prx sfx. List \\<acute>node \\<acute>next sfx \\<and> \n              List \\<acute>nodeslist \\<acute>next ns \\<and> ns=prx@sfx \\<and> \n              (\\<forall>no \\<in> set ns.\n                 no \\<noteq> Null \\<and> ((no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>low = Null) = (no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>high = Null)) \\<and> \n                 no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>low \\<notin> set ns \\<and> no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>high \\<notin> set ns \\<and>\n                 (isLeaf_pt no  \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high = (no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>var \\<le> 1)) \\<and>\n                 (no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>low \\<noteq> Null \\<longrightarrow> (no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>low)\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep \\<noteq> Null) \\<and>\n                 ((\\<^bsup>\\<sigma>\\<^esup>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no  \\<notin> set ns)) \\<and>\n              var_eq ns \\<acute>var \\<and>\n              (\\<forall>no.  no \\<notin> set prx \\<longrightarrow> no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>rep = no \\<rightarrow>\\<acute>rep)  \\<and>\n              (\\<forall> no \\<in> set prx. no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and> \n               (if ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and> no\\<rightarrow>\\<^bsup>\\<sigma>\\<^esup>low \\<noteq> Null) \n                then (no\\<rightarrow>\\<acute>rep = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no )\n                else ((no\\<rightarrow>\\<acute>rep)=hd (filter (\\<lambda>sn. repNodes_eq sn no \\<^bsup>\\<sigma>\\<^esup>low \\<^bsup>\\<sigma>\\<^esup>high \\<acute>rep) \n                                     prx) \\<and> \n                     ((no\\<rightarrow>\\<acute>rep)\\<rightarrow>\\<acute>rep) = no\\<rightarrow>\\<acute>rep \\<and> \n                     (\\<forall>no1 \\<in> set prx. \n                        ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no1 = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and> \n                         (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no1 = (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no) = \n                         (no\\<rightarrow>\\<acute>rep = no1\\<rightarrow>\\<acute>rep))))) \\<and>\n                 \\<acute>nodeslist= \\<^bsup>\\<sigma>\\<^esup>nodeslist \\<and> \\<acute>high=\\<^bsup>\\<sigma>\\<^esup>high \\<and> \\<acute>low=\\<^bsup>\\<sigma>\\<^esup>low \\<and> \\<acute>var=\\<^bsup>\\<sigma>\\<^esup>var\\<rbrace>\n         VAR MEASURE (length (list \\<acute>node \\<acute>next))\n         DO\n         IF (\\<not> isLeaf_pt \\<acute>node \\<acute>low \\<acute>high \\<and> \n            \\<acute>node \\<rightarrow> \\<acute>low \\<rightarrow> \\<acute>rep = \\<acute>node \\<rightarrow> \\<acute>high \\<rightarrow> \\<acute>rep )\n         THEN \\<acute>node \\<rightarrow> \\<acute>rep :== \\<acute>node \\<rightarrow> \\<acute>low \\<rightarrow> \\<acute>rep\n         ELSE CALL ShareRep (\\<acute>nodeslist , \\<acute>node)   \n         FI;;\n         \\<acute>node :==\\<acute>node \\<rightarrow> \\<acute>next\n         OD\" in HoareTotal.annotateI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> ns.\n       \\<Gamma>\n          \\<turnstile>\\<^sub>t \\<lbrace>\\<sigma>. List \\<acute>nodeslist\n             \\<acute>next ns \\<and>\n            (\\<forall>no\\<in>set ns.\n                no \\<noteq> Null \\<and>\n                (no\\<rightarrow>\\<acute>low = Null) =\n                (no\\<rightarrow>\\<acute>high = Null) \\<and>\n                no\\<rightarrow>\\<acute>low \\<notin> set ns \\<and>\n                no\\<rightarrow>\\<acute>high \\<notin> set ns \\<and>\n                isLeaf_pt no \\<acute>low \\<acute>high =\n                (no\\<rightarrow>\\<acute>var \\<le> 1) \\<and>\n                (no\\<rightarrow>\\<acute>low \\<noteq> Null \\<longrightarrow>\n                 no\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep \\<noteq>\n                 Null) \\<and>\n                (\\<acute>rep \\<propto> \\<acute>low) no\n                \\<notin> set ns) \\<and>\n            var_eq ns \\<acute>var\\<rbrace>\n                               \\<acute>node :== \\<acute>nodeslist;;\n                               WHILE \\<acute>node \\<noteq> Null\n                               INV \\<lbrace>\\<exists>prx sfx.\n         List \\<acute>node \\<acute>next sfx \\<and>\n         List \\<acute>nodeslist \\<acute>next ns \\<and>\n         ns = prx @ sfx \\<and>\n         (\\<forall>no\\<in>set ns.\n             no \\<noteq> Null \\<and>\n             (\\<^bsup>\\<sigma>\\<^esup>low no = Null) =\n             (\\<^bsup>\\<sigma>\\<^esup>high no = Null) \\<and>\n             \\<^bsup>\\<sigma>\\<^esup>low no \\<notin> set ns \\<and>\n             \\<^bsup>\\<sigma>\\<^esup>high no \\<notin> set ns \\<and>\n             isLeaf_pt no \\<^bsup>\\<sigma>\\<^esup>low\n              \\<^bsup>\\<sigma>\\<^esup>high =\n             (\\<^bsup>\\<sigma>\\<^esup>var no \\<le> 1) \\<and>\n             (\\<^bsup>\\<sigma>\\<^esup>low no \\<noteq> Null \\<longrightarrow>\n              \\<^bsup>\\<sigma>\\<^esup>rep\n               (\\<^bsup>\\<sigma>\\<^esup>low no) \\<noteq>\n              Null) \\<and>\n             (\\<^bsup>\\<sigma>\\<^esup>rep \\<propto>\n              \\<^bsup>\\<sigma>\\<^esup>low)\n              no\n             \\<notin> set ns) \\<and>\n         var_eq ns \\<acute>var \\<and>\n         (\\<forall>no.\n             no \\<notin> set prx \\<longrightarrow>\n             \\<^bsup>\\<sigma>\\<^esup>rep no =\n             no\\<rightarrow>\\<acute>rep) \\<and>\n         (\\<forall>no\\<in>set prx.\n             no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and>\n             (if (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n                  no \\<and>\n                 \\<^bsup>\\<sigma>\\<^esup>low no \\<noteq> Null\n              then no\\<rightarrow>\\<acute>rep =\n                   (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no\n              else no\\<rightarrow>\\<acute>rep =\n                   hd (filter\n                        (\\<lambda>sn.\n                            repNodes_eq sn no \\<^bsup>\\<sigma>\\<^esup>low\n                             \\<^bsup>\\<sigma>\\<^esup>high \\<acute>rep)\n                        prx) \\<and>\n                   no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<acute>rep =\n                   no\\<rightarrow>\\<acute>rep \\<and>\n                   (\\<forall>no1\\<in>set prx.\n                       ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n                         no1 =\n                        (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n                         no \\<and>\n                        (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low)\n                         no1 =\n                        (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low)\n                         no) =\n                       (no\\<rightarrow>\\<acute>rep =\n                        no1\\<rightarrow>\\<acute>rep)))) \\<and>\n         \\<acute>nodeslist = \\<^bsup>\\<sigma>\\<^esup>nodeslist \\<and>\n         \\<acute>high = \\<^bsup>\\<sigma>\\<^esup>high \\<and>\n         \\<acute>low = \\<^bsup>\\<sigma>\\<^esup>low \\<and>\n         \\<acute>var = \\<^bsup>\\<sigma>\\<^esup>var\\<rbrace>\n                               VAR MEASURE length\n      (list \\<acute>node \\<acute>next) \n                               DO IF \\<not> isLeaf_pt \\<acute>node\n       \\<acute>low \\<acute>high \\<and>\n                                     \\<acute>node\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep =\n                                     \\<acute>node\\<rightarrow>\\<acute>high\\<rightarrow>\\<acute>rep\n                                  THEN \\<acute>node\\<rightarrow>\\<acute>rep :==\n \\<acute>node\\<rightarrow>\\<acute>low\\<rightarrow>\\<acute>rep\n                                  ELSE CALL ShareRep(\\<acute>nodeslist,\n                                    \\<acute>node)\n                                  FI;;\n                                  \\<acute>node :==\n                                  \\<acute>node\\<rightarrow>\\<acute>next \n                               OD\n                               \\<lbrace>(\\<forall>no.\n      no \\<notin> set ns \\<longrightarrow>\n      \\<^bsup>\\<sigma>\\<^esup>rep no = no\\<rightarrow>\\<acute>rep) \\<and>\n  (\\<forall>no\\<in>set ns.\n      no\\<rightarrow>\\<acute>rep \\<noteq> Null \\<and>\n      (if (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no =\n          (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no \\<and>\n          \\<^bsup>\\<sigma>\\<^esup>low no \\<noteq> Null\n       then no\\<rightarrow>\\<acute>rep =\n            (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no\n       else no\\<rightarrow>\\<acute>rep \\<in> set ns \\<and>\n            no\\<rightarrow>\\<acute>rep\\<rightarrow>\\<acute>rep =\n            no\\<rightarrow>\\<acute>rep \\<and>\n            (\\<forall>no1\\<in>set ns.\n                ((\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high) no1 =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>high)\n                  no \\<and>\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no1 =\n                 (\\<acute>rep \\<propto> \\<^bsup>\\<sigma>\\<^esup>low) no) =\n                (no\\<rightarrow>\\<acute>rep =\n                 no1\\<rightarrow>\\<acute>rep))))\\<rbrace>", "apply (vcg spec=spec_total)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prx sfx.\n                            List nodeslist next sfx \\<and>\n                            List nodeslist next ns \\<and>\n                            ns = prx @ sfx \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set ns \\<and>\n                                high no \\<notin> set ns \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set ns) \\<and>\n                            var_eq ns var \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prx \\<longrightarrow>\n                                rep no = rep no) \\<and>\n                            (\\<forall>no\\<in>set prx.\n                                rep no \\<noteq> Null \\<and>\n                                (if (rep \\<propto> low) no =\n                                    (rep \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then rep no = (rep \\<propto> low) no\n                                 else rep no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high rep) prx) \\<and>\nrep (rep no) = rep no \\<and>\n(\\<forall>no1\\<in>set prx.\n    ((rep \\<propto> high) no1 = (rep \\<propto> high) no \\<and>\n     (rep \\<propto> low) no1 = (rep \\<propto> low) no) =\n    (rep no = rep no1)))) \\<and>\n                            nodeslist = nodeslist \\<and>\n                            high = high \\<and> low = low \\<and> var = var\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))", "apply   (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sfx.\n                            List nodeslist next sfx \\<and>\n                            List nodeslist next ns \\<and>\n                            ns = [] @ sfx \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set ns \\<and>\n                                high no \\<notin> set ns \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set ns) \\<and>\n                            var_eq ns var \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set [] \\<longrightarrow>\n                                rep no = rep no) \\<and>\n                            (\\<forall>no\\<in>set [].\n                                rep no \\<noteq> Null \\<and>\n                                (if (rep \\<propto> low) no =\n                                    (rep \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then rep no = (rep \\<propto> low) no\n                                 else rep no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high rep) []) \\<and>\nrep (rep no) = rep no \\<and>\n(\\<forall>no1\\<in>set [].\n    ((rep \\<propto> high) no1 = (rep \\<propto> high) no \\<and>\n     (rep \\<propto> low) no1 = (rep \\<propto> low) no) =\n    (rep no = rep no1)))) \\<and>\n                            nodeslist = nodeslist \\<and>\n                            high = high \\<and> low = low \\<and> var = var\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))", "apply   (rule_tac x=\"ns\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var\\<rbrakk>\n       \\<Longrightarrow> List nodeslist next ns \\<and>\n                         List nodeslist next ns \\<and>\n                         ns = [] @ ns \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set ns \\<and>\n                             high no \\<notin> set ns \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                         var_eq ns var \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set [] \\<longrightarrow>\n                             rep no = rep no) \\<and>\n                         (\\<forall>no\\<in>set [].\n                             rep no \\<noteq> Null \\<and>\n                             (if (rep \\<propto> low) no =\n                                 (rep \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then rep no = (rep \\<propto> low) no\n                              else rep no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high rep) []) \\<and>\n                                   rep (rep no) = rep no \\<and>\n                                   (\\<forall>no1\\<in>set [].\n ((rep \\<propto> high) no1 = (rep \\<propto> high) no \\<and>\n  (rep \\<propto> low) no1 = (rep \\<propto> low) no) =\n (rep no = rep no1)))) \\<and>\n                         nodeslist = nodeslist \\<and>\n                         high = high \\<and> low = low \\<and> var = var\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))", "using [[simp_depth_limit = 2]]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>ns var low high rep next nodeslist.\n       \\<lbrakk>List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var\\<rbrakk>\n       \\<Longrightarrow> List nodeslist next ns \\<and>\n                         List nodeslist next ns \\<and>\n                         ns = [] @ ns \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set ns \\<and>\n                             high no \\<notin> set ns \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                         var_eq ns var \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set [] \\<longrightarrow>\n                             rep no = rep no) \\<and>\n                         (\\<forall>no\\<in>set [].\n                             rep no \\<noteq> Null \\<and>\n                             (if (rep \\<propto> low) no =\n                                 (rep \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then rep no = (rep \\<propto> low) no\n                              else rep no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high rep) []) \\<and>\n                                   rep (rep no) = rep no \\<and>\n                                   (\\<forall>no1\\<in>set [].\n ((rep \\<propto> high) no1 = (rep \\<propto> high) no \\<and>\n  (rep \\<propto> low) no1 = (rep \\<propto> low) no) =\n (rep no = rep no1)))) \\<and>\n                         nodeslist = nodeslist \\<and>\n                         high = high \\<and> low = low \\<and> var = var\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))", "apply   (simp (no_asm_use))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))", "using [[simp_depth_limit = 4]]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        \\<not> node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set ns \\<longrightarrow>\n                             rep no = repa no) \\<and>\n                         (\\<forall>no\\<in>set ns.\n                             repa no \\<noteq> Null \\<and>\n                             (if (repa \\<propto> low) no =\n                                 (repa \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repa no = (repa \\<propto> low) no\n                              else repa no \\<in> set ns \\<and>\n                                   repa (repa no) = repa no \\<and>\n                                   (\\<forall>no1\\<in>set ns.\n ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n (repa no = repa no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))", "apply (clarsimp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> (\\<not> isLeaf_pt node lowa higha \\<and>\n                          repa (lowa node) =\n                          repa (higha node) \\<longrightarrow>\n                          length (list (next node) next)\n                          < length (list node next) \\<and>\n                          (\\<exists>prx sfx.\n                              List (next node) next sfx \\<and>\n                              List nodeslista next ns \\<and>\n                              ns = prx @ sfx \\<and>\n                              (\\<forall>no\\<in>set ns.\n                                  no \\<noteq> Null \\<and>\n                                  (low no = Null) = (high no = Null) \\<and>\n                                  low no \\<notin> set ns \\<and>\n                                  high no \\<notin> set ns \\<and>\n                                  isLeaf_pt no low high =\n                                  (var no \\<le> 1) \\<and>\n                                  (low no \\<noteq> Null \\<longrightarrow>\n                                   rep (low no) \\<noteq> Null) \\<and>\n                                  (rep \\<propto> low) no\n                                  \\<notin> set ns) \\<and>\n                              var_eq ns vara \\<and>\n                              (\\<forall>no.\n                                  no \\<notin> set prx \\<longrightarrow>\n                                  rep no =\n                                  (repa(node := repa (lowa node)))\n                                   no) \\<and>\n                              (\\<forall>no\\<in>set prx.\n                                  (repa(node := repa (lowa node)))\n                                   no \\<noteq>\n                                  Null \\<and>\n                                  (if (repa\n (node := repa (lowa node)) \\<propto> low)\n no =\n(repa(node := repa (lowa node)) \\<propto> high) no \\<and>\nlow no \\<noteq> Null\n                                   then (repa(node := repa (lowa node)))\n   no =\n  (repa(node := repa (lowa node)) \\<propto> low) no\n                                   else (repa(node := repa (lowa node)))\n   no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (lowa node))))\n       prx) \\<and>\n  (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n  (repa(node := repa (lowa node))) no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n       (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n       (repa(node := repa (lowa node)) \\<propto> low) no1 =\n       (repa(node := repa (lowa node)) \\<propto> low) no) =\n      ((repa(node := repa (lowa node))) no =\n       (repa(node := repa (lowa node))) no1)))) \\<and>\n                              nodeslista = nodeslist \\<and>\n                              higha = high \\<and>\n                              lowa = low \\<and> vara = var)) \\<and>\n                         (\\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                  repa (lowa node) =\n                                  repa (higha node)) \\<longrightarrow>\n                          (\\<exists>nsa.\n                              List nodeslista next nsa \\<and>\n                              (\\<forall>no\\<in>set nsa.\n                                  no \\<noteq> Null \\<and>\n                                  (lowa no = Null) =\n                                  (higha no = Null) \\<and>\n                                  (isLeaf_pt node lowa\n                                    higha \\<longrightarrow>\n                                   isLeaf_pt no lowa higha) \\<and>\n                                  vara no = vara node) \\<and>\n                              node \\<in> set nsa \\<and>\n                              (\\<forall>repb.\n                                  repb node =\n                                  hd (filter\n (\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                  (\\<forall>pt.\npt \\<noteq> node \\<longrightarrow> repa pt = repb pt) \\<and>\n                                  vara (repb node) =\n                                  vara node \\<longrightarrow>\n                                  length (list (next node) next)\n                                  < length (list node next) \\<and>\n                                  (\\<exists>prx sfx.\nList (next node) next sfx \\<and>\nList nodeslista next ns \\<and>\nns = prx @ sfx \\<and>\n(\\<forall>no\\<in>set ns.\n    no \\<noteq> Null \\<and>\n    (low no = Null) = (high no = Null) \\<and>\n    low no \\<notin> set ns \\<and>\n    high no \\<notin> set ns \\<and>\n    isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n    (low no \\<noteq> Null \\<longrightarrow>\n     rep (low no) \\<noteq> Null) \\<and>\n    (rep \\<propto> low) no \\<notin> set ns) \\<and>\nvar_eq ns vara \\<and>\n(\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n(\\<forall>no\\<in>set prx.\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               prx) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set prx.\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))) \\<and>\nnodeslista = nodeslist \\<and>\nhigha = high \\<and> lowa = low \\<and> vara = var))))\n 2. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply  (rule conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt node lowa higha \\<and>\n                         repa (lowa node) =\n                         repa (higha node) \\<longrightarrow>\n                         length (list (next node) next)\n                         < length (list node next) \\<and>\n                         (\\<exists>prx sfx.\n                             List (next node) next sfx \\<and>\n                             List nodeslista next ns \\<and>\n                             ns = prx @ sfx \\<and>\n                             (\\<forall>no\\<in>set ns.\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 low no \\<notin> set ns \\<and>\n                                 high no \\<notin> set ns \\<and>\n                                 isLeaf_pt no low high =\n                                 (var no \\<le> 1) \\<and>\n                                 (low no \\<noteq> Null \\<longrightarrow>\n                                  rep (low no) \\<noteq> Null) \\<and>\n                                 (rep \\<propto> low) no\n                                 \\<notin> set ns) \\<and>\n                             var_eq ns vara \\<and>\n                             (\\<forall>no.\n                                 no \\<notin> set prx \\<longrightarrow>\n                                 rep no =\n                                 (repa(node := repa (lowa node))) no) \\<and>\n                             (\\<forall>no\\<in>set prx.\n                                 (repa(node := repa (lowa node)))\n                                  no \\<noteq>\n                                 Null \\<and>\n                                 (if (repa\n(node := repa (lowa node)) \\<propto> low)\nno =\n                                     (repa\n(node := repa (lowa node)) \\<propto> high)\nno \\<and>\n                                     low no \\<noteq> Null\n                                  then (repa(node := repa (lowa node))) no =\n (repa(node := repa (lowa node)) \\<propto> low) no\n                                  else (repa(node := repa (lowa node))) no =\n hd (filter\n      (\\<lambda>sn.\n          repNodes_eq sn no low high (repa(node := repa (lowa node))))\n      prx) \\<and>\n (repa(node := repa (lowa node))) ((repa(node := repa (lowa node))) no) =\n (repa(node := repa (lowa node))) no \\<and>\n (\\<forall>no1\\<in>set prx.\n     ((repa(node := repa (lowa node)) \\<propto> high) no1 =\n      (repa(node := repa (lowa node)) \\<propto> high) no \\<and>\n      (repa(node := repa (lowa node)) \\<propto> low) no1 =\n      (repa(node := repa (lowa node)) \\<propto> low) no) =\n     ((repa(node := repa (lowa node))) no =\n      (repa(node := repa (lowa node))) no1)))) \\<and>\n                             nodeslista = nodeslist \\<and>\n                             higha = high \\<and>\n                             lowa = low \\<and> vara = var)\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List node next sfx;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high;\n        repa (low node) = repa (high node)\\<rbrakk>\n       \\<Longrightarrow> length (list (next node) next)\n                         < length (list node next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next node) next sfxa \\<and>\n                             List nodeslist next (prx @ sfx) \\<and>\n                             prx @ sfx = prxa @ sfxa \\<and>\n                             (\\<forall>no\\<in>set (prx @ sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 low no \\<notin> set (prx @ sfx) \\<and>\n                                 high no \\<notin> set (prx @ sfx) \\<and>\n                                 isLeaf_pt no low high =\n                                 (var no \\<le> 1) \\<and>\n                                 (low no \\<noteq> Null \\<longrightarrow>\n                                  rep (low no) \\<noteq> Null) \\<and>\n                                 (rep \\<propto> low) no\n                                 \\<notin> set (prx @ sfx)) \\<and>\n                             var_eq (prx @ sfx) var \\<and>\n                             (\\<forall>no.\n                                 no \\<notin> set prxa \\<longrightarrow>\n                                 rep no =\n                                 (repa(node := repa (low node))) no) \\<and>\n                             (\\<forall>no\\<in>set prxa.\n                                 (repa(node := repa (low node))) no \\<noteq>\n                                 Null \\<and>\n                                 (if (repa\n(node := repa (low node)) \\<propto> low)\nno =\n                                     (repa\n(node := repa (low node)) \\<propto> high)\nno \\<and>\n                                     low no \\<noteq> Null\n                                  then (repa(node := repa (low node))) no =\n (repa(node := repa (low node)) \\<propto> low) no\n                                  else (repa(node := repa (low node))) no =\n hd (filter\n      (\\<lambda>sn.\n          repNodes_eq sn no low high (repa(node := repa (low node))))\n      prxa) \\<and>\n (repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n (repa(node := repa (low node))) no \\<and>\n (\\<forall>no1\\<in>set prxa.\n     ((repa(node := repa (low node)) \\<propto> high) no1 =\n      (repa(node := repa (low node)) \\<propto> high) no \\<and>\n      (repa(node := repa (low node)) \\<propto> low) no1 =\n      (repa(node := repa (low node)) \\<propto> low) no) =\n     ((repa(node := repa (low node))) no =\n      (repa(node := repa (low node))) no1)))) \\<and>\n                             nodeslist = nodeslist \\<and>\n                             high = high \\<and> low = low \\<and> var = var)\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List node next sfx;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high;\n        repa (low node) = repa (high node)\\<rbrakk>\n       \\<Longrightarrow> length (list (next node) next)\n                         < length (list node next)\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List node next sfx;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high;\n        repa (low node) = repa (high node)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            List nodeslist next (prx @ sfx) \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (prx @ sfx) \\<and>\n                                high no \\<notin> set (prx @ sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ sfx)) \\<and>\n                            var_eq (prx @ sfx) var \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (low node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (low node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa(node := repa (low node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa(node := repa (low node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (low node))) no =\n(repa(node := repa (low node)) \\<propto> low) no\n                                 else (repa(node := repa (low node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (low node))))\n     prxa) \\<and>\n(repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n(repa(node := repa (low node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)))) \\<and>\n                            nodeslist = nodeslist \\<and>\n                            high = high \\<and> low = low \\<and> var = var\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (clarsimp simp add: List_list)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List node next sfx;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high;\n        repa (low node) = repa (high node)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            List nodeslist next (prx @ sfx) \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (prx @ sfx) \\<and>\n                                high no \\<notin> set (prx @ sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ sfx)) \\<and>\n                            var_eq (prx @ sfx) var \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (low node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (low node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa(node := repa (low node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa(node := repa (low node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (low node))) no =\n(repa(node := repa (low node)) \\<propto> low) no\n                                 else (repa(node := repa (low node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (low node))))\n     prxa) \\<and>\n(repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n(repa(node := repa (low node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)))) \\<and>\n                            nodeslist = nodeslist \\<and>\n                            high = high \\<and> low = low \\<and> var = var\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "(* termination *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List node next sfx;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high;\n        repa (low node) = repa (high node)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            List nodeslist next (prx @ sfx) \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (prx @ sfx) \\<and>\n                                high no \\<notin> set (prx @ sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ sfx)) \\<and>\n                            var_eq (prx @ sfx) var \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (low node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (low node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa(node := repa (low node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa(node := repa (low node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (low node))) no =\n(repa(node := repa (low node)) \\<propto> low) no\n                                 else (repa(node := repa (low node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (low node))))\n     prxa) \\<and>\n(repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n(repa(node := repa (low node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)))) \\<and>\n                            nodeslist = nodeslist \\<and>\n                            high = high \\<and> low = low \\<and> var = var\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (simp only: List_not_Null simp_thms triv_forall_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null;\n        \\<exists>ps. sfx = node # ps \\<and> List (next node) next ps;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high;\n        repa (low node) = repa (high node)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (prx @ sfx) \\<and>\n                                high no \\<notin> set (prx @ sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (high node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (high node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa\n                                     (node := repa (high node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa\n                                     (node := repa (high node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (high node))) no =\n(repa(node := repa (high node)) \\<propto> low) no\n                                 else (repa(node := repa (high node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (high node))))\n     prxa) \\<and>\n(repa(node := repa (high node))) ((repa(node := repa (high node))) no) =\n(repa(node := repa (high node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (high node)) \\<propto> high) no1 =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     (repa(node := repa (high node)) \\<propto> low) no1 =\n     (repa(node := repa (high node)) \\<propto> low) no) =\n    ((repa(node := repa (high node))) no =\n     (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx ps.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # ps);\n        \\<forall>no\\<in>set (prx @ node # ps).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # ps) \\<and>\n           high no \\<notin> set (prx @ node # ps) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # ps);\n        var_eq (prx @ node # ps) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfx.\n                            List (next node) next sfx \\<and>\n                            prx @ node # ps = prxa @ sfx \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # ps).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (prx @ node # ps) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # ps) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # ps)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (high node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (high node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa\n                                     (node := repa (high node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa\n                                     (node := repa (high node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (high node))) no =\n(repa(node := repa (high node)) \\<propto> low) no\n                                 else (repa(node := repa (high node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (high node))))\n     prxa) \\<and>\n(repa(node := repa (high node))) ((repa(node := repa (high node))) no) =\n(repa(node := repa (high node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (high node)) \\<propto> high) no1 =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     (repa(node := repa (high node)) \\<propto> low) no1 =\n     (repa(node := repa (high node)) \\<propto> low) no) =\n    ((repa(node := repa (high node))) no =\n     (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (simp only: triv_forall_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx ps.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # ps);\n        \\<forall>no\\<in>set (prx @ node # ps).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # ps) \\<and>\n           high no \\<notin> set (prx @ node # ps) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # ps);\n        var_eq (prx @ node # ps) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfx.\n                            List (next node) next sfx \\<and>\n                            prx @ node # ps = prxa @ sfx \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # ps).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no \\<notin> set (prx @ node # ps) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # ps) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # ps)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (high node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (high node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa\n                                     (node := repa (high node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa\n                                     (node := repa (high node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (high node))) no =\n(repa(node := repa (high node)) \\<propto> low) no\n                                 else (repa(node := repa (high node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (high node))))\n     prxa) \\<and>\n(repa(node := repa (high node))) ((repa(node := repa (high node))) no) =\n(repa(node := repa (high node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (high node)) \\<propto> high) no1 =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     (repa(node := repa (high node)) \\<propto> low) no1 =\n     (repa(node := repa (high node)) \\<propto> low) no) =\n    ((repa(node := repa (high node))) no =\n     (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rename_tac sfx)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (high node))) no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                (repa(node := repa (high node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa\n                                     (node := repa (high node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa\n                                     (node := repa (high node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (high node))) no =\n(repa(node := repa (high node)) \\<propto> low) no\n                                 else (repa(node := repa (high node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (high node))))\n     prxa) \\<and>\n(repa(node := repa (high node))) ((repa(node := repa (high node))) no) =\n(repa(node := repa (high node))) no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repa(node := repa (high node)) \\<propto> high) no1 =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     (repa(node := repa (high node)) \\<propto> low) no1 =\n     (repa(node := repa (high node)) \\<propto> low) no) =\n    ((repa(node := repa (high node))) no =\n     (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule_tac x=\"prx@[node]\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = (prx @ [node]) @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set\n       (prx @ [node]) \\<longrightarrow>\n                                rep no =\n                                (repa(node := repa (high node))) no) \\<and>\n                            (\\<forall>no\\<in>set (prx @ [node]).\n                                (repa(node := repa (high node))) no \\<noteq>\n                                Null \\<and>\n                                (if (repa\n                                     (node := repa (high node)) \\<propto>\n                                     low)\n                                     no =\n                                    (repa\n                                     (node := repa (high node)) \\<propto>\n                                     high)\n                                     no \\<and>\n                                    low no \\<noteq> Null\n                                 then (repa(node := repa (high node))) no =\n(repa(node := repa (high node)) \\<propto> low) no\n                                 else (repa(node := repa (high node))) no =\nhd (filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (high node))))\n     (prx @ [node])) \\<and>\n(repa(node := repa (high node))) ((repa(node := repa (high node))) no) =\n(repa(node := repa (high node))) no \\<and>\n(\\<forall>no1\\<in>set (prx @ [node]).\n    ((repa(node := repa (high node)) \\<propto> high) no1 =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     (repa(node := repa (high node)) \\<propto> low) no1 =\n     (repa(node := repa (high node)) \\<propto> low) no) =\n    ((repa(node := repa (high node))) no =\n     (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule_tac x=\"sfx\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> List (next node) next sfx \\<and>\n                         prx @ node # sfx = (prx @ [node]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> List (next node) next sfx\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> prx @ node # sfx = (prx @ [node]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> prx @ node # sfx = (prx @ [node]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> prx @ node # sfx = (prx @ [node]) @ sfx\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (simp (no_asm))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set (prx @ node # sfx).\n                            no \\<noteq> Null \\<and>\n                            (low no = Null) = (high no = Null) \\<and>\n                            low no \\<notin> set (prx @ node # sfx) \\<and>\n                            high no \\<notin> set (prx @ node # sfx) \\<and>\n                            isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                            (low no \\<noteq> Null \\<longrightarrow>\n                             rep (low no) \\<noteq> Null) \\<and>\n                            (rep \\<propto> low) no\n                            \\<notin> set (prx @ node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 2. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node.\n       \\<lbrakk>\\<exists>prx sfx.\n                   List node next sfx \\<and>\n                   List nodeslista next ns \\<and>\n                   ns = prx @ sfx \\<and>\n                   (\\<forall>no\\<in>set ns.\n                       no \\<noteq> Null \\<and>\n                       (low no = Null) = (high no = Null) \\<and>\n                       low no \\<notin> set ns \\<and>\n                       high no \\<notin> set ns \\<and>\n                       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                       (low no \\<noteq> Null \\<longrightarrow>\n                        rep (low no) \\<noteq> Null) \\<and>\n                       (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                   var_eq ns vara \\<and>\n                   (\\<forall>no.\n                       no \\<notin> set prx \\<longrightarrow>\n                       rep no = repa no) \\<and>\n                   (\\<forall>no\\<in>set prx.\n                       repa no \\<noteq> Null \\<and>\n                       (if (repa \\<propto> low) no =\n                           (repa \\<propto> high) no \\<and>\n                           low no \\<noteq> Null\n                        then repa no = (repa \\<propto> low) no\n                        else repa no =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn no low high repa)\n                                  prx) \\<and>\n                             repa (repa no) = repa no \\<and>\n                             (\\<forall>no1\\<in>set prx.\n                                 ((repa \\<propto> high) no1 =\n                                  (repa \\<propto> high) no \\<and>\n                                  (repa \\<propto> low) no1 =\n                                  (repa \\<propto> low) no) =\n                                 (repa no = repa no1)))) \\<and>\n                   nodeslista = nodeslist \\<and>\n                   higha = high \\<and> lowa = low \\<and> vara = var;\n        node \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<not> isLeaf_pt node lowa higha \\<and>\n                                 repa (lowa node) =\n                                 repa (higha node)) \\<longrightarrow>\n                         (\\<exists>nsa.\n                             List nodeslista next nsa \\<and>\n                             (\\<forall>no\\<in>set nsa.\n                                 no \\<noteq> Null \\<and>\n                                 (lowa no = Null) = (higha no = Null) \\<and>\n                                 (isLeaf_pt node lowa\n                                   higha \\<longrightarrow>\n                                  isLeaf_pt no lowa higha) \\<and>\n                                 vara no = vara node) \\<and>\n                             node \\<in> set nsa \\<and>\n                             (\\<forall>repb.\n                                 repb node =\n                                 hd (filter\n(\\<lambda>sn. repNodes_eq sn node lowa higha repa) nsa) \\<and>\n                                 (\\<forall>pt.\n                                     pt \\<noteq> node \\<longrightarrow>\n                                     repa pt = repb pt) \\<and>\n                                 vara (repb node) =\n                                 vara node \\<longrightarrow>\n                                 length (list (next node) next)\n                                 < length (list node next) \\<and>\n                                 (\\<exists>prx sfx.\n                                     List (next node) next sfx \\<and>\n                                     List nodeslista next ns \\<and>\n                                     ns = prx @ sfx \\<and>\n                                     (\\<forall>no\\<in>set ns.\n   no \\<noteq> Null \\<and>\n   (low no = Null) = (high no = Null) \\<and>\n   low no \\<notin> set ns \\<and>\n   high no \\<notin> set ns \\<and>\n   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n   (low no \\<noteq> Null \\<longrightarrow>\n    rep (low no) \\<noteq> Null) \\<and>\n   (rep \\<propto> low) no \\<notin> set ns) \\<and>\n                                     var_eq ns vara \\<and>\n                                     (\\<forall>no.\n   no \\<notin> set prx \\<longrightarrow> rep no = repb no) \\<and>\n                                     (\\<forall>no\\<in>set prx.\n   repb no \\<noteq> Null \\<and>\n   (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              prx) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set prx.\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1)))) \\<and>\n                                     nodeslista = nodeslist \\<and>\n                                     higha = high \\<and>\n                                     lowa = low \\<and> vara = var)))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist ns vara lowa higha repa next nodeslista\n       node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List node next sfx;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            List nodeslist next ns \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt node low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var node) \\<and>\n                            node \\<in> set ns \\<and>\n                            (\\<forall>repb.\n                                repb node =\n                                hd (filter\n                                     (\\<lambda>sn.\n   repNodes_eq sn node low high repa)\n                                     ns) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<noteq> node \\<longrightarrow>\n                                    repa pt = repb pt) \\<and>\n                                var (repb node) = var node \\<longrightarrow>\n                                length (list (next node) next)\n                                < length (list node next) \\<and>\n                                (\\<exists>prxa sfxa.\n                                    List (next node) next sfxa \\<and>\n                                    List nodeslist next (prx @ sfx) \\<and>\n                                    prx @ sfx = prxa @ sfxa \\<and>\n                                    (\\<forall>no\\<in>set (prx @ sfx).\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ sfx) \\<and>\n  high no \\<notin> set (prx @ sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ sfx)) \\<and>\n                                    var_eq (prx @ sfx) var \\<and>\n                                    (\\<forall>no.\n  no \\<notin> set prxa \\<longrightarrow> rep no = repb no) \\<and>\n                                    (\\<forall>no\\<in>set prxa.\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             prxa) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set prxa.\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1)))) \\<and>\n                                    nodeslist = nodeslist \\<and>\n                                    high = high \\<and>\n                                    low = low \\<and> var = var))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (simp only: List_not_Null simp_thms triv_forall_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null;\n        \\<exists>ps. sfx = node # ps \\<and> List (next node) next ps;\n        List nodeslist next (prx @ sfx);\n        \\<forall>no\\<in>set (prx @ sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ sfx) \\<and>\n           high no \\<notin> set (prx @ sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ sfx);\n        var_eq (prx @ sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            List nodeslist next ns \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt node low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var node) \\<and>\n                            node \\<in> set ns \\<and>\n                            (\\<forall>repb.\n                                repb node =\n                                hd (filter\n                                     (\\<lambda>sn.\n   repNodes_eq sn node low high repa)\n                                     ns) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<noteq> node \\<longrightarrow>\n                                    repa pt = repb pt) \\<and>\n                                var (repb node) = var node \\<longrightarrow>\n                                length (list (next node) next)\n                                < length (list node next) \\<and>\n                                (\\<exists>prxa sfxa.\n                                    List (next node) next sfxa \\<and>\n                                    prx @ sfx = prxa @ sfxa \\<and>\n                                    (\\<forall>no\\<in>set (prx @ sfx).\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ sfx) \\<and>\n  high no \\<notin> set (prx @ sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ sfx)) \\<and>\n                                    (\\<forall>no.\n  no \\<notin> set prxa \\<longrightarrow> rep no = repb no) \\<and>\n                                    (\\<forall>no\\<in>set prxa.\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             prxa) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set prxa.\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   clarify"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx ps.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # ps);\n        \\<forall>no\\<in>set (prx @ node # ps).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # ps) \\<and>\n           high no \\<notin> set (prx @ node # ps) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # ps);\n        var_eq (prx @ node # ps) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            List nodeslist next ns \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt node low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var node) \\<and>\n                            node \\<in> set ns \\<and>\n                            (\\<forall>repb.\n                                repb node =\n                                hd (filter\n                                     (\\<lambda>sn.\n   repNodes_eq sn node low high repa)\n                                     ns) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<noteq> node \\<longrightarrow>\n                                    repa pt = repb pt) \\<and>\n                                var (repb node) = var node \\<longrightarrow>\n                                length (list (next node) next)\n                                < length (list node next) \\<and>\n                                (\\<exists>prxa sfx.\n                                    List (next node) next sfx \\<and>\n                                    prx @ node # ps = prxa @ sfx \\<and>\n                                    (\\<forall>no\\<in>set (prx @ node # ps).\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # ps) \\<and>\n  high no \\<notin> set (prx @ node # ps) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # ps)) \\<and>\n                                    (\\<forall>no.\n  no \\<notin> set prxa \\<longrightarrow> rep no = repb no) \\<and>\n                                    (\\<forall>no\\<in>set prxa.\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             prxa) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set prxa.\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (simp only: triv_forall_equality)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx ps.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # ps);\n        \\<forall>no\\<in>set (prx @ node # ps).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # ps) \\<and>\n           high no \\<notin> set (prx @ node # ps) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # ps);\n        var_eq (prx @ node # ps) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next ps\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            List nodeslist next ns \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt node low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var node) \\<and>\n                            node \\<in> set ns \\<and>\n                            (\\<forall>repb.\n                                repb node =\n                                hd (filter\n                                     (\\<lambda>sn.\n   repNodes_eq sn node low high repa)\n                                     ns) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<noteq> node \\<longrightarrow>\n                                    repa pt = repb pt) \\<and>\n                                var (repb node) = var node \\<longrightarrow>\n                                length (list (next node) next)\n                                < length (list node next) \\<and>\n                                (\\<exists>prxa sfx.\n                                    List (next node) next sfx \\<and>\n                                    prx @ node # ps = prxa @ sfx \\<and>\n                                    (\\<forall>no\\<in>set (prx @ node # ps).\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # ps) \\<and>\n  high no \\<notin> set (prx @ node # ps) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # ps)) \\<and>\n                                    (\\<forall>no.\n  no \\<notin> set prxa \\<longrightarrow> rep no = repb no) \\<and>\n                                    (\\<forall>no\\<in>set prxa.\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             prxa) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set prxa.\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rename_tac sfx)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ns.\n                            List nodeslist next ns \\<and>\n                            (\\<forall>no\\<in>set ns.\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                (isLeaf_pt node low high \\<longrightarrow>\n                                 isLeaf_pt no low high) \\<and>\n                                var no = var node) \\<and>\n                            node \\<in> set ns \\<and>\n                            (\\<forall>repb.\n                                repb node =\n                                hd (filter\n                                     (\\<lambda>sn.\n   repNodes_eq sn node low high repa)\n                                     ns) \\<and>\n                                (\\<forall>pt.\n                                    pt \\<noteq> node \\<longrightarrow>\n                                    repa pt = repb pt) \\<and>\n                                var (repb node) = var node \\<longrightarrow>\n                                length (list (next node) next)\n                                < length (list node next) \\<and>\n                                (\\<exists>prxa sfxa.\n                                    List (next node) next sfxa \\<and>\n                                    prx @ node # sfx = prxa @ sfxa \\<and>\n                                    (\\<forall>no\\<in>set (prx @ node # sfx).\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)) \\<and>\n                                    (\\<forall>no.\n  no \\<notin> set prxa \\<longrightarrow> rep no = repb no) \\<and>\n                                    (\\<forall>no\\<in>set prxa.\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             prxa) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set prxa.\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule_tac x=\"prx@node#sfx\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> List nodeslist next (prx @ node # sfx) \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt node low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var node) \\<and>\n                         node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "(* Precondition for ShareRep *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> List nodeslist next (prx @ node # sfx) \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt node low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var node) \\<and>\n                         node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> List nodeslist next (prx @ node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt node low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var node) \\<and>\n                         node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             (isLeaf_pt node low high \\<longrightarrow>\n                              isLeaf_pt no low high) \\<and>\n                             var no = var node) \\<and>\n                         node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set (prx @ node # sfx).\n                            no \\<noteq> Null \\<and>\n                            (low no = Null) = (high no = Null) \\<and>\n                            (isLeaf_pt node low high \\<longrightarrow>\n                             isLeaf_pt no low high) \\<and>\n                            var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (rule ballI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> no \\<noteq> Null \\<and>\n                         (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (frule_tac x=no in bspec, assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> no \\<noteq> Null \\<and>\n                         (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (drule_tac x=node in bspec)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        node \\<noteq> Null \\<and>\n        (low node = Null) = (high node = Null) \\<and>\n        low node \\<notin> set (prx @ node # sfx) \\<and>\n        high node \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt node low high = (var node \\<le> 1) \\<and>\n        (low node \\<noteq> Null \\<longrightarrow>\n         rep (low node) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> no \\<noteq> Null \\<and>\n                         (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 4. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 5. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply     (simp (no_asm_use))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        node \\<noteq> Null \\<and>\n        (low node = Null) = (high node = Null) \\<and>\n        low node \\<notin> set (prx @ node # sfx) \\<and>\n        high node \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt node low high = (var node \\<le> 1) \\<and>\n        (low node \\<noteq> Null \\<longrightarrow>\n         rep (low node) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> no \\<noteq> Null \\<and>\n                         (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (elim conjE)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> no \\<noteq> Null \\<and>\n                         (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> no \\<noteq> Null\n 2. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 4. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 5. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply     assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (low no = Null) = (high no = Null) \\<and>\n                         (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (rule conjI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (low no = Null) = (high no = Null)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 4. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 5. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply     assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        var_eq (prx @ node # sfx) var;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        var_eq ns var;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (unfold var_eq_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (drule_tac x=node in bspec, simp)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx);\n        \\<forall>no2\\<in>set (prx @ node # sfx). var node = var no2\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (drule_tac x=no in bspec,assumption)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx no.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx; no \\<in> set (prx @ node # sfx);\n        no \\<noteq> Null; node \\<noteq> Null;\n        (low no = Null) = (high no = Null);\n        (low node = Null) = (high node = Null);\n        low no \\<notin> set (prx @ node # sfx);\n        low node \\<notin> set (prx @ node # sfx);\n        high no \\<notin> set (prx @ node # sfx);\n        high node \\<notin> set (prx @ node # sfx);\n        isLeaf_pt no low high = (var no \\<le> 1);\n        isLeaf_pt node low high = (var node \\<le> 1);\n        low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        low node \\<noteq> Null \\<longrightarrow>\n        rep (low node) \\<noteq> Null;\n        (rep \\<propto> low) node \\<notin> set (prx @ node # sfx);\n        var node = var no\\<rbrakk>\n       \\<Longrightarrow> (isLeaf_pt node low high \\<longrightarrow>\n                          isLeaf_pt no low high) \\<and>\n                         var no = var node\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (simp add: isLeaf_pt_def )"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx) \\<and>\n                         (\\<forall>repb.\n                             repb node =\n                             hd (filter\n                                  (\\<lambda>sn.\nrepNodes_eq sn node low high repa)\n                                  (prx @ node # sfx)) \\<and>\n                             (\\<forall>pt.\n                                 pt \\<noteq> node \\<longrightarrow>\n                                 repa pt = repb pt) \\<and>\n                             var (repb node) = var node \\<longrightarrow>\n                             length (list (next node) next)\n                             < length (list node next) \\<and>\n                             (\\<exists>prxa sfxa.\n                                 List (next node) next sfxa \\<and>\n                                 prx @ node # sfx = prxa @ sfxa \\<and>\n                                 (\\<forall>no\\<in>set (prx @ node # sfx).\n                                     no \\<noteq> Null \\<and>\n                                     (low no = Null) =\n                                     (high no = Null) \\<and>\n                                     low no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     high no\n                                     \\<notin> set (prx @ node # sfx) \\<and>\n                                     isLeaf_pt no low high =\n                                     (var no \\<le> 1) \\<and>\n                                     (low no \\<noteq> Null \\<longrightarrow>\nrep (low no) \\<noteq> Null) \\<and>\n                                     (rep \\<propto> low) no\n                                     \\<notin> set (prx @ node # sfx)) \\<and>\n                                 (\\<forall>no.\n                                     no \\<notin> set prxa \\<longrightarrow>\n                                     rep no = repb no) \\<and>\n                                 (\\<forall>no\\<in>set prxa.\n                                     repb no \\<noteq> Null \\<and>\n                                     (if (repb \\<propto> low) no =\n   (repb \\<propto> high) no \\<and>\n   low no \\<noteq> Null\nthen repb no = (repb \\<propto> low) no\nelse repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n     repb (repb no) = repb no \\<and>\n     (\\<forall>no1\\<in>set prxa.\n         ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n          (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n         (repb no = repb no1))))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> node \\<in> set (prx @ node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<forall>repb.\n                            repb node =\n                            hd (filter\n                                 (\\<lambda>sn.\n                                     repNodes_eq sn node low high repa)\n                                 (prx @ node # sfx)) \\<and>\n                            (\\<forall>pt.\n                                pt \\<noteq> node \\<longrightarrow>\n                                repa pt = repb pt) \\<and>\n                            var (repb node) = var node \\<longrightarrow>\n                            length (list (next node) next)\n                            < length (list node next) \\<and>\n                            (\\<exists>prxa sfxa.\n                                List (next node) next sfxa \\<and>\n                                prx @ node # sfx = prxa @ sfxa \\<and>\n                                (\\<forall>no\\<in>set (prx @ node # sfx).\n                                    no \\<noteq> Null \\<and>\n                                    (low no = Null) =\n                                    (high no = Null) \\<and>\n                                    low no\n                                    \\<notin> set (prx @ node # sfx) \\<and>\n                                    high no\n                                    \\<notin> set (prx @ node # sfx) \\<and>\n                                    isLeaf_pt no low high =\n                                    (var no \\<le> 1) \\<and>\n                                    (low no \\<noteq> Null \\<longrightarrow>\n                                     rep (low no) \\<noteq> Null) \\<and>\n                                    (rep \\<propto> low) no\n                                    \\<notin> set (prx @ node # sfx)) \\<and>\n                                (\\<forall>no.\n                                    no \\<notin> set prxa \\<longrightarrow>\n                                    rep no = repb no) \\<and>\n                                (\\<forall>no\\<in>set prxa.\n                                    repb no \\<noteq> Null \\<and>\n                                    (if (repb \\<propto> low) no =\n  (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repb no = (repb \\<propto> low) no\n                                     else repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n    repb (repb no) = repb no \\<and>\n    (\\<forall>no1\\<in>set prxa.\n        ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n         (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n        (repb no = repb no1)))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (simp (no_asm))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> \\<forall>repb.\n                            repb node =\n                            hd (filter\n                                 (\\<lambda>sn.\n                                     repNodes_eq sn node low high repa)\n                                 (prx @ node # sfx)) \\<and>\n                            (\\<forall>pt.\n                                pt \\<noteq> node \\<longrightarrow>\n                                repa pt = repb pt) \\<and>\n                            var (repb node) = var node \\<longrightarrow>\n                            length (list (next node) next)\n                            < length (list node next) \\<and>\n                            (\\<exists>prxa sfxa.\n                                List (next node) next sfxa \\<and>\n                                prx @ node # sfx = prxa @ sfxa \\<and>\n                                (\\<forall>no\\<in>set (prx @ node # sfx).\n                                    no \\<noteq> Null \\<and>\n                                    (low no = Null) =\n                                    (high no = Null) \\<and>\n                                    low no\n                                    \\<notin> set (prx @ node # sfx) \\<and>\n                                    high no\n                                    \\<notin> set (prx @ node # sfx) \\<and>\n                                    isLeaf_pt no low high =\n                                    (var no \\<le> 1) \\<and>\n                                    (low no \\<noteq> Null \\<longrightarrow>\n                                     rep (low no) \\<noteq> Null) \\<and>\n                                    (rep \\<propto> low) no\n                                    \\<notin> set (prx @ node # sfx)) \\<and>\n                                (\\<forall>no.\n                                    no \\<notin> set prxa \\<longrightarrow>\n                                    rep no = repb no) \\<and>\n                                (\\<forall>no\\<in>set prxa.\n                                    repb no \\<noteq> Null \\<and>\n                                    (if (repb \\<propto> low) no =\n  (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n                                     then repb no = (repb \\<propto> low) no\n                                     else repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n    repb (repb no) = repb no \\<and>\n    (\\<forall>no1\\<in>set prxa.\n        ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n         (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n        (repb no = repb no1)))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (clarify)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> length (list (next node) next)\n                         < length (list node next) \\<and>\n                         (\\<exists>prxa sfxa.\n                             List (next node) next sfxa \\<and>\n                             prx @ node # sfx = prxa @ sfxa \\<and>\n                             (\\<forall>no\\<in>set (prx @ node # sfx).\n                                 no \\<noteq> Null \\<and>\n                                 (low no = Null) = (high no = Null) \\<and>\n                                 low no\n                                 \\<notin> set (prx @ node # sfx) \\<and>\n                                 high no\n                                 \\<notin> set (prx @ node # sfx) \\<and>\n                                 isLeaf_pt no low high =\n                                 (var no \\<le> 1) \\<and>\n                                 (low no \\<noteq> Null \\<longrightarrow>\n                                  rep (low no) \\<noteq> Null) \\<and>\n                                 (rep \\<propto> low) no\n                                 \\<notin> set (prx @ node # sfx)) \\<and>\n                             (\\<forall>no.\n                                 no \\<notin> set prxa \\<longrightarrow>\n                                 rep no = repb no) \\<and>\n                             (\\<forall>no\\<in>set prxa.\n                                 repb no \\<noteq> Null \\<and>\n                                 (if (repb \\<propto> low) no =\n                                     (repb \\<propto> high) no \\<and>\n                                     low no \\<noteq> Null\n                                  then repb no = (repb \\<propto> low) no\n                                  else repb no =\n hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\n repb (repb no) = repb no \\<and>\n (\\<forall>no1\\<in>set prxa.\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> length (list (next node) next)\n                         < length (list node next)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (subgoal_tac \"List node next (node#sfx)\")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node; List node next (node # sfx)\\<rbrakk>\n       \\<Longrightarrow> length (list (next node) next)\n                         < length (list node next)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> List node next (node # sfx)\n 3. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 4. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 5. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "(* termination *)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node; List node next (node # sfx)\\<rbrakk>\n       \\<Longrightarrow> length (list (next node) next)\n                         < length (list node next)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> List node next (node # sfx)\n 3. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 4. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 5. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply     (simp only: List_list)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx))) =\n        var node;\n        List node next (node # sfx)\\<rbrakk>\n       \\<Longrightarrow> length sfx < length (node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> List node next (node # sfx)\n 3. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 4. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 5. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply     (simp (no_asm))"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> List node next (node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (simp (no_asm_simp))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>prxa sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = prxa @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set prxa \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set prxa.\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) prxa) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set prxa.\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule_tac x=\"prx@[node]\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sfxa.\n                            List (next node) next sfxa \\<and>\n                            prx @ node # sfx = (prx @ [node]) @ sfxa \\<and>\n                            (\\<forall>no\\<in>set (prx @ node # sfx).\n                                no \\<noteq> Null \\<and>\n                                (low no = Null) = (high no = Null) \\<and>\n                                low no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                high no\n                                \\<notin> set (prx @ node # sfx) \\<and>\n                                isLeaf_pt no low high =\n                                (var no \\<le> 1) \\<and>\n                                (low no \\<noteq> Null \\<longrightarrow>\n                                 rep (low no) \\<noteq> Null) \\<and>\n                                (rep \\<propto> low) no\n                                \\<notin> set (prx @ node # sfx)) \\<and>\n                            (\\<forall>no.\n                                no \\<notin> set\n       (prx @ [node]) \\<longrightarrow>\n                                rep no = repb no) \\<and>\n                            (\\<forall>no\\<in>set (prx @ [node]).\n                                repb no \\<noteq> Null \\<and>\n                                (if (repb \\<propto> low) no =\n                                    (repb \\<propto> high) no \\<and>\n                                    low no \\<noteq> Null\n                                 then repb no = (repb \\<propto> low) no\n                                 else repb no =\nhd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node])) \\<and>\nrepb (repb no) = repb no \\<and>\n(\\<forall>no1\\<in>set (prx @ [node]).\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule_tac x=\"sfx\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> List (next node) next sfx \\<and>\n                         prx @ node # sfx = (prx @ [node]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> List (next node) next sfx\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> prx @ node # sfx = (prx @ [node]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> prx @ node # sfx = (prx @ [node]) @ sfx \\<and>\n                         (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> prx @ node # sfx = (prx @ [node]) @ sfx\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (simp (no_asm))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no\\<in>set (prx @ node # sfx).\n                             no \\<noteq> Null \\<and>\n                             (low no = Null) = (high no = Null) \\<and>\n                             low no \\<notin> set (prx @ node # sfx) \\<and>\n                             high no \\<notin> set (prx @ node # sfx) \\<and>\n                             isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                             (low no \\<noteq> Null \\<longrightarrow>\n                              rep (low no) \\<noteq> Null) \\<and>\n                             (rep \\<propto> low) no\n                             \\<notin> set (prx @ node # sfx)) \\<and>\n                         (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply   (rule conjI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> \\<forall>no\\<in>set (prx @ node # sfx).\n                            no \\<noteq> Null \\<and>\n                            (low no = Null) = (high no = Null) \\<and>\n                            low no \\<notin> set (prx @ node # sfx) \\<and>\n                            high no \\<notin> set (prx @ node # sfx) \\<and>\n                            isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                            (low no \\<noteq> Null \\<longrightarrow>\n                             rep (low no) \\<noteq> Null) \\<and>\n                            (rep \\<propto> low) no\n                            \\<notin> set (prx @ node # sfx)\n 2. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 3. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 4. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "apply    (assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "using [[simp_depth_limit = 100]]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "(* From invariant to postcondition *)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "fix var low high rep nodeslist ns repa \"next\" no"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume ns: \"List nodeslist next ns\""], ["proof (state)\nthis:\n  List nodeslist next ns\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume no_in_ns: \"no \\<in> set ns\""], ["proof (state)\nthis:\n  no \\<in> set ns\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume while_inv: \"\\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no = hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa] \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume pre: \"\\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and> (rep \\<propto> low) no \\<notin> set ns\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set ns \\<and>\n     high no \\<notin> set ns \\<and>\n     isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set ns\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume same_var: \"\\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2\""], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume share_case: \"(repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow> high no = Null\""], ["proof (state)\nthis:\n  (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n  high no = Null\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "assume unmodif: \"\\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no\""], ["proof (state)\nthis:\n  \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no\n\ngoal (3 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))\n 3. \\<And>var low high rep nodeslist ns repa next no.\n       \\<lbrakk>no \\<in> set ns; List nodeslist next ns;\n        \\<forall>no\\<in>set ns.\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set ns \\<and>\n           high no \\<notin> set ns \\<and>\n           isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set ns;\n        \\<forall>no1\\<in>set ns. \\<forall>no2\\<in>set ns. var no1 = var no2;\n        \\<forall>no. no \\<notin> set ns \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set ns.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               high no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      ns) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set ns.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n        high no = Null\\<rbrakk>\n       \\<Longrightarrow> hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)\n                         \\<in> set ns \\<and>\n                         repa\n                          (hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repa)\n                                ns)) =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repa)\n                              ns)", "show \"hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa] \\<in> set ns \\<and>\n        repa (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) =\n        hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "from no_in_ns pre"], ["proof (chain)\npicking this:\n  no \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set ns \\<and>\n     high no \\<notin> set ns \\<and>\n     isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set ns", "obtain\n      no_nNull: \" no \\<noteq> Null\" and\n      no_balanced: \"(low no = Null) = (high no = Null)\" and\n      isLeaf_var: \"isLeaf_pt no low high = (var no \\<le> Suc 0)\""], ["proof (prove)\nusing this:\n  no \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set ns \\<and>\n     high no \\<notin> set ns \\<and>\n     isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set ns\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n      isLeaf_pt no low high = (var no \\<le> Suc 0)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  isLeaf_pt no low high = (var no \\<le> Suc 0)\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "have repNodes_eq_same_node: \"repNodes_eq no no low high repa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repNodes_eq no no low high repa", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  repNodes_eq no no low high repa\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "from no_in_ns"], ["proof (chain)\npicking this:\n  no \\<in> set ns", "have ns_nempty: \"ns \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set ns\n\ngoal (1 subgoal):\n 1. ns \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "from no_in_ns repNodes_eq_same_node"], ["proof (chain)\npicking this:\n  no \\<in> set ns\n  repNodes_eq no no low high repa", "have repNodes_not_empty: \"[sn\\<leftarrow>ns . repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set ns\n  repNodes_eq no no low high repa\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []", "by (rule filter_not_empty)"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []", "have hd_term_in_ns: \"hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa] \\<in> set ns\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns", "by (rule hd_filter_in_list)"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with while_inv"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns", "obtain \n      repa_hd_nNull: \"repa  (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n\ngoal (1 subgoal):\n 1. (repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<Longrightarrow>\n     thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repa\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) \\<noteq>\n  Null\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "let ?hd = \"hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]\""], ["proof (state)\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "from hd_term_in_ns  pre"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set ns \\<and>\n     high no \\<notin> set ns \\<and>\n     isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set ns", "obtain\n      hd_nNull: \" ?hd \\<noteq> Null\" and\n      hd_balanced: \n        \"(low (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) = Null) = \n         (high (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) = Null)\" and\n      hd_isLeaf_var: \n      \"isLeaf_pt (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) low high = \n      (var (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) \\<le> Suc 0)\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  \\<forall>no\\<in>set ns.\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set ns \\<and>\n     high no \\<notin> set ns \\<and>\n     isLeaf_pt no low high = (var no \\<le> Suc 0) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set ns\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                   ns) \\<noteq>\n              Null;\n      (low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n       Null) =\n      (high\n        (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n       Null);\n      isLeaf_pt\n       (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) low\n       high =\n      (var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n       \\<le> Suc 0)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<noteq>\n  Null\n  (low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n   Null) =\n  (high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n   Null)\n  isLeaf_pt (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   low high =\n  (var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   \\<le> Suc 0)\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "have \"repa (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) = \n      hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "proof (cases \"high no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "case True"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with no_balanced"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  high no = Null", "have \"low no = Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  high no = Null\n\ngoal (1 subgoal):\n 1. low no = Null", "by simp"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with True"], ["proof (chain)\npicking this:\n  high no = Null\n  low no = Null", "have no_Leaf: \"isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  high no = Null\n  low no = Null\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with isLeaf_var"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high = (var no \\<le> Suc 0)\n  isLeaf_pt no low high", "have varno: \"var no <= 1\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high = (var no \\<le> Suc 0)\n  isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. var no \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "from same_var [rule_format, OF no_in_ns hd_term_in_ns] varno"], ["proof (chain)\npicking this:\n  var no =\n  var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n  var no \\<le> 1", "have \"var (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) \\<le> 1\""], ["proof (prove)\nusing this:\n  var no =\n  var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n    \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n  \\<le> 1\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with hd_isLeaf_var"], ["proof (chain)\npicking this:\n  isLeaf_pt (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   low high =\n  (var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   \\<le> Suc 0)\n  var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n  \\<le> 1", "have \n        \"isLeaf_pt (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) low high\""], ["proof (prove)\nusing this:\n  isLeaf_pt (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   low high =\n  (var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   \\<le> Suc 0)\n  var (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. isLeaf_pt\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) low\n     high", "by simp"], ["proof (state)\nthis:\n  isLeaf_pt (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   low high\n\ngoal (2 subgoals):\n 1. high no = Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n 2. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with while_inv hd_term_in_ns repNodes_not_empty"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n  isLeaf_pt (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   low high", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n  isLeaf_pt (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n   low high\n\ngoal (1 subgoal):\n 1. repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "apply (simp add: isLeaf_pt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set ns.\n                repa no \\<noteq> Null \\<and>\n                (if (repa \\<propto> low) no =\n                    (repa \\<propto> high) no \\<and>\n                    high no \\<noteq> Null\n                 then repa no = (repa \\<propto> low) no\n                 else repa no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns) \\<and>\n                      repa (repa no) = repa no \\<and>\n                      (\\<forall>no1\\<in>set ns.\n                          ((repa \\<propto> high) no1 =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) no1 =\n                           (repa \\<propto> low) no) =\n                          (repa no = repa no1)));\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n     \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null \\<and>\n     high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "apply (erule_tac x=\n          \"hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null \\<and>\n     high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null;\n     repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n         (repa \\<propto> high)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<and>\n         high\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null \\<and>\n     high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null;\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n     \\<notin> set ns\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null \\<and>\n     high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null;\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n     \\<notin> set ns\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null \\<and>\n     high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null;\n     repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n         (repa \\<propto> high)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<and>\n         high\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     low (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null \\<and>\n     high (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n     Null;\n     repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n         (repa \\<propto> high)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<and>\n         high\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "apply (simp (no_asm_use) add: repNodes_eq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               (repa \\<propto> high) sn =\n                               (repa \\<propto> high)\n                                (hd (filter\n(\\<lambda>sn.\n    (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) sn = (repa \\<propto> low) no)\nns)) \\<and>\n                               (repa \\<propto> low) sn =\n                               (repa \\<propto> low)\n                                (hd (filter\n(\\<lambda>sn.\n    (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) sn = (repa \\<propto> low) no)\nns)))\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn.\n                               (repa \\<propto> high) sn =\n                               (repa \\<propto> high) no \\<and>\n                               (repa \\<propto> low) sn =\n                               (repa \\<propto> low) no)\n                           ns)", "apply (rule filter_hd_P_rep_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (repa \\<propto> high) x =\n                         (repa \\<propto> high) x \\<and>\n                         (repa \\<propto> low) x = (repa \\<propto> low) x\n 2. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b.\n                         (repa \\<propto> high) a =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) a =\n                         (repa \\<propto> low) no \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) a \\<and>\n                         (repa \\<propto> low) b =\n                         (repa \\<propto> low) a \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) b = (repa \\<propto> low) no\n 3. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>a.\n                           (repa \\<propto> high) a =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) a = (repa \\<propto> low) no)\n                       ns \\<noteq>\n                      []", "apply   (simp (no_asm_simp))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b.\n                         (repa \\<propto> high) a =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) a =\n                         (repa \\<propto> low) no \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) a \\<and>\n                         (repa \\<propto> low) b =\n                         (repa \\<propto> low) a \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) b = (repa \\<propto> low) no\n 2. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>a.\n                           (repa \\<propto> high) a =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) a = (repa \\<propto> low) no)\n                       ns \\<noteq>\n                      []", "apply  (simp (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     low (hd (filter\n               (\\<lambda>sn.\n                   (repa \\<propto> high) sn =\n                   (repa \\<propto> high) no \\<and>\n                   (repa \\<propto> low) sn = (repa \\<propto> low) no)\n               ns)) =\n     Null \\<and>\n     high\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) =\n     Null;\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>a.\n                           (repa \\<propto> high) a =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) a = (repa \\<propto> low) no)\n                       ns \\<noteq>\n                      []", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "assume hno_nNull:  \"high no \\<noteq> Null\""], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with share_case"], ["proof (chain)\npicking this:\n  (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n  high no = Null\n  high no \\<noteq> Null", "have repchildren_neq: \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  (repa \\<propto> low) no = (repa \\<propto> high) no \\<longrightarrow>\n  high no = Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by simp"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "from repNodes_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []", "have \n        \"repNodes_eq  (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) no low high repa\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n\ngoal (1 subgoal):\n 1. repNodes_eq\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) no low\n     high repa", "by (rule hd_filter_prop)"], ["proof (state)\nthis:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) no low\n   high repa\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "then"], ["proof (chain)\npicking this:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) no low\n   high repa", "have \"(repa \\<propto> low) (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) = \n              (repa \\<propto> low) no \\<and> \n            (repa \\<propto> high) (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]) = \n              (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) no low\n   high repa\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low)\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    (repa \\<propto> low) no \\<and>\n    (repa \\<propto> high)\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    (repa \\<propto> high) no", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with repchildren_neq"], ["proof (chain)\npicking this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> low)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  (repa \\<propto> high) no", "have \n        \"(repa \\<propto> low) (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa])\n        \\<noteq> (repa \\<propto> high) (hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa])\""], ["proof (prove)\nusing this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> low)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low)\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n           ns)) \\<noteq>\n    (repa \\<propto> high)\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))", "by simp"], ["proof (state)\nthis:\n  (repa \\<propto> low)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) \\<noteq>\n  (repa \\<propto> high)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null \\<Longrightarrow>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with while_inv hd_term_in_ns repNodes_not_empty"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n  (repa \\<propto> low)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) \\<noteq>\n  (repa \\<propto> high)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set ns.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         high no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> []\n  (repa \\<propto> low)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) \\<noteq>\n  (repa \\<propto> high)\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n\ngoal (1 subgoal):\n 1. repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "apply (simp add: isLeaf_pt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set ns.\n                repa no \\<noteq> Null \\<and>\n                (if (repa \\<propto> low) no =\n                    (repa \\<propto> high) no \\<and>\n                    high no \\<noteq> Null\n                 then repa no = (repa \\<propto> low) no\n                 else repa no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns) \\<and>\n                      repa (repa no) = repa no \\<and>\n                      (\\<forall>no1\\<in>set ns.\n                          ((repa \\<propto> high) no1 =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) no1 =\n                           (repa \\<propto> low) no) =\n                          (repa no = repa no1)));\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n     \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     (repa \\<propto> low)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "apply (erule_tac x=\n          \"hd [sn\\<leftarrow>ns . repNodes_eq sn no low high repa]\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     (repa \\<propto> low)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns));\n     repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n         (repa \\<propto> high)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<and>\n         high\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     (repa \\<propto> low)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns));\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n     \\<notin> set ns\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     (repa \\<propto> low)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns));\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n     \\<notin> set ns\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     (repa \\<propto> low)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns));\n     repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n         (repa \\<propto> high)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<and>\n         high\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n             \\<in> set ns;\n     filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns \\<noteq> [];\n     (repa \\<propto> low)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns));\n     repa\n      (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n         (repa \\<propto> high)\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<and>\n         high\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n                                low high repa)\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns)", "apply (simp (no_asm_use) add: repNodes_eq_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               (repa \\<propto> high) sn =\n                               (repa \\<propto> high)\n                                (hd (filter\n(\\<lambda>sn.\n    (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) sn = (repa \\<propto> low) no)\nns)) \\<and>\n                               (repa \\<propto> low) sn =\n                               (repa \\<propto> low)\n                                (hd (filter\n(\\<lambda>sn.\n    (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) sn = (repa \\<propto> low) no)\nns)))\n                           ns) =\n                      hd (filter\n                           (\\<lambda>sn.\n                               (repa \\<propto> high) sn =\n                               (repa \\<propto> high) no \\<and>\n                               (repa \\<propto> low) sn =\n                               (repa \\<propto> low) no)\n                           ns)", "apply (rule filter_hd_P_rep_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x.\n                         (repa \\<propto> high) x =\n                         (repa \\<propto> high) x \\<and>\n                         (repa \\<propto> low) x = (repa \\<propto> low) x\n 2. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b.\n                         (repa \\<propto> high) a =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) a =\n                         (repa \\<propto> low) no \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) a \\<and>\n                         (repa \\<propto> low) b =\n                         (repa \\<propto> low) a \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) b = (repa \\<propto> low) no\n 3. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>a.\n                           (repa \\<propto> high) a =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) a = (repa \\<propto> low) no)\n                       ns \\<noteq>\n                      []", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b.\n                         (repa \\<propto> high) a =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) a =\n                         (repa \\<propto> low) no \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) a \\<and>\n                         (repa \\<propto> low) b =\n                         (repa \\<propto> low) a \\<longrightarrow>\n                         (repa \\<propto> high) b =\n                         (repa \\<propto> high) no \\<and>\n                         (repa \\<propto> low) b = (repa \\<propto> low) no\n 2. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>a.\n                           (repa \\<propto> high) a =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) a = (repa \\<propto> low) no)\n                       ns \\<noteq>\n                      []", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter\n                  (\\<lambda>sn.\n                      (repa \\<propto> high) sn =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                  ns)\n             \\<in> set ns;\n     filter\n      (\\<lambda>sn.\n          (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n          (repa \\<propto> low) sn = (repa \\<propto> low) no)\n      ns \\<noteq>\n     [];\n     (repa \\<propto> low)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     (repa \\<propto> high)\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns));\n     repa\n      (hd (filter\n            (\\<lambda>sn.\n                (repa \\<propto> high) sn = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) sn = (repa \\<propto> low) no)\n            ns)) \\<noteq>\n     Null \\<and>\n     (if (repa \\<propto> low)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) =\n         (repa \\<propto> high)\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<and>\n         high\n          (hd (filter\n                (\\<lambda>sn.\n                    (repa \\<propto> high) sn =\n                    (repa \\<propto> high) no \\<and>\n                    (repa \\<propto> low) sn = (repa \\<propto> low) no)\n                ns)) \\<noteq>\n         Null\n      then repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           (repa \\<propto> low)\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns))\n      else repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn\n                     (hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repa)\n                           ns))\n                     low high repa)\n                ns) \\<and>\n           repa\n            (repa\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                    ns))) =\n           repa\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  ns)) \\<and>\n           (\\<forall>no1\\<in>set ns.\n               ((repa \\<propto> high) no1 =\n                (repa \\<propto> high)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) \\<and>\n                (repa \\<propto> low) no1 =\n                (repa \\<propto> low)\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns))) =\n               (repa\n                 (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                       ns)) =\n                repa no1)))\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>a.\n                           (repa \\<propto> high) a =\n                           (repa \\<propto> high) no \\<and>\n                           (repa \\<propto> low) a = (repa \\<propto> low) no)\n                       ns \\<noteq>\n                      []", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "with hd_term_in_ns"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns) \\<in> set ns\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n    \\<in> set ns \\<and>\n    repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)", "by simp"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n  \\<in> set ns \\<and>\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n  \\<in> set ns \\<and>\n  repa (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) ns)\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "(* invariant to invariant, THEN part  --  REDUCING*)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "fix var low high rep nodeslist repa \"next\" node prx sfx"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume ns: \"List nodeslist next (prx @ node # sfx)\""], ["proof (state)\nthis:\n  List nodeslist next (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume sfx: \"List (next node) next sfx\""], ["proof (state)\nthis:\n  List (next node) next sfx\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume node_not_Null: \"node \\<noteq> Null\""], ["proof (state)\nthis:\n  node \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume nodes_balanced_ordered: \"\\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> (1::nat)) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume all_nodes_same_var: \"\\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\""], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume rep_repa_nc: \"\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\""], ["proof (state)\nthis:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume while_inv: \"\\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set prx.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume not_Leaf: \"\\<not> isLeaf_pt node low high\""], ["proof (state)\nthis:\n  \\<not> isLeaf_pt node low high\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "assume repchildren_eq_nln: \"repa (low node) = repa (high node)\""], ["proof (state)\nthis:\n  repa (low node) = repa (high node)\n\ngoal (2 subgoals):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))\n 2. \\<And>var low high rep nodeslist repa next node prx sfx.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> isLeaf_pt node low high; repa (low node) = repa (high node);\n        List (next node) next sfx\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no =\n                             (repa(node := repa (high node))) no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             (repa(node := repa (high node))) no \\<noteq>\n                             Null \\<and>\n                             (if (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 low no \\<noteq> Null\n                              then (repa(node := repa (high node))) no =\n                                   (repa(node := repa (high node)) \\<propto>\n                                    low)\n                                    no\n                              else (repa(node := repa (high node))) no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (high node))))\n  (prx @ [node])) \\<and>\n                                   (repa(node := repa (high node)))\n                                    ((repa(node := repa (high node))) no) =\n                                   (repa(node := repa (high node)))\n                                    no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repa(node := repa (high node)) \\<propto> high) no1 =\n  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n  (repa(node := repa (high node)) \\<propto> low) no1 =\n  (repa(node := repa (high node)) \\<propto> low) no) =\n ((repa(node := repa (high node))) no =\n  (repa(node := repa (high node))) no1))))", "show \"(\\<forall>no. no \\<notin> set (prx @ [node]) \\<longrightarrow>\n                rep no = (repa(node := repa (high node))) no) \\<and>\n        (\\<forall>no\\<in>set (prx @ [node]).\n              (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n              (if (repa(node := repa (high node)) \\<propto> low) no =\n                  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                  low no \\<noteq> Null\n               then (repa(node := repa (high node))) no =\n                    (repa(node := repa (high node)) \\<propto> low) no\n               else (repa(node := repa (high node))) no =\n                    hd [sn\\<leftarrow>prx @ [node] .\n                        repNodes_eq sn no low high\n                         (repa(node := repa (high node)))] \\<and>\n                    (repa(node := repa (high node)))\n                     ((repa(node := repa (high node))) no) =\n                    (repa(node := repa (high node))) no \\<and>\n                    (\\<forall>no1\\<in>set (prx @ [node]).\n                        ((repa(node := repa (high node)) \\<propto> high) no1 =\n                         (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                         (repa(node := repa (high node)) \\<propto> low) no1 =\n                         (repa(node := repa (high node)) \\<propto> low) no) =\n                        ((repa(node := repa (high node))) no =\n                         (repa(node := repa (high node))) no1))))\"\n    (is \"?NodesUnmodif \\<and> ?NodesModif\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = (repa(node := repa (high node))) no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n        (if (repa(node := repa (high node)) \\<propto> low) no =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then (repa(node := repa (high node))) no =\n              (repa(node := repa (high node)) \\<propto> low) no\n         else (repa(node := repa (high node))) no =\n              hd (filter\n                   (\\<lambda>sn.\n                       repNodes_eq sn no low high\n                        (repa(node := repa (high node))))\n                   (prx @ [node])) \\<and>\n              (repa(node := repa (high node)))\n               ((repa(node := repa (high node))) no) =\n              (repa(node := repa (high node))) no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repa(node := repa (high node)) \\<propto> high) no1 =\n                   (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                   (repa(node := repa (high node)) \\<propto> low) no1 =\n                   (repa(node := repa (high node)) \\<propto> low) no) =\n                  ((repa(node := repa (high node))) no =\n                   (repa(node := repa (high node))) no1))))", "proof -\n    \\<comment> \\<open>This proof was originally conducted without the\n          substitution @{term \"repa (low node) = repa (high node)\"} preformed.\n          So don't be confused if we show everythin for @{text \"repa (low node)\"}.\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = (repa(node := repa (high node))) no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n        (if (repa(node := repa (high node)) \\<propto> low) no =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then (repa(node := repa (high node))) no =\n              (repa(node := repa (high node)) \\<propto> low) no\n         else (repa(node := repa (high node))) no =\n              hd (filter\n                   (\\<lambda>sn.\n                       repNodes_eq sn no low high\n                        (repa(node := repa (high node))))\n                   (prx @ [node])) \\<and>\n              (repa(node := repa (high node)))\n               ((repa(node := repa (high node))) no) =\n              (repa(node := repa (high node))) no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repa(node := repa (high node)) \\<propto> high) no1 =\n                   (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                   (repa(node := repa (high node)) \\<propto> low) no1 =\n                   (repa(node := repa (high node)) \\<propto> low) no) =\n                  ((repa(node := repa (high node))) no =\n                   (repa(node := repa (high node))) no1))))", "from rep_repa_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no", "have nodes_unmodif: ?NodesUnmodif"], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n\ngoal (1 subgoal):\n 1. \\<forall>no.\n       no \\<notin> set (prx @ [node]) \\<longrightarrow>\n       rep no = (repa(node := repa (high node))) no", "by auto"], ["proof (state)\nthis:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow>\n     rep no = (repa(node := repa (high node))) no\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = (repa(node := repa (high node))) no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n        (if (repa(node := repa (high node)) \\<propto> low) no =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then (repa(node := repa (high node))) no =\n              (repa(node := repa (high node)) \\<propto> low) no\n         else (repa(node := repa (high node))) no =\n              hd (filter\n                   (\\<lambda>sn.\n                       repNodes_eq sn no low high\n                        (repa(node := repa (high node))))\n                   (prx @ [node])) \\<and>\n              (repa(node := repa (high node)))\n               ((repa(node := repa (high node))) no) =\n              (repa(node := repa (high node))) no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repa(node := repa (high node)) \\<propto> high) no1 =\n                   (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                   (repa(node := repa (high node)) \\<propto> low) no1 =\n                   (repa(node := repa (high node)) \\<propto> low) no) =\n                  ((repa(node := repa (high node))) no =\n                   (repa(node := repa (high node))) no1))))", "hence rep_Sucna_nc:\n      \"(\\<forall>no. no \\<notin> set (prx @ [node]) \n      \\<longrightarrow> rep no = (repa(node := repa (low (node )))) no)\""], ["proof (prove)\nusing this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow>\n     rep no = (repa(node := repa (high node))) no\n\ngoal (1 subgoal):\n 1. \\<forall>no.\n       no \\<notin> set (prx @ [node]) \\<longrightarrow>\n       rep no = (repa(node := repa (low node))) no", "by auto"], ["proof (state)\nthis:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow>\n     rep no = (repa(node := repa (low node))) no\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = (repa(node := repa (high node))) no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n        (if (repa(node := repa (high node)) \\<propto> low) no =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then (repa(node := repa (high node))) no =\n              (repa(node := repa (high node)) \\<propto> low) no\n         else (repa(node := repa (high node))) no =\n              hd (filter\n                   (\\<lambda>sn.\n                       repNodes_eq sn no low high\n                        (repa(node := repa (high node))))\n                   (prx @ [node])) \\<and>\n              (repa(node := repa (high node)))\n               ((repa(node := repa (high node))) no) =\n              (repa(node := repa (high node))) no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repa(node := repa (high node)) \\<propto> high) no1 =\n                   (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                   (repa(node := repa (high node)) \\<propto> low) no1 =\n                   (repa(node := repa (high node)) \\<propto> low) no) =\n                  ((repa(node := repa (high node))) no =\n                   (repa(node := repa (high node))) no1))))", "have nodes_modif: ?NodesModif (is \"\\<forall>no\\<in>set (prx @ [node]). ?P no \\<and> ?Q no\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (prx @ [node]).\n       (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n       (if (repa(node := repa (high node)) \\<propto> low) no =\n           (repa(node := repa (high node)) \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then (repa(node := repa (high node))) no =\n             (repa(node := repa (high node)) \\<propto> low) no\n        else (repa(node := repa (high node))) no =\n             hd (filter\n                  (\\<lambda>sn.\n                      repNodes_eq sn no low high\n                       (repa(node := repa (high node))))\n                  (prx @ [node])) \\<and>\n             (repa(node := repa (high node)))\n              ((repa(node := repa (high node))) no) =\n             (repa(node := repa (high node))) no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repa(node := repa (high node)) \\<propto> high) no1 =\n                  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                  (repa(node := repa (high node)) \\<propto> low) no1 =\n                  (repa(node := repa (high node)) \\<propto> low) no) =\n                 ((repa(node := repa (high node))) no =\n                  (repa(node := repa (high node))) no1)))", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n       (if (repa(node := repa (high node)) \\<propto> low) no =\n           (repa(node := repa (high node)) \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then (repa(node := repa (high node))) no =\n             (repa(node := repa (high node)) \\<propto> low) no\n        else (repa(node := repa (high node))) no =\n             hd (filter\n                  (\\<lambda>sn.\n                      repNodes_eq sn no low high\n                       (repa(node := repa (high node))))\n                  (prx @ [node])) \\<and>\n             (repa(node := repa (high node)))\n              ((repa(node := repa (high node))) no) =\n             (repa(node := repa (high node))) no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repa(node := repa (high node)) \\<propto> high) no1 =\n                  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                  (repa(node := repa (high node)) \\<propto> low) no1 =\n                  (repa(node := repa (high node)) \\<propto> low) no) =\n                 ((repa(node := repa (high node))) no =\n                  (repa(node := repa (high node))) no1)))", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n       (if (repa(node := repa (high node)) \\<propto> low) no =\n           (repa(node := repa (high node)) \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then (repa(node := repa (high node))) no =\n             (repa(node := repa (high node)) \\<propto> low) no\n        else (repa(node := repa (high node))) no =\n             hd (filter\n                  (\\<lambda>sn.\n                      repNodes_eq sn no low high\n                       (repa(node := repa (high node))))\n                  (prx @ [node])) \\<and>\n             (repa(node := repa (high node)))\n              ((repa(node := repa (high node))) no) =\n             (repa(node := repa (high node))) no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repa(node := repa (high node)) \\<propto> high) no1 =\n                  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                  (repa(node := repa (high node)) \\<propto> low) no1 =\n                  (repa(node := repa (high node)) \\<propto> low) no) =\n                 ((repa(node := repa (high node))) no =\n                  (repa(node := repa (high node))) no1)))", "assume no_in_take_Sucna: \" no \\<in> set (prx @ [node])\""], ["proof (state)\nthis:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n       (if (repa(node := repa (high node)) \\<propto> low) no =\n           (repa(node := repa (high node)) \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then (repa(node := repa (high node))) no =\n             (repa(node := repa (high node)) \\<propto> low) no\n        else (repa(node := repa (high node))) no =\n             hd (filter\n                  (\\<lambda>sn.\n                      repNodes_eq sn no low high\n                       (repa(node := repa (high node))))\n                  (prx @ [node])) \\<and>\n             (repa(node := repa (high node)))\n              ((repa(node := repa (high node))) no) =\n             (repa(node := repa (high node))) no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repa(node := repa (high node)) \\<propto> high) no1 =\n                  (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                  (repa(node := repa (high node)) \\<propto> low) no1 =\n                  (repa(node := repa (high node)) \\<propto> low) no) =\n                 ((repa(node := repa (high node))) no =\n                  (repa(node := repa (high node))) no1)))", "show \"?P no \\<and> ?Q no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "proof (cases \"no = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "case False"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "note no_noteq_nln=this"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "with no_in_take_Sucna"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node", "have no_in_take_n: \"no \\<in> set prx\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. no \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no \\<in> set prx\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "with no_in_take_n while_inv"], ["proof (chain)\npicking this:\n  no \\<in> set prx\n  \\<forall>no\\<in>set prx.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  no \\<in> set prx", "obtain \n          repa_no_nNull: \" repa no \\<noteq> Null\" and\n          repa_cases: \"(if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null \n          then repa no = (repa \\<propto> low) no\n          else  repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \n          \\<and> repa (repa no) = repa no \\<and> \n          (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \n          \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no) \n          = (repa no = repa no1)))\""], ["proof (prove)\nusing this:\n  no \\<in> set prx\n  \\<forall>no\\<in>set prx.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit = 2]]"], ["proof (prove)\nusing this:\n  no \\<in> set prx\n  \\<forall>no\\<in>set prx.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repa no \\<noteq> Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from no_in_take_n"], ["proof (chain)\npicking this:\n  no \\<in> set prx", "have no_in_nodeslist: \"no \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from repa_no_nNull no_noteq_nln"], ["proof (chain)\npicking this:\n  repa no \\<noteq> Null\n  no \\<noteq> node", "have ext_repa_nNull: \"?P no\""], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. (repa(node := repa (high node))) no \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  (repa(node := repa (high node))) no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from no_in_nodeslist nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "obtain\n          nln_nNull: \"node \\<noteq> Null\" and\n          nln_balanced_children: \"(low node = Null) = (high node = Null)\" and\n          lnln_notin_nodeslist: \"low node \\<notin> set (prx @ node # sfx)\" and\n          hnln_notin_nodeslist: \"high node \\<notin> set (prx @ node # sfx)\" and\n          isLeaf_var_nln: \"isLeaf_pt node low high = (var node \\<le> 1)\" and\n          node_nNull_rap_nNull_nln: \"(low node \\<noteq> Null \n          \\<longrightarrow> rep (low node) \\<noteq> Null)\" and\n          nln_varrep_le_var: \"(rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>node \\<noteq> Null; (low node = Null) = (high node = Null);\n      low node \\<notin> set (prx @ node # sfx);\n      high node \\<notin> set (prx @ node # sfx);\n      isLeaf_pt node low high = (var node \\<le> 1);\n      low node \\<noteq> Null \\<longrightarrow> rep (low node) \\<noteq> Null;\n      (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (erule_tac x=\"node\" in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>node \\<noteq> Null;\n              (low node = Null) = (high node = Null);\n              low node \\<notin> set (prx @ node # sfx);\n              high node \\<notin> set (prx @ node # sfx);\n              isLeaf_pt node low high = (var node \\<le> 1);\n              low node \\<noteq> Null \\<longrightarrow>\n              rep (low node) \\<noteq> Null;\n              (rep \\<propto> low) node\n              \\<notin> set (prx @ node # sfx)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     no \\<in> set (prx @ node # sfx);\n     node \\<noteq> Null \\<and>\n     (low node = Null) = (high node = Null) \\<and>\n     low node \\<notin> set (prx @ node # sfx) \\<and>\n     high node \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt node low high = (var node \\<le> 1) \\<and>\n     (low node \\<noteq> Null \\<longrightarrow>\n      rep (low node) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>node \\<noteq> Null;\n              (low node = Null) = (high node = Null);\n              low node \\<notin> set (prx @ node # sfx);\n              high node \\<notin> set (prx @ node # sfx);\n              isLeaf_pt node low high = (var node \\<le> 1);\n              low node \\<noteq> Null \\<longrightarrow>\n              rep (low node) \\<noteq> Null;\n              (rep \\<propto> low) node\n              \\<notin> set (prx @ node # sfx)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     no \\<in> set (prx @ node # sfx);\n     node \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  node \\<noteq> Null\n  (low node = Null) = (high node = Null)\n  low node \\<notin> set (prx @ node # sfx)\n  high node \\<notin> set (prx @ node # sfx)\n  isLeaf_pt node low high = (var node \\<le> 1)\n  low node \\<noteq> Null \\<longrightarrow> rep (low node) \\<noteq> Null\n  (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from  no_in_nodeslist nodes_balanced_ordered no_in_take_Sucna"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  no \\<in> set (prx @ [node])", "obtain \n          no_nNull: \"no \\<noteq> Null\" and\n          balanced_children: \"(low no = Null) = (high no = Null)\" and\n          lno_notin_nodeslist: \"low no \\<notin> set (prx @ node # sfx)\" and\n          hno_notin_nodeslist: \"high no \\<notin> set (prx @ node # sfx)\" and\n          isLeaf_var_no: \"isLeaf_pt no low high = (var no \\<le> 1)\" and\n          node_nNull_rep_nNull: \"(low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null)\" and\n          varrep_le_var: \"(rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n      low no \\<notin> set (prx @ node # sfx);\n      high no \\<notin> set (prx @ node # sfx);\n      isLeaf_pt no low high = (var no \\<le> 1);\n      low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null;\n      (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n              low no \\<notin> set (prx @ node # sfx);\n              high no \\<notin> set (prx @ node # sfx);\n              isLeaf_pt no low high = (var no \\<le> 1);\n              low no \\<noteq> Null \\<longrightarrow>\n              rep (low no) \\<noteq> Null;\n              (rep \\<propto> low) no\n              \\<notin> set (prx @ node # sfx)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     no \\<in> set (prx @ node # sfx);\n     \\<forall>no\\<in>set (prx @ node # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n     no \\<in> set (prx @ [node])\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply (erule_tac x=no in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n              low no \\<notin> set (prx @ node # sfx);\n              high no \\<notin> set (prx @ node # sfx);\n              isLeaf_pt no low high = (var no \\<le> 1);\n              low no \\<noteq> Null \\<longrightarrow>\n              rep (low no) \\<noteq> Null;\n              (rep \\<propto> low) no\n              \\<notin> set (prx @ node # sfx)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     no \\<in> set (prx @ node # sfx); no \\<in> set (prx @ [node]);\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n              low no \\<notin> set (prx @ node # sfx);\n              high no \\<notin> set (prx @ node # sfx);\n              isLeaf_pt no low high = (var no \\<le> 1);\n              low no \\<noteq> Null \\<longrightarrow>\n              rep (low no) \\<noteq> Null;\n              (rep \\<propto> low) no\n              \\<notin> set (prx @ node # sfx)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     no \\<in> set (prx @ node # sfx); no \\<in> set (prx @ [node]);\n     no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  isLeaf_pt no low high = (var no \\<le> 1)\n  low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from lno_notin_nodeslist"], ["proof (chain)\npicking this:\n  low no \\<notin> set (prx @ node # sfx)", "have ext_rep_null_comp_low: \n          \"(repa (node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  low no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa \\<propto> low) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from hno_notin_nodeslist"], ["proof (chain)\npicking this:\n  high no \\<notin> set (prx @ node # sfx)", "have ext_rep_null_comp_high: \n          \"(repa (node := repa (low node)) \\<propto> high) no = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  high no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> high) no =\n    (repa \\<propto> high) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "have share_reduce_if: \"?Q no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "proof (cases \"(repa (node := repa (low node)) \\<propto> low) no = \n            (repa(node := repa (low node)) \\<propto> high) no \\<and> low no \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "case True"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "then"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null", "obtain \n            red_case: \"(repa (node := repa (low node)) \\<propto> low) no = \n            (repa(node := repa (low node)) \\<propto> high) no\" and\n            lno_nNull: \"low no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(repa(node := repa (low node)) \\<propto> low) no =\n              (repa(node := repa (low node)) \\<propto> high) no;\n      low no \\<noteq> Null\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no\n  low no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from lno_nNull balanced_children"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  (low no = Null) = (high no = Null)", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from True ext_rep_null_comp_low ext_rep_null_comp_high"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no", "have repchildren_eq_no: \"(repa \\<propto> low) no = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no = (repa \\<propto> high) no", "by simp"], ["proof (state)\nthis:\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with repa_cases lno_nNull"], ["proof (chain)\npicking this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  low no \\<noteq> Null\n  (repa \\<propto> low) no = (repa \\<propto> high) no", "have \"repa no = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  low no \\<noteq> Null\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repa no = (repa \\<propto> low) no", "by auto"], ["proof (state)\nthis:\n  repa no = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with ext_rep_null_comp_low no_noteq_nln"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  no \\<noteq> node\n  repa no = (repa \\<propto> low) no", "have \"(repa(node := repa (low node))) no = \n            (repa (node := repa (low node)) \\<propto> low) no\""], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  no \\<noteq> node\n  repa no = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node)) \\<propto> low) no", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no =\n  (repa(node := repa (low node)) \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with True repchildren_eq_nln"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  repa (low node) = repa (high node)\n  (repa(node := repa (low node))) no =\n  (repa(node := repa (low node)) \\<propto> low) no", "show ?thesis"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  repa (low node) = repa (high node)\n  (repa(node := repa (low node))) no =\n  (repa(node := repa (low node)) \\<propto> low) no\n\ngoal (1 subgoal):\n 1. if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "by auto"], ["proof (state)\nthis:\n  if (repa(node := repa (high node)) \\<propto> low) no =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (high node))) no =\n       (repa(node := repa (high node)) \\<propto> low) no\n  else (repa(node := repa (high node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (high node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (high node)))\n        ((repa(node := repa (high node))) no) =\n       (repa(node := repa (high node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (high node)) \\<propto> high) no1 =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            (repa(node := repa (high node)) \\<propto> low) no1 =\n            (repa(node := repa (high node)) \\<propto> low) no) =\n           ((repa(node := repa (high node))) no =\n            (repa(node := repa (high node))) no1))\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "assume share_case_ext: \n            \" \\<not> ((repa(node := repa (low node)) \\<propto> low) no = \n            (repa(node := repa (low node)) \\<propto> high) no \\<and> low no \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from not_Leaf isLeaf_var_nln"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt node low high\n  isLeaf_pt node low high = (var node \\<le> 1)", "have \"1 < var node\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt node low high\n  isLeaf_pt node low high = (var node \\<le> 1)\n\ngoal (1 subgoal):\n 1. 1 < var node", "by simp"], ["proof (state)\nthis:\n  1 < var node\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with all_nodes_same_var"], ["proof (chain)\npicking this:\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n  1 < var node", "have all_nodes_nl_Suc0_l_var: \"\\<forall>x \\<in> set (prx @ node # sfx). 1 < var x\""], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n  1 < var node\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n  1 < var node\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "have all_nodes_nl_noLeaf: \n            \"\\<forall>x \\<in> set (prx @ node # sfx). \\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (prx @ node # sfx) \\<and>\n                high no \\<notin> set (prx @ node # sfx) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 rep (low no) \\<noteq> Null) \\<and>\n                (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n     \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (prx @ node # sfx).\n                         \\<not> isLeaf_pt x low high", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                   no \\<noteq> Null \\<and>\n                   (low no = Null) = (high no = Null) \\<and>\n                   low no \\<notin> set (prx @ node # sfx) \\<and>\n                   high no \\<notin> set (prx @ node # sfx) \\<and>\n                   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                   (low no \\<noteq> Null \\<longrightarrow>\n                    rep (low no) \\<noteq> Null) \\<and>\n                   (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x;\n        x \\<in> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt x low high", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>set (prx @ node # sfx). 1 < var x;\n        x \\<in> set (prx @ node # sfx);\n        x \\<noteq> Null \\<and>\n        (low x = Null) = (high x = Null) \\<and>\n        low x \\<notin> set (prx @ node # sfx) \\<and>\n        high x \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n        (low x \\<noteq> Null \\<longrightarrow>\n         rep (low x) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt x low high", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (prx @ node # sfx);\n        x \\<noteq> Null \\<and>\n        (low x = Null) = (high x = Null) \\<and>\n        low x \\<notin> set (prx @ node # sfx) \\<and>\n        high x \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n        (low x \\<noteq> Null \\<longrightarrow>\n         rep (low x) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) x \\<notin> set (prx @ node # sfx);\n        1 < var x\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt x low high", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "have all_nodes_nl_balanced: \n            \"\\<forall>x \\<in> set (prx @ node # sfx). (low x = Null) = (high x = Null)\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). (low x = Null) = (high x = Null)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (prx @ node # sfx).\n       no \\<noteq> Null \\<and>\n       (low no = Null) = (high no = Null) \\<and>\n       low no \\<notin> set (prx @ node # sfx) \\<and>\n       high no \\<notin> set (prx @ node # sfx) \\<and>\n       isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n       (low no \\<noteq> Null \\<longrightarrow>\n        rep (low no) \\<noteq> Null) \\<and>\n       (rep \\<propto> low) no\n       \\<notin> set (prx @ node # sfx) \\<Longrightarrow>\n    \\<forall>x\\<in>set (prx @ node # sfx). (low x = Null) = (high x = Null)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                   no \\<noteq> Null \\<and>\n                   (low no = Null) = (high no = Null) \\<and>\n                   low no \\<notin> set (prx @ node # sfx) \\<and>\n                   high no \\<notin> set (prx @ node # sfx) \\<and>\n                   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                   (low no \\<noteq> Null \\<longrightarrow>\n                    rep (low no) \\<noteq> Null) \\<and>\n                   (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        x \\<in> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (low x = Null) = (high x = Null)", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (prx @ node # sfx);\n        x \\<noteq> Null \\<and>\n        (low x = Null) = (high x = Null) \\<and>\n        low x \\<notin> set (prx @ node # sfx) \\<and>\n        high x \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n        (low x \\<noteq> Null \\<longrightarrow>\n         rep (low x) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> (low x = Null) = (high x = Null)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). (low x = Null) = (high x = Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from all_nodes_nl_Suc0_l_var no_in_nodeslist"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n  no \\<in> set (prx @ node # sfx)", "have Suc0_l_var_no: \"1 < var no\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. 1 < var no", "by auto"], ["proof (state)\nthis:\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with isLeaf_var_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high = (var no \\<le> 1)\n  1 < var no", "have no_nLeaf: \" \\<not> isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high = (var no \\<le> 1)\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high", "by simp"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with balanced_children"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high", "have lno_nNull: \"low no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. low no \\<noteq> Null", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with balanced_children"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with share_case_ext ext_rep_null_comp_low ext_rep_null_comp_high lno_nNull"], ["proof (chain)\npicking this:\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n  low no \\<noteq> Null\n  high no \\<noteq> Null", "have repchildren_neq_no: \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with repa_cases"], ["proof (chain)\npicking this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "have share_case_inv: \n          \"repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \\<and> \n            repa (repa no) = repa no \\<and> \n            (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and> \n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1))\""], ["proof (prove)\nusing this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repa no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set prx.\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1))", "by auto"], ["proof (state)\nthis:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "then"], ["proof (chain)\npicking this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))", "have repa_no: \"repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)", "by simp"], ["proof (state)\nthis:\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from Suc0_l_var_no"], ["proof (chain)\npicking this:\n  1 < var no", "have \"\\<forall>x \\<in> set (prx @ node # sfx). 1 < var no\""], ["proof (prove)\nusing this:\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). 1 < var no", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from no_in_take_n"], ["proof (chain)\npicking this:\n  no \\<in> set prx", "have \"[sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set prx \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set prx \\<Longrightarrow> ?x1 \\<in> set prx\n 2. no \\<in> set prx \\<Longrightarrow> repNodes_eq ?x1 no low high repa", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "have \"repNodes_eq \n            (hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa]) no low high repa\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. repNodes_eq\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)) no low\n     high repa", "by (rule hd_filter_prop)"], ["proof (state)\nthis:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)) no low\n   high repa\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with repa_no"], ["proof (chain)\npicking this:\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)) no low\n   high repa", "have rep_children_eq_no_repa_no: \n            \"(repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and> \n             (repa \\<propto> high) (repa no) = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)) no low\n   high repa\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and>\n    (repa \\<propto> high) (repa no) = (repa \\<propto> high) no", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high) (repa no) = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from lno_notin_nodeslist rep_repa_nc"], ["proof (chain)\npicking this:\n  low no \\<notin> set (prx @ node # sfx)\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no", "have rep_repa_nc_low_no: \"rep (low no) = repa (low no)\""], ["proof (prove)\nusing this:\n  low no \\<notin> set (prx @ node # sfx)\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n\ngoal (1 subgoal):\n 1. rep (low no) = repa (low no)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<notin> set (prx @ node # sfx);\n     \\<forall>no.\n        no \\<notin> set prx \\<longrightarrow> rep no = repa no\\<rbrakk>\n    \\<Longrightarrow> rep (low no) = repa (low no)", "apply (erule_tac x=\"low no\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>low no \\<notin> set (prx @ node # sfx);\n     low no \\<notin> set prx \\<longrightarrow>\n     rep (low no) = repa (low no)\\<rbrakk>\n    \\<Longrightarrow> rep (low no) = repa (low no)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  rep (low no) = repa (low no)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "have \"\\<forall>x \\<in> set (prx @ [node]). \n            repNodes_eq x no low high (repa(node := repa (low node))) = \n            repNodes_eq x no low high repa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high (repa(node := repa (low node))) =\n       repNodes_eq x no low high repa", "proof (rule ballI, unfold repNodes_eq_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) x =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) x =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) x = (repa \\<propto> low) no)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) x =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) x =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) x = (repa \\<propto> low) no)", "assume x_in_take_Sucn: \" x \\<in> set (prx @ [node])\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) x =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) x =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) x = (repa \\<propto> low) no)", "hence x_in_nodeslist: \"x \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. x \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) x =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) x =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) x = (repa \\<propto> low) no)", "with all_nodes_nl_noLeaf nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  x \\<in> set (prx @ node # sfx)", "have children_nNull_x: \"low x \\<noteq> Null \\<and> high x \\<noteq> Null\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. low x \\<noteq> Null \\<and> high x \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>set (prx @ node # sfx).\n                \\<not> isLeaf_pt x low high;\n     \\<forall>no\\<in>set (prx @ node # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n     x \\<in> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> low x \\<noteq> Null \\<and> high x \\<noteq> Null", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (prx @ node # sfx) \\<and>\n                high no \\<notin> set (prx @ node # sfx) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 rep (low no) \\<noteq> Null) \\<and>\n                (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n     x \\<in> set (prx @ node # sfx); \\<not> isLeaf_pt x low high\\<rbrakk>\n    \\<Longrightarrow> low x \\<noteq> Null \\<and> high x \\<noteq> Null", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set (prx @ node # sfx); \\<not> isLeaf_pt x low high;\n     x \\<noteq> Null \\<and>\n     (low x = Null) = (high x = Null) \\<and>\n     low x \\<notin> set (prx @ node # sfx) \\<and>\n     high x \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n     (low x \\<noteq> Null \\<longrightarrow>\n      rep (low x) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> low x \\<noteq> Null \\<and> high x \\<noteq> Null", "apply (auto simp add: isLeaf_pt_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low x \\<noteq> Null \\<and> high x \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) x =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) x =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) x = (repa \\<propto> low) no)", "from x_in_nodeslist nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  x \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "have \"low x \\<notin> set (prx @ node # sfx) \\<and> high x \\<notin> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  x \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. low x \\<notin> set (prx @ node # sfx) \\<and>\n    high x \\<notin> set (prx @ node # sfx)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set (prx @ node # sfx);\n     \\<forall>no\\<in>set (prx @ node # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> low x \\<notin> set (prx @ node # sfx) \\<and>\n                      high x \\<notin> set (prx @ node # sfx)", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> set (prx @ node # sfx);\n     x \\<noteq> Null \\<and>\n     (low x = Null) = (high x = Null) \\<and>\n     low x \\<notin> set (prx @ node # sfx) \\<and>\n     high x \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n     (low x \\<noteq> Null \\<longrightarrow>\n      rep (low x) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> low x \\<notin> set (prx @ node # sfx) \\<and>\n                      high x \\<notin> set (prx @ node # sfx)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) x =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) x =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) x = (repa \\<propto> low) no)", "with lno_notin_nodeslist hno_notin_nodeslist \n              children_nNull_x lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low x \\<noteq> Null \\<and> high x \\<noteq> Null\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)", "show \"((repa(node := repa (low node)) \\<propto> high) x = \n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) x = \n              (repa(node := repa (low node)) \\<propto> low) no) =\n              ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and> \n              (repa \\<propto> low) x = (repa \\<propto> low) no)\""], ["proof (prove)\nusing this:\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low x \\<noteq> Null \\<and> high x \\<noteq> Null\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. ((repa(node := repa (low node)) \\<propto> high) x =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) x =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n     (repa \\<propto> low) x = (repa \\<propto> low) no)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  ((repa(node := repa (low node)) \\<propto> high) x =\n   (repa(node := repa (low node)) \\<propto> high) no \\<and>\n   (repa(node := repa (low node)) \\<propto> low) x =\n   (repa(node := repa (low node)) \\<propto> low) no) =\n  ((repa \\<propto> high) x = (repa \\<propto> high) no \\<and>\n   (repa \\<propto> low) x = (repa \\<propto> low) no)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high (repa(node := repa (low node))) =\n     repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high (repa(node := repa (low node))) =\n     repNodes_eq x no low high repa", "have filter_extrep_rep: \n            \"[sn\\<leftarrow>(prx @ [node]). repNodes_eq sn no low high \n                                   (repa(node := repa (low node)))] = \n            [sn\\<leftarrow>(prx @ [node]) . repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high (repa(node := repa (low node))) =\n     repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>sn.\n         repNodes_eq sn no low high (repa(node := repa (low node))))\n     (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node])", "by (rule P_eq_list_filter)"], ["proof (state)\nthis:\n  filter\n   (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (low node))))\n   (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from no_in_take_n"], ["proof (chain)\npicking this:\n  no \\<in> set prx", "have filter_n_notempty: \"[sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. repNodes_eq no no low high repa", "apply (simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "have \"hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] = \n            hd [sn\\<leftarrow>prx@[node]. repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with no_noteq_nln filter_extrep_rep repa_no"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  filter\n   (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (low node))))\n   (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node])\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))", "have ext_repa_no: \"(repa(node:= repa (low node))) no = \n            hd [sn\\<leftarrow>prx@[node] . repNodes_eq sn no low high \n            (repa(node := repa (low node)))]\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  filter\n   (\\<lambda>sn. repNodes_eq sn no low high (repa(node := repa (low node))))\n   (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node])\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn no low high (repa(node := repa (low node))))\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (low node))))\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "have \"(repa(node := repa (low node))) (repa no) = repa no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) (repa no) = repa no", "proof (cases \"repa no =  node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "case True"], ["proof (state)\nthis:\n  repa no = node\n\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "note rno_nln=this"], ["proof (state)\nthis:\n  repa no = node\n\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "from rep_repa_nc_low_no rep_children_eq_no_repa_no lno_nNull \n              node_nNull_rep_nNull"], ["proof (chain)\npicking this:\n  rep (low no) = repa (low no)\n  (repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high) (repa no) = (repa \\<propto> high) no\n  low no \\<noteq> Null\n  low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null", "have low_rep_no_nNull: \"low (repa no) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  rep (low no) = repa (low no)\n  (repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high) (repa no) = (repa \\<propto> high) no\n  low no \\<noteq> Null\n  low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low (repa no) \\<noteq> Null", "apply (simp add: null_comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>rep (low no) = repa (low no);\n     (if low (repa no) = Null then Null else (repa \\<circ> low) (repa no)) =\n     repa (low no) \\<and>\n     (if high (repa no) = Null then Null\n      else (repa \\<circ> high) (repa no)) =\n     (if high no = Null then Null else (repa \\<circ> high) no);\n     low no \\<noteq> Null; repa (low no) \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> low (repa no) \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low (repa no) \\<noteq> Null\n\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "with nodes_balanced_ordered rno_nln"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  repa no = node\n  low (repa no) \\<noteq> Null", "have high_rap_no_nNull: \"high (repa no) \\<noteq> Null\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  repa no = node\n  low (repa no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high (repa no) \\<noteq> Null", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (prx @ node # sfx) \\<and>\n                high no \\<notin> set (prx @ node # sfx) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 rep (low no) \\<noteq> Null) \\<and>\n                (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n     repa no = node; low (repa no) \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> high (repa no) \\<noteq> Null", "apply (drule_tac x=\"repa no\" in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>repa no = node; low (repa no) \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repa no \\<in> set (prx @ node # sfx)\n 2. \\<lbrakk>repa no = node; low (repa no) \\<noteq> Null;\n     repa no \\<noteq> Null \\<and>\n     (low (repa no) = Null) = (high (repa no) = Null) \\<and>\n     low (repa no) \\<notin> set (prx @ node # sfx) \\<and>\n     high (repa no) \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt (repa no) low high = (var (repa no) \\<le> 1) \\<and>\n     (low (repa no) \\<noteq> Null \\<longrightarrow>\n      rep (low (repa no)) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) (repa no) \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> high (repa no) \\<noteq> Null", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  high (repa no) \\<noteq> Null\n\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "with low_rep_no_nNull rno_nln rep_children_eq_no_repa_no"], ["proof (chain)\npicking this:\n  low (repa no) \\<noteq> Null\n  repa no = node\n  (repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high) (repa no) = (repa \\<propto> high) no\n  high (repa no) \\<noteq> Null", "have \"repa (low node) = (repa \\<propto> low) no \\<and> \n              repa (high node) = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low (repa no) \\<noteq> Null\n  repa no = node\n  (repa \\<propto> low) (repa no) = (repa \\<propto> low) no \\<and>\n  (repa \\<propto> high) (repa no) = (repa \\<propto> high) no\n  high (repa no) \\<noteq> Null\n\ngoal (1 subgoal):\n 1. repa (low node) = (repa \\<propto> low) no \\<and>\n    repa (high node) = (repa \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repa (low node) = (repa \\<propto> low) no \\<and>\n  repa (high node) = (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "with repchildren_eq_nln"], ["proof (chain)\npicking this:\n  repa (low node) = repa (high node)\n  repa (low node) = (repa \\<propto> low) no \\<and>\n  repa (high node) = (repa \\<propto> high) no", "have \" (repa \\<propto> low) no = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  repa (low node) = repa (high node)\n  repa (low node) = (repa \\<propto> low) no \\<and>\n  repa (high node) = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no = (repa \\<propto> high) no", "by simp"], ["proof (state)\nthis:\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. repa no = node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no\n 2. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "with repchildren_neq_no"], ["proof (chain)\npicking this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> low) no = (repa \\<propto> high) no", "show ?thesis"], ["proof (prove)\nusing this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) (repa no) = repa no", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) (repa no) = repa no\n\ngoal (1 subgoal):\n 1. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "assume rno_not_nln: \"repa no \\<noteq> node\""], ["proof (state)\nthis:\n  repa no \\<noteq> node\n\ngoal (1 subgoal):\n 1. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "from share_case_inv"], ["proof (chain)\npicking this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))", "have \"repa (repa no) = repa no\""], ["proof (prove)\nusing this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. repa (repa no) = repa no", "by auto"], ["proof (state)\nthis:\n  repa (repa no) = repa no\n\ngoal (1 subgoal):\n 1. repa no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (low node))) (repa no) = repa no", "with rno_not_nln"], ["proof (chain)\npicking this:\n  repa no \\<noteq> node\n  repa (repa no) = repa no", "show ?thesis"], ["proof (prove)\nusing this:\n  repa no \\<noteq> node\n  repa (repa no) = repa no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) (repa no) = repa no", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) (repa no) = repa no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) (repa no) = repa no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "with no_noteq_nln"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  (repa(node := repa (low node))) (repa no) = repa no", "have ext_repa_ext_repa: \n            \"(repa(node := repa (low node))) \n            ((repa(node := repa (low node))) no) \n            = (repa(node := repa (low node))) no\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  (repa(node := repa (low node))) (repa no) = repa no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n    (repa(node := repa (low node))) no", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n  (repa(node := repa (low node))) no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "have \"(\\<forall>no1\\<in>set (prx@[node]).\n            ((repa(node := repa (low node)) \\<propto> high) no1 = \n            (repa(node  := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node  := repa (low node)) \\<propto> low) no1 = \n            (repa(node  := repa (low node)) \\<propto> low) no) =\n            ((repa(node  := repa (low node))) no = \n            (repa(node  := repa (low node))) no1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set (prx @ [node]).\n       ((repa(node := repa (low node)) \\<propto> high) no1 =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) no1 =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa(node := repa (low node))) no =\n        (repa(node := repa (low node))) no1)", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) no1 =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) no1 =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa(node := repa (low node))) no =\n        (repa(node := repa (low node))) no1)", "fix no1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) no1 =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) no1 =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa(node := repa (low node))) no =\n        (repa(node := repa (low node))) no1)", "assume no1_in_take_Sucn: \" no1 \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) no1 =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) no1 =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa(node := repa (low node))) no =\n        (repa(node := repa (low node))) no1)", "hence no1_in_nodeslist: \"no1 \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repa(node := repa (low node)) \\<propto> high) no1 =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        (repa(node := repa (low node)) \\<propto> low) no1 =\n        (repa(node := repa (low node)) \\<propto> low) no) =\n       ((repa(node := repa (low node))) no =\n        (repa(node := repa (low node))) no1)", "show \"((repa(node := repa (low node)) \\<propto> high) no1 = \n                 (repa(node := repa (low node)) \\<propto> high) no \\<and>\n                 (repa(node := repa (low node)) \\<propto> low) no1 = \n                 (repa(node := repa (low node)) \\<propto> low) no) =\n                 ((repa(node := repa (low node))) no = \n                  (repa(node := repa (low node))) no1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "proof (cases \"no1 = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "case True"], ["proof (state)\nthis:\n  no1 = node\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "proof (rule, elim conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "assume ext_repa_no_no1: \n                  \"(repa(node := repa (low node))) no = \n                    (repa(node := repa (low node))) no1\""], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with True no_noteq_nln"], ["proof (chain)\npicking this:\n  no1 = node\n  no \\<noteq> node\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1", "have repa_no_repa_low_nln: \"repa no = repa (low node)\""], ["proof (prove)\nusing this:\n  no1 = node\n  no \\<noteq> node\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1\n\ngoal (1 subgoal):\n 1. repa no = repa (low node)", "by simp"], ["proof (state)\nthis:\n  repa no = repa (low node)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from filter_n_notempty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "have repa_no_in_take_n:  \n                  \"hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \n                    \\<in> set prx \""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n    \\<in> set prx", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n    \\<in> set prx", "apply (rule hd_filter_in_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  \\<in> set prx\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with repa_no"], ["proof (chain)\npicking this:\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  \\<in> set prx", "have repa_no_in_nodeslist: \"repa no \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n  \\<in> set prx\n\ngoal (1 subgoal):\n 1. repa no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  repa no \\<in> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from lnln_notin_nodeslist rep_repa_nc"], ["proof (chain)\npicking this:\n  low node \\<notin> set (prx @ node # sfx)\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no", "have rep_repa_low_nln: \"rep (low node) = repa (low node)\""], ["proof (prove)\nusing this:\n  low node \\<notin> set (prx @ node # sfx)\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n\ngoal (1 subgoal):\n 1. rep (low node) = repa (low node)", "by auto"], ["proof (state)\nthis:\n  rep (low node) = repa (low node)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from all_nodes_nl_noLeaf nln_balanced_children"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  (low node = Null) = (high node = Null)", "have \"low node \\<noteq> Null\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  (low node = Null) = (high node = Null)\n\ngoal (1 subgoal):\n 1. low node \\<noteq> Null", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  low node \\<noteq> Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with rep_repa_low_nln lnln_notin_nodeslist lno_nNull \n                  nln_varrep_le_var"], ["proof (chain)\npicking this:\n  rep (low node) = repa (low node)\n  low node \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null\n  (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\n  low node \\<noteq> Null", "have \"repa (low node) \\<notin> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  rep (low node) = repa (low node)\n  low node \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null\n  (rep \\<propto> low) node \\<notin> set (prx @ node # sfx)\n  low node \\<noteq> Null\n\ngoal (1 subgoal):\n 1. repa (low node) \\<notin> set (prx @ node # sfx)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repa (low node) \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with repa_no_repa_low_nln repa_no_in_nodeslist"], ["proof (chain)\npicking this:\n  repa no = repa (low node)\n  repa no \\<in> set (prx @ node # sfx)\n  repa (low node) \\<notin> set (prx @ node # sfx)", "show \"(repa(node := repa (low node)) \\<propto> high) no1 = \n                  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n                  (repa(node := repa (low node)) \\<propto> low) no1 = \n                  (repa(node := repa (low node)) \\<propto> low) no\""], ["proof (prove)\nusing this:\n  repa no = repa (low node)\n  repa no \\<in> set (prx @ node # sfx)\n  repa (low node) \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "assume no_no1_high: \n                  \"(repa(node := repa (low node)) \\<propto> high) no1 = \n                  (repa(node := repa (low node)) \\<propto> high) no\""], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "assume no_no1_low: \n                  \"(repa(node := repa (low node)) \\<propto> low) no1 = \n                  (repa(node := repa (low node)) \\<propto> low) no\""], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "from True repchildren_eq_nln"], ["proof (chain)\npicking this:\n  no1 = node\n  repa (low node) = repa (high node)", "have repachildren_eq_no1: \" repa (low no1) = repa (high no1)\""], ["proof (prove)\nusing this:\n  no1 = node\n  repa (low node) = repa (high node)\n\ngoal (1 subgoal):\n 1. repa (low no1) = repa (high no1)", "by simp"], ["proof (state)\nthis:\n  repa (low no1) = repa (high no1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "from not_Leaf True nln_balanced_children"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt node low high\n  no1 = node\n  (low node = Null) = (high node = Null)", "have children_nNull_no1: \"(low no1) \\<noteq> Null \\<and> high no1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt node low high\n  no1 = node\n  (low node = Null) = (high node = Null)\n\ngoal (1 subgoal):\n 1. low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "with repachildren_eq_no1"], ["proof (chain)\npicking this:\n  repa (low no1) = repa (high no1)\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null", "have repchildren_eq_no1: \"(repa \\<propto> low) no1 = (repa \\<propto> high) no1\""], ["proof (prove)\nusing this:\n  repa (low no1) = repa (high no1)\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no1 = (repa \\<propto> high) no1", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no1 = (repa \\<propto> high) no1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "from no_no1_low children_nNull_no1 lno_nNull \n                  lnln_notin_nodeslist lno_notin_nodeslist True"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  low no \\<noteq> Null\n  low node \\<notin> set (prx @ node # sfx)\n  low no \\<notin> set (prx @ node # sfx)\n  no1 = node", "have rep_low_eq_no_no1: \"(repa \\<propto> low) no1 = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  low no \\<noteq> Null\n  low node \\<notin> set (prx @ node # sfx)\n  low no \\<notin> set (prx @ node # sfx)\n  no1 = node\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no1 = (repa \\<propto> low) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "from no_no1_high children_nNull_no1 hno_nNull \n                  hnln_notin_nodeslist hno_notin_nodeslist True"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  high no \\<noteq> Null\n  high node \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  no1 = node", "have rep_high_eq_no_no1: \"(repa \\<propto> high) no1 = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  high no \\<noteq> Null\n  high node \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  no1 = node\n\ngoal (1 subgoal):\n 1. (repa \\<propto> high) no1 = (repa \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "with rep_low_eq_no_no1 repchildren_eq_no1"], ["proof (chain)\npicking this:\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n  (repa \\<propto> low) no1 = (repa \\<propto> high) no1\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no", "have \"(repa \\<propto> low) no = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n  (repa \\<propto> low) no1 = (repa \\<propto> high) no1\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no = (repa \\<propto> high) no", "by simp"], ["proof (state)\nthis:\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1", "with repchildren_neq_no"], ["proof (chain)\npicking this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> low) no = (repa \\<propto> high) no", "show \"(repa(node := repa (low node))) no = \n                  (repa(node := repa (low node))) no1\""], ["proof (prove)\nusing this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repa(node := repa (low node)) \\<propto> high) no1 =\n   (repa(node := repa (low node)) \\<propto> high) no \\<and>\n   (repa(node := repa (low node)) \\<propto> low) no1 =\n   (repa(node := repa (low node)) \\<propto> low) no) =\n  ((repa(node := repa (low node))) no = (repa(node := repa (low node))) no1)\n\ngoal (1 subgoal):\n 1. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "assume no1_neq_nln: \"no1 \\<noteq> node\""], ["proof (state)\nthis:\n  no1 \\<noteq> node\n\ngoal (1 subgoal):\n 1. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "from no1_in_nodeslist nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "have children_notin_nl_no1: \n              \"low no1 \\<notin> set (prx @ node # sfx) \\<and> high no1 \\<notin> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ node # sfx)\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. low no1 \\<notin> set (prx @ node # sfx) \\<and>\n    high no1 \\<notin> set (prx @ node # sfx)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no1 \\<in> set (prx @ node # sfx);\n     \\<forall>no\\<in>set (prx @ node # sfx).\n        no \\<noteq> Null \\<and>\n        (low no = Null) = (high no = Null) \\<and>\n        low no \\<notin> set (prx @ node # sfx) \\<and>\n        high no \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n        (low no \\<noteq> Null \\<longrightarrow>\n         rep (low no) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> low no1 \\<notin> set (prx @ node # sfx) \\<and>\n                      high no1 \\<notin> set (prx @ node # sfx)", "apply (drule_tac x=no1 in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no1 \\<in> set (prx @ node # sfx);\n     no1 \\<noteq> Null \\<and>\n     (low no1 = Null) = (high no1 = Null) \\<and>\n     low no1 \\<notin> set (prx @ node # sfx) \\<and>\n     high no1 \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n     (low no1 \\<noteq> Null \\<longrightarrow>\n      rep (low no1) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> low no1 \\<notin> set (prx @ node # sfx) \\<and>\n                      high no1 \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "from no1_neq_nln no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  no1 \\<noteq> node\n  no1 \\<in> set (prx @ [node])", "have no1_in_take_n: \"no1 \\<in> set prx\""], ["proof (prove)\nusing this:\n  no1 \\<noteq> node\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set prx\n\ngoal (1 subgoal):\n 1. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "from no1_in_nodeslist all_nodes_nl_noLeaf all_nodes_nl_balanced"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  \\<forall>x\\<in>set (prx @ node # sfx). (low x = Null) = (high x = Null)", "have children_nNull_no1: \"(low no1) \\<noteq> Null \\<and> high no1 \\<noteq> Null\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  \\<forall>x\\<in>set (prx @ node # sfx). (low x = Null) = (high x = Null)\n\ngoal (1 subgoal):\n 1. low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null", "by  (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n\ngoal (1 subgoal):\n 1. no1 \\<noteq> node \\<Longrightarrow>\n    ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repa(node := repa (low node)) \\<propto> high) no1 =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no) =\n    ((repa(node := repa (low node))) no =\n     (repa(node := repa (low node))) no1)", "proof (rule, elim conjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "assume ext_repa_high_no1_no: \n                \"(repa(node := repa (low node)) \\<propto> high) no1 \n                  = (repa(node := repa (low node)) \\<propto> high) no\""], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "assume ext_repa_low_no1_no: \n                  \"(repa(node := repa (low node)) \\<propto> low) no1 \n                  = (repa(node := repa (low node)) \\<propto> low) no\""], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from children_nNull_no1 hno_nNull ext_repa_high_no1_no \n                  children_notin_nl_no1 \n                  hno_notin_nodeslist"], ["proof (chain)\npicking this:\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  high no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)", "have repa_high_no1_no: \"(repa \\<propto> high) no1 = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  high no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa \\<propto> high) no1 = (repa \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from children_nNull_no1 lno_nNull ext_repa_low_no1_no \n                  children_notin_nl_no1 lno_notin_nodeslist"], ["proof (chain)\npicking this:\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  low no \\<notin> set (prx @ node # sfx)", "have repa_low_no1_no: \"(repa \\<propto> low) no1 = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  low no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no1 = (repa \\<propto> low) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from repchildren_neq_no repa_high_no1_no repa_low_no1_no"], ["proof (chain)\npicking this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no", "have \"(repa \\<propto> low) no1 \\<noteq> (repa \\<propto> high) no1\""], ["proof (prove)\nusing this:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no1 \\<noteq> (repa \\<propto> high) no1", "by simp"], ["proof (state)\nthis:\n  (repa \\<propto> low) no1 \\<noteq> (repa \\<propto> high) no1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "from no1_in_take_n share_case_inv repa_high_no1_no repa_low_no1_no"], ["proof (chain)\npicking this:\n  no1 \\<in> set prx\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no", "have \"repa no = repa no1\""], ["proof (prove)\nusing this:\n  no1 \\<in> set prx\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. repa no = repa no1", "by auto"], ["proof (state)\nthis:\n  repa no = repa no1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repa(node := repa (low node)) \\<propto> high) no1 =\n             (repa(node := repa (low node)) \\<propto> high) no;\n     (repa(node := repa (low node)) \\<propto> low) no1 =\n     (repa(node := repa (low node)) \\<propto> low) no\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (low node))) no =\n                      (repa(node := repa (low node))) no1\n 2. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with no_noteq_nln no1_neq_nln"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  no1 \\<noteq> node\n  repa no = repa no1", "show \" (repa(node := repa (low node))) no = \n                  (repa(node := repa (low node))) no1\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  no1 \\<noteq> node\n  repa no = repa no1\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "assume \"(repa(node := repa (low node))) no = \n                  (repa(node := repa (low node))) no1\""], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with no_noteq_nln no1_neq_nln"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  no1 \\<noteq> node\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1", "have \"repa no = repa no1\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  no1 \\<noteq> node\n  (repa(node := repa (low node))) no = (repa(node := repa (low node))) no1\n\ngoal (1 subgoal):\n 1. repa no = repa no1", "by simp"], ["proof (state)\nthis:\n  repa no = repa no1\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with share_case_inv no1_in_take_n"], ["proof (chain)\npicking this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  no1 \\<in> set prx\n  repa no = repa no1", "have \"((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and> \n                  (repa \\<propto> low) no1 = (repa \\<propto> low) no)\""], ["proof (prove)\nusing this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  no1 \\<in> set prx\n  repa no = repa no1\n\ngoal (1 subgoal):\n 1. (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) no1 = (repa \\<propto> low) no", "by auto"], ["proof (state)\nthis:\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no =\n    (repa(node := repa (low node))) no1 \\<Longrightarrow>\n    (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "with children_notin_nl_no1 children_nNull_no1 lno_notin_nodeslist \n                  hno_notin_nodeslist lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no", "show \"(repa(node := repa (low node)) \\<propto> high) no1 = \n                (repa(node := repa (low node)) \\<propto> high) no \\<and>\n                (repa(node := repa (low node)) \\<propto> low) no1 = \n                (repa(node := repa (low node)) \\<propto> low) no\""], ["proof (prove)\nusing this:\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  low no1 \\<noteq> Null \\<and> high no1 \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> high) no1 =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    (repa(node := repa (low node)) \\<propto> low) no1 =\n    (repa(node := repa (low node)) \\<propto> low) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> high) no1 =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  (repa(node := repa (low node)) \\<propto> low) no1 =\n  (repa(node := repa (low node)) \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repa(node := repa (low node)) \\<propto> high) no1 =\n   (repa(node := repa (low node)) \\<propto> high) no \\<and>\n   (repa(node := repa (low node)) \\<propto> low) no1 =\n   (repa(node := repa (low node)) \\<propto> low) no) =\n  ((repa(node := repa (low node))) no = (repa(node := repa (low node))) no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repa(node := repa (low node)) \\<propto> high) no1 =\n   (repa(node := repa (low node)) \\<propto> high) no \\<and>\n   (repa(node := repa (low node)) \\<propto> low) no1 =\n   (repa(node := repa (low node)) \\<propto> low) no) =\n  ((repa(node := repa (low node))) no = (repa(node := repa (low node))) no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repa(node := repa (low node)) \\<propto> high) no1 =\n      (repa(node := repa (low node)) \\<propto> high) no \\<and>\n      (repa(node := repa (low node)) \\<propto> low) no1 =\n      (repa(node := repa (low node)) \\<propto> low) no) =\n     ((repa(node := repa (low node))) no =\n      (repa(node := repa (low node))) no1)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "from ext_repa_ext_repa ext_repa_no share_case_ext repchildren_eq_nln this"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n  (repa(node := repa (low node))) no\n  (repa(node := repa (low node))) no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (low node))))\n       (prx @ [node]))\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  repa (low node) = repa (high node)\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repa(node := repa (low node)) \\<propto> high) no1 =\n      (repa(node := repa (low node)) \\<propto> high) no \\<and>\n      (repa(node := repa (low node)) \\<propto> low) no1 =\n      (repa(node := repa (low node)) \\<propto> low) no) =\n     ((repa(node := repa (low node))) no =\n      (repa(node := repa (low node))) no1)", "show ?thesis"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n  (repa(node := repa (low node))) no\n  (repa(node := repa (low node))) no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (low node))))\n       (prx @ [node]))\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  repa (low node) = repa (high node)\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repa(node := repa (low node)) \\<propto> high) no1 =\n      (repa(node := repa (low node)) \\<propto> high) no \\<and>\n      (repa(node := repa (low node)) \\<propto> low) no1 =\n      (repa(node := repa (low node)) \\<propto> low) no) =\n     ((repa(node := repa (low node))) no =\n      (repa(node := repa (low node))) no1)\n\ngoal (1 subgoal):\n 1. if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "using [[simp_depth_limit=4]]"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node))) ((repa(node := repa (low node))) no) =\n  (repa(node := repa (low node))) no\n  (repa(node := repa (low node))) no =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn no low high (repa(node := repa (low node))))\n       (prx @ [node]))\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  repa (low node) = repa (high node)\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repa(node := repa (low node)) \\<propto> high) no1 =\n      (repa(node := repa (low node)) \\<propto> high) no \\<and>\n      (repa(node := repa (low node)) \\<propto> low) no1 =\n      (repa(node := repa (low node)) \\<propto> low) no) =\n     ((repa(node := repa (low node))) no =\n      (repa(node := repa (low node))) no1)\n\ngoal (1 subgoal):\n 1. if (repa(node := repa (high node)) \\<propto> low) no =\n       (repa(node := repa (high node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (high node))) no =\n         (repa(node := repa (high node)) \\<propto> low) no\n    else (repa(node := repa (high node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (high node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (high node)))\n          ((repa(node := repa (high node))) no) =\n         (repa(node := repa (high node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (high node)) \\<propto> high) no1 =\n              (repa(node := repa (high node)) \\<propto> high) no \\<and>\n              (repa(node := repa (high node)) \\<propto> low) no1 =\n              (repa(node := repa (high node)) \\<propto> low) no) =\n             ((repa(node := repa (high node))) no =\n              (repa(node := repa (high node))) no1))", "by auto"], ["proof (state)\nthis:\n  if (repa(node := repa (high node)) \\<propto> low) no =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (high node))) no =\n       (repa(node := repa (high node)) \\<propto> low) no\n  else (repa(node := repa (high node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (high node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (high node)))\n        ((repa(node := repa (high node))) no) =\n       (repa(node := repa (high node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (high node)) \\<propto> high) no1 =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            (repa(node := repa (high node)) \\<propto> low) no1 =\n            (repa(node := repa (high node)) \\<propto> low) no) =\n           ((repa(node := repa (high node))) no =\n            (repa(node := repa (high node))) no1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if (repa(node := repa (high node)) \\<propto> low) no =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (high node))) no =\n       (repa(node := repa (high node)) \\<propto> low) no\n  else (repa(node := repa (high node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (high node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (high node)))\n        ((repa(node := repa (high node))) no) =\n       (repa(node := repa (high node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (high node)) \\<propto> high) no1 =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            (repa(node := repa (high node)) \\<propto> low) no1 =\n            (repa(node := repa (high node)) \\<propto> low) no) =\n           ((repa(node := repa (high node))) no =\n            (repa(node := repa (high node))) no1))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "with ext_repa_nNull"], ["proof (chain)\npicking this:\n  (repa(node := repa (high node))) no \\<noteq> Null\n  if (repa(node := repa (high node)) \\<propto> low) no =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (high node))) no =\n       (repa(node := repa (high node)) \\<propto> low) no\n  else (repa(node := repa (high node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (high node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (high node)))\n        ((repa(node := repa (high node))) no) =\n       (repa(node := repa (high node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (high node)) \\<propto> high) no1 =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            (repa(node := repa (high node)) \\<propto> low) no1 =\n            (repa(node := repa (high node)) \\<propto> low) no) =\n           ((repa(node := repa (high node))) no =\n            (repa(node := repa (high node))) no1))", "show ?thesis"], ["proof (prove)\nusing this:\n  (repa(node := repa (high node))) no \\<noteq> Null\n  if (repa(node := repa (high node)) \\<propto> low) no =\n     (repa(node := repa (high node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (high node))) no =\n       (repa(node := repa (high node)) \\<propto> low) no\n  else (repa(node := repa (high node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (high node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (high node)))\n        ((repa(node := repa (high node))) no) =\n       (repa(node := repa (high node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (high node)) \\<propto> high) no1 =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            (repa(node := repa (high node)) \\<propto> low) no1 =\n            (repa(node := repa (high node)) \\<propto> low) no) =\n           ((repa(node := repa (high node))) no =\n            (repa(node := repa (high node))) no1))\n\ngoal (1 subgoal):\n 1. (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "by auto"], ["proof (state)\nthis:\n  (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n  (if (repa(node := repa (high node)) \\<propto> low) no =\n      (repa(node := repa (high node)) \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then (repa(node := repa (high node))) no =\n        (repa(node := repa (high node)) \\<propto> low) no\n   else (repa(node := repa (high node))) no =\n        hd (filter\n             (\\<lambda>sn.\n                 repNodes_eq sn no low high\n                  (repa(node := repa (high node))))\n             (prx @ [node])) \\<and>\n        (repa(node := repa (high node)))\n         ((repa(node := repa (high node))) no) =\n        (repa(node := repa (high node))) no \\<and>\n        (\\<forall>no1\\<in>set (prx @ [node]).\n            ((repa(node := repa (high node)) \\<propto> high) no1 =\n             (repa(node := repa (high node)) \\<propto> high) no \\<and>\n             (repa(node := repa (high node)) \\<propto> low) no1 =\n             (repa(node := repa (high node)) \\<propto> low) no) =\n            ((repa(node := repa (high node))) no =\n             (repa(node := repa (high node))) no1)))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "assume no_nln: \"no = node\""], ["proof (state)\nthis:\n  no = node\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "hence no_in_nodeslist: \"no \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no = node\n\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx)", "by simp"], ["proof (state)\nthis:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "from no_nln not_Leaf no_in_nodeslist \n          nodes_balanced_ordered [rule_format, OF this]"], ["proof (chain)\npicking this:\n  no = node\n  \\<not> isLeaf_pt node low high\n  no \\<in> set (prx @ node # sfx)\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "obtain  \n          low_no_nNull: \"low no \\<noteq> Null\" and\n          high_no_nNull: \"high no \\<noteq> Null\" and\n          rep_low_no_nNull: \"rep (low no) \\<noteq> Null\" and\n          lno_notin_nl: \"low no \\<notin> set (prx @ node # sfx)\" and\n          hno_notin_nl: \"high no \\<notin> set (prx @ node # sfx)\" and\n          children_nNull_no: \"(low no \\<noteq> Null) \\<and> (high no \\<noteq> Null)\""], ["proof (prove)\nusing this:\n  no = node\n  \\<not> isLeaf_pt node low high\n  no \\<in> set (prx @ node # sfx)\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>low no \\<noteq> Null; high no \\<noteq> Null;\n      rep (low no) \\<noteq> Null; low no \\<notin> set (prx @ node # sfx);\n      high no \\<notin> set (prx @ node # sfx);\n      low no \\<noteq> Null \\<and> high no \\<noteq> Null\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (unfold isLeaf_pt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>low no \\<noteq> Null; high no \\<noteq> Null;\n              rep (low no) \\<noteq> Null;\n              low no \\<notin> set (prx @ node # sfx);\n              high no \\<notin> set (prx @ node # sfx);\n              low no \\<noteq> Null \\<and> high no \\<noteq> Null\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     no = node; \\<not> (low node = Null \\<and> high node = Null);\n     no \\<in> set (prx @ node # sfx);\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     (low no = Null \\<and> high no = Null) = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> thesis", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  rep (low no) \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "then"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  rep (low no) \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null", "have \"low no \\<notin> set prx\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  rep (low no) \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. low no \\<notin> set prx", "by auto"], ["proof (state)\nthis:\n  low no \\<notin> set prx\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "with rep_repa_nc no_nln rep_low_no_nNull"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n  no = node\n  rep (low no) \\<noteq> Null\n  low no \\<notin> set prx", "have \"(repa(node := repa (low node))) no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n  no = node\n  rep (low no) \\<noteq> Null\n  low no \\<notin> set prx\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node))) no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "moreover"], ["proof (state)\nthis:\n  (repa(node := repa (low node))) no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "have \"(if (repa(node := repa (low node)) \\<propto> low) no = \n                  (repa(node := repa (low node)) \\<propto> high) no \\<and> low no \\<noteq> Null\n          then (repa(node := repa (low node))) no = \n               (repa(node := repa (low node)) \\<propto> low) no\n          else (repa(node := repa (low node))) no =\n            hd [sn\\<leftarrow>prx@[node]. repNodes_eq sn no low high \n                (repa(node := repa (low node)))] \\<and>\n          (repa(node := repa (low node))) \n            ((repa(node := repa (low node))) no) =\n            (repa(node := repa (low node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx@[node]).\n            ((repa(node := repa (low node)) \\<propto> high) no1 = \n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 = \n            (repa(node := repa (low node)) \\<propto> low) no) =\n            ((repa(node := repa (low node))) no = \n            (repa(node := repa (low node))) no1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "proof (cases \"(repa(node := repa (low node)) \\<propto> low) no = \n          (repa(node := repa (low node)) \\<propto> high) no \\<and> low no \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "case True"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "note red_case=this"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "with children_nNull_no lno_notin_nl hno_notin_nl"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null", "have \"(repa \\<propto> low) no = (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no = (repa \\<propto> high) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no = (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "from children_nNull_no lno_notin_nl"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)", "have ext_repa_eq_repa_low: \"(repa(node := repa (low node)) \\<propto> low) no \n            = (repa \\<propto> low) no \""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa \\<propto> low) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "from children_nNull_no hno_notin_nl"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  high no \\<notin> set (prx @ node # sfx)", "have ext_repa_eq_repa_high: \n            \"(repa(node := repa (low node)) \\<propto> high) no \n            = (repa \\<propto> high) no \""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  high no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> high) no =\n    (repa \\<propto> high) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "from no_nln children_nNull_no"], ["proof (chain)\npicking this:\n  no = node\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null", "have \"repa (low node) = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  no = node\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. repa (low node) = (repa \\<propto> low) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repa (low node) = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repa(node := repa (low node)) \\<propto> low) no =\n    (repa(node := repa (low node)) \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))\n 2. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "with red_case ext_repa_eq_repa_high ext_repa_eq_repa_low no_nln"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  no = node\n  repa (low node) = (repa \\<propto> low) no", "show ?thesis"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  no = node\n  repa (low node) = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node)) \\<propto> low) no =\n  (repa(node := repa (low node)) \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repa(node := repa (low node)) \\<propto> high) no =\n  (repa \\<propto> high) no\n  (repa(node := repa (low node)) \\<propto> low) no = (repa \\<propto> low) no\n  no = node\n  repa (low node) = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "by (auto simp del: null_comp_not_Null)"], ["proof (state)\nthis:\n  if (repa(node := repa (low node)) \\<propto> low) no =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (low node))) no =\n       (repa(node := repa (low node)) \\<propto> low) no\n  else (repa(node := repa (low node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (low node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (low node)))\n        ((repa(node := repa (low node))) no) =\n       (repa(node := repa (low node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (low node)) \\<propto> high) no1 =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 =\n            (repa(node := repa (low node)) \\<propto> low) no) =\n           ((repa(node := repa (low node))) no =\n            (repa(node := repa (low node))) no1))\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "assume share_case: \" \\<not> ((repa(node := repa (low node)) \\<propto> low) no \n            = (repa(node := repa (low node)) \\<propto> high) no \\<and> low no \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "with low_no_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)", "have \"(repa(node := repa (low node)) \\<propto> low) no \n            \\<noteq> (repa(node := repa (low node)) \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n          (repa(node := repa (low node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (low node)) \\<propto> low) no \\<noteq>\n    (repa(node := repa (low node)) \\<propto> high) no", "by simp"], ["proof (state)\nthis:\n  (repa(node := repa (low node)) \\<propto> low) no \\<noteq>\n  (repa(node := repa (low node)) \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "with children_nNull_no lno_notin_nl hno_notin_nl"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (repa(node := repa (low node)) \\<propto> low) no \\<noteq>\n  (repa(node := repa (low node)) \\<propto> high) no", "have \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (repa(node := repa (low node)) \\<propto> low) no \\<noteq>\n  (repa(node := repa (low node)) \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "with children_nNull_no"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "have \"repa (low no) \\<noteq> repa (high no)\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null \\<and> high no \\<noteq> Null\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repa (low no) \\<noteq> repa (high no)", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. \\<not> ((repa(node := repa (low node)) \\<propto> low) no =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "with repchildren_eq_nln no_nln"], ["proof (chain)\npicking this:\n  repa (low node) = repa (high node)\n  no = node\n  repa (low no) \\<noteq> repa (high no)", "show ?thesis"], ["proof (prove)\nusing this:\n  repa (low node) = repa (high node)\n  no = node\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. if (repa(node := repa (low node)) \\<propto> low) no =\n       (repa(node := repa (low node)) \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then (repa(node := repa (low node))) no =\n         (repa(node := repa (low node)) \\<propto> low) no\n    else (repa(node := repa (low node))) no =\n         hd (filter\n              (\\<lambda>sn.\n                  repNodes_eq sn no low high\n                   (repa(node := repa (low node))))\n              (prx @ [node])) \\<and>\n         (repa(node := repa (low node)))\n          ((repa(node := repa (low node))) no) =\n         (repa(node := repa (low node))) no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repa(node := repa (low node)) \\<propto> high) no1 =\n              (repa(node := repa (low node)) \\<propto> high) no \\<and>\n              (repa(node := repa (low node)) \\<propto> low) no1 =\n              (repa(node := repa (low node)) \\<propto> low) no) =\n             ((repa(node := repa (low node))) no =\n              (repa(node := repa (low node))) no1))", "by simp"], ["proof (state)\nthis:\n  if (repa(node := repa (low node)) \\<propto> low) no =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (low node))) no =\n       (repa(node := repa (low node)) \\<propto> low) no\n  else (repa(node := repa (low node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (low node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (low node)))\n        ((repa(node := repa (low node))) no) =\n       (repa(node := repa (low node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (low node)) \\<propto> high) no1 =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 =\n            (repa(node := repa (low node)) \\<propto> low) no) =\n           ((repa(node := repa (low node))) no =\n            (repa(node := repa (low node))) no1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if (repa(node := repa (low node)) \\<propto> low) no =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (low node))) no =\n       (repa(node := repa (low node)) \\<propto> low) no\n  else (repa(node := repa (low node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (low node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (low node)))\n        ((repa(node := repa (low node))) no) =\n       (repa(node := repa (low node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (low node)) \\<propto> high) no1 =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 =\n            (repa(node := repa (low node)) \\<propto> low) no) =\n           ((repa(node := repa (low node))) no =\n            (repa(node := repa (low node))) no1))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "ultimately"], ["proof (chain)\npicking this:\n  (repa(node := repa (low node))) no \\<noteq> Null\n  if (repa(node := repa (low node)) \\<propto> low) no =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (low node))) no =\n       (repa(node := repa (low node)) \\<propto> low) no\n  else (repa(node := repa (low node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (low node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (low node)))\n        ((repa(node := repa (low node))) no) =\n       (repa(node := repa (low node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (low node)) \\<propto> high) no1 =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 =\n            (repa(node := repa (low node)) \\<propto> low) no) =\n           ((repa(node := repa (low node))) no =\n            (repa(node := repa (low node))) no1))", "show ?thesis"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node))) no \\<noteq> Null\n  if (repa(node := repa (low node)) \\<propto> low) no =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (low node))) no =\n       (repa(node := repa (low node)) \\<propto> low) no\n  else (repa(node := repa (low node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (low node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (low node)))\n        ((repa(node := repa (low node))) no) =\n       (repa(node := repa (low node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (low node)) \\<propto> high) no1 =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 =\n            (repa(node := repa (low node)) \\<propto> low) no) =\n           ((repa(node := repa (low node))) no =\n            (repa(node := repa (low node))) no1))\n\ngoal (1 subgoal):\n 1. (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "using repchildren_eq_nln"], ["proof (prove)\nusing this:\n  (repa(node := repa (low node))) no \\<noteq> Null\n  if (repa(node := repa (low node)) \\<propto> low) no =\n     (repa(node := repa (low node)) \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then (repa(node := repa (low node))) no =\n       (repa(node := repa (low node)) \\<propto> low) no\n  else (repa(node := repa (low node))) no =\n       hd (filter\n            (\\<lambda>sn.\n                repNodes_eq sn no low high (repa(node := repa (low node))))\n            (prx @ [node])) \\<and>\n       (repa(node := repa (low node)))\n        ((repa(node := repa (low node))) no) =\n       (repa(node := repa (low node))) no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repa(node := repa (low node)) \\<propto> high) no1 =\n            (repa(node := repa (low node)) \\<propto> high) no \\<and>\n            (repa(node := repa (low node)) \\<propto> low) no1 =\n            (repa(node := repa (low node)) \\<propto> low) no) =\n           ((repa(node := repa (low node))) no =\n            (repa(node := repa (low node))) no1))\n  repa (low node) = repa (high node)\n\ngoal (1 subgoal):\n 1. (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n    (if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1)))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (low node))) no \\<noteq> Null;\n     if (repa(node := repa (low node)) \\<propto> low) no =\n        (repa(node := repa (low node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (low node))) no =\n          (repa(node := repa (low node)) \\<propto> low) no\n     else (repa(node := repa (low node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (low node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (low node)))\n           ((repa(node := repa (low node))) no) =\n          (repa(node := repa (low node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (low node)) \\<propto> high) no1 =\n               (repa(node := repa (low node)) \\<propto> high) no \\<and>\n               (repa(node := repa (low node)) \\<propto> low) no1 =\n               (repa(node := repa (low node)) \\<propto> low) no) =\n              ((repa(node := repa (low node))) no =\n               (repa(node := repa (low node))) no1));\n     repa (low node) = repa (high node)\\<rbrakk>\n    \\<Longrightarrow> (repa(node := repa (high node))) no \\<noteq>\n                      Null \\<and>\n                      (if (repa(node := repa (high node)) \\<propto> low)\n                           no =\n                          (repa(node := repa (high node)) \\<propto> high)\n                           no \\<and>\n                          low no \\<noteq> Null\n                       then (repa(node := repa (high node))) no =\n                            (repa(node := repa (high node)) \\<propto> low)\n                             no\n                       else (repa(node := repa (high node))) no =\n                            hd (filter\n                                 (\\<lambda>sn.\n                                     repNodes_eq sn no low high\n(repa(node := repa (high node))))\n                                 (prx @ [node])) \\<and>\n                            (repa(node := repa (high node)))\n                             ((repa(node := repa (high node))) no) =\n                            (repa(node := repa (high node))) no \\<and>\n                            (\\<forall>no1\\<in>set (prx @ [node]).\n                                ((repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no1 =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no1 =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no) =\n                                ((repa(node := repa (high node))) no =\n                                 (repa(node := repa (high node))) no1)))", "apply (simp only:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(repa(node := repa (high node))) no \\<noteq> Null;\n     if (repa(node := repa (high node)) \\<propto> low) no =\n        (repa(node := repa (high node)) \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then (repa(node := repa (high node))) no =\n          (repa(node := repa (high node)) \\<propto> low) no\n     else (repa(node := repa (high node))) no =\n          hd (filter\n               (\\<lambda>sn.\n                   repNodes_eq sn no low high\n                    (repa(node := repa (high node))))\n               (prx @ [node])) \\<and>\n          (repa(node := repa (high node)))\n           ((repa(node := repa (high node))) no) =\n          (repa(node := repa (high node))) no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repa(node := repa (high node)) \\<propto> high) no1 =\n               (repa(node := repa (high node)) \\<propto> high) no \\<and>\n               (repa(node := repa (high node)) \\<propto> low) no1 =\n               (repa(node := repa (high node)) \\<propto> low) no) =\n              ((repa(node := repa (high node))) no =\n               (repa(node := repa (high node))) no1));\n     repa (low node) = repa (high node)\\<rbrakk>\n    \\<Longrightarrow> \\<not> False \\<and>\n                      (if (repa(node := repa (high node)) \\<propto> low)\n                           no =\n                          (repa(node := repa (high node)) \\<propto> high)\n                           no \\<and>\n                          low no \\<noteq> Null\n                       then (repa(node := repa (high node))) no =\n                            (repa(node := repa (high node)) \\<propto> low)\n                             no\n                       else (repa(node := repa (high node))) no =\n                            hd (filter\n                                 (\\<lambda>sn.\n                                     repNodes_eq sn no low high\n(repa(node := repa (high node))))\n                                 (prx @ [node])) \\<and>\n                            (repa(node := repa (high node)))\n                             ((repa(node := repa (high node))) no) =\n                            (repa(node := repa (high node))) no \\<and>\n                            (\\<forall>no1\\<in>set (prx @ [node]).\n                                ((repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no1 =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  high)\n                                  no \\<and>\n                                 (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no1 =\n                                 (repa(node := repa (high node)) \\<propto>\n                                  low)\n                                  no) =\n                                ((repa(node := repa (high node))) no =\n                                 (repa(node := repa (high node))) no1)))", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n  (if (repa(node := repa (high node)) \\<propto> low) no =\n      (repa(node := repa (high node)) \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then (repa(node := repa (high node))) no =\n        (repa(node := repa (high node)) \\<propto> low) no\n   else (repa(node := repa (high node))) no =\n        hd (filter\n             (\\<lambda>sn.\n                 repNodes_eq sn no low high\n                  (repa(node := repa (high node))))\n             (prx @ [node])) \\<and>\n        (repa(node := repa (high node)))\n         ((repa(node := repa (high node))) no) =\n        (repa(node := repa (high node))) no \\<and>\n        (\\<forall>no1\\<in>set (prx @ [node]).\n            ((repa(node := repa (high node)) \\<propto> high) no1 =\n             (repa(node := repa (high node)) \\<propto> high) no \\<and>\n             (repa(node := repa (high node)) \\<propto> low) no1 =\n             (repa(node := repa (high node)) \\<propto> low) no) =\n            ((repa(node := repa (high node))) no =\n             (repa(node := repa (high node))) no1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n  (if (repa(node := repa (high node)) \\<propto> low) no =\n      (repa(node := repa (high node)) \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then (repa(node := repa (high node))) no =\n        (repa(node := repa (high node)) \\<propto> low) no\n   else (repa(node := repa (high node))) no =\n        hd (filter\n             (\\<lambda>sn.\n                 repNodes_eq sn no low high\n                  (repa(node := repa (high node))))\n             (prx @ [node])) \\<and>\n        (repa(node := repa (high node)))\n         ((repa(node := repa (high node))) no) =\n        (repa(node := repa (high node))) no \\<and>\n        (\\<forall>no1\\<in>set (prx @ [node]).\n            ((repa(node := repa (high node)) \\<propto> high) no1 =\n             (repa(node := repa (high node)) \\<propto> high) no \\<and>\n             (repa(node := repa (high node)) \\<propto> low) no1 =\n             (repa(node := repa (high node)) \\<propto> low) no) =\n            ((repa(node := repa (high node))) no =\n             (repa(node := repa (high node))) no1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n     (if (repa(node := repa (high node)) \\<propto> low) no =\n         (repa(node := repa (high node)) \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then (repa(node := repa (high node))) no =\n           (repa(node := repa (high node)) \\<propto> low) no\n      else (repa(node := repa (high node))) no =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn no low high\n                     (repa(node := repa (high node))))\n                (prx @ [node])) \\<and>\n           (repa(node := repa (high node)))\n            ((repa(node := repa (high node))) no) =\n           (repa(node := repa (high node))) no \\<and>\n           (\\<forall>no1\\<in>set (prx @ [node]).\n               ((repa(node := repa (high node)) \\<propto> high) no1 =\n                (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                (repa(node := repa (high node)) \\<propto> low) no1 =\n                (repa(node := repa (high node)) \\<propto> low) no) =\n               ((repa(node := repa (high node))) no =\n                (repa(node := repa (high node))) no1)))\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = (repa(node := repa (high node))) no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n        (if (repa(node := repa (high node)) \\<propto> low) no =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then (repa(node := repa (high node))) no =\n              (repa(node := repa (high node)) \\<propto> low) no\n         else (repa(node := repa (high node))) no =\n              hd (filter\n                   (\\<lambda>sn.\n                       repNodes_eq sn no low high\n                        (repa(node := repa (high node))))\n                   (prx @ [node])) \\<and>\n              (repa(node := repa (high node)))\n               ((repa(node := repa (high node))) no) =\n              (repa(node := repa (high node))) no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repa(node := repa (high node)) \\<propto> high) no1 =\n                   (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                   (repa(node := repa (high node)) \\<propto> low) no1 =\n                   (repa(node := repa (high node)) \\<propto> low) no) =\n                  ((repa(node := repa (high node))) no =\n                   (repa(node := repa (high node))) no1))))", "from nodes_unmodif nodes_modif"], ["proof (chain)\npicking this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow>\n     rep no = (repa(node := repa (high node))) no\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n     (if (repa(node := repa (high node)) \\<propto> low) no =\n         (repa(node := repa (high node)) \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then (repa(node := repa (high node))) no =\n           (repa(node := repa (high node)) \\<propto> low) no\n      else (repa(node := repa (high node))) no =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn no low high\n                     (repa(node := repa (high node))))\n                (prx @ [node])) \\<and>\n           (repa(node := repa (high node)))\n            ((repa(node := repa (high node))) no) =\n           (repa(node := repa (high node))) no \\<and>\n           (\\<forall>no1\\<in>set (prx @ [node]).\n               ((repa(node := repa (high node)) \\<propto> high) no1 =\n                (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                (repa(node := repa (high node)) \\<propto> low) no1 =\n                (repa(node := repa (high node)) \\<propto> low) no) =\n               ((repa(node := repa (high node))) no =\n                (repa(node := repa (high node))) no1)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow>\n     rep no = (repa(node := repa (high node))) no\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n     (if (repa(node := repa (high node)) \\<propto> low) no =\n         (repa(node := repa (high node)) \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then (repa(node := repa (high node))) no =\n           (repa(node := repa (high node)) \\<propto> low) no\n      else (repa(node := repa (high node))) no =\n           hd (filter\n                (\\<lambda>sn.\n                    repNodes_eq sn no low high\n                     (repa(node := repa (high node))))\n                (prx @ [node])) \\<and>\n           (repa(node := repa (high node)))\n            ((repa(node := repa (high node))) no) =\n           (repa(node := repa (high node))) no \\<and>\n           (\\<forall>no1\\<in>set (prx @ [node]).\n               ((repa(node := repa (high node)) \\<propto> high) no1 =\n                (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                (repa(node := repa (high node)) \\<propto> low) no1 =\n                (repa(node := repa (high node)) \\<propto> low) no) =\n               ((repa(node := repa (high node))) no =\n                (repa(node := repa (high node))) no1)))\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = (repa(node := repa (high node))) no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n        (if (repa(node := repa (high node)) \\<propto> low) no =\n            (repa(node := repa (high node)) \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then (repa(node := repa (high node))) no =\n              (repa(node := repa (high node)) \\<propto> low) no\n         else (repa(node := repa (high node))) no =\n              hd (filter\n                   (\\<lambda>sn.\n                       repNodes_eq sn no low high\n                        (repa(node := repa (high node))))\n                   (prx @ [node])) \\<and>\n              (repa(node := repa (high node)))\n               ((repa(node := repa (high node))) no) =\n              (repa(node := repa (high node))) no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repa(node := repa (high node)) \\<propto> high) no1 =\n                   (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                   (repa(node := repa (high node)) \\<propto> low) no1 =\n                   (repa(node := repa (high node)) \\<propto> low) no) =\n                  ((repa(node := repa (high node))) no =\n                   (repa(node := repa (high node))) no1))))", "by iprover"], ["proof (state)\nthis:\n  (\\<forall>no.\n      no \\<notin> set (prx @ [node]) \\<longrightarrow>\n      rep no = (repa(node := repa (high node))) no) \\<and>\n  (\\<forall>no\\<in>set (prx @ [node]).\n      (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n      (if (repa(node := repa (high node)) \\<propto> low) no =\n          (repa(node := repa (high node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null\n       then (repa(node := repa (high node))) no =\n            (repa(node := repa (high node)) \\<propto> low) no\n       else (repa(node := repa (high node))) no =\n            hd (filter\n                 (\\<lambda>sn.\n                     repNodes_eq sn no low high\n                      (repa(node := repa (high node))))\n                 (prx @ [node])) \\<and>\n            (repa(node := repa (high node)))\n             ((repa(node := repa (high node))) no) =\n            (repa(node := repa (high node))) no \\<and>\n            (\\<forall>no1\\<in>set (prx @ [node]).\n                ((repa(node := repa (high node)) \\<propto> high) no1 =\n                 (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                 (repa(node := repa (high node)) \\<propto> low) no1 =\n                 (repa(node := repa (high node)) \\<propto> low) no) =\n                ((repa(node := repa (high node))) no =\n                 (repa(node := repa (high node))) no1))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>no.\n      no \\<notin> set (prx @ [node]) \\<longrightarrow>\n      rep no = (repa(node := repa (high node))) no) \\<and>\n  (\\<forall>no\\<in>set (prx @ [node]).\n      (repa(node := repa (high node))) no \\<noteq> Null \\<and>\n      (if (repa(node := repa (high node)) \\<propto> low) no =\n          (repa(node := repa (high node)) \\<propto> high) no \\<and>\n          low no \\<noteq> Null\n       then (repa(node := repa (high node))) no =\n            (repa(node := repa (high node)) \\<propto> low) no\n       else (repa(node := repa (high node))) no =\n            hd (filter\n                 (\\<lambda>sn.\n                     repNodes_eq sn no low high\n                      (repa(node := repa (high node))))\n                 (prx @ [node])) \\<and>\n            (repa(node := repa (high node)))\n             ((repa(node := repa (high node))) no) =\n            (repa(node := repa (high node))) no \\<and>\n            (\\<forall>no1\\<in>set (prx @ [node]).\n                ((repa(node := repa (high node)) \\<propto> high) no1 =\n                 (repa(node := repa (high node)) \\<propto> high) no \\<and>\n                 (repa(node := repa (high node)) \\<propto> low) no1 =\n                 (repa(node := repa (high node)) \\<propto> low) no) =\n                ((repa(node := repa (high node))) no =\n                 (repa(node := repa (high node))) no1))))\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "fix var low high rep nodeslist repa \"next\" node prx sfx repb"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume ns: \"List nodeslist next (prx @ node # sfx)\""], ["proof (state)\nthis:\n  List nodeslist next (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume sfx: \"List (next node) next sfx\""], ["proof (state)\nthis:\n  List (next node) next sfx\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume nodes_balanced_ordered: \"\\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> (1::nat)) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume all_nodes_same_var: \"\\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\""], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume rep_repa_nc: \"\\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\""], ["proof (state)\nthis:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume while_inv: \"\\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)))\""], ["proof (state)\nthis:\n  \\<forall>no\\<in>set prx.\n     repa no \\<noteq> Null \\<and>\n     (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1)))\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume share_cond: \n    \"\\<not> (\\<not> isLeaf_pt node low high \\<and> repa (low node) = repa (high node))\""], ["proof (state)\nthis:\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume repb_node: \n          \"repb node = hd [sn\\<leftarrow>prx @ node # sfx . repNodes_eq sn node low high repa]\""], ["proof (state)\nthis:\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume repa_repb_nc: \"\\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\""], ["proof (state)\nthis:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "assume var_repb_node: \"var (repb node) = var node\""], ["proof (state)\nthis:\n  var (repb node) = var node\n\ngoal (1 subgoal):\n 1. \\<And>var low high rep nodeslist repa next node prx sfx repb.\n       \\<lbrakk>node \\<noteq> Null; List nodeslist next (prx @ node # sfx);\n        \\<forall>no\\<in>set (prx @ node # sfx).\n           no \\<noteq> Null \\<and>\n           (low no = Null) = (high no = Null) \\<and>\n           low no \\<notin> set (prx @ node # sfx) \\<and>\n           high no \\<notin> set (prx @ node # sfx) \\<and>\n           isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n           (low no \\<noteq> Null \\<longrightarrow>\n            rep (low no) \\<noteq> Null) \\<and>\n           (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no;\n        \\<forall>no\\<in>set prx.\n           repa no \\<noteq> Null \\<and>\n           (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n               low no \\<noteq> Null\n            then repa no = (repa \\<propto> low) no\n            else repa no =\n                 hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                      prx) \\<and>\n                 repa (repa no) = repa no \\<and>\n                 (\\<forall>no1\\<in>set prx.\n                     ((repa \\<propto> high) no1 =\n                      (repa \\<propto> high) no \\<and>\n                      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n                     (repa no = repa no1)));\n        \\<not> (\\<not> isLeaf_pt node low high \\<and>\n                repa (low node) = repa (high node));\n        List (next node) next sfx;\n        repb node =\n        hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n             (prx @ node # sfx));\n        \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt;\n        var (repb node) = var node\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>no.\n                             no \\<notin> set\n    (prx @ [node]) \\<longrightarrow>\n                             rep no = repb no) \\<and>\n                         (\\<forall>no\\<in>set (prx @ [node]).\n                             repb no \\<noteq> Null \\<and>\n                             (if (repb \\<propto> low) no =\n                                 (repb \\<propto> high) no \\<and>\n                                 low no \\<noteq> Null\n                              then repb no = (repb \\<propto> low) no\n                              else repb no =\n                                   hd (filter\n  (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])) \\<and>\n                                   repb (repb no) = repb no \\<and>\n                                   (\\<forall>no1\\<in>set (prx @ [node]).\n ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n (repb no = repb no1))))", "show \"(\\<forall>no. no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no) \\<and>\n          (\\<forall>no\\<in>set (prx @ [node]).\n              repb no \\<noteq> Null \\<and>\n              (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null\n               then repb no = (repb \\<propto> low) no\n               else repb no =\n                    hd [sn\\<leftarrow>prx @ [node] . repNodes_eq sn no low high repb] \\<and>\n                    repb (repb no) = repb no \\<and>\n                    (\\<forall>no1\\<in>set (prx @ [node]).\n                        ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n                         (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                        (repb no = repb no1))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "have rep_repb_nc: \"(\\<forall>no. no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no.\n       no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<notin> set (prx @ [node]) \\<Longrightarrow> rep no = repb no", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<notin> set (prx @ [node]) \\<Longrightarrow> rep no = repb no", "assume no_notin_take_Sucn: \"no \\<notin> set (prx @ [node])\""], ["proof (state)\nthis:\n  no \\<notin> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<notin> set (prx @ [node]) \\<Longrightarrow> rep no = repb no", "with rep_repa_nc"], ["proof (chain)\npicking this:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n  no \\<notin> set (prx @ [node])", "have rep_repa_nc_Sucn: \"rep no = repa no\""], ["proof (prove)\nusing this:\n  \\<forall>no. no \\<notin> set prx \\<longrightarrow> rep no = repa no\n  no \\<notin> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. rep no = repa no", "by auto"], ["proof (state)\nthis:\n  rep no = repa no\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<notin> set (prx @ [node]) \\<Longrightarrow> rep no = repb no", "from no_notin_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<notin> set (prx @ [node])", "have \"no \\<noteq> node\""], ["proof (prove)\nusing this:\n  no \\<notin> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no \\<noteq> node", "by auto"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<notin> set (prx @ [node]) \\<Longrightarrow> rep no = repb no", "with repa_repb_nc"], ["proof (chain)\npicking this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  no \\<noteq> node", "have \"repa no = repb no\""], ["proof (prove)\nusing this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. repa no = repb no", "by auto"], ["proof (state)\nthis:\n  repa no = repb no\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<notin> set (prx @ [node]) \\<Longrightarrow> rep no = repb no", "with rep_repa_nc_Sucn"], ["proof (chain)\npicking this:\n  rep no = repa no\n  repa no = repb no", "show \"rep no = repb no\""], ["proof (prove)\nusing this:\n  rep no = repa no\n  repa no = repb no\n\ngoal (1 subgoal):\n 1. rep no = repb no", "by simp"], ["proof (state)\nthis:\n  rep no = repb no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "moreover"], ["proof (state)\nthis:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "have repb_no_share_def: \n      \"(\\<forall>no\\<in>set (prx @ [node]). \n      \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null) \\<longrightarrow> \n          repb no = hd [sn\\<leftarrow>(prx @ [node]) . repNodes_eq sn no low high repb])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (prx @ [node]).\n       \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n               low no \\<noteq> Null) \\<longrightarrow>\n       repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node]))", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "assume no_in_take_Sucn: \" no \\<in> set (prx @ [node])\""], ["proof (state)\nthis:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "assume share_prop: \"\\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "from share_prop"], ["proof (chain)\npicking this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)", "have share_or: \n        \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or> low no = Null\""], ["proof (prove)\nusing this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n    low no = Null", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n    low no = Null", "by simp"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "from no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])", "have no_in_nl: \"no \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "from nodes_balanced_ordered [rule_format, OF this]"], ["proof (chain)\npicking this:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "obtain\n        no_nNull: \"no \\<noteq> Null\" and\n        balanced_no: \"(low no = Null) = (high no = Null)\" and\n        lno_notin_nl: \"low no \\<notin> set (prx @ node # sfx)\" and\n        hno_notin_nl: \"high no \\<notin> set (prx @ node # sfx)\" and\n        isLeaf_var_no: \"isLeaf_pt no low high = (var no \\<le> 1)\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n      low no \\<notin> set (prx @ node # sfx);\n      high no \\<notin> set (prx @ node # sfx);\n      isLeaf_pt no low high = (var no \\<le> 1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "have nodes_notin_nl_neq_nln: \"\\<forall>p. p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node", "by auto"], ["proof (state)\nthis:\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n                low no \\<noteq> Null)\\<rbrakk>\n       \\<Longrightarrow> repb no =\n                         hd (filter\n                              (\\<lambda>sn. repNodes_eq sn no low high repb)\n                              (prx @ [node]))", "show \" repb no = hd [sn\\<leftarrow>(prx @ [node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "proof (cases \"no = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "case False"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "note no_notin_nl=this"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node", "have no_in_take_n: \"no \\<in> set prx\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. no \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no \\<in> set prx\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "from False repa_repb_nc"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt", "have repb_repa_no: \"repb no = repa no\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. repb no = repa no", "by auto"], ["proof (state)\nthis:\n  repb no = repa no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with while_inv [rule_format, OF no_in_take_n] no_in_take_n"], ["proof (chain)\npicking this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  no \\<in> set prx\n  repb no = repa no", "obtain \n          repa_no_nNull: \"repa no \\<noteq> Null\" and\n          while_share_red_exp: \n          \"(if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null \n              then repa no = (repa \\<propto> low) no\n              else repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \\<and>\n              repa (repa no) = repa no \\<and> \n              (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and> \n              (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1)))\""], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  no \\<in> set prx\n  repb no = repa no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit = 2]]"], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  no \\<in> set prx\n  repb no = repa no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repa no \\<noteq> Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "from no_in_take_n"], ["proof (chain)\npicking this:\n  no \\<in> set prx", "have filter_take_n_notempty: \"[sn\\<leftarrow>prx. \n          repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set prx \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set prx \\<Longrightarrow> ?x1 \\<in> set prx\n 2. no \\<in> set prx \\<Longrightarrow> repNodes_eq ?x1 no low high repa", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "have hd_term_n_Sucn: \n          \"hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \n              = hd [sn\\<leftarrow>prx@[node] . repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "thus ?thesis"], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "proof (cases \"low no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "case True"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "note lno_Null=this"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no = Null", "have hno_Null: \"high no = Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no = Null\n\ngoal (1 subgoal):\n 1. high no = Null", "by simp"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "from lno_Null hno_Null"], ["proof (chain)\npicking this:\n  low no = Null\n  high no = Null", "have isLeaf_no: \"isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  low no = Null\n  high no = Null\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "from True while_share_red_exp"], ["proof (chain)\npicking this:\n  low no = Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))", "have while_low_Null: \n            \"repa no = hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \\<and>\n             repa (repa no) = repa no \\<and> \n             (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \n             \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1))\""], ["proof (prove)\nusing this:\n  low no = Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. repa no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set prx.\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1))", "by auto"], ["proof (state)\nthis:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "have all_nodes_in_nl_Leafs: \n            \"\\<forall>x \\<in> set (prx @ node # sfx). isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "assume x_in_nodeslist: \"x \\<in> set (prx @ node # sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "from isLeaf_no isLeaf_var_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)", "have \"var no \\<le> 1\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. var no \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with all_nodes_same_var [rule_format, OF x_in_nodeslist no_in_nl]"], ["proof (chain)\npicking this:\n  var x = var no\n  var no \\<le> 1", "have \"var x \\<le> 1\""], ["proof (prove)\nusing this:\n  var x = var no\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var x \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1", "show \"isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. isLeaf_pt x low high", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "have \"\\<forall> x \\<in> set (prx@[node]). repNodes_eq x no low high repb \n                = repNodes_eq x no low high repa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "assume x_in_take_Sucn: \"x \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "hence x_in_nodeslist: \"x \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. x \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with all_nodes_in_nl_Leafs"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  x \\<in> set (prx @ node # sfx)", "have \"isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with isLeaf_no repa_repb_nc"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  isLeaf_pt x low high", "show \"repNodes_eq x no low high repb \n                  = repNodes_eq x no low high repa\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no low high repa", "by (simp add: repNodes_eq_def null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa", "have \" [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repa] \n                = [sn\\<leftarrow>(prx@[node]) . repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repb =\n       repNodes_eq x no low high repa \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "apply (rule P_eq_list_filter)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repb =\n       repNodes_eq x no low high repa \\<Longrightarrow>\n    \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))\n 2. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with hd_term_n_Sucn while_low_Null repb_repa_no"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  repb no = repa no\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "show ?thesis"], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  repb no = repa no\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "assume lno_nNull: \" low no \\<noteq> Null\""], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with lno_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null", "have no_nLeaf: \"\\<not> isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with isLeaf_var_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high = (var no \\<le> 1)\n  \\<not> isLeaf_pt no low high", "have Sucn_s_varno: \"1 < var no\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high = (var no \\<le> 1)\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. 1 < var no", "by auto"], ["proof (state)\nthis:\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with no_in_nl all_nodes_same_var"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ node # sfx)\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n  1 < var no", "have all_nodes_nl_var: \"\\<forall> x \\<in> set (prx @ node # sfx). 1 < var x\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ node # sfx)\n  \\<forall>no1\\<in>set (prx @ node # sfx).\n     \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<in> set (prx @ node # sfx);\n     \\<forall>no1\\<in>set (prx @ node # sfx).\n        \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n     1 < var no\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>no \\<in> set (prx @ node # sfx);\n        \\<forall>no1\\<in>set (prx @ node # sfx).\n           \\<forall>no2\\<in>set (prx @ node # sfx). var no1 = var no2;\n        1 < var no; x \\<in> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> 1 < var x", "apply (drule_tac x=no in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>no \\<in> set (prx @ node # sfx); 1 < var no;\n        x \\<in> set (prx @ node # sfx);\n        \\<forall>no2\\<in>set (prx @ node # sfx). var no = var no2\\<rbrakk>\n       \\<Longrightarrow> 1 < var x", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>no \\<in> set (prx @ node # sfx); 1 < var no;\n        x \\<in> set (prx @ node # sfx); var no = var x\\<rbrakk>\n       \\<Longrightarrow> 1 < var x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with nodes_balanced_ordered"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "have all_nodes_nl_nLeaf: \n            \"\\<forall>x \\<in> set (prx @ node # sfx). \\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ node # sfx).\n     no \\<noteq> Null \\<and>\n     (low no = Null) = (high no = Null) \\<and>\n     low no \\<notin> set (prx @ node # sfx) \\<and>\n     high no \\<notin> set (prx @ node # sfx) \\<and>\n     isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n     (low no \\<noteq> Null \\<longrightarrow>\n      rep (low no) \\<noteq> Null) \\<and>\n     (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                no \\<noteq> Null \\<and>\n                (low no = Null) = (high no = Null) \\<and>\n                low no \\<notin> set (prx @ node # sfx) \\<and>\n                high no \\<notin> set (prx @ node # sfx) \\<and>\n                isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                (low no \\<noteq> Null \\<longrightarrow>\n                 rep (low no) \\<noteq> Null) \\<and>\n                (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n     \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (prx @ node # sfx).\n                         \\<not> isLeaf_pt x low high", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>no\\<in>set (prx @ node # sfx).\n                   no \\<noteq> Null \\<and>\n                   (low no = Null) = (high no = Null) \\<and>\n                   low no \\<notin> set (prx @ node # sfx) \\<and>\n                   high no \\<notin> set (prx @ node # sfx) \\<and>\n                   isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n                   (low no \\<noteq> Null \\<longrightarrow>\n                    rep (low no) \\<noteq> Null) \\<and>\n                   (rep \\<propto> low) no \\<notin> set (prx @ node # sfx);\n        \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x;\n        x \\<in> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt x low high", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>set (prx @ node # sfx). 1 < var x;\n        x \\<in> set (prx @ node # sfx);\n        x \\<noteq> Null \\<and>\n        (low x = Null) = (high x = Null) \\<and>\n        low x \\<notin> set (prx @ node # sfx) \\<and>\n        high x \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n        (low x \\<noteq> Null \\<longrightarrow>\n         rep (low x) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt x low high", "apply (drule_tac x=x in bspec,assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> set (prx @ node # sfx);\n        x \\<noteq> Null \\<and>\n        (low x = Null) = (high x = Null) \\<and>\n        low x \\<notin> set (prx @ node # sfx) \\<and>\n        high x \\<notin> set (prx @ node # sfx) \\<and>\n        isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n        (low x \\<noteq> Null \\<longrightarrow>\n         rep (low x) \\<noteq> Null) \\<and>\n        (rep \\<propto> low) x \\<notin> set (prx @ node # sfx);\n        1 < var x\\<rbrakk>\n       \\<Longrightarrow> \\<not> isLeaf_pt x low high", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "from lno_nNull share_or"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null", "have repbchildren_eq_no: \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "by simp"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with lno_nNull hno_nNull lno_notin_nl hno_notin_nl repa_repb_nc  \n            nodes_notin_nl_neq_nln"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "have repachildren_eq_no: \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with while_share_red_exp"], ["proof (chain)\npicking this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "have repa_no_def: \n            \"repa no = hd [sn\\<leftarrow>prx . repNodes_eq sn no low high repa] \""], ["proof (prove)\nusing this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)", "by auto"], ["proof (state)\nthis:\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with no_notin_nl repa_repb_nc"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)", "have \"repb no =  hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n\ngoal (1 subgoal):\n 1. repb no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)", "by simp"], ["proof (state)\nthis:\n  repb no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with hd_term_n_Sucn"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n  repb no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)", "have repb_no_hd_term_repa: \"repb no = \n                 hd [sn\\<leftarrow>prx@[node] . repNodes_eq sn no low high repa] \""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n  repb no = hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx)\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "have \"\\<forall>x \\<in> set (prx@[node]). \n            repNodes_eq x no low high repa = repNodes_eq x no low high repb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "assume x_in_take_Sucn: \"x \\<in> set (prx@[node]) \""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "hence x_in_nodeslist: \"x \\<in> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. x \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "with all_nodes_nl_nLeaf"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  x \\<in> set (prx @ node # sfx)", "have x_nLeaf: \"\\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "from nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)", "obtain\n              balanced_x: \"(low x = Null) = (high x = Null)\" and\n              lx_notin_nl: \"low x \\<notin> set (prx @ node # sfx)\" and\n              hx_notin_nl: \"high x \\<notin> set (prx @ node # sfx)\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>(low x = Null) = (high x = Null);\n      low x \\<notin> set (prx @ node # sfx);\n      high x \\<notin> set (prx @ node # sfx)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (low x = Null) = (high x = Null)\n  low x \\<notin> set (prx @ node # sfx)\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "with nodes_notin_nl_neq_nln lno_notin_nl hno_notin_nl lno_nNull \n              hno_nNull repa_repb_nc"], ["proof (chain)\npicking this:\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (low x = Null) = (high x = Null)\n  low x \\<notin> set (prx @ node # sfx)\n  high x \\<notin> set (prx @ node # sfx)", "show \" repNodes_eq x no low high repa = repNodes_eq x no low high repb\""], ["proof (prove)\nusing this:\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (low x = Null) = (high x = Null)\n  low x \\<notin> set (prx @ node # sfx)\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repa = repNodes_eq x no low high repb", "by (simp add: repNodes_eq_def null_comp_def)"], ["proof (state)\nthis:\n  repNodes_eq x no low high repa = repNodes_eq x no low high repb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repa = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repa = repNodes_eq x no low high repb", "have \" [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repa] = \n            [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repa = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repa =\n       repNodes_eq x no low high repb \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "apply (rule P_eq_list_filter)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repa =\n       repNodes_eq x no low high repb \\<Longrightarrow>\n    \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repa = repNodes_eq x no low high repb", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<lbrakk>hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  prx) =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                  (prx @ [node]));\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "with repb_no_hd_term_repa"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "assume no_nln: \"no = node\""], ["proof (state)\nthis:\n  no = node\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with repb_node"], ["proof (chain)\npicking this:\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node", "have repb_no_def: \"repb no = \n          hd [sn\\<leftarrow>(prx @ node # sfx). repNodes_eq sn node low high repa]\""], ["proof (prove)\nusing this:\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "proof (cases \"isLeaf_pt no low high\")"], ["proof (state)\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "case True"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "note isLeaf_no=this"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "have \"\\<forall>x \\<in> set (prx @ node # sfx). repNodes_eq x no low high repb \n            = repNodes_eq x no low high repa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx).\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "assume x_in_nodeslist: \"x \\<in> set (prx @ node # sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "have all_nodes_in_nl_Leafs: \n              \"\\<forall>x \\<in> set (prx @ node # sfx). isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "assume x_in_nodeslist: \" x \\<in> set (prx @ node # sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "from isLeaf_no isLeaf_var_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)", "have \"var no \\<le> 1\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. var no \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with all_nodes_same_var [rule_format, OF x_in_nodeslist no_in_nl]"], ["proof (chain)\npicking this:\n  var x = var no\n  var no \\<le> 1", "have \"var x \\<le> 1\""], ["proof (prove)\nusing this:\n  var x = var no\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var x \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1", "show \"isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. isLeaf_pt x low high", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with x_in_nodeslist"], ["proof (chain)\npicking this:\n  x \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high", "have \"isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with isLeaf_no repa_repb_nc"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  isLeaf_pt x low high", "show \"repNodes_eq x no low high repb = repNodes_eq x no low high repa\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no low high repa", "by (simp add: repNodes_eq_def null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with repb_no_def no_nln"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa", "have repb_no_whole_nl: \"repb no = \n            hd [sn\\<leftarrow> (prx @ node # sfx). repNodes_eq sn node low high repb]\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ node # sfx))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn node low high repb)\n                           (prx @ node # sfx))", "apply (subgoal_tac \n              \"[sn\\<leftarrow> (prx@node#sfx). repNodes_eq sn node low high repa] \n              = [sn\\<leftarrow>(prx @ node # sfx) . repNodes_eq sn node low high repb]\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb = repNodes_eq x no low high repa;\n     filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n      (prx @ node # sfx) =\n     filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n      (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn node low high repb)\n                           (prx @ node # sfx))\n 2. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repa)\n                       (prx @ node # sfx) =\n                      filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repb)\n                       (prx @ node # sfx)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repa)\n                       (prx @ node # sfx) =\n                      filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repb)\n                       (prx @ node # sfx)", "apply (rule P_eq_list_filter)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (prx @ node # sfx).\n                         repNodes_eq x node low high repa =\n                         repNodes_eq x node low high repb", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "from no_in_take_Sucn no_nln"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  no = node", "have \"[sn\\<leftarrow> (prx@[node]). repNodes_eq sn node low high repb]  \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  no = node\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<in> set (prx @ [node]); no = node\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repb)\n                       (prx @ [node]) \\<noteq>\n                      []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>no \\<in> set (prx @ [node]); no = node\\<rbrakk>\n    \\<Longrightarrow> ?x2 \\<in> set (prx @ [node])\n 2. \\<lbrakk>no \\<in> set (prx @ [node]); no = node\\<rbrakk>\n    \\<Longrightarrow> repNodes_eq ?x2 node low high repb", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \"hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn node low high repb] = \n                hd [sn\\<leftarrow>(prx @ node # sfx). repNodes_eq sn node low high repb]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ node # sfx))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ node # sfx))", "apply (rule hd_filter_app [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    []\n 2. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    prx @ node # sfx = (prx @ [node]) @ ?ys1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with repb_no_whole_nl no_nln"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n  no = node\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n  no = node\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "assume no_nLeaf: \" \\<not> isLeaf_pt no low high\""], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with share_or balanced_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high", "have \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "from no_nLeaf share_cond no_nln"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n  no = node", "have \"repa (low no) \\<noteq> repa (high no)\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n  no = node\n\ngoal (1 subgoal):\n 1. repa (low no) \\<noteq> repa (high no)", "by auto"], ["proof (state)\nthis:\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with no_nLeaf balanced_no"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  repa (low no) \\<noteq> repa (high no)", "have \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no \""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "have \"\\<forall> x \\<in> set (prx@node#sfx). repNodes_eq x no low high repb \n            = repNodes_eq x no low high repa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx).\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "proof (rule ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "assume x_in_nodeslist: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "have all_nodes_in_nl_Leafs: \n              \"\\<forall>x \\<in> set (prx@node#sfx). \\<not> isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "assume x_in_nodeslist: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "from no_nLeaf isLeaf_var_no"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)", "have \"1 < var no \""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. 1 < var no", "by simp"], ["proof (state)\nthis:\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "with all_nodes_same_var [rule_format, OF x_in_nodeslist no_in_nl]"], ["proof (chain)\npicking this:\n  var x = var no\n  1 < var no", "have \"1 < var x\""], ["proof (prove)\nusing this:\n  var x = var no\n  1 < var no\n\ngoal (1 subgoal):\n 1. 1 < var x", "by auto"], ["proof (state)\nthis:\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x", "show \"\\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "apply (unfold isLeaf_pt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> Null \\<and>\n             (low x = Null) = (high x = Null) \\<and>\n             low x \\<notin> set (prx @ node # sfx) \\<and>\n             high x \\<notin> set (prx @ node # sfx) \\<and>\n             (low x = Null \\<and> high x = Null) = (var x \\<le> 1) \\<and>\n             (low x \\<noteq> Null \\<longrightarrow>\n              rep (low x) \\<noteq> Null) \\<and>\n             (rep \\<propto> low) x \\<notin> set (prx @ node # sfx);\n     1 < var x\\<rbrakk>\n    \\<Longrightarrow> \\<not> (low x = Null \\<and> high x = Null)", "apply fastforce"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with x_in_nodeslist"], ["proof (chain)\npicking this:\n  x \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "have x_nLeaf: \"\\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "from nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)", "have \"(low x = Null) = (high x = Null) \n                  \\<and> low x \\<notin> set (prx@node#sfx) \\<and> high x \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (low x = Null) = (high x = Null) \\<and>\n    low x \\<notin> set (prx @ node # sfx) \\<and>\n    high x \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with x_nLeaf balanced_no no_nLeaf repa_repb_nc \n              nodes_notin_nl_neq_nln lno_notin_nl hno_notin_nl"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt x low high\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)", "show \"repNodes_eq x no low high repb = repNodes_eq x no low high repa\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt x low high\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no low high repa", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt x low high\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no low high repa", "by (simp add: repNodes_eq_def null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with repb_no_def no_nln"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa", "have repb_no_whole_nl: \n            \"repb no = hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn node low high repb]\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ node # sfx))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn node low high repb)\n                           (prx @ node # sfx))", "apply (subgoal_tac \n                  \"[sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn node low high repa] \n                  = [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn node low high repb]\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb = repNodes_eq x no low high repa;\n     filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n      (prx @ node # sfx) =\n     filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n      (prx @ node # sfx)\\<rbrakk>\n    \\<Longrightarrow> repb no =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn node low high repb)\n                           (prx @ node # sfx))\n 2. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repa)\n                       (prx @ node # sfx) =\n                      filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repb)\n                       (prx @ node # sfx)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repa)\n                       (prx @ node # sfx) =\n                      filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repb)\n                       (prx @ node # sfx)", "apply (rule P_eq_list_filter)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n                  (prx @ node # sfx));\n     no = node;\n     \\<forall>x\\<in>set (prx @ node # sfx).\n        repNodes_eq x no low high repb =\n        repNodes_eq x no low high repa\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>set (prx @ node # sfx).\n                         repNodes_eq x node low high repa =\n                         repNodes_eq x node low high repb", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "from no_in_take_Sucn no_nln"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  no = node", "have \"[sn\\<leftarrow>(prx@[node]) . repNodes_eq sn node low high repb]  \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  no = node\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<in> set (prx @ [node]); no = node\\<rbrakk>\n    \\<Longrightarrow> filter\n                       (\\<lambda>sn. repNodes_eq sn node low high repb)\n                       (prx @ [node]) \\<noteq>\n                      []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>no \\<in> set (prx @ [node]); no = node\\<rbrakk>\n    \\<Longrightarrow> ?x2 \\<in> set (prx @ [node])\n 2. \\<lbrakk>no \\<in> set (prx @ [node]); no = node\\<rbrakk>\n    \\<Longrightarrow> repNodes_eq ?x2 node low high repb", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \n            \"hd [sn\\<leftarrow> (prx@[node]) . repNodes_eq sn node low high repb] = \n            hd [sn\\<leftarrow>(prx@node#sfx) . repNodes_eq sn node low high repb]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ node # sfx))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n         (prx @ node # sfx))", "apply (rule hd_filter_app [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    []\n 2. filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    prx @ node # sfx = (prx @ [node]) @ ?ys1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "with repb_no_whole_nl no_nln"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n  no = node\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n  no = node\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "have repb_no_red_def: \"(\\<forall>no\\<in>set (prx@[node]).(repb \\<propto> low) no = (repb \\<propto> high) no \n      \\<and> low no \\<noteq> Null \\<longrightarrow>  repb no = (repb \\<propto> low) no)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (prx @ [node]).\n       (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null \\<longrightarrow>\n       repb no = (repb \\<propto> low) no", "proof (intro ballI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "assume no_in_take_Sucn: \"no \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "assume red_cond_no: \" (repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null\""], ["proof (state)\nthis:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "from no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])", "have no_in_nl: \"no \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "from nodes_balanced_ordered [rule_format, OF this]"], ["proof (chain)\npicking this:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "obtain\n        no_nNull: \"no \\<noteq> Null\" and\n        balanced_no: \"(low no = Null) = (high no = Null)\" and\n        lno_notin_nl: \"low no \\<notin> set (prx@node#sfx)\" and\n        hno_notin_nl: \"high no \\<notin> set (prx@node#sfx)\" and\n        isLeaf_var_no: \"isLeaf_pt no low high = (var no \\<le> 1)\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n      low no \\<notin> set (prx @ node # sfx);\n      high no \\<notin> set (prx @ node # sfx);\n      isLeaf_pt no low high = (var no \\<le> 1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "have nodes_notin_nl_neq_nln: \"\\<forall> p. p \\<notin> set (prx@node#sfx) \\<longrightarrow> p \\<noteq> node\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node", "by auto"], ["proof (state)\nthis:\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       \\<lbrakk>no \\<in> set (prx @ [node]);\n        (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\\<rbrakk>\n       \\<Longrightarrow> repb no = (repb \\<propto> low) no", "show \" repb no = (repb \\<propto> low) no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb no = (repb \\<propto> low) no", "proof (cases \"no = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "case False"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "note no_notin_nl=this"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "with no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node", "have no_in_take_n: \"no \\<in> set prx\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. no \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no \\<in> set prx\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "from False repa_repb_nc"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt", "have repb_repa_no: \"repb no = repa no\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. repb no = repa no", "by auto"], ["proof (state)\nthis:\n  repb no = repa no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "with while_inv [rule_format, OF no_in_take_n]"], ["proof (chain)\npicking this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  repb no = repa no", "obtain \n          repa_no_nNull: \"repa no \\<noteq> Null\" and\n          while_share_red_exp: \n          \"(if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null \n          then repa no = (repa \\<propto> low) no\n          else repa no = hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \\<and>\n          repa (repa no) = repa no \\<and> \n          (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and> \n          (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1)))\""], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  repb no = repa no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  repb no = repa no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repa no \\<noteq> Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "from red_cond_no nodes_notin_nl_neq_nln lno_notin_nl \n          hno_notin_nl while_share_red_exp balanced_no repa_repb_nc"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt", "have red_repa_no: \"repa no = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. repa no = (repa \\<propto> low) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  repa no = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "from red_cond_no nodes_notin_nl_neq_nln lno_notin_nl repa_repb_nc"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt", "have \"(repb \\<propto> low) no =  (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<notin> set (prx @ node # sfx)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no = (repa \\<propto> low) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) no = (repa \\<propto> low) no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "with red_repa_no no_notin_nl balanced_no repa_repb_nc"], ["proof (chain)\npicking this:\n  repa no = (repa \\<propto> low) no\n  no \\<noteq> node\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (repb \\<propto> low) no = (repa \\<propto> low) no", "have \"repb no = (repb \\<propto> low) no\""], ["proof (prove)\nusing this:\n  repa no = (repa \\<propto> low) no\n  no \\<noteq> node\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (repb \\<propto> low) no = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. repb no = (repb \\<propto> low) no", "by auto"], ["proof (state)\nthis:\n  repb no = (repb \\<propto> low) no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no\n 2. no \\<noteq> node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "with red_cond_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  repb no = (repb \\<propto> low) no", "show ?thesis"], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  repb no = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. repb no = (repb \\<propto> low) no", "by auto"], ["proof (state)\nthis:\n  repb no = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "assume \"no = node\""], ["proof (state)\nthis:\n  no = node\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "with share_cond"], ["proof (chain)\npicking this:\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n  no = node", "have share_cond_pre: \n          \"isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n  no = node\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)", "by simp"], ["proof (state)\nthis:\n  isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow> repb no = (repb \\<propto> low) no", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. repb no = (repb \\<propto> low) no", "proof (cases \"isLeaf_pt no low high\")"], ["proof (state)\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "case True"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "with red_cond_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  isLeaf_pt no low high", "show ?thesis"], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. repb no = (repb \\<propto> low) no", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb no = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "assume no_nLeaf: \"\\<not> isLeaf_pt no low high\""], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "with share_cond_pre"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\n  \\<not> isLeaf_pt no low high", "have \"repa (low no) \\<noteq> repa (high no)\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. repa (low no) \\<noteq> repa (high no)", "by simp"], ["proof (state)\nthis:\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "with no_nLeaf lno_notin_nl hno_notin_nl nodes_notin_nl_neq_nln \n            balanced_no repa_repb_nc"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (low no) \\<noteq> repa (high no)", "have \"repb (low no) \\<noteq> repb (high no)\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. repb (low no) \\<noteq> repb (high no)", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  (low no = Null) = (high no = Null)\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. repb (low no) \\<noteq> repb (high no)", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb (low no) \\<noteq> repb (high no)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "with no_nLeaf balanced_no"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  repb (low no) \\<noteq> repb (high no)", "have \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  repb (low no) \\<noteq> repb (high no)\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    repb no = (repb \\<propto> low) no", "with red_cond_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "show ?thesis"], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repb no = (repb \\<propto> low) no", "by simp"], ["proof (state)\nthis:\n  repb no = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb no = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb no = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repb no = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "have while_while: \"(\\<forall>no\\<in>set (prx@[node]).\n          repb no \\<noteq> Null \\<and>\n          (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null \n          then repb no = (repb \\<propto> low) no\n          else repb no = hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set ((prx@[node])). ((repb \\<propto> high) no1 = (repb \\<propto> high) no \n          \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1))))\"\n      (is \"\\<forall>no\\<in>set (prx@[node]). ?P no \\<and> ?Q no\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no\\<in>set (prx @ [node]).\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "fix no"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "assume no_in_take_Sucn: \"no \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "hence no_in_nl: \"no \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "from nodes_balanced_ordered [rule_format, OF this]"], ["proof (chain)\npicking this:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "obtain\n        no_nNull: \"no \\<noteq> Null\" and\n        balanced_no: \"(low no = Null) = (high no = Null)\" and\n        lno_notin_nl: \"low no \\<notin> set (prx@node#sfx)\" and\n        hno_notin_nl: \"high no \\<notin> set (prx@node#sfx)\" and\n        isLeaf_var_no: \"isLeaf_pt no low high = (var no \\<le> 1)\""], ["proof (prove)\nusing this:\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>no \\<noteq> Null; (low no = Null) = (high no = Null);\n      low no \\<notin> set (prx @ node # sfx);\n      high no \\<notin> set (prx @ node # sfx);\n      isLeaf_pt no low high = (var no \\<le> 1)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  no \\<noteq> Null\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "from no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])", "have filter_take_Sucn_not_empty: \n            \"[sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ [node]) \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set (prx @ [node]) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ [node])\n 2. no \\<in> set (prx @ [node]) \\<Longrightarrow>\n    repNodes_eq ?x1 no low high repb", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have hd_filter_Sucn_in_Sucn: \n            \"hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \\<in> \n            set (prx@[node])\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node])", "by (rule hd_filter_in_list)"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "have nodes_notin_nl_neq_nln: \"\\<forall>p. p \\<notin> set (prx@node#sfx) \\<longrightarrow> p \\<noteq> node\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p.\n       p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node", "by auto"], ["proof (state)\nthis:\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n\ngoal (1 subgoal):\n 1. \\<And>no.\n       no \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repb no \\<noteq> Null \\<and>\n       (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n           low no \\<noteq> Null\n        then repb no = (repb \\<propto> low) no\n        else repb no =\n             hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])) \\<and>\n             repb (repb no) = repb no \\<and>\n             (\\<forall>no1\\<in>set (prx @ [node]).\n                 ((repb \\<propto> high) no1 =\n                  (repb \\<propto> high) no \\<and>\n                  (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                 (repb no = repb no1)))", "show \"?P no \\<and> ?Q no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "proof (cases \"no = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "case False"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "note no_notin_nl=this"], ["proof (state)\nthis:\n  no \\<noteq> node\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "with no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node", "have no_in_take_n: \"no \\<in> set prx\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  no \\<noteq> node\n\ngoal (1 subgoal):\n 1. no \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no \\<in> set prx\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "from False repa_repb_nc"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt", "have repb_repa_no: \"repb no = repa no\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. repb no = repa no", "by auto"], ["proof (state)\nthis:\n  repb no = repa no\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "with while_inv [rule_format, OF no_in_take_n]"], ["proof (chain)\npicking this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  repb no = repa no", "obtain \n          repa_no_nNull: \"repa no \\<noteq> Null\" and\n          while_share_red_exp: \n          \"(if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and> low no \\<noteq> Null \n              then repa no = (repa \\<propto> low) no\n              else repa no = hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \\<and>\n              repa (repa no) = repa no \\<and> \n              (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and> \n              (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1)))\""], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  repb no = repa no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  repa no \\<noteq> Null \\<and>\n  (if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repa no = (repa \\<propto> low) no\n   else repa no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n             prx) \\<and>\n        repa (repa no) = repa no \\<and>\n        (\\<forall>no1\\<in>set prx.\n            ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n             (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n            (repa no = repa no1)))\n  repb no = repa no\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>repa no \\<noteq> Null;\n      if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repa no = (repa \\<propto> low) no\n      else repa no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n                prx) \\<and>\n           repa (repa no) = repa no \\<and>\n           (\\<forall>no1\\<in>set prx.\n               ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n                (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n               (repa no = repa no1))\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  repa no \\<noteq> Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "from repb_repa_no repa_no_nNull"], ["proof (chain)\npicking this:\n  repb no = repa no\n  repa no \\<noteq> Null", "have repb_no_nNull: \"?P no\""], ["proof (prove)\nusing this:\n  repb no = repa no\n  repa no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. repb no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  repb no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "have \"?Q no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "proof (cases \"(repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "case True"], ["proof (state)\nthis:\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n    low no \\<noteq> Null \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with no_in_take_Sucn repb_no_red_def"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repb no = (repb \\<propto> low) no\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null", "show ?thesis"], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repb no = (repb \\<propto> low) no\n  (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "by auto"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (1 subgoal):\n 1. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "assume share_case_repb: \n            \" \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null)\""], ["proof (state)\nthis:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with repb_no_share_def no_in_take_Sucn"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)", "have repb_no_def: \"repb no = hd [sn\\<leftarrow> (prx@[node]). \n            repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with share_case_repb"], ["proof (chain)\npicking this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))", "have \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or> low no = Null\""], ["proof (prove)\nusing this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n    low no = Null", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n    low no = Null", "by simp"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n\ngoal (1 subgoal):\n 1. \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null) \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n  low no = Null\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "proof (cases \"low no = Null\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "case True"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "note lno_Null=this"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no = Null", "have hno_Null: \"high no = Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no = Null\n\ngoal (1 subgoal):\n 1. high no = Null", "by simp"], ["proof (state)\nthis:\n  high no = Null\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from lno_Null hno_Null"], ["proof (chain)\npicking this:\n  low no = Null\n  high no = Null", "have isLeaf_no: \"isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  low no = Null\n  high no = Null\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from True while_share_red_exp"], ["proof (chain)\npicking this:\n  low no = Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))", "have while_low_Null: \n              \"repa no = hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \\<and>\n                  repa (repa no) = repa no \\<and> \n                  (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \n              \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1))\""], ["proof (prove)\nusing this:\n  low no = Null\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. repa no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n    repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set prx.\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1))", "by auto"], ["proof (state)\nthis:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from no_in_take_n"], ["proof (chain)\npicking this:\n  no \\<in> set prx", "have \"[sn\\<leftarrow>prx. repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set prx\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set prx \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set prx \\<Longrightarrow> ?x1 \\<in> set prx\n 2. no \\<in> set prx \\<Longrightarrow> repNodes_eq ?x1 no low high repa", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []", "have hd_term_n_Sucn: \"hd [sn\\<leftarrow>prx. repNodes_eq sn no low high repa] = \n                  hd [sn\\<leftarrow>(prx@[node]) . repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ [node]))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ [node]))", "apply (rule hd_filter_app [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq> []\n 2. filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx \\<noteq>\n    [] \\<Longrightarrow>\n    prx @ [node] = prx @ ?ys1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ [node]))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "have all_nodes_in_nl_Leafs: \n              \"\\<forall>x \\<in> set (prx@node#sfx). isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "assume x_in_nodeslist: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "from isLeaf_no isLeaf_var_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)", "have \"var no \\<le> 1\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. var no \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with all_nodes_same_var [rule_format, OF x_in_nodeslist no_in_nl]"], ["proof (chain)\npicking this:\n  var x = var no\n  var no \\<le> 1", "have \"var x \\<le> 1\""], ["proof (prove)\nusing this:\n  var x = var no\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var x \\<le> 1", "by simp"], ["proof (state)\nthis:\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1", "show \"isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. isLeaf_pt x low high", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from no_in_take_Sucn"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])", "have \n              filter_Sucn_no_notempty: \n              \"[sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ [node]) \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set (prx @ [node]) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ [node])\n 2. no \\<in> set (prx @ [node]) \\<Longrightarrow>\n    repNodes_eq ?x1 no low high repb", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have hd_term_in_take_Sucn: \n              \"hd [sn\\<leftarrow>(prx@[node]) . repNodes_eq sn no low high repb] \n                  \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node])", "by (rule hd_filter_in_list)"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "then"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])", "have hd_term_in_nl: \n              \"hd [sn\\<leftarrow>(prx@[node]) . repNodes_eq sn no low high repb] \n              \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with all_nodes_in_nl_Leafs"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ node # sfx)", "have hd_term_Leaf: \"isLeaf_pt (hd [sn\\<leftarrow> (prx@[node]). \n              repNodes_eq sn no low high repb]) low high \""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. isLeaf_pt\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n           (prx @ [node])))\n     low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])))\n   low high\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from while_low_Null"], ["proof (chain)\npicking this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))", "have \"repa (repa no) = repa no\""], ["proof (prove)\nusing this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. repa (repa no) = repa no", "by auto"], ["proof (state)\nthis:\n  repa (repa no) = repa no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with no_notin_nl repa_repb_nc"], ["proof (chain)\npicking this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (repa no) = repa no", "have repa_repb_no_repb: \"repa (repb no) = repb no\""], ["proof (prove)\nusing this:\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (repa no) = repa no\n\ngoal (1 subgoal):\n 1. repa (repb no) = repb no", "by auto"], ["proof (state)\nthis:\n  repa (repb no) = repb no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "have repb_repb_no: \"repb (repb no) = repb no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "proof (cases \"repb no = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no\n 2. repb no \\<noteq> node \\<Longrightarrow> repb (repb no) = repb no", "case False"], ["proof (state)\nthis:\n  repb no \\<noteq> node\n\ngoal (2 subgoals):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no\n 2. repb no \\<noteq> node \\<Longrightarrow> repb (repb no) = repb no", "with repa_repb_nc repa_repb_no_repb"], ["proof (chain)\npicking this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (repb no) = repb no\n  repb no \\<noteq> node", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  repa (repb no) = repb no\n  repb no \\<noteq> node\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "by auto"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "assume repb_no_nln: \" repb no = node\""], ["proof (state)\nthis:\n  repb no = node\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "with hd_term_Leaf isLeaf_no all_nodes_in_nl_Leafs"], ["proof (chain)\npicking this:\n  isLeaf_pt\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])))\n   low high\n  isLeaf_pt no low high\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  repb no = node", "have nested_hd_repa_repb: \n                \"hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn \n                   (hd [sn\\<leftarrow>(prx@[node]) . repNodes_eq sn no low high repb]) \n                        low high repa] =  \n                 hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                        low high repb]\""], ["proof (prove)\nusing this:\n  isLeaf_pt\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])))\n   low high\n  isLeaf_pt no low high\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  repb no = node\n\ngoal (1 subgoal):\n 1. hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repa)\n         (prx @ node # sfx)) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ node # sfx))", "by (simp add: isLeaf_pt_def repNodes_eq_def null_comp_def)"], ["proof (state)\nthis:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repa)\n       (prx @ node # sfx)) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "from  hd_term_in_take_Sucn"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])", "have \"[sn\\<leftarrow>(prx@[node]). repNodes_eq sn \n                      (hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                       low high repb] \\<noteq> []\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>sn.\n         repNodes_eq sn\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])))\n          low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node]) \\<Longrightarrow>\n    filter\n     (\\<lambda>sn.\n         repNodes_eq sn\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])))\n          low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node]) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ [node])\n 2. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node]) \\<Longrightarrow>\n    repNodes_eq ?x1\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n           (prx @ [node])))\n     low high repb", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter\n   (\\<lambda>sn.\n       repNodes_eq sn\n        (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])))\n        low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "then"], ["proof (chain)\npicking this:\n  filter\n   (\\<lambda>sn.\n       repNodes_eq sn\n        (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])))\n        low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \"hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                          low high repb] = \n                    hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                           low high repb]\""], ["proof (prove)\nusing this:\n  filter\n   (\\<lambda>sn.\n       repNodes_eq sn\n        (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])))\n        low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node])) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ node # sfx))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>sn.\n         repNodes_eq sn\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])))\n          low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node])) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ node # sfx))", "apply (rule hd_filter_app [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. filter\n     (\\<lambda>sn.\n         repNodes_eq sn\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])))\n          low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter\n     (\\<lambda>sn.\n         repNodes_eq sn\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])))\n          low high repb)\n     (prx @ [node]) \\<noteq>\n    []\n 2. filter\n     (\\<lambda>sn.\n         repNodes_eq sn\n          (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])))\n          low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    prx @ node # sfx = (prx @ [node]) @ ?ys1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node])) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "then"], ["proof (chain)\npicking this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node])) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))", "have hd_term_nodeslist_Sucn: \n                \"hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                             low high repb] =\n                    hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                          low high repb]\""], ["proof (prove)\nusing this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node])) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ node # sfx)) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx)) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "from no_in_take_Sucn filter_Sucn_no_notempty"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ [node])\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have filter_filter: \"hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn  \n                    (hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                          low high repb] =  \n                    hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ [node])\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no \\<in> set (prx @ [node]);\n     filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n      (prx @ [node]) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> hd (filter\n                           (\\<lambda>sn.\n                               repNodes_eq sn\n                                (hd (filter\n(\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])))\n                                low high repb)\n                           (prx @ [node])) =\n                      hd (filter\n                           (\\<lambda>sn. repNodes_eq sn no low high repb)\n                           (prx @ [node]))", "apply (rule filter_hd_P_rep_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>no \\<in> set (prx @ [node]);\n     filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n      (prx @ [node]) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x. repNodes_eq x x low high repb\n 2. \\<lbrakk>no \\<in> set (prx @ [node]);\n     filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n      (prx @ [node]) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a b.\n                         repNodes_eq a no low high repb \\<longrightarrow>\n                         repNodes_eq b a low high repb \\<longrightarrow>\n                         repNodes_eq b no low high repb\n 3. \\<lbrakk>no \\<in> set (prx @ [node]);\n     filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n      (prx @ [node]) \\<noteq>\n     []\\<rbrakk>\n    \\<Longrightarrow> filter (\\<lambda>a. repNodes_eq a no low high repb)\n                       (prx @ [node]) \\<noteq>\n                      []", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "from repb_no_def repb_no_nln repb_node"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no = node\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))", "have \"repb (repb no) =  hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                           low high repa]\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no = node\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "with nested_hd_repa_repb"], ["proof (chain)\npicking this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repa)\n       (prx @ node # sfx)) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repa)\n       (prx @ node # sfx))", "have \"repb (repb no) =  hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn \n                    (hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                        low high repb]\""], ["proof (prove)\nusing this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repa)\n       (prx @ node # sfx)) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "with hd_term_nodeslist_Sucn"], ["proof (chain)\npicking this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx)) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node]))\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))", "have \"repb (repb no) =  hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn \n                    ( hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]) \n                         low high repb]\""], ["proof (prove)\nusing this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx)) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node]))\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "with filter_filter"], ["proof (chain)\npicking this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node]))", "have \"repb (repb no) = hd [sn\\<leftarrow>(prx@[node]). \n                repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb (repb no) =\n  hd (filter\n       (\\<lambda>sn.\n           repNodes_eq sn\n            (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                  (prx @ [node])))\n            low high repb)\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by simp"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no = node \\<Longrightarrow> repb (repb no) = repb no", "with repb_no_def"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "by simp"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "have two_nodes_repb: \"(\\<forall>no1\\<in>set (prx@[node]). \n                  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \n                  \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set (prx @ [node]).\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "fix no1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "assume no1_in_take_Sucn: \" no1 \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "then"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])", "have \"no1 \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "with all_nodes_in_nl_Leafs"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)", "have isLeaf_no1: \"isLeaf_pt no1 low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. isLeaf_pt no1 low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "with isLeaf_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  isLeaf_pt no1 low high", "have repbchildren_eq_no_no1: \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "from isLeaf_no1 isLeaf_no"], ["proof (chain)\npicking this:\n  isLeaf_pt no1 low high\n  isLeaf_pt no low high", "have repachildren_eq_no_no1: \"(repa \\<propto> high) no1 = (repa \\<propto> high) no \n                \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  isLeaf_pt no1 low high\n  isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) no1 = (repa \\<propto> low) no", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "from while_low_Null"], ["proof (chain)\npicking this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))", "have while_low_same_rep: \"(\\<forall>no1\\<in>set prx. \n                ((repa \\<propto> high) no1 = (repa \\<propto> high) no \n                    \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1))\""], ["proof (prove)\nusing this:\n  repa no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set prx.\n       ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n        (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n       (repa no = repa no1)", "by auto"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set prx.\n     ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n     (repa no = repa no1)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "show \"((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and> \n                    (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "proof (cases \"no1 = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "case False"], ["proof (state)\nthis:\n  no1 \\<noteq> node\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])\n  no1 \\<noteq> node", "have \"no1 \\<in> set prx\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n  no1 \\<noteq> node\n\ngoal (1 subgoal):\n 1. no1 \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set prx\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with while_low_same_rep repachildren_eq_no_no1"], ["proof (chain)\npicking this:\n  \\<forall>no1\\<in>set prx.\n     ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n     (repa no = repa no1)\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n  no1 \\<in> set prx", "have \"repa no = repa no1\""], ["proof (prove)\nusing this:\n  \\<forall>no1\\<in>set prx.\n     ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n      (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n     (repa no = repa no1)\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n  no1 \\<in> set prx\n\ngoal (1 subgoal):\n 1. repa no = repa no1", "by auto"], ["proof (state)\nthis:\n  repa no = repa no1\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with repa_repb_nc no_notin_nl False repbchildren_eq_no_no1"], ["proof (chain)\npicking this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  no \\<noteq> node\n  no1 \\<noteq> node\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  repa no = repa no1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  no \\<noteq> node\n  no1 \\<noteq> node\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  repa no = repa no1\n\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "by auto"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "assume no1_nln: \"no1 = node\""], ["proof (state)\nthis:\n  no1 = node\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "hence no1_in_take_Sucn: \"no1 \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  no1 = node\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ [node])", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "hence no1_in_nl: \"no1 \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "from nodes_balanced_ordered [rule_format, OF this]"], ["proof (chain)\npicking this:\n  no1 \\<noteq> Null \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n  (low no1 \\<noteq> Null \\<longrightarrow>\n   rep (low no1) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)", "have \n                  balanced_no1: \"(low no1 = Null) = (high no1 = Null)\""], ["proof (prove)\nusing this:\n  no1 \\<noteq> Null \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n  (low no1 \\<noteq> Null \\<longrightarrow>\n   rep (low no1) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (low no1 = Null) = (high no1 = Null)", "by auto"], ["proof (state)\nthis:\n  (low no1 = Null) = (high no1 = Null)\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with no1_in_take_Sucn repb_no_share_def isLeaf_no1"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  isLeaf_pt no1 low high\n  (low no1 = Null) = (high no1 = Null)", "have repb_no1: \"repb no1 = hd [sn\\<leftarrow>(prx@[node]). \n                  repNodes_eq sn no1 low high repb]\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  isLeaf_pt no1 low high\n  (low no1 = Null) = (high no1 = Null)\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n         (prx @ [node]))", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "from balanced_no1 isLeaf_no1 isLeaf_no balanced_no"], ["proof (chain)\npicking this:\n  (low no1 = Null) = (high no1 = Null)\n  isLeaf_pt no1 low high\n  isLeaf_pt no low high\n  (low no = Null) = (high no = Null)", "have repbchildren_eq_no1_no: \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                      \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (prove)\nusing this:\n  (low no1 = Null) = (high no1 = Null)\n  isLeaf_pt no1 low high\n  isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "have \"\\<forall> x \\<in> set (prx@[node]).  repNodes_eq x no low high repb \n                  =  repNodes_eq x no1 low high repb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no low high repb = repNodes_eq x no1 low high repb", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no1 low high repb", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no1 low high repb", "assume x_in_take_Sucn: \" x \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no1 low high repb", "with repbchildren_eq_no1_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])", "show \"repNodes_eq x no low high repb \n                    = repNodes_eq x no1 low high repb\""], ["proof (prove)\nusing this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no1 low high repb", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  repNodes_eq x no low high repb = repNodes_eq x no1 low high repb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repb = repNodes_eq x no1 low high repb\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repb = repNodes_eq x no1 low high repb", "have \" [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \n                      = [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no low high repb = repNodes_eq x no1 low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node])", "by (rule P_eq_list_filter)"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with repb_no_def repb_no1"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node])", "have repb_no_no1: \"repb no = repb no1\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no = repb no1", "by simp"], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with repbchildren_eq_no1_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  repb no = repb no1", "show ?thesis"], ["proof (prove)\nusing this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "by simp"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no = Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))\n 2. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with repb_repb_no repb_no_share_def no_in_take_Sucn share_case_repb"], ["proof (chain)\npicking this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)", "show ?thesis"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "using [[simp_depth_limit=4]]"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "by auto"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "assume lno_nNull: \"low no \\<noteq> Null\""], ["proof (state)\nthis:\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with share_case_repb"], ["proof (chain)\npicking this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  low no \\<noteq> Null", "have repbchildren_neq_no: \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\""], ["proof (prove)\nusing this:\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "by auto"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from balanced_no lno_nNull"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null", "have hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  low no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. high no \\<noteq> Null", "by simp"], ["proof (state)\nthis:\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with repbchildren_neq_no lno_nNull repa_repb_nc \n              lno_notin_nl hno_notin_nl nodes_notin_nl_neq_nln"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  low no \\<noteq> Null\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  high no \\<noteq> Null", "have repachildren_neq_no: \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  low no \\<noteq> Null\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  low no \\<noteq> Null\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with while_share_red_exp"], ["proof (chain)\npicking this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "have repa_while_inv: \"repa (repa no) = repa no \n              \\<and> (\\<forall>no1\\<in>set prx. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \n              \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1))\""], ["proof (prove)\nusing this:\n  if (repa \\<propto> low) no = (repa \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repa no = (repa \\<propto> low) no\n  else repa no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa) prx) \\<and>\n       repa (repa no) = repa no \\<and>\n       (\\<forall>no1\\<in>set prx.\n           ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n            (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n           (repa no = repa no1))\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repa (repa no) = repa no \\<and>\n    (\\<forall>no1\\<in>set prx.\n        ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n         (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n        (repa no = repa no1))", "by auto"], ["proof (state)\nthis:\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "from lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null", "have no_nLeaf: \"\\<not> isLeaf_pt no low high\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "have all_nodes_in_nl_nLeafs: \n              \"\\<forall>x \\<in> set (prx@node#sfx). \\<not> isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "assume x_in_nodeslist: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "from no_nLeaf isLeaf_var_no"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)", "have \"1 < var no \""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  isLeaf_pt no low high = (var no \\<le> 1)\n\ngoal (1 subgoal):\n 1. 1 < var no", "by simp"], ["proof (state)\nthis:\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "with all_nodes_same_var [rule_format, OF x_in_nodeslist no_in_nl]"], ["proof (chain)\npicking this:\n  var x = var no\n  1 < var no", "have \"1 < var x\""], ["proof (prove)\nusing this:\n  var x = var no\n  1 < var no\n\ngoal (1 subgoal):\n 1. 1 < var x", "by simp"], ["proof (state)\nthis:\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nodeslist]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x", "show \" \\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "using [[simp_depth_limit = 2]]"], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "have repb_repb_no: \"repb (repb no) = repb no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from repa_while_inv no_notin_nl repa_repb_nc"], ["proof (chain)\npicking this:\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt", "have \"repa (repb no) = repb no\""], ["proof (prove)\nusing this:\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  no \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n\ngoal (1 subgoal):\n 1. repa (repb no) = repb no", "by simp"], ["proof (state)\nthis:\n  repa (repb no) = repb no\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from hd_filter_Sucn_in_Sucn repb_no_def"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))", "have repb_no_in_take_Sucn: \"repb no \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ [node])", "by simp"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "hence repb_no_in_nl: \"repb no \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from all_nodes_in_nl_nLeafs repb_no_in_nl"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  repb no \\<in> set (prx @ node # sfx)", "have repb_no_nLeaf: \"\\<not> isLeaf_pt (repb no) low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  repb no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt (repb no) low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt (repb no) low high\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from nodes_balanced_ordered [rule_format, OF repb_no_in_nl]"], ["proof (chain)\npicking this:\n  repb no \\<noteq> Null \\<and>\n  (low (repb no) = Null) = (high (repb no) = Null) \\<and>\n  low (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  high (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt (repb no) low high = (var (repb no) \\<le> 1) \\<and>\n  (low (repb no) \\<noteq> Null \\<longrightarrow>\n   rep (low (repb no)) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) (repb no) \\<notin> set (prx @ node # sfx)", "have \"(low (repb no) = Null) = (high (repb no) = Null) \n                \\<and> low (repb no) \\<notin> set (prx@node#sfx) \\<and> \n                high (repb no) \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  repb no \\<noteq> Null \\<and>\n  (low (repb no) = Null) = (high (repb no) = Null) \\<and>\n  low (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  high (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt (repb no) low high = (var (repb no) \\<le> 1) \\<and>\n  (low (repb no) \\<noteq> Null \\<longrightarrow>\n   rep (low (repb no)) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) (repb no) \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (low (repb no) = Null) = (high (repb no) = Null) \\<and>\n    low (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n    high (repb no) \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  (low (repb no) = Null) = (high (repb no) = Null) \\<and>\n  low (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  high (repb no) \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \" repNodes_eq (hd [sn\\<leftarrow>(prx@[node]). \n                repNodes_eq sn no low high repb]) no low high repb\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repNodes_eq\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n           (prx @ [node])))\n     no low high repb", "by (rule hd_filter_prop)"], ["proof (state)\nthis:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])))\n   no low high repb\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repb_no_def"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])))\n   no low high repb", "have \"repNodes_eq (repb no) no low high repb\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])))\n   no low high repb\n\ngoal (1 subgoal):\n 1. repNodes_eq (repb no) no low high repb", "by simp"], ["proof (state)\nthis:\n  repNodes_eq (repb no) no low high repb\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "then"], ["proof (chain)\npicking this:\n  repNodes_eq (repb no) no low high repb", "have \"(repb \\<propto> low) (repb no) = (repb \\<propto> low) no \n                \\<and> (repb \\<propto> high) (repb no) = (repb \\<propto> high) no\""], ["proof (prove)\nusing this:\n  repNodes_eq (repb no) no low high repb\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) (repb no) = (repb \\<propto> low) no \\<and>\n    (repb \\<propto> high) (repb no) = (repb \\<propto> high) no", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) (repb no) = (repb \\<propto> low) no \\<and>\n  (repb \\<propto> high) (repb no) = (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repbchildren_neq_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  (repb \\<propto> low) (repb no) = (repb \\<propto> low) no \\<and>\n  (repb \\<propto> high) (repb no) = (repb \\<propto> high) no", "have \"(repb \\<propto> low) (repb no) \n                \\<noteq> (repb \\<propto> high) (repb no)\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  (repb \\<propto> low) (repb no) = (repb \\<propto> low) no \\<and>\n  (repb \\<propto> high) (repb no) = (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)", "by simp"], ["proof (state)\nthis:\n  (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repb_no_in_take_Sucn repb_no_share_def"], ["proof (chain)\npicking this:\n  repb no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)", "have repb_repb_no_double_hd: \n                \"repb (repb no) = hd [sn\\<leftarrow>(prx@[node]). \n                repNodes_eq sn (repb no) low high repb]\""], ["proof (prove)\nusing this:\n  repb no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \" hd [sn\\<leftarrow>(prx@[node]). \n                repNodes_eq sn (repb no) low high repb] = repb no\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n         (prx @ [node])) =\n    repb no", "apply (simp only: repb_no_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "apply (rule filter_hd_P_rep_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    \\<forall>x. repNodes_eq x x low high repb\n 2. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    \\<forall>a b.\n       repNodes_eq a no low high repb \\<longrightarrow>\n       repNodes_eq b a low high repb \\<longrightarrow>\n       repNodes_eq b no low high repb\n 3. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>a. repNodes_eq a no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node])) =\n  repb no\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repb_repb_no_double_hd"], ["proof (chain)\npicking this:\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node]))\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node])) =\n  repb no", "show ?thesis"], ["proof (prove)\nusing this:\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node]))\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node])) =\n  repb no\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "by simp"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "have \"(\\<forall>no1\\<in>set (prx@[node]). \n                ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and> \n                (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set (prx @ [node]).\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "fix no1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "assume no1_in_take_Sucn: \"no1 \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "hence no1_in_nl: \"no1 \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "from all_nodes_in_nl_nLeafs no1_in_nl"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)", "have no1_nLeaf: \"\\<not> isLeaf_pt no1 low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no1 low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "from nodes_balanced_ordered [rule_format, OF no1_in_nl]"], ["proof (chain)\npicking this:\n  no1 \\<noteq> Null \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n  (low no1 \\<noteq> Null \\<longrightarrow>\n   rep (low no1) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)", "have no1_props: \"(low no1 = Null) = (high no1 = Null) \n                \\<and> low no1 \\<notin> set (prx@node#sfx) \\<and> high no1 \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<noteq> Null \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n  (low no1 \\<noteq> Null \\<longrightarrow>\n   rep (low no1) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (low no1 = Null) = (high no1 = Null) \\<and>\n    low no1 \\<notin> set (prx @ node # sfx) \\<and>\n    high no1 \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "show \"((repb \\<propto> high) no1 = (repb \\<propto> high) no \n                \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "proof (cases \"no1 = node\")"], ["proof (state)\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "case False"], ["proof (state)\nthis:\n  no1 \\<noteq> node\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "note no1_neq_nln=this"], ["proof (state)\nthis:\n  no1 \\<noteq> node\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])\n  no1 \\<noteq> node", "have no1_in_take_n: \"no1 \\<in> set prx\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n  no1 \\<noteq> node\n\ngoal (1 subgoal):\n 1. no1 \\<in> set prx", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set prx\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with repa_while_inv"], ["proof (chain)\npicking this:\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  no1 \\<in> set prx", "have \"((repa \\<propto> high) no1 = (repa \\<propto> high) no \n                  \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no) = (repa no = repa no1)\""], ["proof (prove)\nusing this:\n  repa (repa no) = repa no \\<and>\n  (\\<forall>no1\\<in>set prx.\n      ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n       (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n      (repa no = repa no1))\n  no1 \\<in> set prx\n\ngoal (1 subgoal):\n 1. ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n     (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n    (repa no = repa no1)", "by fastforce"], ["proof (state)\nthis:\n  ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n   (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n  (repa no = repa no1)\n\ngoal (2 subgoals):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)\n 2. no1 \\<noteq> node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "with no1_props no1_nLeaf no_nLeaf balanced_no lno_notin_nl \n                  hno_notin_nl nodes_notin_nl_neq_nln no_notin_nl \n                  no1_neq_nln repa_repb_nc"], ["proof (chain)\npicking this:\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  no \\<noteq> node\n  no1 \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n   (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n  (repa no = repa no1)", "show ?thesis"], ["proof (prove)\nusing this:\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  no \\<noteq> node\n  no1 \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n   (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n  (repa no = repa no1)\n\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  \\<not> isLeaf_pt no low high\n  (low no = Null) = (high no = Null)\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  no \\<noteq> node\n  no1 \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  ((repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n   (repa \\<propto> low) no1 = (repa \\<propto> low) no) =\n  (repa no = repa no1)\n\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "by (auto simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "assume no1_nln: \" no1 = node\""], ["proof (state)\nthis:\n  no1 = node\n\ngoal (1 subgoal):\n 1. no1 = node \\<Longrightarrow>\n    ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume repbchildren_eq_no1_no: \n                    \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                    \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repbchildren_neq_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no", "have \"(repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1", "by auto"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no_share_def no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no1 \\<in> set (prx @ [node])\n  (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1", "have repb_no1_def: \" repb no1 = hd [sn\\<leftarrow>(prx@[node]). \n                    repNodes_eq sn no1 low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no1 \\<in> set (prx @ [node])\n  (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "have filter_no1_eq_filter_no: \"[sn\\<leftarrow>(prx@[node]). \n                    repNodes_eq sn no1 low high repb] =  \n                    [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "have \"\\<forall>x \\<in> set (prx@[node]). \n                      repNodes_eq x no1 low high repb = \n                      repNodes_eq x no low high repb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "assume x_in_take_Sucn: \"x \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "with repbchildren_eq_no1_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])", "show \"repNodes_eq x no1 low high repb = \n                        repNodes_eq x no low high repb\""], ["proof (prove)\nusing this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "by (rule P_eq_list_filter)"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no1_def repb_no_def"], ["proof (chain)\npicking this:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "show \" repb no = repb no1\""], ["proof (prove)\nusing this:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no = repb no1", "by simp"], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume repb_no_no1_eq: \"repb no = repb no1\""], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from no1_nln repb_node repb_no_def"], ["proof (chain)\npicking this:\n  no1 = node\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))", "have repb_no1_def: \n                    \"repb no1 =  \n                    hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn node low high repa]\""], ["proof (prove)\nusing this:\n  no1 = node\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n         (prx @ node # sfx))", "by auto"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with no1_nln repb_no_def repb_no_no1_eq"], ["proof (chain)\npicking this:\n  no1 = node\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no = repb no1\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))", "have repb_Sucn_repa_nl_hd: \" hd [sn\\<leftarrow>(prx@[node]). \n                    repNodes_eq sn no low high repb] = \n                    hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no1 low high repa]\""], ["proof (prove)\nusing this:\n  no1 = node\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no = repb no1\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \" hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \n                    =  hd [sn\\<leftarrow>(prx@node#sfx) . repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ node # sfx))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ node # sfx))", "apply (rule hd_filter_app [symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []\n 2. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    prx @ node # sfx = (prx @ [node]) @ ?ys1", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "then"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))", "have hd_Sucn_hd_whole_list: \n                    \"hd [sn\\<leftarrow>(prx@[node]) . \n                    repNodes_eq sn no low high repb] =  \n                    hd [sn\\<leftarrow> (prx@node#sfx). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "have hd_nl_repb_repa: \n                    \"[sn\\<leftarrow> (prx@node#sfx). repNodes_eq sn no low high repb] \n                    = [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ node # sfx) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ node # sfx) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)", "have \"\\<forall>x \\<in> set (prx@node#sfx).  \n                      repNodes_eq x no low high repb =  \n                      repNodes_eq x no low high repa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx).\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "assume x_in_nl: \"x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "from all_nodes_in_nl_nLeafs x_in_nl"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  x \\<in> set (prx @ node # sfx)", "have x_nLeaf: \"\\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "from  nodes_balanced_ordered [rule_format, OF x_in_nl]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)", "have x_props: \"(low x = Null) = (high x = Null) \\<and> \n                        low x \\<notin> set (prx@node#sfx) \\<and> high x \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (low x = Null) = (high x = Null) \\<and>\n    low x \\<notin> set (prx @ node # sfx) \\<and>\n    high x \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       repNodes_eq x no low high repb = repNodes_eq x no low high repa", "with x_nLeaf lno_nNull hno_nNull lno_notin_nl hno_notin_nl \n                        nodes_notin_nl_neq_nln repa_repb_nc"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt x low high\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)", "show \"repNodes_eq x no low high repb = \n                        repNodes_eq x no low high repa\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt x low high\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no low high repa", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt x low high\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repNodes_eq x no low high repb = repNodes_eq x no low high repa", "by (simp add: repNodes_eq_def isLeaf_pt_def null_comp_def)"], ["proof (state)\nthis:\n  repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ node # sfx) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx).\n     repNodes_eq x no low high repb = repNodes_eq x no low high repa\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ node # sfx) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)", "by (rule P_eq_list_filter)"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ node # sfx) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ node # sfx) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_Sucn_repa_nl_hd hd_Sucn_hd_whole_list"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ node # sfx) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)", "have filter_nl_no_no1: \n                    \"hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa] \n                    =  hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no1 low high repa]\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ node # sfx) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ node # sfx)) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from no_in_nl"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ node # sfx)", "have filter_no_not_empty: \n                    \"[sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n     (prx @ node # sfx) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n     (prx @ node # sfx) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ node # sfx)\n 2. no \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    repNodes_eq ?x1 no low high repa", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n   (prx @ node # sfx) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from no1_in_nl"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ node # sfx)", "have filter_no1_not_empty: \n                    \"[sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no1 low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n     (prx @ node # sfx) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n     (prx @ node # sfx) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no1 \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ node # sfx)\n 2. no1 \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    repNodes_eq ?x1 no1 low high repa", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n   (prx @ node # sfx) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from repb_no_def hd_Sucn_hd_whole_list hd_nl_repb_repa"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ node # sfx) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)", "have \"repb no =\n                    hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ [node])) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n       (prx @ node # sfx))\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ node # sfx) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa) (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with hd_filter_prop [OF filter_no_not_empty ]"], ["proof (chain)\npicking this:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ node # sfx)))\n   no low high repa\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))", "have repNodes_no_repa: \"repNodes_eq (repb no) no low high repa\""], ["proof (prove)\nusing this:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ node # sfx)))\n   no low high repa\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repNodes_eq (repb no) no low high repa", "by auto"], ["proof (state)\nthis:\n  repNodes_eq (repb no) no low high repa\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from repb_no1_def no1_nln"], ["proof (chain)\npicking this:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no1 = node", "have \n                    \"repb no1 = hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no1 \n                    low high repa]\""], ["proof (prove)\nusing this:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no1 = node\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with hd_filter_prop [OF filter_no1_not_empty ]"], ["proof (chain)\npicking this:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n         (prx @ node # sfx)))\n   no1 low high repa\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))", "have \"repNodes_eq (repb no1) no1 low high repa\""], ["proof (prove)\nusing this:\n  repNodes_eq\n   (hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n         (prx @ node # sfx)))\n   no1 low high repa\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. repNodes_eq (repb no1) no1 low high repa", "by auto"], ["proof (state)\nthis:\n  repNodes_eq (repb no1) no1 low high repa\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with filter_nl_no_no1 repNodes_no_repa repb_no_no1_eq"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n  repNodes_eq (repb no) no low high repa\n  repb no = repb no1\n  repNodes_eq (repb no1) no1 low high repa", "have \"(repa \\<propto> high) no1 = \n                    (repa \\<propto> high) no \\<and> (repa \\<propto> low) no1 = (repa \\<propto> low) no\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx)) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repa)\n       (prx @ node # sfx))\n  repNodes_eq (repb no) no low high repa\n  repb no = repb no1\n  repNodes_eq (repb no1) no1 low high repa\n\ngoal (1 subgoal):\n 1. (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n    (repa \\<propto> low) no1 = (repa \\<propto> low) no", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with hno_nNull no1_props no1_nLeaf lno_nNull lno_notin_nl \n                    hno_notin_nl nodes_notin_nl_neq_nln repa_repb_nc"], ["proof (chain)\npicking this:\n  high no \\<noteq> Null\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  low no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no", "show \"(repb \\<propto> high) no1 = \n                    (repb \\<propto> high) no \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (prove)\nusing this:\n  high no \\<noteq> Null\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  low no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  high no \\<noteq> Null\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  low no \\<noteq> Null\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  (repa \\<propto> high) no1 = (repa \\<propto> high) no \\<and>\n  (repa \\<propto> low) no1 = (repa \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "by (auto simp add: isLeaf_pt_def null_comp_def)"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no \\<or>\n             low no = Null;\n     low no \\<noteq> Null\\<rbrakk>\n    \\<Longrightarrow> if (repb \\<propto> low) no =\n                         (repb \\<propto> high) no \\<and>\n                         low no \\<noteq> Null\n                      then repb no = (repb \\<propto> low) no\n                      else repb no =\n                           hd (filter\n                                (\\<lambda>sn.\n                                    repNodes_eq sn no low high repb)\n                                (prx @ [node])) \\<and>\n                           repb (repb no) = repb no \\<and>\n                           (\\<forall>no1\\<in>set (prx @ [node]).\n                               ((repb \\<propto> high) no1 =\n                                (repb \\<propto> high) no \\<and>\n                                (repb \\<propto> low) no1 =\n                                (repb \\<propto> low) no) =\n                               (repb no = repb no1))", "with repb_repb_no repb_no_share_def share_case_repb no_in_take_Sucn"], ["proof (chain)\npicking this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  no \\<in> set (prx @ [node])\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)", "show ?thesis"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  no \\<in> set (prx @ [node])\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null)\n  no \\<in> set (prx @ [node])\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "by auto"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (2 subgoals):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))\n 2. no \\<noteq> node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "with repb_no_nNull"], ["proof (chain)\npicking this:\n  repb no \\<noteq> Null\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no \\<noteq> Null\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (1 subgoal):\n 1. repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "by simp"], ["proof (state)\nthis:\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             (prx @ [node])) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set (prx @ [node]).\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1)))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "assume no_nln: \"no = node\""], ["proof (state)\nthis:\n  no = node\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "with repb_node"], ["proof (chain)\npicking this:\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node", "have repb_no_def: \n          \"repb no = hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa]\""], ["proof (prove)\nusing this:\n  repb node =\n  hd (filter (\\<lambda>sn. repNodes_eq sn node low high repa)\n       (prx @ node # sfx))\n  no = node\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ node # sfx))", "by simp"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "from no_nln"], ["proof (chain)\npicking this:\n  no = node", "have \"no \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no = node\n\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "then"], ["proof (chain)\npicking this:\n  no \\<in> set (prx @ node # sfx)", "have filter_nl_repa_not_empty: \n          \"[sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n     (prx @ node # sfx) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n     (prx @ node # sfx) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ node # sfx)\n 2. no \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n    repNodes_eq ?x1 no low high repa", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n   (prx @ node # sfx) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n   (prx @ node # sfx) \\<noteq>\n  []", "have hd_filter_nl_in_nl: \n          \"hd [sn\\<leftarrow>(prx@node#sfx). repNodes_eq sn no low high repa] \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n   (prx @ node # sfx) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n         (prx @ node # sfx))\n    \\<in> set (prx @ node # sfx)", "by (rule hd_filter_in_list)"], ["proof (state)\nthis:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n  \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "with repb_no_def"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n  \\<in> set (prx @ node # sfx)", "have repb_no_in_nodeslist: \"repb no \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repa)\n       (prx @ node # sfx))\n  \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ node # sfx)", "by simp"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "from nodes_balanced_ordered [rule_format,OF this]"], ["proof (chain)\npicking this:\n  repb no \\<noteq> Null \\<and>\n  (low (repb no) = Null) = (high (repb no) = Null) \\<and>\n  low (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  high (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt (repb no) low high = (var (repb no) \\<le> 1) \\<and>\n  (low (repb no) \\<noteq> Null \\<longrightarrow>\n   rep (low (repb no)) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) (repb no) \\<notin> set (prx @ node # sfx)", "have repb_no_nNull: \"repb no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  repb no \\<noteq> Null \\<and>\n  (low (repb no) = Null) = (high (repb no) = Null) \\<and>\n  low (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  high (repb no) \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt (repb no) low high = (var (repb no) \\<le> 1) \\<and>\n  (low (repb no) \\<noteq> Null \\<longrightarrow>\n   rep (low (repb no)) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) (repb no) \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no \\<noteq> Null", "by auto"], ["proof (state)\nthis:\n  repb no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "from share_cond no_nln"], ["proof (chain)\npicking this:\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n  no = node", "have share_cond_or: \n          \"isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<not> isLeaf_pt node low high \\<and>\n          repa (low node) = repa (high node))\n  no = node\n\ngoal (1 subgoal):\n 1. isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "have share_reduce_if: \" (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and> low no \\<noteq> Null \n              then repb no = (repb \\<propto> low) no\n              else repb no = hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb] \\<and>\n              repb (repb no) = repb no \n              \\<and> (\\<forall>no1\\<in>set (prx@[node]). ((repb \\<propto> high) no1 = (repb \\<propto> high) no \n              \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "proof (cases \"isLeaf_pt no low high\")"], ["proof (state)\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "case True"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "note isLeaf_no=this"], ["proof (state)\nthis:\n  isLeaf_pt no low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "then"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high", "have lno_Null: \"low no = Null\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. low no = Null", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  low no = Null\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "from isLeaf_no no_in_take_Sucn repb_no_share_def"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))", "have repb_no_repb_def: \"repb no \n                = hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "from isLeaf_no nodes_balanced_ordered [rule_format, OF no_in_nl]"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "have var_no: \"var no \\<le> 1\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. var no \\<le> 1", "by auto"], ["proof (state)\nthis:\n  var no \\<le> 1\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have all_nodes_nl_var_l_1: \"\\<forall>x \\<in> set (prx@node#sfx). var x \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). var x \\<le> 1", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (prx @ node # sfx) \\<Longrightarrow> var x \\<le> 1", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (prx @ node # sfx) \\<Longrightarrow> var x \\<le> 1", "assume x_in_nl: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (prx @ node # sfx) \\<Longrightarrow> var x \\<le> 1", "from all_nodes_same_var [rule_format, OF x_in_nl no_in_nl] var_no"], ["proof (chain)\npicking this:\n  var x = var no\n  var no \\<le> 1", "show \" var x \\<le> 1\""], ["proof (prove)\nusing this:\n  var x = var no\n  var no \\<le> 1\n\ngoal (1 subgoal):\n 1. var x \\<le> 1", "by auto"], ["proof (state)\nthis:\n  var x \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). var x \\<le> 1\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have all_nodes_nl_Leafs: \"\\<forall>x \\<in> set (prx@node#sfx). isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "assume x_in_nl: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with all_nodes_nl_var_l_1"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). var x \\<le> 1\n  x \\<in> set (prx @ node # sfx)", "have \"var x \\<le> 1\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). var x \\<le> 1\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. var x \\<le> 1", "by auto"], ["proof (state)\nthis:\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nl ]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1", "show \"isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  var x \\<le> 1\n\ngoal (1 subgoal):\n 1. isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have repb_repb_no: \"repb (repb no) = repb no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from repb_no_share_def no_in_take_Sucn lno_Null"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  low no = Null", "have repb_no_def: \" repb no = \n              hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  low no = Null\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with hd_filter_Sucn_in_Sucn"], ["proof (chain)\npicking this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))", "have repb_no_in_take_Sucn: \"repb no \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  \\<in> set (prx @ [node])\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ [node])", "by simp"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "hence repb_no_in_nl: \"repb no \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ [node])", "by auto"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with all_nodes_nl_Leafs"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  repb no \\<in> set (prx @ [node])", "have repb_no_Leaf: \"isLeaf_pt (repb no) low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. isLeaf_pt (repb no) low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt (repb no) low high\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repb_no_in_take_Sucn repb_no_share_def"], ["proof (chain)\npicking this:\n  repb no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  isLeaf_pt (repb no) low high", "have repb_repb_no_def: \"repb (repb no) = \n              hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn (repb no) low high repb] \""], ["proof (prove)\nusing this:\n  repb no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  isLeaf_pt (repb no) low high\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n         (prx @ [node]))", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "show ?thesis"], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "apply (simp only: repb_repb_no_def  )"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n         (prx @ [node])) =\n    repb no", "apply (simp only: repb_no_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "apply (rule filter_hd_P_rep_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    \\<forall>x. repNodes_eq x x low high repb\n 2. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    \\<forall>a b.\n       repNodes_eq a no low high repb \\<longrightarrow>\n       repNodes_eq b a low high repb \\<longrightarrow>\n       repNodes_eq b no low high repb\n 3. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>a. repNodes_eq a no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have two_nodes_repb: \"(\\<forall>no1\\<in>set (prx@[node]). \n                ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and> \n                (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set (prx @ [node]).\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "fix no1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "assume no1_in_take_Sucn: \"no1 \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "from no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])", "have \"no1 \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "with all_nodes_nl_Leafs"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)", "have isLeaf_no1: \"isLeaf_pt no1 low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. isLeaf_pt no1 low high", "by auto"], ["proof (state)\nthis:\n  isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "with repb_no_share_def no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no1 \\<in> set (prx @ [node])\n  isLeaf_pt no1 low high", "have repb_no1_def: \"repb no1 =  \n                  hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no1 \\<in> set (prx @ [node])\n  isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n         (prx @ [node]))", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "show \"((repb \\<propto> high) no1 = (repb \\<propto> high) no \n                  \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume repbchildren_eq_no1_no: \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                    \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "have \"[sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb] \n                    = [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "have \"\\<forall>x \\<in> set (prx@[node]). \n                      repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "assume x_in_take_Sucn: \" x \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "with repbchildren_eq_no1_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])", "show \" repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\""], ["proof (prove)\nusing this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "by (rule P_eq_list_filter)"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no1_def repb_no_repb_def"], ["proof (chain)\npicking this:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "show \"repb no = repb no1\""], ["proof (prove)\nusing this:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no = repb no1", "by simp"], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume repb_no_no1: \"repb no = repb no1\""], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with isLeaf_no isLeaf_no1"], ["proof (chain)\npicking this:\n  isLeaf_pt no low high\n  isLeaf_pt no1 low high\n  repb no = repb no1", "show \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (prove)\nusing this:\n  isLeaf_pt no low high\n  isLeaf_pt no1 low high\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (2 subgoals):\n 1. isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))\n 2. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with repb_repb_no lno_Null no_in_take_Sucn repb_no_share_def"], ["proof (chain)\npicking this:\n  repb (repb no) = repb no\n  low no = Null\n  no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)", "show ?thesis"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  low no = Null\n  no \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "by auto"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "assume no_nLeaf: \"\\<not> isLeaf_pt no low high\""], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with balanced_no"], ["proof (chain)\npicking this:\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high", "obtain \n            lno_nNull: \"low no \\<noteq> Null\" and \n            hno_nNull: \"high no \\<noteq> Null\""], ["proof (prove)\nusing this:\n  (low no = Null) = (high no = Null)\n  \\<not> isLeaf_pt no low high\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>low no \\<noteq> Null; high no \\<noteq> Null\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "from no_nLeaf nodes_balanced_ordered [rule_format, OF no_in_nl]"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)", "have var_no: \"1 < var no\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  no \\<noteq> Null \\<and>\n  (low no = Null) = (high no = Null) \\<and>\n  low no \\<notin> set (prx @ node # sfx) \\<and>\n  high no \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no low high = (var no \\<le> 1) \\<and>\n  (low no \\<noteq> Null \\<longrightarrow> rep (low no) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. 1 < var no", "by auto"], ["proof (state)\nthis:\n  1 < var no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have all_nodes_nl_var_l_1: \"\\<forall>x \\<in> set (prx@node#sfx). 1 < var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (prx @ node # sfx) \\<Longrightarrow> 1 < var x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (prx @ node # sfx) \\<Longrightarrow> 1 < var x", "assume x_in_nl: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set (prx @ node # sfx) \\<Longrightarrow> 1 < var x", "with all_nodes_same_var [rule_format, OF x_in_nl no_in_nl] var_no"], ["proof (chain)\npicking this:\n  var x = var no\n  1 < var no\n  x \\<in> set (prx @ node # sfx)", "show \"1 < var x\""], ["proof (prove)\nusing this:\n  var x = var no\n  1 < var no\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. 1 < var x", "by simp"], ["proof (state)\nthis:\n  1 < var x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have all_nodes_nl_nLeafs: \"\\<forall> x \\<in> set (prx@node#sfx). \\<not> isLeaf_pt x low high\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "assume x_in_nl: \" x \\<in> set (prx@node#sfx)\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "with all_nodes_nl_var_l_1"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n  x \\<in> set (prx @ node # sfx)", "have \"1 < var x\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). 1 < var x\n  x \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. 1 < var x", "by auto"], ["proof (state)\nthis:\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ node # sfx) \\<Longrightarrow>\n       \\<not> isLeaf_pt x low high", "with nodes_balanced_ordered [rule_format, OF x_in_nl]"], ["proof (chain)\npicking this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x", "show \" \\<not> isLeaf_pt x low high\""], ["proof (prove)\nusing this:\n  x \\<noteq> Null \\<and>\n  (low x = Null) = (high x = Null) \\<and>\n  low x \\<notin> set (prx @ node # sfx) \\<and>\n  high x \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt x low high = (var x \\<le> 1) \\<and>\n  (low x \\<noteq> Null \\<longrightarrow> rep (low x) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) x \\<notin> set (prx @ node # sfx)\n  1 < var x\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt x low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt x low high\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "from no_nLeaf share_cond_or"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no low high\n  isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)", "have repachildren_neq_no: \"repa (low no) \\<noteq> repa (high no)\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no low high\n  isLeaf_pt no low high \\<or> repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. repa (low no) \\<noteq> repa (high no)", "by auto"], ["proof (state)\nthis:\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repa (low no) \\<noteq> repa (high no)", "have \"(repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\""], ["proof (prove)\nusing this:\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  repa (low no) \\<noteq> repa (high no)\n\ngoal (1 subgoal):\n 1. (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "by (simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with repa_repb_nc lno_notin_nl hno_notin_nl \n            nodes_notin_nl_neq_nln lno_nNull hno_nNull"], ["proof (chain)\npicking this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no", "have repbchildren_neq_no: \"(repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\""], ["proof (prove)\nusing this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "using [[simp_depth_limit=1]]"], ["proof (prove)\nusing this:\n  \\<forall>pt. pt \\<noteq> node \\<longrightarrow> repa pt = repb pt\n  low no \\<notin> set (prx @ node # sfx)\n  high no \\<notin> set (prx @ node # sfx)\n  \\<forall>p.\n     p \\<notin> set (prx @ node # sfx) \\<longrightarrow> p \\<noteq> node\n  low no \\<noteq> Null\n  high no \\<noteq> Null\n  (repa \\<propto> low) no \\<noteq> (repa \\<propto> high) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "by (auto simp add: null_comp_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have repb_repb_no: \"repb (repb no) = repb no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from repb_no_share_def no_in_take_Sucn repbchildren_neq_no"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "have repb_no_def: \"repb no = \n              hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \"repNodes_eq (repb no) no low high repb\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repNodes_eq (repb no) no low high repb", "apply (simp only: repb_no_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    repNodes_eq\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n           (prx @ [node])))\n     no low high repb", "apply (rule hd_filter_prop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repNodes_eq (repb no) no low high repb\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repbchildren_neq_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  repNodes_eq (repb no) no low high repb", "have repbchildren_neq_repb_no: \"(repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  repNodes_eq (repb no) no low high repb\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \"repb no \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ [node])", "apply (simp only: repb_no_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node])", "apply (rule hd_filter_in_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "with repbchildren_neq_repb_no repb_no_share_def"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  repb no \\<in> set (prx @ [node])", "have repb_repb_no_def: \" repb (repb no) = \n              hd [sn\\<leftarrow>(prx@[node]) . repNodes_eq sn (repb no) low high repb] \""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) (repb no) \\<noteq> (repb \\<propto> high) (repb no)\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb (repb no) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb (repb no) =\n  hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n       (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "show ?thesis"], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb (repb no) = repb no", "apply (simp only: repb_repb_no_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn (repb no) low high repb)\n         (prx @ [node])) =\n    repb no", "apply (simp only: repb_no_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter\n         (\\<lambda>sn.\n             repNodes_eq sn\n              (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                    (prx @ [node])))\n              low high repb)\n         (prx @ [node])) =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "apply (rule filter_hd_P_rep_indep)"], ["proof (prove)\ngoal (3 subgoals):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    \\<forall>x. repNodes_eq x x low high repb\n 2. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    \\<forall>a b.\n       repNodes_eq a no low high repb \\<longrightarrow>\n       repNodes_eq b a low high repb \\<longrightarrow>\n       repNodes_eq b no low high repb\n 3. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>a. repNodes_eq a no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb (repb no) = repb no\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "have two_nodes_repb: \"(\\<forall>no1\\<in>set (prx@[node]). \n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and> \n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) = (repb no = repb no1))\"\n            (is \"(\\<forall>no1\\<in>set (prx@[node]). ?P no1)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>no1\\<in>set (prx @ [node]).\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "fix no1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "assume no1_in_take_Sucn: \" no1 \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "hence no1_in_nodeslist: \"no1 \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "with all_nodes_nl_nLeafs"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)", "have no1_nLeaf: \"\\<not> isLeaf_pt no1 low high\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n  no1 \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no1 low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. \\<And>no1.\n       no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n       ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n        (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n       (repb no = repb no1)", "show \"?P no1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n     (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n    (repb no = repb no1)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume repbchildren_eq_no1_no: \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repbchildren_neq_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no", "have \"(repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1", "by auto"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with no1_in_take_Sucn repb_no_share_def"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1", "have repb_no1_def: \"repb no1 = \n                hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb]\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  (repb \\<propto> high) no1 \\<noteq> (repb \\<propto> low) no1\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from repb_no_share_def no_in_take_Sucn repbchildren_neq_no"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "have repb_no_def: \"repb no = \n                hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "have \"[sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb] = \n                [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "have \"\\<forall> x \\<in> set (prx@[node]). \n                  repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (prx @ [node]).\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "proof (intro ballI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "assume x_in_take_Sucn: \" x \\<in> set (prx@[node])\""], ["proof (state)\nthis:\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (prx @ [node]) \\<Longrightarrow>\n       repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "with repbchildren_eq_no1_no"], ["proof (chain)\npicking this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])", "show \" repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\""], ["proof (prove)\nusing this:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n  x \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (prx @ [node]).\n     repNodes_eq x no1 low high repb = repNodes_eq x no low high repb\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "by (rule P_eq_list_filter)"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (2 subgoals):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no \\<Longrightarrow>\n    repb no = repb no1\n 2. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no_def repb_no1_def"], ["proof (chain)\npicking this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])", "show \" repb no = repb no1\""], ["proof (prove)\nusing this:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]) =\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no = repb no1", "by simp"], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume repb_no_no1: \"repb no = repb no1\""], ["proof (state)\nthis:\n  repb no = repb no1\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from repb_no_share_def no_in_take_Sucn repbchildren_neq_no"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no", "have repb_no_def: \"repb no = \n                hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n\ngoal (1 subgoal):\n 1. repb no =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have \"repb no \\<in> set (prx@[node])\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ [node])", "apply (simp only: repb_no_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n         (prx @ [node]))\n    \\<in> set (prx @ [node])", "apply (rule hd_filter_in_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "then"], ["proof (chain)\npicking this:\n  repb no \\<in> set (prx @ [node])", "have repb_no_in_nl: \"repb no \\<in> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  repb no \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. repb no \\<in> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  repb no \\<in> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from filter_take_Sucn_not_empty"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have repNodes_repb_no: \"repNodes_eq (repb no) no low high repb\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repNodes_eq (repb no) no low high repb", "apply (simp only: repb_no_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    repNodes_eq\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n           (prx @ [node])))\n     no low high repb", "apply (rule hd_filter_prop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repNodes_eq (repb no) no low high repb\n\ngoal (1 subgoal):\n 1. repb no = repb no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "show \"(repb \\<propto> high) no1 = (repb \\<propto> high) no \n                \\<and> (repb \\<propto> low) no1 = (repb \\<propto> low) no\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "proof (cases \"(repb \\<propto> low) no1 = (repb \\<propto> high) no1\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "case True"], ["proof (state)\nthis:\n  (repb \\<propto> low) no1 = (repb \\<propto> high) no1\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "note red_cond=this"], ["proof (state)\nthis:\n  (repb \\<propto> low) no1 = (repb \\<propto> high) no1\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from no1_in_nodeslist all_nodes_nl_nLeafs"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high", "have no1_nLeaf: \"\\<not> isLeaf_pt no1 low high\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ node # sfx)\n  \\<forall>x\\<in>set (prx @ node # sfx). \\<not> isLeaf_pt x low high\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no1 low high", "by auto"], ["proof (state)\nthis:\n  \\<not> isLeaf_pt no1 low high\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from nodes_balanced_ordered [rule_format, OF no1_in_nodeslist]"], ["proof (chain)\npicking this:\n  no1 \\<noteq> Null \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n  (low no1 \\<noteq> Null \\<longrightarrow>\n   rep (low no1) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)", "have no1_props: \"(low no1 \\<notin> set (prx@node#sfx)) \n                      \\<and> (high no1 \\<notin> set (prx@node#sfx)) \\<and>(low no1 = Null) = (high no1 = Null) \n                      \\<and> ((rep \\<propto> low) no1 \\<notin> set (prx@node#sfx))\""], ["proof (prove)\nusing this:\n  no1 \\<noteq> Null \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  isLeaf_pt no1 low high = (var no1 \\<le> 1) \\<and>\n  (low no1 \\<noteq> Null \\<longrightarrow>\n   rep (low no1) \\<noteq> Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. low no1 \\<notin> set (prx @ node # sfx) \\<and>\n    high no1 \\<notin> set (prx @ node # sfx) \\<and>\n    (low no1 = Null) = (high no1 = Null) \\<and>\n    (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with red_cond no1_nLeaf no1_in_take_Sucn repb_no_red_def"], ["proof (chain)\npicking this:\n  (repb \\<propto> low) no1 = (repb \\<propto> high) no1\n  \\<not> isLeaf_pt no1 low high\n  no1 \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repb no = (repb \\<propto> low) no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)", "have repb_no1_def: \"repb no1 = (repb \\<propto> low) no1\""], ["proof (prove)\nusing this:\n  (repb \\<propto> low) no1 = (repb \\<propto> high) no1\n  \\<not> isLeaf_pt no1 low high\n  no1 \\<in> set (prx @ [node])\n  \\<forall>no\\<in>set (prx @ [node]).\n     (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null \\<longrightarrow>\n     repb no = (repb \\<propto> low) no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no1 = (repb \\<propto> low) no1", "by (auto simp add: isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb no1 = (repb \\<propto> low) no1\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with no1_nLeaf no1_props"], ["proof (chain)\npicking this:\n  \\<not> isLeaf_pt no1 low high\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  repb no1 = (repb \\<propto> low) no1", "have \"repb no1 = repb (low no1)\""], ["proof (prove)\nusing this:\n  \\<not> isLeaf_pt no1 low high\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  repb no1 = (repb \\<propto> low) no1\n\ngoal (1 subgoal):\n 1. repb no1 = repb (low no1)", "by (simp add: null_comp_def isLeaf_pt_def)"], ["proof (state)\nthis:\n  repb no1 = repb (low no1)\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from no1_props no1_nLeaf"], ["proof (chain)\npicking this:\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high", "have \"rep (low no1) \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n\ngoal (1 subgoal):\n 1. rep (low no1) \\<notin> set (prx @ node # sfx)", "by (auto simp add: isLeaf_pt_def null_comp_def)"], ["proof (state)\nthis:\n  rep (low no1) \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with rep_repb_nc no1_props"], ["proof (chain)\npicking this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  rep (low no1) \\<notin> set (prx @ node # sfx)", "have \"repb (low no1) \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  rep (low no1) \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb (low no1) \\<notin> set (prx @ node # sfx)", "by auto"], ["proof (state)\nthis:\n  repb (low no1) \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no1_def repb_no_no1 no1_props no1_nLeaf"], ["proof (chain)\npicking this:\n  repb no1 = (repb \\<propto> low) no1\n  repb no = repb no1\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  repb (low no1) \\<notin> set (prx @ node # sfx)", "have \"repb no \\<notin> set (prx@node#sfx)\""], ["proof (prove)\nusing this:\n  repb no1 = (repb \\<propto> low) no1\n  repb no = repb no1\n  low no1 \\<notin> set (prx @ node # sfx) \\<and>\n  high no1 \\<notin> set (prx @ node # sfx) \\<and>\n  (low no1 = Null) = (high no1 = Null) \\<and>\n  (rep \\<propto> low) no1 \\<notin> set (prx @ node # sfx)\n  \\<not> isLeaf_pt no1 low high\n  repb (low no1) \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. repb no \\<notin> set (prx @ node # sfx)", "by (simp add: isLeaf_pt_def null_comp_def)"], ["proof (state)\nthis:\n  repb no \\<notin> set (prx @ node # sfx)\n\ngoal (2 subgoals):\n 1. (repb \\<propto> low) no1 = (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no\n 2. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no_in_nl"], ["proof (chain)\npicking this:\n  repb no \\<in> set (prx @ node # sfx)\n  repb no \\<notin> set (prx @ node # sfx)", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no \\<in> set (prx @ node # sfx)\n  repb no \\<notin> set (prx @ node # sfx)\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "by simp"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "assume \"(repb \\<propto> low) no1 \\<noteq> (repb \\<propto> high) no1\""], ["proof (state)\nthis:\n  (repb \\<propto> low) no1 \\<noteq> (repb \\<propto> high) no1\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repb_no_share_def no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no1 \\<in> set (prx @ [node])\n  (repb \\<propto> low) no1 \\<noteq> (repb \\<propto> high) no1", "have repb_no1_def: \" repb no1 = \n                  hd [sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb]\""], ["proof (prove)\nusing this:\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no1 \\<in> set (prx @ [node])\n  (repb \\<propto> low) no1 \\<noteq> (repb \\<propto> high) no1\n\ngoal (1 subgoal):\n 1. repb no1 =\n    hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n         (prx @ [node]))", "by auto"], ["proof (state)\nthis:\n  repb no1 =\n  hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb) (prx @ [node]))\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "from no1_in_take_Sucn"], ["proof (chain)\npicking this:\n  no1 \\<in> set (prx @ [node])", "have \"[sn\\<leftarrow>(prx@[node]). repNodes_eq sn no1 low high repb] \\<noteq> []\""], ["proof (prove)\nusing this:\n  no1 \\<in> set (prx @ [node])\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply (rule filter_not_empty)"], ["proof (prove)\ngoal (2 subgoals):\n 1. no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n    ?x1 \\<in> set (prx @ [node])\n 2. no1 \\<in> set (prx @ [node]) \\<Longrightarrow>\n    repNodes_eq ?x1 no1 low high repb", "apply (auto simp add: repNodes_eq_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "then"], ["proof (chain)\npicking this:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n   (prx @ [node]) \\<noteq>\n  []", "have repNodes_repb_no1: \"repNodes_eq (repb no1) no1 low high repb\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n   (prx @ [node]) \\<noteq>\n  []\n\ngoal (1 subgoal):\n 1. repNodes_eq (repb no1) no1 low high repb", "apply (simp only: repb_no1_def )"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    repNodes_eq\n     (hd (filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n           (prx @ [node])))\n     no1 low high repb", "apply (rule hd_filter_prop)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n     (prx @ [node]) \\<noteq>\n    [] \\<Longrightarrow>\n    filter (\\<lambda>sn. repNodes_eq sn no1 low high repb)\n     (prx @ [node]) \\<noteq>\n    []", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  repNodes_eq (repb no1) no1 low high repb\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "with repNodes_repb_no repb_no_no1"], ["proof (chain)\npicking this:\n  repNodes_eq (repb no) no low high repb\n  repb no = repb no1\n  repNodes_eq (repb no1) no1 low high repb", "have \"repNodes_eq no1 no low high repb\""], ["proof (prove)\nusing this:\n  repNodes_eq (repb no) no low high repb\n  repb no = repb no1\n  repNodes_eq (repb no1) no1 low high repb\n\ngoal (1 subgoal):\n 1. repNodes_eq no1 no low high repb", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  repNodes_eq no1 no low high repb\n\ngoal (1 subgoal):\n 1. (repb \\<propto> low) no1 \\<noteq>\n    (repb \\<propto> high) no1 \\<Longrightarrow>\n    (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "then"], ["proof (chain)\npicking this:\n  repNodes_eq no1 no low high repb", "show ?thesis"], ["proof (prove)\nusing this:\n  repNodes_eq no1 no low high repb\n\ngoal (1 subgoal):\n 1. (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n    (repb \\<propto> low) no1 = (repb \\<propto> low) no", "by (simp add: repNodes_eq_def)"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n  (repb \\<propto> low) no1 = (repb \\<propto> low) no\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n  (repb no = repb no1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. \\<not> isLeaf_pt no low high \\<Longrightarrow>\n    if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "with repb_repb_no repb_no_share_def no_in_take_Sucn repbchildren_neq_no"], ["proof (chain)\npicking this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)", "show ?thesis"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "using [[simp_depth_limit=2]]"], ["proof (prove)\nusing this:\n  repb (repb no) = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     \\<not> ((repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n             low no \\<noteq> Null) \\<longrightarrow>\n     repb no =\n     hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n          (prx @ [node]))\n  no \\<in> set (prx @ [node])\n  (repb \\<propto> low) no \\<noteq> (repb \\<propto> high) no\n  \\<forall>no1\\<in>set (prx @ [node]).\n     ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n      (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n     (repb no = repb no1)\n\ngoal (1 subgoal):\n 1. if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n       low no \\<noteq> Null\n    then repb no = (repb \\<propto> low) no\n    else repb no =\n         hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n              (prx @ [node])) \\<and>\n         repb (repb no) = repb no \\<and>\n         (\\<forall>no1\\<in>set (prx @ [node]).\n             ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n              (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n             (repb no = repb no1))", "by fastforce"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (1 subgoal):\n 1. no = node \\<Longrightarrow>\n    repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "with repb_no_nNull"], ["proof (chain)\npicking this:\n  repb no \\<noteq> Null\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))", "show ?thesis"], ["proof (prove)\nusing this:\n  repb no \\<noteq> Null\n  if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n     low no \\<noteq> Null\n  then repb no = (repb \\<propto> low) no\n  else repb no =\n       hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n            (prx @ [node])) \\<and>\n       repb (repb no) = repb no \\<and>\n       (\\<forall>no1\\<in>set (prx @ [node]).\n           ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n            (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n           (repb no = repb no1))\n\ngoal (1 subgoal):\n 1. repb no \\<noteq> Null \\<and>\n    (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n        low no \\<noteq> Null\n     then repb no = (repb \\<propto> low) no\n     else repb no =\n          hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n               (prx @ [node])) \\<and>\n          repb (repb no) = repb no \\<and>\n          (\\<forall>no1\\<in>set (prx @ [node]).\n              ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n               (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n              (repb no = repb no1)))", "by simp"], ["proof (state)\nthis:\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             (prx @ [node])) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set (prx @ [node]).\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  repb no \\<noteq> Null \\<and>\n  (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n      low no \\<noteq> Null\n   then repb no = (repb \\<propto> low) no\n   else repb no =\n        hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n             (prx @ [node])) \\<and>\n        repb (repb no) = repb no \\<and>\n        (\\<forall>no1\\<in>set (prx @ [node]).\n            ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n             (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n            (repb no = repb no1)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>no\\<in>set (prx @ [node]).\n     repb no \\<noteq> Null \\<and>\n     (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repb no = (repb \\<propto> low) no\n      else repb no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])) \\<and>\n           repb (repb no) = repb no \\<and>\n           (\\<forall>no1\\<in>set (prx @ [node]).\n               ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n                (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n               (repb no = repb no1)))\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "with rep_repb_nc"], ["proof (chain)\npicking this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     repb no \\<noteq> Null \\<and>\n     (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repb no = (repb \\<propto> low) no\n      else repb no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])) \\<and>\n           repb (repb no) = repb no \\<and>\n           (\\<forall>no1\\<in>set (prx @ [node]).\n               ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n                (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n               (repb no = repb no1)))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>no.\n     no \\<notin> set (prx @ [node]) \\<longrightarrow> rep no = repb no\n  \\<forall>no\\<in>set (prx @ [node]).\n     repb no \\<noteq> Null \\<and>\n     (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n         low no \\<noteq> Null\n      then repb no = (repb \\<propto> low) no\n      else repb no =\n           hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                (prx @ [node])) \\<and>\n           repb (repb no) = repb no \\<and>\n           (\\<forall>no1\\<in>set (prx @ [node]).\n               ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n                (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n               (repb no = repb no1)))\n\ngoal (1 subgoal):\n 1. (\\<forall>no.\n        no \\<notin> set (prx @ [node]) \\<longrightarrow>\n        rep no = repb no) \\<and>\n    (\\<forall>no\\<in>set (prx @ [node]).\n        repb no \\<noteq> Null \\<and>\n        (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n            low no \\<noteq> Null\n         then repb no = (repb \\<propto> low) no\n         else repb no =\n              hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                   (prx @ [node])) \\<and>\n              repb (repb no) = repb no \\<and>\n              (\\<forall>no1\\<in>set (prx @ [node]).\n                  ((repb \\<propto> high) no1 =\n                   (repb \\<propto> high) no \\<and>\n                   (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                  (repb no = repb no1))))", "by (intro conjI)"], ["proof (state)\nthis:\n  (\\<forall>no.\n      no \\<notin> set (prx @ [node]) \\<longrightarrow>\n      rep no = repb no) \\<and>\n  (\\<forall>no\\<in>set (prx @ [node]).\n      repb no \\<noteq> Null \\<and>\n      (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null\n       then repb no = (repb \\<propto> low) no\n       else repb no =\n            hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                 (prx @ [node])) \\<and>\n            repb (repb no) = repb no \\<and>\n            (\\<forall>no1\\<in>set (prx @ [node]).\n                ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n                 (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                (repb no = repb no1))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>no.\n      no \\<notin> set (prx @ [node]) \\<longrightarrow>\n      rep no = repb no) \\<and>\n  (\\<forall>no\\<in>set (prx @ [node]).\n      repb no \\<noteq> Null \\<and>\n      (if (repb \\<propto> low) no = (repb \\<propto> high) no \\<and>\n          low no \\<noteq> Null\n       then repb no = (repb \\<propto> low) no\n       else repb no =\n            hd (filter (\\<lambda>sn. repNodes_eq sn no low high repb)\n                 (prx @ [node])) \\<and>\n            repb (repb no) = repb no \\<and>\n            (\\<forall>no1\\<in>set (prx @ [node]).\n                ((repb \\<propto> high) no1 = (repb \\<propto> high) no \\<and>\n                 (repb \\<propto> low) no1 = (repb \\<propto> low) no) =\n                (repb no = repb no1))))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}