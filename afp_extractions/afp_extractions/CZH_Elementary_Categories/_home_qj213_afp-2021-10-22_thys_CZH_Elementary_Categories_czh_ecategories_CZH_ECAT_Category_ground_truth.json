{"file_name": "/home/qj213/afp-2021-10-22/thys/CZH_Elementary_Categories/czh_ecategories/CZH_ECAT_Category.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CZH_Elementary_Categories", "problem_names": ["lemmas [cat_cs_simps] = dg_shared_cs_simps", "lemmas [cat_cs_intros] = dg_shared_cs_intros", "lemma cat_smc_components[slicing_simps]:\n  shows \"cat_smc \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Comp\\<rparr> = \\<CC>\\<lparr>Comp\\<rparr>\"", "lemma cat_smc_is_arr[slicing_simps]: \n  \"f : a \\<mapsto>\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [slicing_intros] = cat_smc_is_arr[THEN iffD2]", "lemma cat_smc_composable_arrs[slicing_simps]:\n  \"composable_arrs (cat_smc \\<CC>) = composable_arrs \\<CC>\"", "lemma cat_smc_is_monic_arr[slicing_simps]: \n  \"f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [slicing_intros] = cat_smc_is_monic_arr[THEN iffD2]", "lemma cat_smc_is_epic_arr[slicing_simps]: \n  \"f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [slicing_intros] = cat_smc_is_epic_arr[THEN iffD2]", "lemma cat_smc_is_idem_arr[slicing_simps]:\n  \"f : \\<mapsto>\\<^sub>i\\<^sub>d\\<^sub>e\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : \\<mapsto>\\<^sub>i\\<^sub>d\\<^sub>e\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [slicing_intros] = cat_smc_is_idem_arr[THEN iffD2]", "lemma cat_smc_obj_terminal[slicing_simps]:\n  \"obj_terminal (cat_smc \\<CC>) a \\<longleftrightarrow> obj_terminal \\<CC> a\"", "lemmas [slicing_intros] = cat_smc_obj_terminal[THEN iffD2]", "lemma cat_smc_obj_intial[slicing_simps]:\n  \"obj_initial (cat_smc \\<CC>) a \\<longleftrightarrow> obj_initial \\<CC> a\"", "lemmas [slicing_intros] = cat_smc_obj_intial[THEN iffD2]", "lemma cat_smc_obj_null[slicing_simps]: \n  \"obj_null (cat_smc \\<CC>) a \\<longleftrightarrow> obj_null \\<CC> a\"", "lemmas [slicing_intros] = cat_smc_obj_null[THEN iffD2]", "lemma cat_smc_is_zero_arr[slicing_simps]:\n  \"f : a \\<mapsto>\\<^sub>0\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>0\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [slicing_intros] = cat_smc_is_zero_arr[THEN iffD2]", "lemmas [cat_cs_simps] = \n  category.cat_length\n  category.cat_CId_vdomain\n  category.cat_CId_left_left\n  category.cat_CId_right_left", "lemma (in category) cat_CId_is_arr'[cat_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" and \"b = a\" and \"c = a\" and \"\\<CC>' = \\<CC>\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c\"", "lemmas [cat_cs_intros] = category.cat_CId_is_arr'", "lemma (in category) cat_CId_is_arr''[cat_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" and \"f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n  shows \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"", "lemmas [cat_cs_intros] = category.cat_CId_is_arr''", "lemmas [slicing_intros] = category.cat_semicategory", "lemma (in category) cat_CId_vrange: \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\"", "lemma (in category) category_axioms'[cat_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\"\n  shows \"category \\<alpha>' \\<CC>\"", "lemma categoryI':\n  assumes \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"category \\<alpha> \\<CC>\"", "lemma categoryD':\n  assumes \"category \\<alpha> \\<CC>\" \n  shows \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma categoryE':\n  assumes \"category \\<alpha> \\<CC>\" \n  obtains \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemmas_with [unfolded slicing_simps]:\n  cat_Dom_vdomain[cat_cs_simps] = smc.smc_Dom_vdomain\n  and cat_Dom_vrange = smc.smc_Dom_vrange\n  and cat_Cod_vdomain[cat_cs_simps] = smc.smc_Cod_vdomain\n  and cat_Cod_vrange = smc.smc_Cod_vrange\n  and cat_Obj_vsubset_Vset = smc.smc_Obj_vsubset_Vset\n  and cat_Hom_vifunion_in_Vset[cat_cs_intros] = smc.smc_Hom_vifunion_in_Vset\n  and cat_Obj_if_Dom_vrange = smc.smc_Obj_if_Dom_vrange\n  and cat_Obj_if_Cod_vrange = smc.smc_Obj_if_Cod_vrange\n  and cat_is_arrD = smc.smc_is_arrD\n  and cat_is_arrE[elim] = smc.smc_is_arrE\n  and cat_in_ArrE[elim] = smc.smc_in_ArrE\n  and cat_Hom_in_Vset[cat_cs_intros] = smc.smc_Hom_in_Vset\n  and cat_Arr_vsubset_Vset = smc.smc_Arr_vsubset_Vset\n  and cat_Dom_vsubset_Vset = smc.smc_Dom_vsubset_Vset\n  and cat_Cod_vsubset_Vset = smc.smc_Cod_vsubset_Vset\n  and cat_Obj_in_Vset = smc.smc_Obj_in_Vset\n  and cat_in_Obj_in_Vset[cat_cs_intros] = smc.smc_in_Obj_in_Vset\n  and cat_Arr_in_Vset = smc.smc_Arr_in_Vset\n  and cat_in_Arr_in_Vset[cat_cs_intros] = smc.smc_in_Arr_in_Vset\n  and cat_Dom_in_Vset = smc.smc_Dom_in_Vset\n  and cat_Cod_in_Vset = smc.smc_Cod_in_Vset\n  and cat_semicategory_if_ge_Limit = smc.smc_semicategory_if_ge_Limit\n  and cat_Dom_app_in_Obj = smc.smc_Dom_app_in_Obj\n  and cat_Cod_app_in_Obj = smc.smc_Cod_app_in_Obj\n  and cat_Arr_vempty_if_Obj_vempty = smc.smc_Arr_vempty_if_Obj_vempty\n  and cat_Dom_vempty_if_Arr_vempty = smc.smc_Dom_vempty_if_Arr_vempty\n  and cat_Cod_vempty_if_Arr_vempty = smc.smc_Cod_vempty_if_Arr_vempty", "lemmas [cat_cs_intros] = cat_is_arrD(2,3)", "lemmas_with [unfolded slicing_simps slicing_commute]:\n  cat_Comp_vdomain = smc.smc_Comp_vdomain\n  and cat_Comp_is_arr[cat_cs_intros] = smc.smc_Comp_is_arr\n  and cat_Comp_assoc[cat_cs_intros] = smc.smc_Comp_assoc\n  and cat_Comp_vdomainI[cat_cs_intros] = smc.smc_Comp_vdomainI\n  and cat_Comp_vdomainE[elim!] = smc.smc_Comp_vdomainE\n  and cat_Comp_vdomain_is_composable_arrs = \n    smc.smc_Comp_vdomain_is_composable_arrs\n  and cat_Comp_vrange = smc.smc_Comp_vrange\n  and cat_Comp_vsubset_Vset = smc.smc_Comp_vsubset_Vset\n  and cat_Comp_in_Vset = smc.smc_Comp_in_Vset\n  and cat_Comp_vempty_if_Arr_vempty = smc.smc_Comp_vempty_if_Arr_vempty\n  and cat_assoc_helper = smc.smc_assoc_helper\n  and cat_pattern_rectangle_right = smc.smc_pattern_rectangle_right\n  and cat_pattern_rectangle_left = smc.smc_pattern_rectangle_left\n  and is_epic_arrI = smc.is_epic_arrI\n  and is_epic_arrD[dest] = smc.is_epic_arrD\n  and is_epic_arrE[elim!] = smc.is_epic_arrE\n  and cat_comp_is_monic_arr[cat_arrow_cs_intros] = smc.smc_Comp_is_monic_arr\n  and cat_comp_is_epic_arr[cat_arrow_cs_intros] = smc.smc_Comp_is_epic_arr\n  and cat_comp_is_monic_arr_is_monic_arr =\n    smc.smc_Comp_is_monic_arr_is_monic_arr\n  and cat_is_zero_arr_comp_right[cat_arrow_cs_intros] = \n    smc.smc_is_zero_arr_Comp_right\n  and cat_is_zero_arr_comp_left[cat_arrow_cs_intros] = \n    smc.smc_is_zero_arr_Comp_left", "lemma cat_Comp_is_arr'[cat_cs_intros]:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"\\<CC>' = \\<CC>\"\n  shows \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c\"", "lemmas [cat_cs_simps] = is_idem_arrD(2)", "lemmas [cat_cs_simps] = category.cat_Comp_assoc", "lemmas [cat_cs_intros] =\n  category.cat_Comp_vdomainI\n  category.cat_is_arrD(1-3)\n  category.cat_Comp_is_arr'\n  category.cat_Comp_is_arr", "lemmas [cat_arrow_cs_intros] = \n  is_monic_arrD(1) \n  is_epic_arr_is_arr\n  category.cat_comp_is_monic_arr\n  category.cat_comp_is_epic_arr\n  category.cat_is_zero_arr_comp_right\n  category.cat_is_zero_arr_comp_left", "lemmas [cat_cs_intros] = HomI", "lemmas [cat_cs_simps] = in_Hom_iff", "lemma cat_eqI:\n  assumes \"category \\<alpha> \\<AA>\" \n    and \"category \\<alpha> \\<BB>\"\n    and \"\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\"\n    and \"\\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\"\n    and \"\\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\"\n    and \"\\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\"\n    and \"\\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\"\n  shows \"\\<AA> = \\<BB>\"", "lemma cat_smc_eqI:\n  assumes \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"\\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\"\n    and \"cat_smc \\<AA> = cat_smc \\<BB>\"\n  shows \"\\<AA> = \\<BB>\"", "lemma (in category) cat_def: \n  \"\\<CC> = [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\"", "lemma (in category) cat_CId_vsubset_Vset: \"\\<CC>\\<lparr>CId\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma (in category) cat_category_in_Vset_4: \"\\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\"", "lemma (in category) cat_CId_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>\"", "lemma (in category) cat_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\"", "lemma (in category) cat_category_if_ge_Limit:\n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"category \\<beta> \\<CC>\"", "lemma tiny_category[simp]: \"small {\\<CC>. category \\<alpha> \\<CC>}\"", "lemma (in \\<Z>) categories_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"set {\\<CC>. category \\<alpha> \\<CC>} \\<in>\\<^sub>\\<circ> Vset \\<beta>\"", "lemma category_if_category:\n  assumes \"category \\<beta> \\<CC>\"\n    and \"\\<Z> \\<alpha>\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"category \\<alpha> \\<CC>\"", "lemma (in category) cat_CId_vempty_if_Arr_vempty:\n  assumes \"\\<CC>\\<lparr>Arr\\<rparr> = 0\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr> = 0\"", "lemma op_cat_components:\n  shows [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\"\n    and \"op_cat \\<CC>\\<lparr>Comp\\<rparr> = fflip (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>CId\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\"", "lemma op_cat_component_intros[cat_op_intros]:\n  shows \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<Longrightarrow> f \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Arr\\<rparr>\"", "lemma cat_smc_op_cat[slicing_commute]: \"op_smc (cat_smc \\<CC>) = cat_smc (op_cat \\<CC>)\"", "lemma (in category) op_smc_op_cat[cat_op_simps]: \"op_smc (op_cat \\<CC>) = cat_smc \\<CC>\"", "lemma op_cat_is_arr[cat_op_simps]: \"f : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a \\<longleftrightarrow> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [cat_op_intros] = op_cat_is_arr[THEN iffD2]", "lemma op_cat_Hom[cat_op_simps]: \"Hom (op_cat \\<CC>) a b = Hom \\<CC> b a\"", "lemma op_cat_obj_initial[cat_op_simps]: \n  \"obj_initial (op_cat \\<CC>) a \\<longleftrightarrow> obj_terminal \\<CC> a\"", "lemmas [cat_op_intros] = op_cat_obj_initial[THEN iffD2]", "lemma op_cat_obj_terminal[cat_op_simps]: \n  \"obj_terminal (op_cat \\<CC>) a \\<longleftrightarrow> obj_initial \\<CC> a\"", "lemmas [cat_op_intros] = op_cat_obj_terminal[THEN iffD2]", "lemma op_cat_obj_null[cat_op_simps]: \"obj_null (op_cat \\<CC>) a \\<longleftrightarrow> obj_null \\<CC> a\"", "lemmas [cat_op_intros] = op_cat_obj_null[THEN iffD2]", "lemmas_with [unfolded slicing_simps slicing_commute]:\n  op_cat_Comp_vrange[cat_op_simps] = smc.op_smc_Comp_vrange\n  and op_cat_Comp[cat_op_simps] = smc.op_smc_Comp\n  and op_cat_is_epic_arr[cat_op_simps] = smc.op_smc_is_epic_arr\n  and op_cat_is_monic_arr[cat_op_simps] = smc.op_smc_is_monic_arr\n  and op_cat_is_zero_arr[cat_op_simps] = smc.op_smc_is_zero_arr", "lemmas [cat_op_simps] = \n  category.op_cat_Comp_vrange\n  category.op_cat_Comp\n  category.op_cat_is_epic_arr\n  category.op_cat_is_monic_arr\n  category.op_cat_is_zero_arr", "lemmas_with [\n  where \\<CC>=\\<open>cat_smc \\<CC>\\<close>, unfolded slicing_simps slicing_commute[symmetric]\n  ]:   \n  op_cat_Comp_vdomain[cat_op_simps] = op_smc_Comp_vdomain", "lemma op_cat_vsv[cat_op_intros]: \"vsv (op_cat \\<CC>)\"", "lemma (in category) category_op[cat_cs_intros]: \"category \\<alpha> (op_cat \\<CC>)\"", "lemmas category_op[cat_op_intros] = category.category_op", "lemma (in category) cat_op_cat_op_cat[cat_op_simps]: \"op_cat (op_cat \\<CC>) = \\<CC>\"", "lemmas cat_op_cat_op_cat[cat_op_simps] = category.cat_op_cat_op_cat", "lemma eq_op_cat_iff[cat_op_simps]: \n  assumes \"category \\<alpha> \\<AA>\" and \"category \\<alpha> \\<BB>\"\n  shows \"op_cat \\<AA> = op_cat \\<BB> \\<longleftrightarrow> \\<AA> = \\<BB>\"", "lemma (in category) cat_CId_is_monic_arr[cat_arrow_cs_intros]: \n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> a\"", "lemmas [cat_arrow_cs_intros] = category.cat_CId_is_monic_arr", "lemma (in category) cat_CId_is_epic_arr[cat_arrow_cs_intros]: \n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a\"", "lemmas [cat_arrow_cs_intros] = category.cat_CId_is_epic_arr", "lemma is_right_inverseI:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n  shows \"is_right_inverse \\<CC> g f\"", "lemma is_right_inverseD[dest]:\n  assumes \"is_right_inverse \\<CC> g f\"\n  shows \"\\<exists>a b. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"", "lemma is_right_inverseE[elim]:\n  assumes \"is_right_inverse \\<CC> g f\"\n  obtains a b where \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"", "lemma (in category) is_left_inverseI:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n  shows \"is_left_inverse \\<CC> g f\"", "lemma (in category) is_left_inverseD[dest]:\n  assumes \"is_left_inverse \\<CC> g f\"\n  shows \"\\<exists>a b. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"", "lemma (in category) is_left_inverseE[elim]:\n  assumes \"is_left_inverse \\<CC> g f\"\n  obtains a b where \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"", "lemma (in category) op_cat_is_left_inverse[cat_op_simps]:\n  \"is_left_inverse (op_cat \\<CC>) g f \\<longleftrightarrow> is_right_inverse \\<CC> g f\"", "lemmas [cat_op_simps] = category.op_cat_is_left_inverse", "lemmas [cat_op_intros] = category.op_cat_is_left_inverse[THEN iffD2]", "lemma (in category) op_cat_is_right_inverse[cat_op_simps]:\n  \"is_right_inverse (op_cat \\<CC>) g f \\<longleftrightarrow> is_left_inverse \\<CC> g f\"", "lemmas [cat_op_simps] = category.op_cat_is_right_inverse", "lemmas [cat_op_intros] = category.op_cat_is_right_inverse[THEN iffD2]", "lemma is_inverseI:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n  shows \"is_inverse \\<CC> g f\"", "lemma is_inverseD[dest]: \n  assumes \"is_inverse \\<CC> g f\"\n  shows \n    \"(\n      \\<exists>a b.\n        g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n    )\"", "lemma is_inverseE[elim]:\n  assumes \"is_inverse \\<CC> g f\"\n  obtains a b where \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"", "lemma (in category) op_cat_is_inverse[cat_op_simps]: \n  \"is_inverse (op_cat \\<CC>) g f \\<longleftrightarrow> is_inverse \\<CC> g f\"", "lemmas [cat_op_simps] = category.op_cat_is_inverse", "lemmas [cat_op_intros] = category.op_cat_is_inverse[THEN iffD2]", "lemma is_inverse_sym: \"is_inverse \\<CC> g f \\<longleftrightarrow> is_inverse \\<CC> f g\"", "lemma (in category) cat_is_inverse_eq:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"is_inverse \\<CC> h f\" and \"is_inverse \\<CC> g f\"\n  shows \"h = g\"", "lemma is_inverse_Comp_CId_left:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"is_inverse \\<CC> g' g\" and \"g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"", "lemma is_inverse_Comp_CId_right:\n  assumes \"is_inverse \\<CC> g' g\" and \"g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g' = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"", "lemma (in category) cat_is_inverse_Comp:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes gbc[intro]: \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and fab[intro]: \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and g'g[intro]: \"is_inverse \\<CC> g' g\"\n    and f'f[intro]: \"is_inverse \\<CC> f' f\"\n  shows \"is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g') (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"", "lemma (in category) cat_is_inverse_Comp':\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"is_inverse \\<CC> g' g\"\n    and \"is_inverse \\<CC> f' f\"\n    and \"f'g' = f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g'\"\n    and \"gf = g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\"\n  shows \"is_inverse \\<CC> f'g' gf\"", "lemmas [cat_cs_intros] = category.cat_is_inverse_Comp'", "lemma is_inverse_is_right_inverse[dest]:\n  assumes \"is_inverse \\<CC> g f\" \n  shows \"is_right_inverse \\<CC> g f\"", "lemma (in category) cat_is_inverse_is_left_inverse[dest]:\n  assumes \"is_inverse \\<CC> g f\" \n  shows \"is_left_inverse \\<CC> g f\"", "lemma (in category) cat_is_right_left_inverse_is_inverse:\n  assumes \"is_right_inverse \\<CC> g f\" \"is_left_inverse \\<CC> g f\"\n  shows \"is_inverse \\<CC> g f\"", "lemma is_arr_isomorphismI:\n  assumes \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"is_inverse \\<CC> g f\"\n  shows \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"", "lemma is_arr_isomorphismD[dest]:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"\\<exists>g. is_inverse \\<CC> g f\"", "lemma is_arr_isomorphismE[elim]:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  obtains g where \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"is_inverse \\<CC> g f\"", "lemma is_arr_isomorphismE':\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  obtains g where \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"", "lemma (in category) op_cat_is_arr_isomorphism[cat_op_simps]:\n  \"f : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>op_cat \\<CC>\\<^esub> a \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [cat_op_simps] = category.op_cat_is_arr_isomorphism", "lemmas [cat_op_intros] = category.op_cat_is_arr_isomorphism[THEN iffD2]", "lemma (in category) is_arr_isomorphismI':\n  assumes \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    and \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n  shows \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" and \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_is_inverse_is_arr_isomorphism:\n  assumes \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"is_inverse \\<CC> g f\"\n  shows \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_Comp_is_arr_isomorphism[cat_arrow_cs_intros]:\n  assumes \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\" and \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\"", "lemmas [cat_arrow_cs_intros] = category.cat_Comp_is_arr_isomorphism", "lemma (in category) cat_CId_is_arr_isomorphism: \n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_CId_is_arr_isomorphism'[cat_arrow_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<CC>' = \\<CC>\"\n    and \"b = a\"\n    and \"c = a\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> c\"", "lemmas [cat_arrow_cs_intros] = category.cat_CId_is_arr_isomorphism'", "lemma (in category) cat_is_arr_isomorphism_is_monic_arr[cat_arrow_cs_intros]:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [cat_arrow_cs_intros] = category.cat_is_arr_isomorphism_is_monic_arr", "lemma (in category) cat_is_arr_isomorphism_is_epic_arr:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b\"", "lemmas [cat_arrow_cs_intros] = category.cat_is_arr_isomorphism_is_epic_arr", "lemma (in category) cat_is_inverse_is_inverse_the_inverse:\n  assumes \"is_inverse \\<CC> g f\"\n  shows \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\"", "lemma (in category) cat_is_inverse_eq_the_inverse:\n  assumes \"is_inverse \\<CC> g f\"\n  shows \"g = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\"", "lemma (in category) cat_the_inverse_is_inverse:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\"", "lemma (in category) cat_the_inverse_is_arr_isomorphism:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_the_inverse_is_arr_isomorphism':\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" and \"\\<CC>' = \\<CC>\"\n  shows \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> a\"", "lemmas [cat_cs_intros] = category.cat_the_inverse_is_arr_isomorphism'", "lemma (in category) op_cat_the_inverse:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\"", "lemmas [cat_op_simps] = category.op_cat_the_inverse", "lemma (in category) cat_Comp_the_inverse:\n  assumes \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\" and \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"(g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\"", "lemmas [cat_cs_simps] = category.cat_Comp_the_inverse", "lemma (in category) cat_the_inverse_Comp_CId:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows cat_the_inverse_Comp_CId_left: \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and cat_the_inverse_Comp_CId_right: \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"", "lemmas [cat_cs_simps] = category.cat_the_inverse_Comp_CId", "lemma (in category) cat_the_inverse_the_inverse:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"(f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = f\"", "lemmas [cat_cs_simps] = category.cat_the_inverse_the_inverse", "lemma obj_isoI:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" \n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\"", "lemma obj_isoD[dest]:\n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \n  shows \"\\<exists>f. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"", "lemma obj_isoE[elim!]:\n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \n  obtains f where \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"", "lemma (in category) op_cat_obj_iso[cat_op_simps]: \n  \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>op_cat \\<CC>\\<^esub> b = b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\"", "lemmas [cat_op_simps] = category.op_cat_obj_iso", "lemmas [cat_op_intros] = category.op_cat_obj_iso[THEN iffD2]", "lemma (in category) cat_obj_iso_refl:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_obj_iso_sym[sym]: \n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \n  shows \"b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_obj_iso_trans[trans]:\n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" and \"b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c\" \n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c\"", "lemma (in category) cat_obj_terminal_CId:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_terminal \\<CC> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f\"", "lemma (in category) cat_obj_initial_CId: \n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_initial \\<CC> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f\"", "lemma (in category) cat_obj_terminal_obj_iso:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_terminal \\<CC> a\" and \"obj_terminal \\<CC> a'\"\n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'\"", "lemma (in category) cat_obj_initial_obj_iso:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_initial \\<CC> a\" and \"obj_initial \\<CC> a'\"\n  shows \"a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\"", "lemma (in category) cat_obj_null_obj_iso:\n  \\<comment>\\<open>see Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_null \\<CC> z\" and \"obj_null \\<CC> z'\"\n  shows \"z \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> z'\""], "translations": [["", "lemmas [cat_cs_simps] = dg_shared_cs_simps"], ["", "lemmas [cat_cs_intros] = dg_shared_cs_intros"], ["", "definition CId :: V\n  where [dg_field_simps]: \"CId = 5\\<^sub>\\<nat>\""], ["", "subsubsection\\<open>Slicing\\<close>"], ["", "definition cat_smc :: \"V \\<Rightarrow> V\"\n  where \"cat_smc \\<CC> = [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Comp\\<rparr>]\\<^sub>\\<circ>\""], ["", "text\\<open>Components.\\<close>"], ["", "lemma cat_smc_components[slicing_simps]:\n  shows \"cat_smc \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\"\n    and \"cat_smc \\<CC>\\<lparr>Comp\\<rparr> = \\<CC>\\<lparr>Comp\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cat_smc \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr> &&&\n     cat_smc \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>) &&&\n    cat_smc \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr> &&&\n    cat_smc \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr> &&&\n    cat_smc \\<CC>\\<lparr>Comp\\<rparr> = \\<CC>\\<lparr>Comp\\<rparr>", "unfolding cat_smc_def dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> =\n     \\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> &&&\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> =\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr> =\n    \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr> &&&\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr> =\n    \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr> &&&\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>4\\<^sub>\\<nat>\\<rparr> =\n    \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>", "by (auto simp: nat_omega_simps)"], ["", "text\\<open>Regular definitions.\\<close>"], ["", "lemma cat_smc_is_arr[slicing_simps]: \n  \"f : a \\<mapsto>\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>cat_smc \\<CC>\\<^esub> b =\n    f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_arr_def slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<and>\n     \\<CC>\\<lparr>Dom\\<rparr>\\<lparr>f\\<rparr> = a \\<and>\n     \\<CC>\\<lparr>Cod\\<rparr>\\<lparr>f\\<rparr> = b) =\n    (f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<and>\n     \\<CC>\\<lparr>Dom\\<rparr>\\<lparr>f\\<rparr> = a \\<and>\n     \\<CC>\\<lparr>Cod\\<rparr>\\<lparr>f\\<rparr> = b)", ".."], ["", "lemmas [slicing_intros] = cat_smc_is_arr[THEN iffD2]"], ["", "lemma cat_smc_composable_arrs[slicing_simps]:\n  \"composable_arrs (cat_smc \\<CC>) = composable_arrs \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. composable_arrs (cat_smc \\<CC>) = composable_arrs \\<CC>", "unfolding composable_arrs_def slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set\n     {[g, f]\\<^sub>\\<circ> |g f.\n      \\<exists>a b c.\n         g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and>\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b} =\n    ZFC_in_HOL.set\n     {[g, f]\\<^sub>\\<circ> |g f.\n      \\<exists>a b c.\n         g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and>\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b}", ".."], ["", "lemma cat_smc_is_monic_arr[slicing_simps]: \n  \"f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>cat_smc \\<CC>\\<^esub> b =\n    f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_monic_arr_def slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     (\\<forall>fa g aa.\n         fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<longrightarrow>\n         g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<longrightarrow>\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g \\<longrightarrow>\n         fa = g)) =\n    (f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     (\\<forall>fa g aa.\n         fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<longrightarrow>\n         g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<longrightarrow>\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g \\<longrightarrow>\n         fa = g))", ".."], ["", "lemmas [slicing_intros] = cat_smc_is_monic_arr[THEN iffD2]"], ["", "lemma cat_smc_is_epic_arr[slicing_simps]: \n  \"f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>cat_smc \\<CC>\\<^esub> b =\n    f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_epic_arr_def slicing_simps op_smc_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. f : b \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>[\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, fflip (\\<CC>\\<lparr>Comp\\<rparr>)]\\<^sub>\\<circ>\\<^esub> a =\n    f : b \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>[\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, fflip (\\<CC>\\<lparr>Comp\\<rparr>)]\\<^sub>\\<circ>\\<^esub> a", "by (simp add: nat_omega_simps)"], ["", "lemmas [slicing_intros] = cat_smc_is_epic_arr[THEN iffD2]"], ["", "lemma cat_smc_is_idem_arr[slicing_simps]:\n  \"f : \\<mapsto>\\<^sub>i\\<^sub>d\\<^sub>e\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : \\<mapsto>\\<^sub>i\\<^sub>d\\<^sub>e\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : \\<mapsto>\\<^sub>i\\<^sub>d\\<^sub>e\\<^bsub>cat_smc \\<CC>\\<^esub> b =\n    f : \\<mapsto>\\<^sub>i\\<^sub>d\\<^sub>e\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_idem_arr_def slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f) =\n    (f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f)", ".."], ["", "lemmas [slicing_intros] = cat_smc_is_idem_arr[THEN iffD2]"], ["", "lemma cat_smc_obj_terminal[slicing_simps]:\n  \"obj_terminal (cat_smc \\<CC>) a \\<longleftrightarrow> obj_terminal \\<CC> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_terminal (cat_smc \\<CC>) a = obj_terminal \\<CC> a", "unfolding obj_terminal_def slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         (\\<exists>!f. f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a))) =\n    (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> aa a)))", ".."], ["", "lemmas [slicing_intros] = cat_smc_obj_terminal[THEN iffD2]"], ["", "lemma cat_smc_obj_intial[slicing_simps]:\n  \"obj_initial (cat_smc \\<CC>) a \\<longleftrightarrow> obj_initial \\<CC> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_initial (cat_smc \\<CC>) a = obj_initial \\<CC> a", "unfolding obj_initial_def obj_terminal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> op_smc (cat_smc \\<CC>)\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> op_smc\n                                 (cat_smc\n                                   \\<CC>)\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr (op_smc (cat_smc \\<CC>)) aa a))) =\n    (a \\<in>\\<^sub>\\<circ> op_smc \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> op_smc\n                                 \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr (op_smc \\<CC>) aa a)))", "unfolding smc_op_simps slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> a aa))) =\n    (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> a aa)))", ".."], ["", "lemmas [slicing_intros] = cat_smc_obj_intial[THEN iffD2]"], ["", "lemma cat_smc_obj_null[slicing_simps]: \n  \"obj_null (cat_smc \\<CC>) a \\<longleftrightarrow> obj_null \\<CC> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_null (cat_smc \\<CC>) a = obj_null \\<CC> a", "unfolding obj_null_def slicing_simps smc_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obj_initial \\<CC> a \\<and> obj_terminal \\<CC> a) =\n    (obj_initial \\<CC> a \\<and> obj_terminal \\<CC> a)", ".."], ["", "lemmas [slicing_intros] = cat_smc_obj_null[THEN iffD2]"], ["", "lemma cat_smc_is_zero_arr[slicing_simps]:\n  \"f : a \\<mapsto>\\<^sub>0\\<^bsub>cat_smc \\<CC>\\<^esub> b \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>0\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>0\\<^bsub>cat_smc \\<CC>\\<^esub> b =\n    f : a \\<mapsto>\\<^sub>0\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_zero_arr_def slicing_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>z g fa.\n        obj_null \\<CC> z \\<and>\n        f = g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa \\<and>\n        fa : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> z \\<and>\n        g : z \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b) =\n    (\\<exists>z g fa.\n        obj_null \\<CC> z \\<and>\n        f = g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa \\<and>\n        fa : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> z \\<and>\n        g : z \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)", ".."], ["", "lemmas [slicing_intros] = cat_smc_is_zero_arr[THEN iffD2]"], ["", "subsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>\nThe definition of a category that is used in this work is\nis similar to the definition that can be found in Chapter I-2 in \n\\cite{mac_lane_categories_2010}. The amendments to the definitions that are \nassociated with size have already been explained in \n\\cite{milehins_category_2021}.\n\\<close>"], ["", "locale category = \\<Z> \\<alpha> + vfsequence \\<CC> + CId: vsv \\<open>\\<CC>\\<lparr>CId\\<rparr>\\<close> for \\<alpha> \\<CC> +\n  assumes cat_length[cat_cs_simps]: \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and cat_semicategory[slicing_intros]: \"semicategory \\<alpha> (cat_smc \\<CC>)\"\n    and cat_CId_vdomain[cat_cs_simps]: \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and cat_CId_is_arr[cat_cs_intros]: \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and cat_CId_left_left[cat_cs_simps]: \n      \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and cat_CId_right_left[cat_cs_simps]: \n      \"f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\""], ["", "lemmas [cat_cs_simps] = \n  category.cat_length\n  category.cat_CId_vdomain\n  category.cat_CId_left_left\n  category.cat_CId_right_left"], ["", "lemma (in category) cat_CId_is_arr'[cat_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" and \"b = a\" and \"c = a\" and \"\\<CC>' = \\<CC>\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c", "unfolding assms(2-4)"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by (rule cat_CId_is_arr)"], ["", "lemmas [cat_cs_intros] = category.cat_CId_is_arr'"], ["", "lemma (in category) cat_CId_is_arr''[cat_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" and \"f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n  shows \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "unfolding assms(2)"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by (cs_concl cs_intro: cat_cs_intros)"], ["", "lemmas [cat_cs_intros] = category.cat_CId_is_arr''"], ["", "lemmas [slicing_intros] = category.cat_semicategory"], ["", "lemma (in category) cat_CId_vrange: \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ>\n                              (\\<CC>\\<lparr>CId\\<rparr>) \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ>\n                              (\\<CC>\\<lparr>CId\\<rparr>) \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "assume \"f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\""], ["proof (state)\nthis:\n  f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ>\n                              (\\<CC>\\<lparr>CId\\<rparr>) \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "with cat_CId_vdomain"], ["proof (chain)\npicking this:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n  f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)", "obtain a where \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" and \"f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n  f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n         f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: CId.vrange_atE)"], ["proof (state)\nthis:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ>\n                              (\\<CC>\\<lparr>CId\\<rparr>) \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "with cat_CId_is_arr"], ["proof (chain)\npicking this:\n  ?a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "show \"f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\nusing this:\n  ?a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "by auto"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in category) category_axioms'[cat_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\"\n  shows \"category \\<alpha>' \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha>' \\<CC>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by (rule category_axioms)"], ["", "mk_ide rf category_def[unfolded category_axioms_def]\n  |intro categoryI|\n  |dest categoryD[dest]|\n  |elim categoryE[elim]|"], ["", "lemma categoryI':\n  assumes \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"category \\<alpha> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by (intro categoryI semicategoryI', unfold cat_smc_components slicing_simps)\n    (simp_all add: assms smc_dg_def nat_omega_simps cat_smc_def)"], ["", "lemma categoryD':\n  assumes \"category \\<alpha> \\<CC>\" \n  shows \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<Z> \\<alpha> &&& vfsequence \\<CC>) &&&\n      vcard \\<CC> = 6\\<^sub>\\<nat> &&&\n      vsv (\\<CC>\\<lparr>Dom\\<rparr>) &&& vsv (\\<CC>\\<lparr>Cod\\<rparr>)) &&&\n     (vsv (\\<CC>\\<lparr>Comp\\<rparr>) &&&\n      vsv (\\<CC>\\<lparr>CId\\<rparr>)) &&&\n     \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) =\n     \\<CC>\\<lparr>Arr\\<rparr> &&&\n     \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>)\n     \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> &&&\n     \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) =\n     \\<CC>\\<lparr>Arr\\<rparr>) &&&\n    ((\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> &&&\n      (\\<And>gf.\n          (gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                                   (\\<CC>\\<lparr>Comp\\<rparr>)) =\n          (\\<exists>g f b c a.\n              gf = [g, f]\\<^sub>\\<circ> \\<and>\n              g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and>\n              f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b))) &&&\n     \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) =\n     \\<CC>\\<lparr>Obj\\<rparr> &&&\n     (\\<And>b c g a f.\n         \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c) &&&\n     (\\<And>c d h b g a f.\n         \\<lbrakk>h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d;\n          g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           f =\n                           h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f))) &&&\n    ((\\<And>a.\n         a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a) &&&\n     (\\<And>a b f.\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n         f =\n         f)) &&&\n    (\\<And>b c f.\n        f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n        f) &&&\n    \\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha> &&&\n    (\\<And>A B.\n        \\<lbrakk>A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n         B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n         A \\<in>\\<^sub>\\<circ> Vset \\<alpha>;\n         B \\<in>\\<^sub>\\<circ> Vset \\<alpha>\\<rbrakk>\n        \\<Longrightarrow> \\<Union>\\<^sub>\\<circ>\n                           ((\\<lambda>a\\<in>\\<^sub>\\<circ>A.\n                                \\<Union>\\<^sub>\\<circ>\n                                 (VLambda B (Hom \\<CC> a) `\\<^sub>\\<circ>\n                                  B)) `\\<^sub>\\<circ>\n                            A)\n                          \\<in>\\<^sub>\\<circ> Vset \\<alpha>)", "by \n    (\n      simp_all add: \n        categoryD(2-9)[OF assms] \n        semicategoryD'[OF categoryD(5)[OF assms], unfolded slicing_simps]\n    )"], ["", "lemma categoryE':\n  assumes \"category \\<alpha> \\<CC>\" \n  obtains \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Z> \\<alpha>; vfsequence \\<CC>; vcard \\<CC> = 6\\<^sub>\\<nat>;\n      vsv (\\<CC>\\<lparr>Dom\\<rparr>); vsv (\\<CC>\\<lparr>Cod\\<rparr>);\n      vsv (\\<CC>\\<lparr>Comp\\<rparr>); vsv (\\<CC>\\<lparr>CId\\<rparr>);\n      \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) =\n      \\<CC>\\<lparr>Arr\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n      \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) =\n      \\<CC>\\<lparr>Arr\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n      \\<And>gf.\n         (gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                                  (\\<CC>\\<lparr>Comp\\<rparr>)) =\n         (\\<exists>g f b c a.\n             gf = [g, f]\\<^sub>\\<circ> \\<and>\n             g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and>\n             f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b);\n      \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) =\n      \\<CC>\\<lparr>Obj\\<rparr>;\n      \\<And>b c g a f.\n         \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n      \\<And>c d h b g a f.\n         \\<lbrakk>h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d;\n          g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           f =\n                           h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f);\n      \\<And>a.\n         a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n      \\<And>a b f.\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n         f =\n         f;\n      \\<And>b c f.\n         f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n         f;\n      \\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>;\n      \\<And>A B.\n         \\<lbrakk>A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n          B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n          A \\<in>\\<^sub>\\<circ> Vset \\<alpha>;\n          B \\<in>\\<^sub>\\<circ> Vset \\<alpha>\\<rbrakk>\n         \\<Longrightarrow> \\<Union>\\<^sub>\\<circ>\n                            ((\\<lambda>a\\<in>\\<^sub>\\<circ>A.\n                                 \\<Union>\\<^sub>\\<circ>\n                                  (VLambda B (Hom \\<CC> a) `\\<^sub>\\<circ>\n                                   B)) `\\<^sub>\\<circ>\n                             A)\n                           \\<in>\\<^sub>\\<circ> Vset \\<alpha>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Z> \\<alpha>; vfsequence \\<CC>; vcard \\<CC> = 6\\<^sub>\\<nat>;\n      vsv (\\<CC>\\<lparr>Dom\\<rparr>); vsv (\\<CC>\\<lparr>Cod\\<rparr>);\n      vsv (\\<CC>\\<lparr>Comp\\<rparr>); vsv (\\<CC>\\<lparr>CId\\<rparr>);\n      \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) =\n      \\<CC>\\<lparr>Arr\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n      \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) =\n      \\<CC>\\<lparr>Arr\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n      \\<And>gf.\n         (gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                                  (\\<CC>\\<lparr>Comp\\<rparr>)) =\n         (\\<exists>g f b c a.\n             gf = [g, f]\\<^sub>\\<circ> \\<and>\n             g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and>\n             f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b);\n      \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) =\n      \\<CC>\\<lparr>Obj\\<rparr>;\n      \\<And>b c g a f.\n         \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n      \\<And>c d h b g a f.\n         \\<lbrakk>h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d;\n          g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           f =\n                           h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                           (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f);\n      \\<And>a.\n         a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n      \\<And>a b f.\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n         f =\n         f;\n      \\<And>b c f.\n         f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n         f;\n      \\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>;\n      \\<And>A B.\n         \\<lbrakk>A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n          B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n          A \\<in>\\<^sub>\\<circ> Vset \\<alpha>;\n          B \\<in>\\<^sub>\\<circ> Vset \\<alpha>\\<rbrakk>\n         \\<Longrightarrow> \\<Union>\\<^sub>\\<circ>\n                            ((\\<lambda>a\\<in>\\<^sub>\\<circ>A.\n                                 \\<Union>\\<^sub>\\<circ>\n                                  (VLambda B (Hom \\<CC> a) `\\<^sub>\\<circ>\n                                   B)) `\\<^sub>\\<circ>\n                             A)\n                           \\<in>\\<^sub>\\<circ> Vset \\<alpha>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: categoryD')"], ["", "text\\<open>Slicing.\\<close>"], ["", "context category\nbegin"], ["", "interpretation smc: semicategory \\<alpha> \\<open>cat_smc \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. semicategory \\<alpha> (cat_smc \\<CC>)", "by (rule cat_semicategory)"], ["", "sublocale Dom: vsv \\<open>\\<CC>\\<lparr>Dom\\<rparr>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv (\\<CC>\\<lparr>Dom\\<rparr>)", "by (rule smc.Dom.vsv_axioms[unfolded slicing_simps])"], ["", "sublocale Cod: vsv \\<open>\\<CC>\\<lparr>Cod\\<rparr>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv (\\<CC>\\<lparr>Cod\\<rparr>)", "by (rule smc.Cod.vsv_axioms[unfolded slicing_simps])"], ["", "sublocale Comp: pbinop \\<open>\\<CC>\\<lparr>Arr\\<rparr>\\<close> \\<open>\\<CC>\\<lparr>Comp\\<rparr>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. pbinop (\\<CC>\\<lparr>Arr\\<rparr>) (\\<CC>\\<lparr>Comp\\<rparr>)", "by (rule smc.Comp.pbinop_axioms[unfolded slicing_simps])"], ["", "lemmas_with [unfolded slicing_simps]:\n  cat_Dom_vdomain[cat_cs_simps] = smc.smc_Dom_vdomain\n  and cat_Dom_vrange = smc.smc_Dom_vrange\n  and cat_Cod_vdomain[cat_cs_simps] = smc.smc_Cod_vdomain\n  and cat_Cod_vrange = smc.smc_Cod_vrange\n  and cat_Obj_vsubset_Vset = smc.smc_Obj_vsubset_Vset\n  and cat_Hom_vifunion_in_Vset[cat_cs_intros] = smc.smc_Hom_vifunion_in_Vset\n  and cat_Obj_if_Dom_vrange = smc.smc_Obj_if_Dom_vrange\n  and cat_Obj_if_Cod_vrange = smc.smc_Obj_if_Cod_vrange\n  and cat_is_arrD = smc.smc_is_arrD\n  and cat_is_arrE[elim] = smc.smc_is_arrE\n  and cat_in_ArrE[elim] = smc.smc_in_ArrE\n  and cat_Hom_in_Vset[cat_cs_intros] = smc.smc_Hom_in_Vset\n  and cat_Arr_vsubset_Vset = smc.smc_Arr_vsubset_Vset\n  and cat_Dom_vsubset_Vset = smc.smc_Dom_vsubset_Vset\n  and cat_Cod_vsubset_Vset = smc.smc_Cod_vsubset_Vset\n  and cat_Obj_in_Vset = smc.smc_Obj_in_Vset\n  and cat_in_Obj_in_Vset[cat_cs_intros] = smc.smc_in_Obj_in_Vset\n  and cat_Arr_in_Vset = smc.smc_Arr_in_Vset\n  and cat_in_Arr_in_Vset[cat_cs_intros] = smc.smc_in_Arr_in_Vset\n  and cat_Dom_in_Vset = smc.smc_Dom_in_Vset\n  and cat_Cod_in_Vset = smc.smc_Cod_in_Vset\n  and cat_semicategory_if_ge_Limit = smc.smc_semicategory_if_ge_Limit\n  and cat_Dom_app_in_Obj = smc.smc_Dom_app_in_Obj\n  and cat_Cod_app_in_Obj = smc.smc_Cod_app_in_Obj\n  and cat_Arr_vempty_if_Obj_vempty = smc.smc_Arr_vempty_if_Obj_vempty\n  and cat_Dom_vempty_if_Arr_vempty = smc.smc_Dom_vempty_if_Arr_vempty\n  and cat_Cod_vempty_if_Arr_vempty = smc.smc_Cod_vempty_if_Arr_vempty"], ["", "lemmas [cat_cs_intros] = cat_is_arrD(2,3)"], ["", "lemmas_with [unfolded slicing_simps slicing_commute]:\n  cat_Comp_vdomain = smc.smc_Comp_vdomain\n  and cat_Comp_is_arr[cat_cs_intros] = smc.smc_Comp_is_arr\n  and cat_Comp_assoc[cat_cs_intros] = smc.smc_Comp_assoc\n  and cat_Comp_vdomainI[cat_cs_intros] = smc.smc_Comp_vdomainI\n  and cat_Comp_vdomainE[elim!] = smc.smc_Comp_vdomainE\n  and cat_Comp_vdomain_is_composable_arrs = \n    smc.smc_Comp_vdomain_is_composable_arrs\n  and cat_Comp_vrange = smc.smc_Comp_vrange\n  and cat_Comp_vsubset_Vset = smc.smc_Comp_vsubset_Vset\n  and cat_Comp_in_Vset = smc.smc_Comp_in_Vset\n  and cat_Comp_vempty_if_Arr_vempty = smc.smc_Comp_vempty_if_Arr_vempty\n  and cat_assoc_helper = smc.smc_assoc_helper\n  and cat_pattern_rectangle_right = smc.smc_pattern_rectangle_right\n  and cat_pattern_rectangle_left = smc.smc_pattern_rectangle_left\n  and is_epic_arrI = smc.is_epic_arrI\n  and is_epic_arrD[dest] = smc.is_epic_arrD\n  and is_epic_arrE[elim!] = smc.is_epic_arrE\n  and cat_comp_is_monic_arr[cat_arrow_cs_intros] = smc.smc_Comp_is_monic_arr\n  and cat_comp_is_epic_arr[cat_arrow_cs_intros] = smc.smc_Comp_is_epic_arr\n  and cat_comp_is_monic_arr_is_monic_arr =\n    smc.smc_Comp_is_monic_arr_is_monic_arr\n  and cat_is_zero_arr_comp_right[cat_arrow_cs_intros] = \n    smc.smc_is_zero_arr_Comp_right\n  and cat_is_zero_arr_comp_left[cat_arrow_cs_intros] = \n    smc.smc_is_zero_arr_Comp_left"], ["", "lemma cat_Comp_is_arr'[cat_cs_intros]:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"\\<CC>' = \\<CC>\"\n  shows \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c", "using assms(1,2)"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^bsub>\\<CC>'\\<^esub> c", "unfolding assms(3)"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c", "by (rule cat_Comp_is_arr)"], ["", "end"], ["", "lemmas [cat_cs_simps] = is_idem_arrD(2)"], ["", "lemmas [cat_cs_simps] = category.cat_Comp_assoc"], ["", "lemmas [cat_cs_intros] =\n  category.cat_Comp_vdomainI\n  category.cat_is_arrD(1-3)\n  category.cat_Comp_is_arr'\n  category.cat_Comp_is_arr"], ["", "lemmas [cat_arrow_cs_intros] = \n  is_monic_arrD(1) \n  is_epic_arr_is_arr\n  category.cat_comp_is_monic_arr\n  category.cat_comp_is_epic_arr\n  category.cat_is_zero_arr_comp_right\n  category.cat_is_zero_arr_comp_left"], ["", "lemmas [cat_cs_intros] = HomI"], ["", "lemmas [cat_cs_simps] = in_Hom_iff"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma cat_eqI:\n  assumes \"category \\<alpha> \\<AA>\" \n    and \"category \\<alpha> \\<BB>\"\n    and \"\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\"\n    and \"\\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\"\n    and \"\\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\"\n    and \"\\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\"\n    and \"\\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\"\n  shows \"\\<AA> = \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "interpret \\<AA>: category \\<alpha> \\<AA>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<AA>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "interpret \\<BB>: category \\<alpha> \\<BB>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "proof(rule vsv_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv \\<AA>\n 2. vsv \\<BB>\n 3. \\<D>\\<^sub>\\<circ> \\<AA> = \\<D>\\<^sub>\\<circ> \\<BB>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<AA> \\<Longrightarrow>\n       \\<AA>\\<lparr>a\\<rparr> = \\<BB>\\<lparr>a\\<rparr>", "have dom: \"\\<D>\\<^sub>\\<circ> \\<AA> = 6\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<AA> = 6\\<^sub>\\<nat>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<AA> = 6\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv \\<AA>\n 2. vsv \\<BB>\n 3. \\<D>\\<^sub>\\<circ> \\<AA> = \\<D>\\<^sub>\\<circ> \\<BB>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<AA> \\<Longrightarrow>\n       \\<AA>\\<lparr>a\\<rparr> = \\<BB>\\<lparr>a\\<rparr>", "show \"\\<D>\\<^sub>\\<circ> \\<AA> = \\<D>\\<^sub>\\<circ> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<AA> = \\<D>\\<^sub>\\<circ> \\<BB>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<AA> = \\<D>\\<^sub>\\<circ> \\<BB>\n\ngoal (3 subgoals):\n 1. vsv \\<AA>\n 2. vsv \\<BB>\n 3. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<AA> \\<Longrightarrow>\n       \\<AA>\\<lparr>a\\<rparr> = \\<BB>\\<lparr>a\\<rparr>", "show \"a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<AA> \\<Longrightarrow> \\<AA>\\<lparr>a\\<rparr> = \\<BB>\\<lparr>a\\<rparr>\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<AA> \\<Longrightarrow>\n    \\<AA>\\<lparr>a\\<rparr> = \\<BB>\\<lparr>a\\<rparr>", "by (unfold dom, elim_in_numeral, insert assms) (auto simp: dg_field_simps)"], ["proof (state)\nthis:\n  ?a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<AA> \\<Longrightarrow>\n  \\<AA>\\<lparr>?a\\<rparr> = \\<BB>\\<lparr>?a\\<rparr>\n\ngoal (2 subgoals):\n 1. vsv \\<AA>\n 2. vsv \\<BB>", "qed auto"], ["proof (state)\nthis:\n  \\<AA> = \\<BB>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cat_smc_eqI:\n  assumes \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"\\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\"\n    and \"cat_smc \\<AA> = cat_smc \\<BB>\"\n  shows \"\\<AA> = \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "proof(rule cat_eqI[of \\<alpha>])"], ["proof (state)\ngoal (8 subgoals):\n 1. category \\<alpha> \\<AA>\n 2. category \\<alpha> \\<BB>\n 3. \\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\n 4. \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\n 5. \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\n 6. \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\n 7. \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\n 8. \\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>", "from assms(4)"], ["proof (chain)\npicking this:\n  cat_smc \\<AA> = cat_smc \\<BB>", "have \n    \"cat_smc \\<AA>\\<lparr>Obj\\<rparr> = cat_smc \\<BB>\\<lparr>Obj\\<rparr>\"\n    \"cat_smc \\<AA>\\<lparr>Arr\\<rparr> = cat_smc \\<BB>\\<lparr>Arr\\<rparr>\"\n    \"cat_smc \\<AA>\\<lparr>Dom\\<rparr> = cat_smc \\<BB>\\<lparr>Dom\\<rparr>\"\n    \"cat_smc \\<AA>\\<lparr>Cod\\<rparr> = cat_smc \\<BB>\\<lparr>Cod\\<rparr>\" \n    \"cat_smc \\<AA>\\<lparr>Comp\\<rparr> = cat_smc \\<BB>\\<lparr>Comp\\<rparr>\""], ["proof (prove)\nusing this:\n  cat_smc \\<AA> = cat_smc \\<BB>\n\ngoal (1 subgoal):\n 1. (cat_smc \\<AA>\\<lparr>Obj\\<rparr> = cat_smc \\<BB>\\<lparr>Obj\\<rparr> &&&\n     cat_smc \\<AA>\\<lparr>Arr\\<rparr> =\n     cat_smc \\<BB>\\<lparr>Arr\\<rparr>) &&&\n    cat_smc \\<AA>\\<lparr>Dom\\<rparr> = cat_smc \\<BB>\\<lparr>Dom\\<rparr> &&&\n    cat_smc \\<AA>\\<lparr>Cod\\<rparr> = cat_smc \\<BB>\\<lparr>Cod\\<rparr> &&&\n    cat_smc \\<AA>\\<lparr>Comp\\<rparr> = cat_smc \\<BB>\\<lparr>Comp\\<rparr>", "by auto"], ["proof (state)\nthis:\n  cat_smc \\<AA>\\<lparr>Obj\\<rparr> = cat_smc \\<BB>\\<lparr>Obj\\<rparr>\n  cat_smc \\<AA>\\<lparr>Arr\\<rparr> = cat_smc \\<BB>\\<lparr>Arr\\<rparr>\n  cat_smc \\<AA>\\<lparr>Dom\\<rparr> = cat_smc \\<BB>\\<lparr>Dom\\<rparr>\n  cat_smc \\<AA>\\<lparr>Cod\\<rparr> = cat_smc \\<BB>\\<lparr>Cod\\<rparr>\n  cat_smc \\<AA>\\<lparr>Comp\\<rparr> = cat_smc \\<BB>\\<lparr>Comp\\<rparr>\n\ngoal (8 subgoals):\n 1. category \\<alpha> \\<AA>\n 2. category \\<alpha> \\<BB>\n 3. \\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\n 4. \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\n 5. \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\n 6. \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\n 7. \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\n 8. \\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>", "then"], ["proof (chain)\npicking this:\n  cat_smc \\<AA>\\<lparr>Obj\\<rparr> = cat_smc \\<BB>\\<lparr>Obj\\<rparr>\n  cat_smc \\<AA>\\<lparr>Arr\\<rparr> = cat_smc \\<BB>\\<lparr>Arr\\<rparr>\n  cat_smc \\<AA>\\<lparr>Dom\\<rparr> = cat_smc \\<BB>\\<lparr>Dom\\<rparr>\n  cat_smc \\<AA>\\<lparr>Cod\\<rparr> = cat_smc \\<BB>\\<lparr>Cod\\<rparr>\n  cat_smc \\<AA>\\<lparr>Comp\\<rparr> = cat_smc \\<BB>\\<lparr>Comp\\<rparr>", "show\n    \"\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\"\n    \"\\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\"\n    \"\\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\"\n    \"\\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\"\n    \"\\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\""], ["proof (prove)\nusing this:\n  cat_smc \\<AA>\\<lparr>Obj\\<rparr> = cat_smc \\<BB>\\<lparr>Obj\\<rparr>\n  cat_smc \\<AA>\\<lparr>Arr\\<rparr> = cat_smc \\<BB>\\<lparr>Arr\\<rparr>\n  cat_smc \\<AA>\\<lparr>Dom\\<rparr> = cat_smc \\<BB>\\<lparr>Dom\\<rparr>\n  cat_smc \\<AA>\\<lparr>Cod\\<rparr> = cat_smc \\<BB>\\<lparr>Cod\\<rparr>\n  cat_smc \\<AA>\\<lparr>Comp\\<rparr> = cat_smc \\<BB>\\<lparr>Comp\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr> &&&\n     \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>) &&&\n    \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr> &&&\n    \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr> &&&\n    \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>", "unfolding slicing_simps"], ["proof (prove)\nusing this:\n  \\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\n  \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\n  \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\n  \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\n  \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr> &&&\n     \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>) &&&\n    \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr> &&&\n    \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr> &&&\n    \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>", "by simp_all"], ["proof (state)\nthis:\n  \\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\n  \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\n  \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\n  \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\n  \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\n\ngoal (3 subgoals):\n 1. category \\<alpha> \\<AA>\n 2. category \\<alpha> \\<BB>\n 3. \\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>", "qed (auto simp: assms)"], ["", "lemma (in category) cat_def: \n  \"\\<CC> = [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> =\n    [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n     \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n     \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>", "proof(rule vsv_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv \\<CC>\n 2. vsv [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n         \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n         \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 3. \\<D>\\<^sub>\\<circ> \\<CC> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n      \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n       \\<CC>\\<lparr>a\\<rparr> =\n       [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n        \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n        \\<CC>\\<lparr>Comp\\<rparr>,\n        \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "have dom_lhs: \"\\<D>\\<^sub>\\<circ> \\<CC> = 6\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<CC> = 6\\<^sub>\\<nat>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<CC> = 6\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv \\<CC>\n 2. vsv [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n         \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n         \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 3. \\<D>\\<^sub>\\<circ> \\<CC> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n      \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n       \\<CC>\\<lparr>a\\<rparr> =\n       [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n        \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n        \\<CC>\\<lparr>Comp\\<rparr>,\n        \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "have dom_rhs: \"\\<D>\\<^sub>\\<circ> [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ> = 6\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n      \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ> =\n    6\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n    \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n    \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ> =\n  6\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv \\<CC>\n 2. vsv [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n         \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n         \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 3. \\<D>\\<^sub>\\<circ> \\<CC> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n      \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n       \\<CC>\\<lparr>a\\<rparr> =\n       [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n        \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n        \\<CC>\\<lparr>Comp\\<rparr>,\n        \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "then"], ["proof (chain)\npicking this:\n  \\<D>\\<^sub>\\<circ>\n   [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n    \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n    \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ> =\n  6\\<^sub>\\<nat>", "show \"\\<D>\\<^sub>\\<circ> \\<CC> = \\<D>\\<^sub>\\<circ> [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\""], ["proof (prove)\nusing this:\n  \\<D>\\<^sub>\\<circ>\n   [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n    \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n    \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ> =\n  6\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<CC> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n      \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>", "unfolding dom_lhs dom_rhs"], ["proof (prove)\nusing this:\n  6\\<^sub>\\<nat> = 6\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. 6\\<^sub>\\<nat> = 6\\<^sub>\\<nat>", "by simp"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<CC> =\n  \\<D>\\<^sub>\\<circ>\n   [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n    \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n    \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n\ngoal (3 subgoals):\n 1. vsv \\<CC>\n 2. vsv [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n         \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n         \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\n 3. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n       \\<CC>\\<lparr>a\\<rparr> =\n       [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n        \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n        \\<CC>\\<lparr>Comp\\<rparr>,\n        \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "show \"a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n    \\<CC>\\<lparr>a\\<rparr> = [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>\" \n    for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n    \\<CC>\\<lparr>a\\<rparr> =\n    [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n     \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n     \\<CC>\\<lparr>Comp\\<rparr>,\n     \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "unfolding dom_lhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> 6\\<^sub>\\<nat> \\<Longrightarrow>\n    \\<CC>\\<lparr>a\\<rparr> =\n    [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n     \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n     \\<CC>\\<lparr>Comp\\<rparr>,\n     \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "by elim_in_numeral (simp_all add: dg_field_simps nat_omega_simps)"], ["proof (state)\nthis:\n  ?a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n  \\<CC>\\<lparr>?a\\<rparr> =\n  [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n   \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n   \\<CC>\\<lparr>Comp\\<rparr>,\n   \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\\<lparr>?a\\<rparr>\n\ngoal (2 subgoals):\n 1. vsv \\<CC>\n 2. vsv [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n         \\<CC>\\<lparr>Dom\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>,\n         \\<CC>\\<lparr>Comp\\<rparr>, \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>", "qed auto"], ["", "text\\<open>Size.\\<close>"], ["", "lemma (in category) cat_CId_vsubset_Vset: \"\\<CC>\\<lparr>CId\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>", "proof(intro vsubsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "fix af"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "assume \"af \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr>\""], ["proof (state)\nthis:\n  af \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "then"], ["proof (chain)\npicking this:\n  af \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr>", "obtain a f \n    where af_def: \"af = \\<langle>a, f\\<rangle>\" \n      and a: \"a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\" \n      and f: \"f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\""], ["proof (prove)\nusing this:\n  af \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<And>a f.\n        \\<lbrakk>af = \\<langle>a, f\\<rangle>;\n         a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                                (\\<CC>\\<lparr>CId\\<rparr>);\n         f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ>\n                                (\\<CC>\\<lparr>CId\\<rparr>)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: CId.vbrelation_vinE)"], ["proof (state)\nthis:\n  af = \\<langle>a, f\\<rangle>\n  a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "from a"], ["proof (chain)\npicking this:\n  a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)", "have \"a \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (auto simp: cat_cs_simps intro: cat_cs_intros)"], ["proof (state)\nthis:\n  a \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "from f cat_CId_vrange"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "have \"f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>\\<circ> \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal (1 subgoal):\n 1. f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "by auto"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "then"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "have \"f \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal (1 subgoal):\n 1. f \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (auto simp: cat_cs_simps intro: cat_cs_intros)"], ["proof (state)\nthis:\n  f \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>CId\\<rparr> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "then"], ["proof (chain)\npicking this:\n  f \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "show \"af \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\nusing this:\n  f \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. af \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (simp add: af_def Limit_vpair_in_VsetI \\<open>a \\<in>\\<^sub>\\<circ> Vset \\<alpha>\\<close>)"], ["proof (state)\nthis:\n  af \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_category_in_Vset_4: \"\\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "note [folded VPow_iff, folded Vset_succ[OF Ord_\\<alpha>], cat_cs_intros] =\n    cat_Obj_vsubset_Vset\n    cat_Arr_vsubset_Vset\n    cat_Dom_vsubset_Vset\n    cat_Cod_vsubset_Vset\n    cat_Comp_vsubset_Vset\n    cat_CId_vsubset_Vset"], ["proof (state)\nthis:\n  \\<CC>\\<lparr>Obj\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n  \\<CC>\\<lparr>Arr\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n  \\<CC>\\<lparr>Dom\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n  \\<CC>\\<lparr>Cod\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n  \\<CC>\\<lparr>Comp\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n  \\<CC>\\<lparr>CId\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "by (subst cat_def, succ_of_numeral)\n      (\n        cs_concl \n          cs_simp: plus_V_succ_right V_cs_simps \n          cs_intro: cat_cs_intros V_cs_intros\n      )"], ["proof (state)\nthis:\n  \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_CId_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "interpret \\<Z> \\<beta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<beta>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "from assms"], ["proof (chain)\npicking this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>", "have \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\nusing this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n    \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (auto simp: cat_cs_simps cat_Obj_in_Vset)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "moreover"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "from assms cat_CId_vrange"], ["proof (chain)\npicking this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "have \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\nusing this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n    \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (auto intro: cat_Arr_in_Vset)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "ultimately"], ["proof (chain)\npicking this:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (blast intro: \\<Z>_Limit_\\<alpha>\\<omega>)"], ["proof (state)\nthis:\n  \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "interpret \\<beta>: \\<Z> \\<beta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<beta>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "proof(rule vsv.vsv_Limit_vsv_in_VsetI)"], ["proof (state)\ngoal (5 subgoals):\n 1. vsv \\<CC>\n 2. Limit \\<beta>\n 3. \\<D>\\<^sub>\\<circ> \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n 4. \\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>\n 5. vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)", "have dom: \"\\<D>\\<^sub>\\<circ> \\<CC> = 6\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<CC> = 6\\<^sub>\\<nat>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<CC> = 6\\<^sub>\\<nat>\n\ngoal (5 subgoals):\n 1. vsv \\<CC>\n 2. Limit \\<beta>\n 3. \\<D>\\<^sub>\\<circ> \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n 4. \\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>\n 5. vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)", "from assms"], ["proof (chain)\npicking this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>", "show \"\\<D>\\<^sub>\\<circ> \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\nusing this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "unfolding dom"], ["proof (prove)\nusing this:\n  \\<Z> \\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. 6\\<^sub>\\<nat> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (simp add: \\<Z>.ord_of_nat_in_Vset)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (4 subgoals):\n 1. vsv \\<CC>\n 2. Limit \\<beta>\n 3. \\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>\n 4. vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)", "have \"n \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow> \\<CC>\\<lparr>n\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n    \\<CC>\\<lparr>n\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "unfolding dom"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in>\\<^sub>\\<circ> 6\\<^sub>\\<nat> \\<Longrightarrow>\n    \\<CC>\\<lparr>n\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by \n        (\n          elim_in_numeral, \n          all\\<open>rewrite in \"\\<hole> \\<in>\\<^sub>\\<circ> _\" dg_field_simps[symmetric]\\<close>,\n          insert assms\n        )\n        (\n          auto simp:\n            cat_Obj_in_Vset\n            cat_Arr_in_Vset\n            cat_Dom_in_Vset\n            cat_Cod_in_Vset\n            cat_Comp_in_Vset\n            cat_CId_in_Vset\n        )"], ["proof (state)\nthis:\n  ?n \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n  \\<CC>\\<lparr>?n\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (4 subgoals):\n 1. vsv \\<CC>\n 2. Limit \\<beta>\n 3. \\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>\n 4. vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)", "then"], ["proof (chain)\npicking this:\n  ?n \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n  \\<CC>\\<lparr>?n\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "show \"\\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\nusing this:\n  ?n \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<CC> \\<Longrightarrow>\n  \\<CC>\\<lparr>?n\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>", "by (metis vsubsetI vrange_atD)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ> \\<CC> \\<subseteq>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal (3 subgoals):\n 1. vsv \\<CC>\n 2. Limit \\<beta>\n 3. vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)", "show \"vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)", "unfolding dom"], ["proof (prove)\ngoal (1 subgoal):\n 1. vfinite (6\\<^sub>\\<nat>)", "by auto"], ["proof (state)\nthis:\n  vfinite (\\<D>\\<^sub>\\<circ> \\<CC>)\n\ngoal (2 subgoals):\n 1. vsv \\<CC>\n 2. Limit \\<beta>", "qed (simp_all add: \\<Z>_Limit_\\<alpha>\\<omega> vsv_axioms)"], ["proof (state)\nthis:\n  \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_category_if_ge_Limit:\n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"category \\<beta> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<beta> \\<CC>", "by (rule categoryI)\n    (\n      auto \n        intro: cat_cs_intros \n        simp: cat_cs_simps assms vfsequence_axioms cat_semicategory_if_ge_Limit \n    )"], ["", "lemma tiny_category[simp]: \"small {\\<CC>. category \\<alpha> \\<CC>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small {\\<CC>. category \\<alpha> \\<CC>}", "proof(cases \\<open>\\<Z> \\<alpha>\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Z> \\<alpha> \\<Longrightarrow> small {\\<CC>. category \\<alpha> \\<CC>}\n 2. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small {\\<CC>. category \\<alpha> \\<CC>}", "case True"], ["proof (state)\nthis:\n  \\<Z> \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<Z> \\<alpha> \\<Longrightarrow> small {\\<CC>. category \\<alpha> \\<CC>}\n 2. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small {\\<CC>. category \\<alpha> \\<CC>}", "from category.cat_in_Vset[of \\<alpha>]"], ["proof (chain)\npicking this:\n  \\<lbrakk>category \\<alpha> ?\\<CC>; \\<Z> ?\\<beta>;\n   \\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?\\<CC> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>category \\<alpha> ?\\<CC>; \\<Z> ?\\<beta>;\n   \\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?\\<CC> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>\n\ngoal (1 subgoal):\n 1. small {\\<CC>. category \\<alpha> \\<CC>}", "by (intro down[of _ \\<open>Vset (\\<alpha> + \\<omega>)\\<close>])\n      (auto simp: True \\<Z>.\\<Z>_Limit_\\<alpha>\\<omega> \\<Z>.\\<Z>_\\<omega>_\\<alpha>\\<omega> \\<Z>.intro \\<Z>.\\<Z>_\\<alpha>_\\<alpha>\\<omega>)"], ["proof (state)\nthis:\n  small {\\<CC>. category \\<alpha> \\<CC>}\n\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small {\\<CC>. category \\<alpha> \\<CC>}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small {\\<CC>. category \\<alpha> \\<CC>}", "case False"], ["proof (state)\nthis:\n  \\<not> \\<Z> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small {\\<CC>. category \\<alpha> \\<CC>}", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<Z> \\<alpha>", "have \"{\\<CC>. category \\<alpha> \\<CC>} = {}\""], ["proof (prove)\nusing this:\n  \\<not> \\<Z> \\<alpha>\n\ngoal (1 subgoal):\n 1. {\\<CC>. category \\<alpha> \\<CC>} = {}", "by auto"], ["proof (state)\nthis:\n  {\\<CC>. category \\<alpha> \\<CC>} = {}\n\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small {\\<CC>. category \\<alpha> \\<CC>}", "then"], ["proof (chain)\npicking this:\n  {\\<CC>. category \\<alpha> \\<CC>} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  {\\<CC>. category \\<alpha> \\<CC>} = {}\n\ngoal (1 subgoal):\n 1. small {\\<CC>. category \\<alpha> \\<CC>}", "by simp"], ["proof (state)\nthis:\n  small {\\<CC>. category \\<alpha> \\<CC>}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in \\<Z>) categories_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"set {\\<CC>. category \\<alpha> \\<CC>} \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n    \\<in>\\<^sub>\\<circ> Vset \\<beta>", "proof(rule vsubset_in_VsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n    \\<subseteq>\\<^sub>\\<circ> ?A\n 2. ?A \\<in>\\<^sub>\\<circ> Vset \\<beta>", "interpret \\<beta>: \\<Z> \\<beta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<beta>", "by (rule assms(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n    \\<subseteq>\\<^sub>\\<circ> ?A\n 2. ?A \\<in>\\<^sub>\\<circ> Vset \\<beta>", "show \"set {\\<CC>. category \\<alpha> \\<CC>} \\<subseteq>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n    \\<subseteq>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "proof(intro vsubsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set\n                              {\\<CC>.\n                               category \\<alpha> \\<CC>} \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "fix \\<CC>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set\n                              {\\<CC>.\n                               category \\<alpha> \\<CC>} \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "assume prems: \"\\<CC> \\<in>\\<^sub>\\<circ> set {\\<CC>. category \\<alpha> \\<CC>}\""], ["proof (state)\nthis:\n  \\<CC> \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set\n                              {\\<CC>.\n                               category \\<alpha> \\<CC>} \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "interpret category \\<alpha> \\<CC>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "using prems"], ["proof (prove)\nusing this:\n  \\<CC> \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> ZFC_in_HOL.set\n                              {\\<CC>.\n                               category \\<alpha> \\<CC>} \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "show \"\\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "unfolding VPow_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "by (rule cat_category_in_Vset_4)"], ["proof (state)\nthis:\n  \\<CC> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>}\n  \\<subseteq>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\n\ngoal (1 subgoal):\n 1. Vset (\\<alpha> + 4\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>", "show \"Vset (\\<alpha> + 4\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. Vset (\\<alpha> + 4\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (cs_concl cs_intro: V_cs_intros Ord_cs_intros)"], ["proof (state)\nthis:\n  Vset (\\<alpha> + 4\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma category_if_category:\n  assumes \"category \\<beta> \\<CC>\"\n    and \"\\<Z> \\<alpha>\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"\n    and \"\\<And>A B. \\<lbrakk> A \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; B \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; A \\<in>\\<^sub>\\<circ> Vset \\<alpha>; B \\<in>\\<^sub>\\<circ> Vset \\<alpha> \\<rbrakk> \\<Longrightarrow>\n      (\\<Union>\\<^sub>\\<circ>a\\<in>\\<^sub>\\<circ>A. \\<Union>\\<^sub>\\<circ>b\\<in>\\<^sub>\\<circ>B. Hom \\<CC> a b) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"category \\<alpha> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "interpret category \\<beta> \\<CC>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<beta> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "interpret \\<alpha>: \\<Z> \\<alpha>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<alpha>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "proof(intro categoryI)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. semicategory \\<alpha> (cat_smc \\<CC>)\n 6. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 7. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 8. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 9. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "show \"vfsequence \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence \\<CC>", "by (simp add: vfsequence_axioms)"], ["proof (state)\nthis:\n  vfsequence \\<CC>\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. vcard \\<CC> = 6\\<^sub>\\<nat>\n 4. semicategory \\<alpha> (cat_smc \\<CC>)\n 5. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 6. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 7. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 8. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "show \"semicategory \\<alpha> (cat_smc \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semicategory \\<alpha> (cat_smc \\<CC>)", "by (rule semicategory_if_semicategory, unfold slicing_simps)\n        (auto intro!: assms(1,3,4) slicing_intros)"], ["proof (state)\nthis:\n  semicategory \\<alpha> (cat_smc \\<CC>)\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. vcard \\<CC> = 6\\<^sub>\\<nat>\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 7. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "qed (auto intro: cat_cs_intros simp: cat_cs_simps)"], ["proof (state)\nthis:\n  category \\<alpha> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Further elementary properties.\\<close>"], ["", "sublocale category \\<subseteq> CId: v11 \\<open>\\<CC>\\<lparr>CId\\<rparr>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. v11 (\\<CC>\\<lparr>CId\\<rparr>)", "proof(rule vsv.vsv_valeq_v11I, unfold cat_cs_simps)"], ["proof (state)\ngoal (2 subgoals):\n 1. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        y \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>x\\<rparr> =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>y\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        y \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>x\\<rparr> =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>y\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume prems:\n    \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \"b \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (state)\nthis:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  b \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (2 subgoals):\n 1. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        y \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>x\\<rparr> =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>y\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by (subst prems(3))\n      (cs_concl cs_simp: cat_cs_simps cs_intro: prems(1,2) cat_cs_intros)+"], ["proof (state)\nthis:\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (2 subgoals):\n 1. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 2. \\<And>x y.\n       \\<lbrakk>x \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        y \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>;\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>x\\<rparr> =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>y\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> x = y", "with prems"], ["proof (chain)\npicking this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  b \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "show \"a = b\""], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  b \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. a = b", "by auto"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. vsv (\\<CC>\\<lparr>CId\\<rparr>)", "(*slow*)"], ["proof (state)\nthis:\n  a = b\n\ngoal (1 subgoal):\n 1. vsv (\\<CC>\\<lparr>CId\\<rparr>)", "qed auto"], ["", "lemma (in category) cat_CId_vempty_if_Arr_vempty:\n  assumes \"\\<CC>\\<lparr>Arr\\<rparr> = 0\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> = []\\<^sub>\\<circ>", "using assms cat_CId_vrange"], ["proof (prove)\nusing this:\n  \\<CC>\\<lparr>Arr\\<rparr> = []\\<^sub>\\<circ>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> = []\\<^sub>\\<circ>", "by (auto intro: CId.vsv_vrange_vempty)"], ["", "subsection\\<open>Opposite category\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter II-2 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition op_cat :: \"V \\<Rightarrow> V\"\n  where \"op_cat \\<CC> = [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>, \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>, fflip (\\<CC>\\<lparr>Comp\\<rparr>), \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>\""], ["", "text\\<open>Components.\\<close>"], ["", "lemma op_cat_components:\n  shows [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\"\n    and \"op_cat \\<CC>\\<lparr>Comp\\<rparr> = fflip (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and [cat_op_simps]: \"op_cat \\<CC>\\<lparr>CId\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_cat \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr> &&&\n     op_cat \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr> &&&\n     op_cat \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>) &&&\n    op_cat \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr> &&&\n    op_cat \\<CC>\\<lparr>Comp\\<rparr> = fflip (\\<CC>\\<lparr>Comp\\<rparr>) &&&\n    op_cat \\<CC>\\<lparr>CId\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>", "unfolding op_cat_def dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> =\n     \\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> &&&\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> =\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr> &&&\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr> =\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n     \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr> =\n    \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr> &&&\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n     \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>4\\<^sub>\\<nat>\\<rparr> =\n    fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n     \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>5\\<^sub>\\<nat>\\<rparr> =\n    \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>", "by (auto simp: nat_omega_simps)"], ["", "lemma op_cat_component_intros[cat_op_intros]:\n  shows \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<Longrightarrow> f \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n     a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr>) &&&\n    (f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<Longrightarrow>\n     f \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Arr\\<rparr>)", "unfolding cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n     a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>) &&&\n    (f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<Longrightarrow>\n     f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>)", "by simp_all"], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma cat_smc_op_cat[slicing_commute]: \"op_smc (cat_smc \\<CC>) = cat_smc (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_smc (cat_smc \\<CC>) = cat_smc (op_cat \\<CC>)", "unfolding cat_smc_def op_cat_def op_smc_def dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     fflip\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>4\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ> =\n    [[\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["", "lemma (in category) op_smc_op_cat[cat_op_simps]: \"op_smc (op_cat \\<CC>) = cat_smc \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_smc (op_cat \\<CC>) = cat_smc \\<CC>", "using Comp.pbinop_fflip_fflip"], ["proof (prove)\nusing this:\n  fflip (fflip (\\<CC>\\<lparr>Comp\\<rparr>)) = \\<CC>\\<lparr>Comp\\<rparr>\n\ngoal (1 subgoal):\n 1. op_smc (op_cat \\<CC>) = cat_smc \\<CC>", "unfolding op_smc_def op_cat_def cat_smc_def dg_field_simps"], ["proof (prove)\nusing this:\n  fflip (fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>)) =\n  \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>\n\ngoal (1 subgoal):\n 1. [[\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     fflip\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n        \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>4\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ> =\n    [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["", "lemma op_cat_is_arr[cat_op_simps]: \"f : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a \\<longleftrightarrow> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a =\n    f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "unfolding cat_op_simps is_arr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<and>\n     \\<CC>\\<lparr>Cod\\<rparr>\\<lparr>f\\<rparr> = b \\<and>\n     \\<CC>\\<lparr>Dom\\<rparr>\\<lparr>f\\<rparr> = a) =\n    (f \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr> \\<and>\n     \\<CC>\\<lparr>Dom\\<rparr>\\<lparr>f\\<rparr> = a \\<and>\n     \\<CC>\\<lparr>Cod\\<rparr>\\<lparr>f\\<rparr> = b)", "by auto"], ["", "lemmas [cat_op_intros] = op_cat_is_arr[THEN iffD2]"], ["", "lemma op_cat_Hom[cat_op_simps]: \"Hom (op_cat \\<CC>) a b = Hom \\<CC> b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom (op_cat \\<CC>) a b = Hom \\<CC> b a", "unfolding cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. Hom \\<CC> b a = Hom \\<CC> b a", "by simp"], ["", "lemma op_cat_obj_initial[cat_op_simps]: \n  \"obj_initial (op_cat \\<CC>) a \\<longleftrightarrow> obj_terminal \\<CC> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_initial (op_cat \\<CC>) a = obj_terminal \\<CC> a", "unfolding obj_initial_def obj_terminal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> op_smc (op_cat \\<CC>)\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> op_smc\n                                 (op_cat\n                                   \\<CC>)\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr (op_smc (op_cat \\<CC>)) aa a))) =\n    (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> aa a)))", "unfolding smc_op_simps cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         (\\<exists>!f. f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a))) =\n    (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> aa a)))", ".."], ["", "lemmas [cat_op_intros] = op_cat_obj_initial[THEN iffD2]"], ["", "lemma op_cat_obj_terminal[cat_op_simps]: \n  \"obj_terminal (op_cat \\<CC>) a \\<longleftrightarrow> obj_initial \\<CC> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_terminal (op_cat \\<CC>) a = obj_initial \\<CC> a", "unfolding obj_initial_def obj_terminal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> op_cat\n                                 \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr (op_cat \\<CC>) aa a))) =\n    (a \\<in>\\<^sub>\\<circ> op_smc \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> op_smc\n                                 \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr (op_smc \\<CC>) aa a)))", "unfolding smc_op_simps cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> a aa))) =\n    (a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<and>\n     (\\<forall>aa.\n         aa \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<longrightarrow>\n         Ex1 (is_arr \\<CC> a aa)))", ".."], ["", "lemmas [cat_op_intros] = op_cat_obj_terminal[THEN iffD2]"], ["", "lemma op_cat_obj_null[cat_op_simps]: \"obj_null (op_cat \\<CC>) a \\<longleftrightarrow> obj_null \\<CC> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obj_null (op_cat \\<CC>) a = obj_null \\<CC> a", "unfolding obj_null_def cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (obj_terminal \\<CC> a \\<and> obj_initial \\<CC> a) =\n    (obj_initial \\<CC> a \\<and> obj_terminal \\<CC> a)", "by auto"], ["", "lemmas [cat_op_intros] = op_cat_obj_null[THEN iffD2]"], ["", "context category\nbegin"], ["", "interpretation smc: semicategory \\<alpha> \\<open>cat_smc \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. semicategory \\<alpha> (cat_smc \\<CC>)", "by (rule cat_semicategory)"], ["", "lemmas_with [unfolded slicing_simps slicing_commute]:\n  op_cat_Comp_vrange[cat_op_simps] = smc.op_smc_Comp_vrange\n  and op_cat_Comp[cat_op_simps] = smc.op_smc_Comp\n  and op_cat_is_epic_arr[cat_op_simps] = smc.op_smc_is_epic_arr\n  and op_cat_is_monic_arr[cat_op_simps] = smc.op_smc_is_monic_arr\n  and op_cat_is_zero_arr[cat_op_simps] = smc.op_smc_is_zero_arr"], ["", "end"], ["", "lemmas [cat_op_simps] = \n  category.op_cat_Comp_vrange\n  category.op_cat_Comp\n  category.op_cat_is_epic_arr\n  category.op_cat_is_monic_arr\n  category.op_cat_is_zero_arr"], ["", "context\n  fixes \\<CC> :: V\nbegin"], ["", "lemmas_with [\n  where \\<CC>=\\<open>cat_smc \\<CC>\\<close>, unfolded slicing_simps slicing_commute[symmetric]\n  ]:   \n  op_cat_Comp_vdomain[cat_op_simps] = op_smc_Comp_vdomain"], ["", "end"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma op_cat_vsv[cat_op_intros]: \"vsv (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv (op_cat \\<CC>)", "unfolding op_cat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n         \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>,\n         fflip (\\<CC>\\<lparr>Comp\\<rparr>),\n         \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>", "by auto"], ["", "subsubsection\\<open>Further properties\\<close>"], ["", "lemma (in category) category_op[cat_cs_intros]: \"category \\<alpha> (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> (op_cat \\<CC>)", "proof(intro categoryI, unfold cat_op_simps)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (op_cat \\<CC>)\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard (op_cat \\<CC>) = 6\\<^sub>\\<nat>\n 5. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 6. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 7. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 8. \\<And>a b f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       f =\n       f\n 9. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "show \"vfsequence (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence (op_cat \\<CC>)", "unfolding op_cat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>,\n      fflip (\\<CC>\\<lparr>Comp\\<rparr>),\n      \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ>", "by simp"], ["proof (state)\nthis:\n  vfsequence (op_cat \\<CC>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. vcard (op_cat \\<CC>) = 6\\<^sub>\\<nat>\n 4. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 5. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 6. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 7. \\<And>a b f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       f =\n       f\n 8. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "show \"vcard (op_cat \\<CC>) = 6\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard (op_cat \\<CC>) = 6\\<^sub>\\<nat>", "unfolding op_cat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [\\<CC>\\<lparr>Obj\\<rparr>, \\<CC>\\<lparr>Arr\\<rparr>,\n      \\<CC>\\<lparr>Cod\\<rparr>, \\<CC>\\<lparr>Dom\\<rparr>,\n      fflip (\\<CC>\\<lparr>Comp\\<rparr>),\n      \\<CC>\\<lparr>CId\\<rparr>]\\<^sub>\\<circ> =\n    6\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard (op_cat \\<CC>) = 6\\<^sub>\\<nat>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>a b f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       f =\n       f\n 7. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>a b f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       f =\n       f\n 7. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "fix f a b"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>a b f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       f =\n       f\n 7. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "assume \"f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (state)\nthis:\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>a b f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       f =\n       f\n 7. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "with category_axioms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "show \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> f = f\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n    f =\n    f", "by (cs_concl cs_simp: cat_cs_simps cat_op_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n  f =\n  f\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "fix f b c"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "assume \"f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (state)\nthis:\n  f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 6. \\<And>b c f.\n       f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "with category_axioms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "show \"f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n    f", "by (cs_concl cs_simp: cat_cs_simps cat_op_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n  f\n\ngoal (5 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 3. semicategory \\<alpha> (cat_smc (op_cat \\<CC>))\n 4. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 5. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "qed \n  (\n    auto simp:\n      cat_cs_simps \n      cat_op_simps \n      slicing_commute[symmetric] \n      smc_op_intros \n      cat_cs_intros\n      cat_semicategory \n  )"], ["", "lemmas category_op[cat_op_intros] = category.category_op"], ["", "lemma (in category) cat_op_cat_op_cat[cat_op_simps]: \"op_cat (op_cat \\<CC>) = \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cat (op_cat \\<CC>) = \\<CC>", "proof(rule cat_eqI, unfold cat_op_simps op_cat_components)"], ["proof (state)\ngoal (8 subgoals):\n 1. category ?\\<alpha> (op_cat (op_cat \\<CC>))\n 2. category ?\\<alpha> \\<CC>\n 3. \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\n 4. \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\n 5. \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\n 6. \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\n 7. fflip (fflip (\\<CC>\\<lparr>Comp\\<rparr>)) = \\<CC>\\<lparr>Comp\\<rparr>\n 8. \\<CC>\\<lparr>CId\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>", "show \"category \\<alpha> (op_cat (op_cat \\<CC>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> (op_cat (op_cat \\<CC>))", "by (simp add: category.category_op category_op)"], ["proof (state)\nthis:\n  category \\<alpha> (op_cat (op_cat \\<CC>))\n\ngoal (7 subgoals):\n 1. category \\<alpha> \\<CC>\n 2. \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\n 3. \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\n 4. \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\n 5. \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\n 6. fflip (fflip (\\<CC>\\<lparr>Comp\\<rparr>)) = \\<CC>\\<lparr>Comp\\<rparr>\n 7. \\<CC>\\<lparr>CId\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>", "show \"fflip (fflip (\\<CC>\\<lparr>Comp\\<rparr>)) = \\<CC>\\<lparr>Comp\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fflip (fflip (\\<CC>\\<lparr>Comp\\<rparr>)) = \\<CC>\\<lparr>Comp\\<rparr>", "by (rule Comp.pbinop_fflip_fflip)"], ["proof (state)\nthis:\n  fflip (fflip (\\<CC>\\<lparr>Comp\\<rparr>)) = \\<CC>\\<lparr>Comp\\<rparr>\n\ngoal (6 subgoals):\n 1. category \\<alpha> \\<CC>\n 2. \\<CC>\\<lparr>Obj\\<rparr> = \\<CC>\\<lparr>Obj\\<rparr>\n 3. \\<CC>\\<lparr>Arr\\<rparr> = \\<CC>\\<lparr>Arr\\<rparr>\n 4. \\<CC>\\<lparr>Dom\\<rparr> = \\<CC>\\<lparr>Dom\\<rparr>\n 5. \\<CC>\\<lparr>Cod\\<rparr> = \\<CC>\\<lparr>Cod\\<rparr>\n 6. \\<CC>\\<lparr>CId\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>", "qed (auto simp: cat_cs_intros)"], ["", "lemmas cat_op_cat_op_cat[cat_op_simps] = category.cat_op_cat_op_cat"], ["", "lemma eq_op_cat_iff[cat_op_simps]: \n  assumes \"category \\<alpha> \\<AA>\" and \"category \\<alpha> \\<BB>\"\n  shows \"op_cat \\<AA> = op_cat \\<BB> \\<longleftrightarrow> \\<AA> = \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_cat \\<AA> = op_cat \\<BB>) = (\\<AA> = \\<BB>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. op_cat \\<AA> = op_cat \\<BB> \\<Longrightarrow> \\<AA> = \\<BB>\n 2. \\<AA> = \\<BB> \\<Longrightarrow> op_cat \\<AA> = op_cat \\<BB>", "interpret \\<AA>: category \\<alpha> \\<AA>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<AA>", "by (rule assms(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. op_cat \\<AA> = op_cat \\<BB> \\<Longrightarrow> \\<AA> = \\<BB>\n 2. \\<AA> = \\<BB> \\<Longrightarrow> op_cat \\<AA> = op_cat \\<BB>", "interpret \\<BB>: category \\<alpha> \\<BB>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (2 subgoals):\n 1. op_cat \\<AA> = op_cat \\<BB> \\<Longrightarrow> \\<AA> = \\<BB>\n 2. \\<AA> = \\<BB> \\<Longrightarrow> op_cat \\<AA> = op_cat \\<BB>", "assume prems: \"op_cat \\<AA> = op_cat \\<BB>\""], ["proof (state)\nthis:\n  op_cat \\<AA> = op_cat \\<BB>\n\ngoal (2 subgoals):\n 1. op_cat \\<AA> = op_cat \\<BB> \\<Longrightarrow> \\<AA> = \\<BB>\n 2. \\<AA> = \\<BB> \\<Longrightarrow> op_cat \\<AA> = op_cat \\<BB>", "show \"\\<AA> = \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB>", "proof(rule cat_eqI)"], ["proof (state)\ngoal (8 subgoals):\n 1. category ?\\<alpha> \\<AA>\n 2. category ?\\<alpha> \\<BB>\n 3. \\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\n 4. \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\n 5. \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\n 6. \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\n 7. \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\n 8. \\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>", "show \n      \"\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\" \n      \"\\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\" \n      \"\\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\"\n      \"\\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\"\n      \"\\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\"\n      \"\\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr> &&&\n     \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr> &&&\n     \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>) &&&\n    \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr> &&&\n    \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr> &&&\n    \\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>", "by (metis \\<AA>.cat_op_cat_op_cat \\<BB>.cat_op_cat_op_cat prems)+"], ["proof (state)\nthis:\n  \\<AA>\\<lparr>Obj\\<rparr> = \\<BB>\\<lparr>Obj\\<rparr>\n  \\<AA>\\<lparr>Arr\\<rparr> = \\<BB>\\<lparr>Arr\\<rparr>\n  \\<AA>\\<lparr>Dom\\<rparr> = \\<BB>\\<lparr>Dom\\<rparr>\n  \\<AA>\\<lparr>Cod\\<rparr> = \\<BB>\\<lparr>Cod\\<rparr>\n  \\<AA>\\<lparr>Comp\\<rparr> = \\<BB>\\<lparr>Comp\\<rparr>\n  \\<AA>\\<lparr>CId\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\n\ngoal (2 subgoals):\n 1. category ?\\<alpha> \\<AA>\n 2. category ?\\<alpha> \\<BB>", "qed (auto intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<AA> = \\<BB>\n\ngoal (1 subgoal):\n 1. \\<AA> = \\<BB> \\<Longrightarrow> op_cat \\<AA> = op_cat \\<BB>", "qed auto"], ["", "subsection\\<open>Monic arrow and epic arrow\\<close>"], ["", "lemma (in category) cat_CId_is_monic_arr[cat_arrow_cs_intros]: \n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> a", "using assms cat_CId_is_arr' cat_CId_left_left"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n  \\<lbrakk>?a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>; ?b = ?a;\n   ?c = ?a; ?\\<CC>' = \\<CC>\\<rbrakk>\n  \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> : ?b \\<mapsto>\\<^bsub>?\\<CC>'\\<^esub> ?c\n  ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b \\<Longrightarrow>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  ?f =\n  ?f\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> a", "by (force intro!: is_monic_arrI)"], ["", "lemmas [cat_arrow_cs_intros] = category.cat_CId_is_monic_arr"], ["", "lemma (in category) cat_CId_is_epic_arr[cat_arrow_cs_intros]: \n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a", "from assms"], ["proof (chain)\npicking this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "have \"a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr>", "unfolding cat_op_simps"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "."], ["proof (state)\nthis:\n  a \\<in>\\<^sub>\\<circ> op_cat \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a", "from category.cat_CId_is_monic_arr[OF category_op this, unfolded cat_op_simps]"], ["proof (chain)\npicking this:\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a", "."], ["proof (state)\nthis:\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_arrow_cs_intros] = category.cat_CId_is_epic_arr"], ["", "subsection\\<open>Right inverse and left inverse of an arrow\\<close>"], ["", "text\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition is_right_inverse :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  where \"is_right_inverse \\<CC> g f = \n    (\\<exists>a b. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>)\""], ["", "definition is_left_inverse :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  where \"is_left_inverse \\<CC> \\<equiv> is_right_inverse (op_cat \\<CC>)\""], ["", "text\\<open>Rules.\\<close>"], ["", "lemma is_right_inverseI:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n  shows \"is_right_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_right_inverse \\<CC> g f", "using assms"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. is_right_inverse \\<CC> g f", "unfolding is_right_inverse_def"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by auto"], ["", "lemma is_right_inverseD[dest]:\n  assumes \"is_right_inverse \\<CC> g f\"\n  shows \"\\<exists>a b. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  is_right_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "unfolding is_right_inverse_def"], ["proof (prove)\nusing this:\n  \\<exists>a b.\n     g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n     f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n     \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by clarsimp"], ["", "lemma is_right_inverseE[elim]:\n  assumes \"is_right_inverse \\<CC> g f\"\n  obtains a b where \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_right_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "lemma (in category) is_left_inverseI:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n  shows \"is_left_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "from assms(3)"], ["proof (chain)\npicking this:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "have \"f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\nusing this:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "unfolding op_cat_Comp[OF assms(1,2)]"], ["proof (prove)\nusing this:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "."], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "from \n    is_right_inverseI[of \\<open>op_cat \\<CC>\\<close>, unfolded cat_op_simps, OF assms(1,2) this]"], ["proof (chain)\npicking this:\n  is_right_inverse (op_cat \\<CC>) g f", "show ?thesis"], ["proof (prove)\nusing this:\n  is_right_inverse (op_cat \\<CC>) g f\n\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "unfolding is_left_inverse_def"], ["proof (prove)\nusing this:\n  is_right_inverse (op_cat \\<CC>) g f\n\ngoal (1 subgoal):\n 1. is_right_inverse (op_cat \\<CC>) g f", "."], ["proof (state)\nthis:\n  is_left_inverse \\<CC> g f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) is_left_inverseD[dest]:\n  assumes \"is_left_inverse \\<CC> g f\"\n  shows \"\\<exists>a b. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "from is_right_inverseD[OF assms[unfolded is_left_inverse_def]]"], ["proof (chain)\npicking this:\n  \\<exists>a b.\n     g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a \\<and>\n     f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b \\<and>\n     f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n     op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "obtain a b\n    where \"g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a\" \n      and \"f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b\" \n      and fg: \"f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g = op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<exists>a b.\n     g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a \\<and>\n     f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b \\<and>\n     f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n     op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b;\n         f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n         op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "then"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "have g: \"g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and f: \"f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>op_cat \\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "unfolding cat_op_simps"], ["proof (prove)\nusing this:\n  g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by simp_all"], ["proof (state)\nthis:\n  g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "moreover"], ["proof (state)\nthis:\n  g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "from fg"], ["proof (chain)\npicking this:\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "have \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\nusing this:\n  f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n  op_cat \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "unfolding op_cat_Comp[OF g f] cat_op_simps"], ["proof (prove)\nusing this:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by simp"], ["proof (state)\nthis:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "ultimately"], ["proof (chain)\npicking this:\n  g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "by blast"], ["proof (state)\nthis:\n  \\<exists>a b.\n     g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n     f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n     \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) is_left_inverseE[elim]:\n  assumes \"is_left_inverse \\<CC> g f\"\n  obtains a b where \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_left_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma (in category) op_cat_is_left_inverse[cat_op_simps]:\n  \"is_left_inverse (op_cat \\<CC>) g f \\<longleftrightarrow> is_right_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_left_inverse (op_cat \\<CC>) g f = is_right_inverse \\<CC> g f", "unfolding is_left_inverse_def is_right_inverse_def cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a b.\n        g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>) =\n    (\\<exists>a b.\n        g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>)", "by simp"], ["", "lemmas [cat_op_simps] = category.op_cat_is_left_inverse"], ["", "lemmas [cat_op_intros] = category.op_cat_is_left_inverse[THEN iffD2]"], ["", "lemma (in category) op_cat_is_right_inverse[cat_op_simps]:\n  \"is_right_inverse (op_cat \\<CC>) g f \\<longleftrightarrow> is_left_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_right_inverse (op_cat \\<CC>) g f = is_left_inverse \\<CC> g f", "unfolding is_left_inverse_def is_right_inverse_def cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a b.\n        g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>) =\n    (\\<exists>a b.\n        g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>op_cat \\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>)", "by simp"], ["", "lemmas [cat_op_simps] = category.op_cat_is_right_inverse"], ["", "lemmas [cat_op_intros] = category.op_cat_is_right_inverse[THEN iffD2]"], ["", "subsection\\<open>Inverse of an arrow\\<close>"], ["", "text\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition is_inverse :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  where \"is_inverse \\<CC> g f =\n    (\n      \\<exists>a b.\n        g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n    )\""], ["", "text\\<open>Rules.\\<close>"], ["", "lemma is_inverseI:\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n  shows \"is_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "using assms"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "unfolding is_inverse_def"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by auto"], ["", "lemma is_inverseD[dest]: \n  assumes \"is_inverse \\<CC> g f\"\n  shows \n    \"(\n      \\<exists>a b.\n        g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n    )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "unfolding is_inverse_def"], ["proof (prove)\nusing this:\n  \\<exists>a b.\n     g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n     f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n     \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n     f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n     \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n       g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by auto"], ["", "lemma is_inverseE[elim]:\n  assumes \"is_inverse \\<CC> g f\"\n  obtains a b where \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n         f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma (in category) op_cat_is_inverse[cat_op_simps]: \n  \"is_inverse (op_cat \\<CC>) g f \\<longleftrightarrow> is_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse (op_cat \\<CC>) g f = is_inverse \\<CC> g f", "by (rule iffI; unfold is_inverse_def cat_op_simps) (metis op_cat_Comp)+"], ["", "lemmas [cat_op_simps] = category.op_cat_is_inverse"], ["", "lemmas [cat_op_intros] = category.op_cat_is_inverse[THEN iffD2]"], ["", "lemma is_inverse_sym: \"is_inverse \\<CC> g f \\<longleftrightarrow> is_inverse \\<CC> f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f = is_inverse \\<CC> f g", "unfolding is_inverse_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>a b.\n        g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>) =\n    (\\<exists>a b.\n        f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<and>\n        g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<and>\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>)", "by auto"], ["", "lemma (in category) cat_is_inverse_eq:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"is_inverse \\<CC> h f\" and \"is_inverse \\<CC> g f\"\n  shows \"h = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. h = g", "using assms"], ["proof (prove)\nusing this:\n  is_inverse \\<CC> h f\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. h = g", "proof(elim is_inverseE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "fix a b a' b'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "assume prems: \n    \"h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \n    \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    \"h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n    \"g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\" \n    \"f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\" \n    \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\""], ["proof (state)\nthis:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "then"], ["proof (chain)\npicking this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>", "have ab: \"a' = a\" \"b' = b\""], ["proof (prove)\nusing this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n\ngoal (1 subgoal):\n 1. a' = a &&& b' = b", "by auto"], ["proof (state)\nthis:\n  a' = a\n  b' = b\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "from prems"], ["proof (chain)\npicking this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>", "have gf: \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\" and g: \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> &&&\n    g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "unfolding ab"], ["proof (prove)\nusing this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> &&&\n    g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by simp_all"], ["proof (state)\nthis:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "from prems(1)"], ["proof (chain)\npicking this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "have \"h = (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h\""], ["proof (prove)\nusing this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. h =\n    g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    h", "unfolding gf"], ["proof (prove)\nusing this:\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. h =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    h", "by (simp add: cat_cs_simps)"], ["proof (state)\nthis:\n  h =\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "also"], ["proof (state)\nthis:\n  h =\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "with category_axioms prems(1,2) g"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  h =\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h", "have \"\\<dots> = g\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  h =\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    h =\n    g", "by (cs_concl cs_simp: prems(4) cat_cs_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h =\n  g\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>h : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>ba\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> h = g", "finally"], ["proof (chain)\npicking this:\n  h = g", "show \"h = g\""], ["proof (prove)\nusing this:\n  h = g\n\ngoal (1 subgoal):\n 1. h = g", "by simp"], ["proof (state)\nthis:\n  h = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_inverse_Comp_CId_left:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"is_inverse \\<CC> g' g\" and \"g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "using assms"], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g' g\n  g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "by auto"], ["", "lemma is_inverse_Comp_CId_right:\n  assumes \"is_inverse \\<CC> g' g\" and \"g : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g' = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g' =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by (metis assms is_arrD(3) is_inverseE)"], ["", "lemma (in category) cat_is_inverse_Comp:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes gbc[intro]: \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and fab[intro]: \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and g'g[intro]: \"is_inverse \\<CC> g' g\"\n    and f'f[intro]: \"is_inverse \\<CC> f' f\"\n  shows \"is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g') (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "from g'g gbc f'f fab"], ["proof (chain)\npicking this:\n  is_inverse \\<CC> g' g\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  is_inverse \\<CC> f' f\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "have g'cb: \"g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and f'ba: \"f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g' g\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  is_inverse \\<CC> f' f\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by (metis is_arrD(2,3) is_inverseD)+"], ["proof (state)\nthis:\n  g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "with assms"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g' g\n  is_inverse \\<CC> f' f\n  g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "have f'g': \"f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" and gf: \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g' g\n  is_inverse \\<CC> f' f\n  g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a &&&\n    g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c", "by (auto intro: cat_Comp_is_arr)"], ["proof (state)\nthis:\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "have ff': \"is_inverse \\<CC> f f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> f f'", "using assms"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g' g\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> f f'", "by (simp add: is_inverse_sym)"], ["proof (state)\nthis:\n  is_inverse \\<CC> f f'\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "note [simp] = \n    cat_Comp_assoc[symmetric, OF f'g' gbc fab] \n    cat_Comp_assoc[OF f'ba g'cb gbc]\n    is_inverse_Comp_CId_left[OF g'g gbc]\n    cat_Comp_assoc[symmetric, OF gf f'ba g'cb]\n    cat_Comp_assoc[OF gbc fab f'ba]\n    is_inverse_Comp_CId_left[OF ff' f'ba]\n    cat_CId_right_left[OF f'ba]\n    cat_CId_right_left[OF gbc]"], ["proof (state)\nthis:\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f) =\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g =\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  (g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g)\n  g' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g') =\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f' =\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  (f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f')\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f' =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n  f'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n  g\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "by (intro is_inverseI, rule f'g', rule gf) \n      (auto intro: is_inverse_Comp_CId_left is_inverse_Comp_CId_right)"], ["proof (state)\nthis:\n  is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_is_inverse_Comp':\n  assumes \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and \"is_inverse \\<CC> g' g\"\n    and \"is_inverse \\<CC> f' f\"\n    and \"f'g' = f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g'\"\n    and \"gf = g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\"\n  shows \"is_inverse \\<CC> f'g' gf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> f'g' gf", "using assms(1-4)"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g' g\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> f'g' gf", "unfolding assms(5,6)"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g' g\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "by (intro cat_is_inverse_Comp)"], ["", "lemmas [cat_cs_intros] = category.cat_is_inverse_Comp'"], ["", "lemma is_inverse_is_right_inverse[dest]:\n  assumes \"is_inverse \\<CC> g f\" \n  shows \"is_right_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_right_inverse \\<CC> g f", "using assms"], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. is_right_inverse \\<CC> g f", "by (auto intro: is_right_inverseI)"], ["", "lemma (in category) cat_is_inverse_is_left_inverse[dest]:\n  assumes \"is_inverse \\<CC> g f\" \n  shows \"is_left_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "interpret op: category \\<alpha> \\<open>op_cat \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> (op_cat \\<CC>)", "by (auto intro!: cat_cs_intros)"], ["proof (state)\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "from assms"], ["proof (chain)\npicking this:\n  is_inverse \\<CC> g f", "have \"is_inverse (op_cat \\<CC>) g f\""], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. is_inverse (op_cat \\<CC>) g f", "by (simp add: cat_op_simps)"], ["proof (state)\nthis:\n  is_inverse (op_cat \\<CC>) g f\n\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "from is_inverse_is_right_inverse[OF this]"], ["proof (chain)\npicking this:\n  is_right_inverse (op_cat \\<CC>) g f", "show ?thesis"], ["proof (prove)\nusing this:\n  is_right_inverse (op_cat \\<CC>) g f\n\ngoal (1 subgoal):\n 1. is_left_inverse \\<CC> g f", "unfolding is_left_inverse_def"], ["proof (prove)\nusing this:\n  is_right_inverse (op_cat \\<CC>) g f\n\ngoal (1 subgoal):\n 1. is_right_inverse (op_cat \\<CC>) g f", "."], ["proof (state)\nthis:\n  is_left_inverse \\<CC> g f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_is_right_left_inverse_is_inverse:\n  assumes \"is_right_inverse \\<CC> g f\" \"is_left_inverse \\<CC> g f\"\n  shows \"is_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "using assms"], ["proof (prove)\nusing this:\n  is_right_inverse \\<CC> g f\n  is_left_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "proof(elim is_right_inverseE is_left_inverseE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> is_inverse \\<CC> g f", "fix a b c d"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> is_inverse \\<CC> g f", "assume prems:\n    \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n    \"g : d \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    \"f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d\"\n    \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\""], ["proof (state)\nthis:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : d \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> is_inverse \\<CC> g f", "then"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : d \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>", "have dbca: \"d = b\" \"c = a\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g : d \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n  f : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\n\ngoal (1 subgoal):\n 1. d = b &&& c = a", "by auto"], ["proof (state)\nthis:\n  d = b\n  c = a\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> is_inverse \\<CC> g f", "note [cat_cs_simps] = prems(3,6)[unfolded dbca]"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>;\n        g : ba \\<mapsto>\\<^bsub>\\<CC>\\<^esub> aa;\n        f : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ba;\n        g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n        \\<CC>\\<lparr>CId\\<rparr>\\<lparr>aa\\<rparr>\\<rbrakk>\n       \\<Longrightarrow> is_inverse \\<CC> g f", "from prems(1,2)"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "show \"is_inverse \\<CC> g f\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "by (cs_concl cs_simp: cat_cs_simps cs_intro: cat_cs_intros is_inverseI)"], ["proof (state)\nthis:\n  is_inverse \\<CC> g f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Isomorphism\\<close>"], ["", "text\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition is_arr_isomorphism :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  where \"is_arr_isomorphism \\<CC> a b f \\<longleftrightarrow>\n    (f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and> (\\<exists>g. is_inverse \\<CC> g f))\""], ["", "syntax \"_is_arr_isomorphism\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>_ : _ \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<index> _\\<close> [51, 51, 51] 51)"], ["", "translations \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" \\<rightleftharpoons> \"CONST is_arr_isomorphism \\<CC> a b f\""], ["", "text\\<open>Rules.\\<close>"], ["", "lemma is_arr_isomorphismI:\n  assumes \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"is_inverse \\<CC> g f\"\n  shows \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "using assms"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_arr_isomorphism_def"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n    (\\<exists>g. is_inverse \\<CC> g f)", "by auto"], ["", "lemma is_arr_isomorphismD[dest]:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"\\<exists>g. is_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    \\<exists>g. is_inverse \\<CC> g f", "using assms"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    \\<exists>g. is_inverse \\<CC> g f", "unfolding is_arr_isomorphism_def"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n  (\\<exists>g. is_inverse \\<CC> g f)\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b &&&\n    \\<exists>g. is_inverse \\<CC> g f", "by auto"], ["", "lemma is_arr_isomorphismE[elim]:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  obtains g where \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"is_inverse \\<CC> g f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         is_inverse \\<CC> g f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         is_inverse \\<CC> g f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["", "lemma is_arr_isomorphismE':\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  obtains g where \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "obtain g where f: \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \"is_inverse \\<CC> g f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b;\n         is_inverse \\<CC> g f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f", "have \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    and gf: \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and fg: \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. (g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a &&&\n     f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b) &&&\n    g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> &&&\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by auto"], ["proof (state)\nthis:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "have g: \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "by (cs_concl cs_intro: is_inverseI is_arr_isomorphismI)"], ["proof (state)\nthis:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from that f g gf fg"], ["proof (chain)\npicking this:\n  \\<lbrakk>?g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n   ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n   \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n   f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> ?g =\n   \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n   ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n   \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>;\n   f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> ?g =\n   \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> thesis\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> g f\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma (in category) op_cat_is_arr_isomorphism[cat_op_simps]:\n  \"f : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>op_cat \\<CC>\\<^esub> a \\<longleftrightarrow> f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>op_cat \\<CC>\\<^esub> a =\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "unfolding is_arr_isomorphism_def cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     (\\<exists>g. is_inverse \\<CC> g f)) =\n    (f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<and>\n     (\\<exists>g. is_inverse \\<CC> g f))", "by simp"], ["", "lemmas [cat_op_simps] = category.op_cat_is_arr_isomorphism"], ["", "lemmas [cat_op_intros] = category.op_cat_is_arr_isomorphism[THEN iffD2]"], ["", "lemma (in category) is_arr_isomorphismI':\n  assumes \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" \n    and \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n  shows \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" and \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b &&&\n    g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n 2. g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "have gf: \"is_inverse \\<CC> g f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "by (auto intro: is_inverseI)"], ["proof (state)\nthis:\n  is_inverse \\<CC> g f\n\ngoal (2 subgoals):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n 2. g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "have fg: \"is_inverse \\<CC> f g\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> f g", "by (auto intro: is_inverseI)"], ["proof (state)\nthis:\n  is_inverse \\<CC> f g\n\ngoal (2 subgoals):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n 2. g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "show \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" and \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b &&&\n    g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "by \n      (\n        intro \n          is_arr_isomorphismI[OF assms(1) gf]\n          is_arr_isomorphismI[OF assms(2) fg]\n      )+"], ["proof (state)\nthis:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_is_inverse_is_arr_isomorphism:\n  assumes \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\" and \"is_inverse \\<CC> g f\"\n  shows \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "proof(intro is_arr_isomorphismI is_inverseI)"], ["proof (state)\ngoal (5 subgoals):\n 1. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 2. ?g : ?b1 \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a1\n 3. g : ?a1 \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b1\n 4. ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a1\\<rparr>\n 5. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> ?g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?b1\\<rparr>", "from assms(2)"], ["proof (chain)\npicking this:\n  is_inverse \\<CC> g f", "obtain a' b' \n    where g: \"g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\"\n      and f: \"f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\"\n      and gf: \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\"\n      and fg: \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>\""], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. (\\<And>b' a'.\n        \\<lbrakk>g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a';\n         f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b';\n         g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>;\n         f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>\n\ngoal (5 subgoals):\n 1. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 2. ?g : ?b1 \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a1\n 3. g : ?a1 \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b1\n 4. ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a1\\<rparr>\n 5. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> ?g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?b1\\<rparr>", "with assms(1)"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>", "have a'b': \"a' = a\" \"b' = b\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>\n\ngoal (1 subgoal):\n 1. a' = a &&& b' = b", "by auto"], ["proof (state)\nthis:\n  a' = a\n  b' = b\n\ngoal (5 subgoals):\n 1. g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 2. ?g : ?b1 \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a1\n 3. g : ?a1 \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b1\n 4. ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a1\\<rparr>\n 5. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> ?g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?b1\\<rparr>", "from g f gf fg"], ["proof (chain)\npicking this:\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>", "show \n    \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\"\n    \"g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\"\n    \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\nusing this:\n  g : b' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b'\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a'\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b'\\<rparr>\n\ngoal (1 subgoal):\n 1. (g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a &&&\n     f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b) &&&\n    g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a &&&\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> &&&\n    g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "unfolding a'b'"], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal (1 subgoal):\n 1. (g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a &&&\n     f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b) &&&\n    g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a &&&\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> &&&\n    g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "by auto"], ["proof (state)\nthis:\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n  g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_Comp_is_arr_isomorphism[cat_arrow_cs_intros]:\n  assumes \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\" and \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "from assms"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have [intro]: \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c", "by (auto intro: cat_cs_intros)"], ["proof (state)\nthis:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "from assms(1)"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "obtain g' where g'g: \"is_inverse \\<CC> g' g\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        is_inverse \\<CC> g' g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  is_inverse \\<CC> g' g\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "with assms(1)"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  is_inverse \\<CC> g' g", "have [intro]: \"g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  is_inverse \\<CC> g' g\n\ngoal (1 subgoal):\n 1. g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "by (elim is_arr_isomorphismE)\n      (auto simp: is_arr_isomorphismD cat_is_inverse_is_arr_isomorphism)"], ["proof (state)\nthis:\n  g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "from assms(2)"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "obtain f' where f'f: \"is_inverse \\<CC> f' f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        is_inverse \\<CC> f' f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "with assms(2)"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> f' f", "have [intro]: \"f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by (elim is_arr_isomorphismE)\n      (auto simp: is_arr_isomorphismD cat_is_inverse_is_arr_isomorphism)"], ["proof (state)\nthis:\n  f' : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "have \"f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "by (auto intro: cat_cs_intros)"], ["proof (state)\nthis:\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g' : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "from cat_is_inverse_Comp[OF _ _ g'g f'f] assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>g : ?b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?c;\n   f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b\\<rbrakk>\n  \\<Longrightarrow> is_inverse \\<CC>\n                     (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n                     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have \"is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g') (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>g : ?b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?c;\n   f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b\\<rbrakk>\n  \\<Longrightarrow> is_inverse \\<CC>\n                     (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n                     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "by (elim is_arr_isomorphismE) simp"], ["proof (state)\nthis:\n  is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "then"], ["proof (chain)\npicking this:\n  is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_inverse \\<CC> (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g')\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "by (auto intro: is_arr_isomorphismI)"], ["proof (state)\nthis:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_arrow_cs_intros] = category.cat_Comp_is_arr_isomorphism"], ["", "lemma (in category) cat_CId_is_arr_isomorphism: \n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "by \n    (\n      cs_concl \n        cs_intro: cat_cs_intros is_inverseI cat_is_inverse_is_arr_isomorphism \n        cs_simp: cat_cs_simps\n    )"], ["", "lemma (in category) cat_CId_is_arr_isomorphism'[cat_arrow_cs_intros]:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<CC>' = \\<CC>\"\n    and \"b = a\"\n    and \"c = a\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> c", "using assms(1)"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> c", "unfolding assms(2-4)"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "by (rule cat_CId_is_arr_isomorphism)"], ["", "lemmas [cat_arrow_cs_intros] = category.cat_CId_is_arr_isomorphism'"], ["", "lemma (in category) cat_is_arr_isomorphism_is_monic_arr[cat_arrow_cs_intros]:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>m\\<^sub>o\\<^sub>n\\<^bsub>\\<CC>\\<^esub> b", "proof(intro is_monic_arrI)"], ["proof (state)\ngoal (2 subgoals):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n 2. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "note [cat_cs_intros] = is_arr_isomorphismD(1)"], ["proof (state)\nthis:\n  ?f : ?a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>?\\<CC>\\<^esub> ?b \\<Longrightarrow>\n  ?f : ?a \\<mapsto>\\<^bsub>?\\<CC>\\<^esub> ?b\n\ngoal (2 subgoals):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n 2. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "show \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "by (intro is_arr_isomorphismD(1)[OF assms])"], ["proof (state)\nthis:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "fix h g c"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "assume prems: \n    \"h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \"g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\" \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h = f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\""], ["proof (state)\nthis:\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h =\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "obtain f' \n    where f': \"f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\" \n      and [cat_cs_simps]: \"f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a;\n         f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n         \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: is_arr_isomorphismE')"], ["proof (state)\nthis:\n  f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "from category_axioms assms prems(1,2)"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a", "have \"h = (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> h\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. h =\n    f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    h", "by (cs_concl cs_simp: cat_cs_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  h =\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "also"], ["proof (state)\nthis:\n  h =\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "from category_axioms assms prems(1,2) f'"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "have \"\\<dots> = (f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    h =\n    f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g", "by (cs_concl cs_simp: prems(3) cat_cs_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h =\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "also"], ["proof (state)\nthis:\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  h =\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "from category_axioms assms prems(1,2) f'"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "have \"\\<dots> = g\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  g : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  f' : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g =\n    g", "by (cs_concl cs_simp: cat_cs_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  f' \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g =\n  g\n\ngoal (1 subgoal):\n 1. \\<And>fa g aa.\n       \\<lbrakk>fa : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        g : aa \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a;\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> fa =\n        f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<rbrakk>\n       \\<Longrightarrow> fa = g", "finally"], ["proof (chain)\npicking this:\n  h = g", "show \"h = g\""], ["proof (prove)\nusing this:\n  h = g\n\ngoal (1 subgoal):\n 1. h = g", "by simp"], ["proof (state)\nthis:\n  h = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_arrow_cs_intros] = category.cat_is_arr_isomorphism_is_monic_arr"], ["", "lemma (in category) cat_is_arr_isomorphism_is_epic_arr:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b", "using assms"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>e\\<^sub>p\\<^sub>i\\<^bsub>\\<CC>\\<^esub> b", "by \n    (\n      rule \n        category.cat_is_arr_isomorphism_is_monic_arr[\n          OF category_op, unfolded cat_op_simps\n          ]\n    )"], ["", "lemmas [cat_arrow_cs_intros] = category.cat_is_arr_isomorphism_is_epic_arr"], ["", "subsection\\<open>The inverse arrow\\<close>"], ["", "text\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition the_inverse :: \"V \\<Rightarrow> V \\<Rightarrow> V\" (\\<open>(_\\<inverse>\\<^sub>C\\<index>)\\<close> [1000] 999)\n  where \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = (THE g. is_inverse \\<CC> g f)\""], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma (in category) cat_is_inverse_is_inverse_the_inverse:\n  assumes \"is_inverse \\<CC> g f\"\n  shows \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "unfolding the_inverse_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (THE g. is_inverse \\<CC> g f) f", "proof(rule theI)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_inverse \\<CC> ?a f\n 2. \\<And>x. is_inverse \\<CC> x f \\<Longrightarrow> x = ?a", "fix g'"], ["proof (state)\ngoal (2 subgoals):\n 1. is_inverse \\<CC> ?a f\n 2. \\<And>x. is_inverse \\<CC> x f \\<Longrightarrow> x = ?a", "assume \"is_inverse \\<CC> g' f\""], ["proof (state)\nthis:\n  is_inverse \\<CC> g' f\n\ngoal (2 subgoals):\n 1. is_inverse \\<CC> ?a f\n 2. \\<And>x. is_inverse \\<CC> x f \\<Longrightarrow> x = ?a", "then"], ["proof (chain)\npicking this:\n  is_inverse \\<CC> g' f", "show \"g' = g\""], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g' f\n\ngoal (1 subgoal):\n 1. g' = g", "by (meson cat_is_inverse_eq assms)"], ["proof (state)\nthis:\n  g' = g\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> g f", "qed (rule assms)"], ["", "lemma (in category) cat_is_inverse_eq_the_inverse:\n  assumes \"is_inverse \\<CC> g f\"\n  shows \"g = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "by (meson assms cat_is_inverse_is_inverse_the_inverse cat_is_inverse_eq)"], ["", "text\\<open>The inverse arrow is an inverse of an isomorphism.\\<close>"], ["", "lemma (in category) cat_the_inverse_is_inverse:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "obtain g where \"is_inverse \\<CC> g f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        is_inverse \\<CC> g f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "then"], ["proof (chain)\npicking this:\n  is_inverse \\<CC> g f", "show \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\""], ["proof (prove)\nusing this:\n  is_inverse \\<CC> g f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "by (rule cat_is_inverse_is_inverse_the_inverse)"], ["proof (state)\nthis:\n  is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_the_inverse_is_arr_isomorphism:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have f: \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b", "by auto"], ["proof (state)\nthis:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "have \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "by (rule cat_the_inverse_is_inverse[OF assms])"], ["proof (state)\nthis:\n  is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "from cat_is_inverse_is_arr_isomorphism[OF f this]"], ["proof (chain)\npicking this:\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "show ?thesis"], ["proof (prove)\nusing this:\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "."], ["proof (state)\nthis:\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_the_inverse_is_arr_isomorphism':\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" and \"\\<CC>' = \\<CC>\"\n  shows \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> a", "using assms(1)"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>'\\<^esub> a", "unfolding assms(2)"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> a", "by (rule cat_the_inverse_is_arr_isomorphism)"], ["", "lemmas [cat_cs_intros] = category.cat_the_inverse_is_arr_isomorphism'"], ["", "lemma (in category) op_cat_the_inverse:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have \"f : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>op_cat \\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>op_cat \\<CC>\\<^esub> a", "unfolding cat_op_simps"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "by simp"], ["proof (state)\nthis:\n  f : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>op_cat \\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "show ?thesis"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "by \n      (\n        intro \n          category.cat_is_inverse_eq_the_inverse[\n            symmetric, OF category_op, unfolded cat_op_simps\n            ] \n          cat_the_inverse_is_inverse\n      )"], ["proof (state)\nthis:\n  f\\<inverse>\\<^sub>C\\<^bsub>op_cat \\<CC>\\<^esub> =\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_op_simps] = category.op_cat_the_inverse"], ["", "lemma (in category) cat_Comp_the_inverse:\n  assumes \"g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\" and \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"(g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have \"g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "by (cs_concl cs_intro: cat_arrow_cs_intros)"], ["proof (state)\nthis:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "then"], ["proof (chain)\npicking this:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c", "have inv_gf: \"is_inverse \\<CC> ((g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\""], ["proof (prove)\nusing this:\n  g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC>\n     ((g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "by (intro cat_the_inverse_is_inverse)"], ["proof (state)\nthis:\n  is_inverse \\<CC>\n   ((g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "from assms"], ["proof (chain)\npicking this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have \"is_inverse \\<CC> (g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) g\" \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\""], ["proof (prove)\nusing this:\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> (g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) g &&&\n    is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "by (auto intro: cat_the_inverse_is_inverse)"], ["proof (state)\nthis:\n  is_inverse \\<CC> (g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) g\n  is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\n\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "with category_axioms assms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> (g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) g\n  is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f", "have \n    \"is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  g : b \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> c\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n  is_inverse \\<CC> (g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) g\n  is_inverse \\<CC> (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>) f\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC>\n     (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n      g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n     (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "by (cs_concl cs_intro: cat_cs_intros cat_arrow_cs_intros)"], ["proof (state)\nthis:\n  is_inverse \\<CC>\n   (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "from inv_gf this"], ["proof (chain)\npicking this:\n  is_inverse \\<CC>\n   ((g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n  is_inverse \\<CC>\n   (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)", "show \"(g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\""], ["proof (prove)\nusing this:\n  is_inverse \\<CC>\n   ((g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n  is_inverse \\<CC>\n   (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\n   (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\n\ngoal (1 subgoal):\n 1. (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n     f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>", "by (meson cat_is_inverse_eq)"], ["proof (state)\nthis:\n  (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n   f)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  g\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_cs_simps] = category.cat_Comp_the_inverse"], ["", "lemma (in category) cat_the_inverse_Comp_CId:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows cat_the_inverse_Comp_CId_left: \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\"\n    and cat_the_inverse_Comp_CId_right: \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> &&&\n    f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n 2. f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "show \"f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>", "by \n      (\n        cs_concl\n          cs_simp: is_inverse_Comp_CId_left\n          cs_intro: cat_the_inverse_is_inverse cat_arrow_cs_intros\n      )"], ["proof (state)\nthis:\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "show \"f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>", "by \n      (\n        cs_concl\n          cs_simp: is_inverse_Comp_CId_right\n          cs_intro: cat_the_inverse_is_inverse cat_arrow_cs_intros\n      )"], ["proof (state)\nthis:\n  f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_cs_simps] = category.cat_the_inverse_Comp_CId"], ["", "lemma (in category) cat_the_inverse_the_inverse:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\"\n  shows \"(f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have \n    \"(f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> = (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f", "by (*slow*)\n      (\n        cs_concl \n          cs_simp: cat_cs_simps cs_intro: cat_cs_intros cat_arrow_cs_intros \n      )"], ["proof (state)\nthis:\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\n\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f", "also"], ["proof (state)\nthis:\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\n\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f", "from assms"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "have \"\\<dots> = f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n    f =\n    f", "by \n      (\n        cs_concl \n          cs_simp: cat_cs_simps cs_intro: cat_cs_intros cat_arrow_cs_intros\n      )"], ["proof (state)\nthis:\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n  f =\n  f\n\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f", "finally"], ["proof (chain)\npicking this:\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  f", "show ?thesis"], ["proof (prove)\nusing this:\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  f\n\ngoal (1 subgoal):\n 1. (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n    f", "."], ["proof (state)\nthis:\n  (f\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub>)\\<inverse>\\<^sub>C\\<^bsub>\\<CC>\\<^esub> =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas [cat_cs_simps] = category.cat_the_inverse_the_inverse"], ["", "subsection\\<open>Isomorphic objects\\<close>"], ["", "text\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition obj_iso :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\" \n  where \"obj_iso \\<CC> a b \\<longleftrightarrow> (\\<exists>f. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b)\""], ["", "syntax \"_obj_iso\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\" (\\<open>(_/ \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<index> _)\\<close> [55, 56] 55)"], ["", "translations \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \\<rightleftharpoons> \"CONST obj_iso \\<CC> a b\""], ["", "text\\<open>Rules.\\<close>"], ["", "lemma obj_isoI:\n  assumes \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\" \n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b", "using assms"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b", "unfolding obj_iso_def"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. Ex (is_arr_isomorphism \\<CC> a b)", "by auto"], ["", "lemma obj_isoD[dest]:\n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \n  shows \"\\<exists>f. f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "using assms"], ["proof (prove)\nusing this:\n  a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "unfolding obj_iso_def"], ["proof (prove)\nusing this:\n  Ex (is_arr_isomorphism \\<CC> a b)\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b", "by auto"], ["", "lemma obj_isoE[elim!]:\n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \n  obtains f where \"f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma (in category) op_cat_obj_iso[cat_op_simps]: \n  \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>op_cat \\<CC>\\<^esub> b = b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>op_cat \\<CC>\\<^esub> b =\n    b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "unfolding obj_iso_def cat_op_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (is_arr_isomorphism \\<CC> b a) = Ex (is_arr_isomorphism \\<CC> b a)", ".."], ["", "lemmas [cat_op_simps] = category.op_cat_obj_iso"], ["", "lemmas [cat_op_intros] = category.op_cat_obj_iso[THEN iffD2]"], ["", "text\\<open>Equivalence relation.\\<close>"], ["", "lemma (in category) cat_obj_iso_refl:\n  assumes \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\" \n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "by (auto intro: obj_isoI cat_arrow_cs_intros)"], ["", "lemma (in category) cat_obj_iso_sym[sym]: \n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" \n  shows \"b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "using assms"], ["proof (prove)\nusing this:\n  a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\n\ngoal (1 subgoal):\n 1. b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "by (elim obj_isoE is_arr_isomorphismE) \n    (metis obj_iso_def cat_is_inverse_is_arr_isomorphism)"], ["", "lemma (in category) cat_obj_iso_trans[trans]:\n  assumes \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\" and \"b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c\" \n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c", "using assms"], ["proof (prove)\nusing this:\n  a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> b\n  b \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> c", "by (auto intro: cat_Comp_is_arr_isomorphism obj_isoI)"], ["", "subsection\\<open>Terminal object and initial object\\<close>"], ["", "lemma (in category) cat_obj_terminal_CId:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_terminal \\<CC> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f", "using assms"], ["proof (prove)\nusing this:\n  obj_terminal \\<CC> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f", "by (elim obj_terminalE) (metis cat_CId_is_arr)"], ["", "lemma (in category) cat_obj_initial_CId: \n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_initial \\<CC> a\" and \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n  shows \"\\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f", "using assms"], ["proof (prove)\nusing this:\n  obj_initial \\<CC> a\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> = f", "by (rule category.cat_obj_terminal_CId[OF category_op, unfolded cat_op_simps])"], ["", "lemma (in category) cat_obj_terminal_obj_iso:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_terminal \\<CC> a\" and \"obj_terminal \\<CC> a'\"\n  shows \"a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'", "from assms"], ["proof (chain)\npicking this:\n  obj_terminal \\<CC> a\n  obj_terminal \\<CC> a'", "obtain f where f: \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\""], ["proof (prove)\nusing this:\n  obj_terminal \\<CC> a\n  obj_terminal \\<CC> a'\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'", "from assms"], ["proof (chain)\npicking this:\n  obj_terminal \\<CC> a\n  obj_terminal \\<CC> a'", "obtain f' where f': \"f' : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\nusing this:\n  obj_terminal \\<CC> a\n  obj_terminal \\<CC> a'\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f' : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f' : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'", "from f f' cat_obj_terminal_CId cat_Comp_is_arr"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f' : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  \\<lbrakk>obj_terminal \\<CC> ?a;\n   ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a\\<rbrakk>\n  \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> = ?f\n  \\<lbrakk>?g : ?b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?c;\n   ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b\\<rbrakk>\n  \\<Longrightarrow> ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                    ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?c", "have f'f: \"is_inverse \\<CC> f' f\""], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  f' : a' \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n  \\<lbrakk>obj_terminal \\<CC> ?a;\n   ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a\\<rbrakk>\n  \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> = ?f\n  \\<lbrakk>?g : ?b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?c;\n   ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?b\\<rbrakk>\n  \\<Longrightarrow> ?g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n                    ?f : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?c\n\ngoal (1 subgoal):\n 1. is_inverse \\<CC> f' f", "by (intro is_inverseI[OF f' f]) (metis assms(1), metis assms(2))"], ["proof (state)\nthis:\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'", "with f"], ["proof (chain)\npicking this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  is_inverse \\<CC> f' f", "show ?thesis"], ["proof (prove)\nusing this:\n  f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a'\n  is_inverse \\<CC> f' f\n\ngoal (1 subgoal):\n 1. a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'", "by (cs_concl cs_intro: obj_isoI is_arr_isomorphismI)"], ["proof (state)\nthis:\n  a \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in category) cat_obj_initial_obj_iso:\n  \\<comment>\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_initial \\<CC> a\" and \"obj_initial \\<CC> a'\"\n  shows \"a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "interpret op: category \\<alpha> \\<open>op_cat \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> (op_cat \\<CC>)", "by (auto intro: cat_cs_intros)"], ["proof (state)\ngoal (1 subgoal):\n 1. a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "from assms"], ["proof (chain)\npicking this:\n  obj_initial \\<CC> a\n  obj_initial \\<CC> a'", "show ?thesis"], ["proof (prove)\nusing this:\n  obj_initial \\<CC> a\n  obj_initial \\<CC> a'\n\ngoal (1 subgoal):\n 1. a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a", "by (rule op.cat_obj_terminal_obj_iso[unfolded cat_op_simps])"], ["proof (state)\nthis:\n  a' \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> a\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Null object\\<close>"], ["", "lemma (in category) cat_obj_null_obj_iso:\n  \\<comment>\\<open>see Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"obj_null \\<CC> z\" and \"obj_null \\<CC> z'\"\n  shows \"z \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> z'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> z'", "using assms"], ["proof (prove)\nusing this:\n  obj_null \\<CC> z\n  obj_null \\<CC> z'\n\ngoal (1 subgoal):\n 1. z \\<approx>\\<^sub>o\\<^sub>b\\<^sub>j\\<^bsub>\\<CC>\\<^esub> z'", "by (simp add: cat_obj_terminal_obj_iso obj_nullD(2))"], ["", "subsection\\<open>Groupoid\\<close>"], ["", "text\\<open>See Chapter I-5 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "locale groupoid = category \\<alpha> \\<CC> for \\<alpha> \\<CC> +\n  assumes grpd_is_arr_isomorphism: \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> f : a \\<mapsto>\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<CC>\\<^esub> b\""], ["", "text\\<open>Rules.\\<close>"], ["", "mk_ide rf groupoid_def[unfolded groupoid_axioms_def]\n  |intro groupoidI|\n  |dest groupoidD[dest]|\n  |elim groupoidE[elim]|"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}