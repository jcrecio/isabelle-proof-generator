{"file_name": "/home/qj213/afp-2021-10-22/thys/CZH_Elementary_Categories/czh_ecategories/CZH_ECAT_Small_Category.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CZH_Elementary_Categories", "problem_names": ["lemmas [slicing_intros] = tiny_category.tiny_cat_tiny_semicategory", "lemma (in tiny_category) tiny_category_axioms'[cat_small_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\"\n  shows \"tiny_category \\<alpha>' \\<CC>\"", "lemma tiny_categoryI':\n  assumes \"category \\<alpha> \\<CC>\" and \"\\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\" and \"\\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"tiny_category \\<alpha> \\<CC>\"", "lemma tiny_categoryI'':\n  assumes \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\" \n    and \"\\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"tiny_category \\<alpha> \\<CC>\"", "lemmas_with [unfolded slicing_simps]:\n  tiny_cat_semicategory = smc.semicategory_axioms\n  and tiny_cat_Obj_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Obj_in_Vset\n  and tiny_cat_Arr_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Arr_in_Vset\n  and tiny_cat_Dom_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Dom_in_Vset\n  and tiny_cat_Cod_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Cod_in_Vset\n  and tiny_cat_Comp_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Comp_in_Vset", "lemmas (in tiny_category) tiny_dg_category = category_axioms", "lemmas [cat_small_cs_intros] = tiny_category.tiny_dg_category", "lemma (in tiny_category) tiny_cat_CId_in_Vset: \"\\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma (in tiny_category) tiny_cat_in_Vset: \"\\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma tiny_category[simp]: \"small {\\<CC>. tiny_category \\<alpha> \\<CC>}\"", "lemma small_categories_vsubset_Vset: \"set {\\<CC>. tiny_category \\<alpha> \\<CC>} \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma (in category) cat_tiny_category_if_ge_Limit:\n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"tiny_category \\<beta> \\<CC>\"", "lemma (in tiny_category) tiny_category_op: \"tiny_category \\<alpha> (op_cat \\<CC>)\"", "lemmas tiny_category_op[cat_op_intros] = tiny_category.tiny_category_op", "lemmas [slicing_intros] = finite_category.fin_cat_finite_semicategory", "lemma (in finite_category) fin_category_axioms'[cat_small_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\"\n  shows \"finite_category \\<alpha>' \\<CC>\"", "lemma finite_categoryI':\n  assumes \"category \\<alpha> \\<CC>\"  and \"vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\" and \"vfinite (\\<CC>\\<lparr>Arr\\<rparr>)\"\n  shows \"finite_category \\<alpha> \\<CC>\"", "lemma finite_categoryI'': \n  assumes \"tiny_category \\<alpha> \\<CC>\" and \"vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\" and \"vfinite (\\<CC>\\<lparr>Arr\\<rparr>)\"\n  shows \"finite_category \\<alpha> \\<CC>\"", "lemmas_with [unfolded slicing_simps]:\n  fin_cat_tiny_semicategory = smc.tiny_semicategory_axioms\n  and fin_smc_Obj_vfinite[cat_small_cs_intros] = smc.fin_smc_Obj_vfinite\n  and fin_smc_Arr_vfinite[cat_small_cs_intros] = smc.fin_smc_Arr_vfinite", "lemmas (in finite_category) fin_cat_tiny_category = tiny_category_axioms", "lemmas [cat_small_cs_intros] = finite_category.fin_cat_tiny_category", "lemma (in finite_category) fin_cat_in_Vset: \"\\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma small_finite_categories[simp]: \"small {\\<CC>. finite_category \\<alpha> \\<CC>}\"", "lemma small_finite_categories_vsubset_Vset: \n  \"set {\\<CC>. finite_category \\<alpha> \\<CC>} \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\"", "lemma (in finite_category) finite_category_op: \"finite_category \\<alpha> (op_cat \\<CC>)\"", "lemmas finite_category_op[cat_op_intros] = finite_category.finite_category_op"], "translations": [["", "lemmas [slicing_intros] = tiny_category.tiny_cat_tiny_semicategory"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in tiny_category) tiny_category_axioms'[cat_small_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\"\n  shows \"tiny_category \\<alpha>' \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha>' \\<CC>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "by (rule tiny_category_axioms)"], ["", "mk_ide rf tiny_category_def[unfolded tiny_category_axioms_def]\n  |intro tiny_categoryI|\n  |dest tiny_categoryD[dest]|\n  |elim tiny_categoryE[elim]|"], ["", "lemma tiny_categoryI':\n  assumes \"category \\<alpha> \\<CC>\" and \"\\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\" and \"\\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"tiny_category \\<alpha> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "interpret category \\<alpha> \\<CC>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "proof(intro tiny_categoryI)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. tiny_semicategory \\<alpha> (cat_smc \\<CC>)\n 6. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 7. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 8. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 9. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "from assms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  \\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "show \"tiny_semicategory \\<alpha> (cat_smc \\<CC>)\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  \\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. tiny_semicategory \\<alpha> (cat_smc \\<CC>)", "by (intro tiny_semicategoryI') (auto simp: slicing_simps)"], ["proof (state)\nthis:\n  tiny_semicategory \\<alpha> (cat_smc \\<CC>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 6. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 7. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 8. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "qed (auto simp: vfsequence_axioms cat_cs_simps cat_cs_intros)"], ["proof (state)\nthis:\n  tiny_category \\<alpha> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiny_categoryI'':\n  assumes \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<CC>\"\n    and \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and \"vsv (\\<CC>\\<lparr>Dom\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Cod\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>Comp\\<rparr>)\"\n    and \"vsv (\\<CC>\\<lparr>CId\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Dom\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) = \\<CC>\\<lparr>Arr\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>Cod\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>gf. gf \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>Comp\\<rparr>) \\<longleftrightarrow>\n      (\\<exists>g f b c a. gf = [g, f]\\<^sub>\\<circ> \\<and> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<and> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow> g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c\"\n    and \"\\<And>c d h b g a f. \\<lbrakk> h : c \\<mapsto>\\<^bsub>\\<CC>\\<^esub> d; g : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      (h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> g) \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = h \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> (g \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f)\"\n    and \"\\<And>a. a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and \"\\<And>b c f. f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\"\n    and \"\\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\" \n    and \"\\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\"\n  shows \"tiny_category \\<alpha> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "by (intro tiny_categoryI tiny_semicategoryI'', unfold slicing_simps) \n    (simp_all add: cat_smc_def nat_omega_simps assms)"], ["", "text\\<open>Slicing.\\<close>"], ["", "context tiny_category\nbegin"], ["", "interpretation smc: tiny_semicategory \\<alpha> \\<open>cat_smc \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_semicategory \\<alpha> (cat_smc \\<CC>)", "by (rule tiny_cat_tiny_semicategory)"], ["", "lemmas_with [unfolded slicing_simps]:\n  tiny_cat_semicategory = smc.semicategory_axioms\n  and tiny_cat_Obj_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Obj_in_Vset\n  and tiny_cat_Arr_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Arr_in_Vset\n  and tiny_cat_Dom_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Dom_in_Vset\n  and tiny_cat_Cod_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Cod_in_Vset\n  and tiny_cat_Comp_in_Vset[cat_small_cs_intros] = smc.tiny_smc_Comp_in_Vset"], ["", "end"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "sublocale tiny_category \\<subseteq> category"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by (rule categoryI) \n    (\n      auto simp: \n        vfsequence_axioms tiny_cat_semicategory cat_cs_intros cat_cs_simps\n    )"], ["", "lemmas (in tiny_category) tiny_dg_category = category_axioms"], ["", "lemmas [cat_small_cs_intros] = tiny_category.tiny_dg_category"], ["", "text\\<open>Size.\\<close>"], ["", "lemma (in tiny_category) tiny_cat_CId_in_Vset: \"\\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "from tiny_cat_Obj_in_Vset"], ["proof (chain)\npicking this:\n  \\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "have \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n    \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (simp add: tiny_cat_Obj_in_Vset cat_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "moreover"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "from tiny_cat_Arr_in_Vset cat_CId_vrange tiny_cat_Arr_in_Vset"], ["proof (chain)\npicking this:\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "have \n    \"\\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n    \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "ultimately"], ["proof (chain)\npicking this:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<R>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>)\n  \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (blast intro: \\<Z>_Limit_\\<alpha>\\<omega>)"], ["proof (state)\nthis:\n  \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in tiny_category) tiny_cat_in_Vset: \"\\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "note [cat_cs_intros] = \n    tiny_cat_Obj_in_Vset \n    tiny_cat_Arr_in_Vset\n    tiny_cat_Dom_in_Vset\n    tiny_cat_Cod_in_Vset\n    tiny_cat_Comp_in_Vset\n    tiny_cat_CId_in_Vset"], ["proof (state)\nthis:\n  \\<CC>\\<lparr>Obj\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>Arr\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>Dom\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>Cod\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>Comp\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n  \\<CC>\\<lparr>CId\\<rparr> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (subst cat_def) (cs_concl cs_intro: cat_cs_intros V_cs_intros)"], ["proof (state)\nthis:\n  \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiny_category[simp]: \"small {\\<CC>. tiny_category \\<alpha> \\<CC>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small {\\<CC>. tiny_category \\<alpha> \\<CC>}", "proof(rule down)"], ["proof (state)\ngoal (1 subgoal):\n 1. {\\<CC>. tiny_category \\<alpha> \\<CC>} \\<subseteq> elts ?x", "show \"{\\<CC>. tiny_category \\<alpha> \\<CC>} \\<subseteq> elts (set {\\<CC>. category \\<alpha> \\<CC>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<CC>. tiny_category \\<alpha> \\<CC>}\n    \\<subseteq> elts (ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>})", "by (auto intro: cat_small_cs_intros)"], ["proof (state)\nthis:\n  {\\<CC>. tiny_category \\<alpha> \\<CC>}\n  \\<subseteq> elts (ZFC_in_HOL.set {\\<CC>. category \\<alpha> \\<CC>})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma small_categories_vsubset_Vset: \"set {\\<CC>. tiny_category \\<alpha> \\<CC>} \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {\\<CC>. tiny_category \\<alpha> \\<CC>}\n    \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>", "by (rule vsubsetI) (simp_all add: tiny_category.tiny_cat_in_Vset)"], ["", "lemma (in category) cat_tiny_category_if_ge_Limit:\n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"tiny_category \\<beta> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<beta> \\<CC>", "proof(intro tiny_categoryI)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<beta>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. tiny_semicategory \\<beta> (cat_smc \\<CC>)\n 6. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 7. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 8. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 9. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "show \"tiny_semicategory \\<beta> (cat_smc \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_semicategory \\<beta> (cat_smc \\<CC>)", "by \n      (\n        rule semicategory.smc_tiny_semicategory_if_ge_Limit, \n        rule cat_semicategory;\n        intro assms\n      )"], ["proof (state)\nthis:\n  tiny_semicategory \\<beta> (cat_smc \\<CC>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<beta>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 6. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 7. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 8. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "qed (auto simp:  assms(1) cat_cs_simps cat_cs_intros vfsequence_axioms)"], ["", "subsubsection\\<open>Opposite tiny category\\<close>"], ["", "lemma (in tiny_category) tiny_category_op: \"tiny_category \\<alpha> (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> (op_cat \\<CC>)", "by (intro tiny_categoryI') \n    (auto simp: cat_op_simps cat_cs_intros cat_small_cs_intros)"], ["", "lemmas tiny_category_op[cat_op_intros] = tiny_category.tiny_category_op"], ["", "subsection\\<open>Finite category\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>\nA definition of a finite category can be found in nLab \n\\cite{noauthor_nlab_nodate}\\footnote{\n\\url{https://ncatlab.org/nlab/show/finite+category}\n}.\n\\<close>"], ["", "(*TODO: implicit redundant assumption*)"], ["", "locale finite_category = \\<Z> \\<alpha> + vfsequence \\<CC> + CId: vsv \\<open>\\<CC>\\<lparr>CId\\<rparr>\\<close> for \\<alpha> \\<CC> +\n  assumes fin_cat_length[cat_cs_simps]: \"vcard \\<CC> = 6\\<^sub>\\<nat>\"\n    and fin_cat_finite_semicategory[slicing_intros]: \n      \"finite_semicategory \\<alpha> (cat_smc \\<CC>)\"\n    and fin_cat_CId_vdomain[cat_cs_simps]: \"\\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\"\n    and fin_cat_CId_is_arr[cat_cs_intros]: \n      \"a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\"\n    and fin_cat_CId_left_left[cat_cs_simps]:\n      \"f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> f = f\"\n    and fin_cat_CId_right_left[cat_cs_simps]:\n      \"f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow> f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub> \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> = f\""], ["", "lemmas [slicing_intros] = finite_category.fin_cat_finite_semicategory"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in finite_category) fin_category_axioms'[cat_small_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\"\n  shows \"finite_category \\<alpha>' \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_category \\<alpha>' \\<CC>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "by (rule finite_category_axioms)"], ["", "mk_ide rf finite_category_def[unfolded finite_category_axioms_def]\n  |intro finite_categoryI|\n  |dest finite_categoryD[dest]|\n  |elim finite_categoryE[elim]|"], ["", "lemma finite_categoryI':\n  assumes \"category \\<alpha> \\<CC>\"  and \"vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\" and \"vfinite (\\<CC>\\<lparr>Arr\\<rparr>)\"\n  shows \"finite_category \\<alpha> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "interpret category \\<alpha> \\<CC>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "proof(intro finite_categoryI)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. finite_semicategory \\<alpha> (cat_smc \\<CC>)\n 6. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 7. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 8. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 9. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "from assms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\n  vfinite (\\<CC>\\<lparr>Arr\\<rparr>)", "show \"finite_semicategory \\<alpha> (cat_smc \\<CC>)\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\n  vfinite (\\<CC>\\<lparr>Arr\\<rparr>)\n\ngoal (1 subgoal):\n 1. finite_semicategory \\<alpha> (cat_smc \\<CC>)", "by (intro finite_semicategoryI') (auto simp: slicing_simps)"], ["proof (state)\nthis:\n  finite_semicategory \\<alpha> (cat_smc \\<CC>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence \\<CC>\n 3. vsv (\\<CC>\\<lparr>CId\\<rparr>)\n 4. vcard \\<CC> = 6\\<^sub>\\<nat>\n 5. \\<D>\\<^sub>\\<circ> (\\<CC>\\<lparr>CId\\<rparr>) = \\<CC>\\<lparr>Obj\\<rparr>\n 6. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr> : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> a\n 7. \\<And>a b f.\n       f : a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> b \\<Longrightarrow>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       f =\n       f\n 8. \\<And>b c f.\n       f : b \\<mapsto>\\<^bsub>\\<CC>\\<^esub> c \\<Longrightarrow>\n       f \\<circ>\\<^sub>A\\<^bsub>\\<CC>\\<^esub>\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>b\\<rparr> =\n       f", "qed (auto simp: vfsequence_axioms cat_cs_simps cat_cs_intros)"], ["proof (state)\nthis:\n  finite_category \\<alpha> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_categoryI'': \n  assumes \"tiny_category \\<alpha> \\<CC>\" and \"vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\" and \"vfinite (\\<CC>\\<lparr>Arr\\<rparr>)\"\n  shows \"finite_category \\<alpha> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "using assms"], ["proof (prove)\nusing this:\n  tiny_category \\<alpha> \\<CC>\n  vfinite (\\<CC>\\<lparr>Obj\\<rparr>)\n  vfinite (\\<CC>\\<lparr>Arr\\<rparr>)\n\ngoal (1 subgoal):\n 1. finite_category \\<alpha> \\<CC>", "by (intro finite_categoryI') (auto intro: cat_small_cs_intros)"], ["", "text\\<open>Slicing.\\<close>"], ["", "context finite_category\nbegin"], ["", "interpretation smc: finite_semicategory \\<alpha> \\<open>cat_smc \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_semicategory \\<alpha> (cat_smc \\<CC>)", "by (rule fin_cat_finite_semicategory)"], ["", "lemmas_with [unfolded slicing_simps]:\n  fin_cat_tiny_semicategory = smc.tiny_semicategory_axioms\n  and fin_smc_Obj_vfinite[cat_small_cs_intros] = smc.fin_smc_Obj_vfinite\n  and fin_smc_Arr_vfinite[cat_small_cs_intros] = smc.fin_smc_Arr_vfinite"], ["", "end"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "sublocale finite_category \\<subseteq> tiny_category"], ["proof (prove)\ngoal (1 subgoal):\n 1. tiny_category \\<alpha> \\<CC>", "by (rule tiny_categoryI) \n    (\n      auto \n        simp: vfsequence_axioms \n        intro:\n          cat_cs_intros cat_cs_simps cat_small_cs_intros\n          finite_category.fin_cat_tiny_semicategory\n    )"], ["", "lemmas (in finite_category) fin_cat_tiny_category = tiny_category_axioms"], ["", "lemmas [cat_small_cs_intros] = finite_category.fin_cat_tiny_category"], ["", "lemma (in finite_category) fin_cat_in_Vset: \"\\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<CC> \\<in>\\<^sub>\\<circ> Vset \\<alpha>", "by (rule tiny_cat_in_Vset)"], ["", "text\\<open>Size.\\<close>"], ["", "lemma small_finite_categories[simp]: \"small {\\<CC>. finite_category \\<alpha> \\<CC>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small {\\<CC>. finite_category \\<alpha> \\<CC>}", "proof(rule down)"], ["proof (state)\ngoal (1 subgoal):\n 1. {\\<CC>. finite_category \\<alpha> \\<CC>} \\<subseteq> elts ?x", "show \"{\\<CC>. finite_category \\<alpha> \\<CC>} \\<subseteq> elts (set {\\<CC>. tiny_category  \\<alpha> \\<CC>})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<CC>. finite_category \\<alpha> \\<CC>}\n    \\<subseteq> elts (ZFC_in_HOL.set {\\<CC>. tiny_category \\<alpha> \\<CC>})", "by (auto intro: cat_small_cs_intros)"], ["proof (state)\nthis:\n  {\\<CC>. finite_category \\<alpha> \\<CC>}\n  \\<subseteq> elts (ZFC_in_HOL.set {\\<CC>. tiny_category \\<alpha> \\<CC>})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma small_finite_categories_vsubset_Vset: \n  \"set {\\<CC>. finite_category \\<alpha> \\<CC>} \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ZFC_in_HOL.set {\\<CC>. finite_category \\<alpha> \\<CC>}\n    \\<subseteq>\\<^sub>\\<circ> Vset \\<alpha>", "by (rule vsubsetI) (simp_all add: finite_category.fin_cat_in_Vset)"], ["", "subsubsection\\<open>Opposite finite category\\<close>"], ["", "lemma (in finite_category) finite_category_op: \"finite_category \\<alpha> (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_category \\<alpha> (op_cat \\<CC>)", "by (intro finite_categoryI', unfold cat_op_simps) \n    (auto simp: cat_cs_intros cat_small_cs_intros)"], ["", "lemmas finite_category_op[cat_op_intros] = finite_category.finite_category_op"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}