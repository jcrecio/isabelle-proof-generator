{"file_name": "/home/qj213/afp-2021-10-22/thys/CZH_Elementary_Categories/czh_ecategories/CZH_ECAT_Functor.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/CZH_Elementary_Categories", "problem_names": ["lemmas [cat_cs_simps] = dg_shared_cs_simps", "lemmas [cat_cs_intros] = dg_shared_cs_intros", "lemma cf_smcf_components:\n  shows [slicing_simps]: \"cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and [slicing_simps]: \"cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and [slicing_commute]: \"cf_smcf \\<FF>\\<lparr>HomDom\\<rparr> = cat_smc (\\<FF>\\<lparr>HomDom\\<rparr>)\"\n    and [slicing_commute]: \"cf_smcf \\<FF>\\<lparr>HomCod\\<rparr> = cat_smc (\\<FF>\\<lparr>HomCod\\<rparr>)\"", "lemmas [cat_cs_simps] =\n  is_functor.cf_length\n  is_functor.cf_HomDom\n  is_functor.cf_HomCod\n  is_functor.cf_ObjMap_CId", "lemma cn_cf_ObjMap_CId[cat_cn_cs_simps]: \n  assumes \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\"", "lemma (in is_functor) cf_is_semifunctor':\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas [slicing_intros] = is_functor.cf_is_semifunctor'", "lemma cn_smcf_comp_is_semifunctor: \n  assumes \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"cf_smcf \\<FF> : cat_smc \\<AA> \\<^sub>S\\<^sub>M\\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub>cat_smc \\<BB>\"", "lemma cn_smcf_comp_is_semifunctor'[slicing_intros]: \n  assumes \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n    and \"\\<AA>' = op_smc (cat_smc \\<AA>)\"\n    and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemma (in is_functor) is_functor_axioms'[cat_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\"", "lemmas [cat_cs_intros] = is_functorD(3,4)", "lemma is_functorI':\n  assumes \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<FF>\"\n    and \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"vcard \\<FF> = 4\\<^sub>\\<nat>\"\n    and \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and \"vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> f\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"\n    and \"(\\<And>c. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma is_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<FF>\"\n    and \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"vcard \\<FF> = 4\\<^sub>\\<nat>\"\n    and \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and \"vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> f\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"\n    and \"(\\<And>c. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)\"", "lemma is_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<FF>\"\n    and \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"vcard \\<FF> = 4\\<^sub>\\<nat>\"\n    and \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and \"vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> f\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"\n    and \"(\\<And>c. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)\"", "lemmas_with [unfolded slicing_simps]:\n  cf_ObjMap_vsv = smcf.smcf_ObjMap_vsv\n  and cf_ArrMap_vsv = smcf.smcf_ArrMap_vsv\n  and cf_ObjMap_vdomain[cat_cs_simps] = smcf.smcf_ObjMap_vdomain\n  and cf_ObjMap_vrange = smcf.smcf_ObjMap_vrange\n  and cf_ArrMap_vdomain[cat_cs_simps] = smcf.smcf_ArrMap_vdomain\n  and cf_ArrMap_is_arr = smcf.smcf_ArrMap_is_arr\n  and cf_ArrMap_is_arr''[cat_cs_intros] = smcf.smcf_ArrMap_is_arr''\n  and cf_ArrMap_is_arr'[cat_cs_intros] = smcf.smcf_ArrMap_is_arr'\n  and cf_ObjMap_app_in_HomCod_Obj[cat_cs_intros] = \n    smcf.smcf_ObjMap_app_in_HomCod_Obj\n  and cf_ArrMap_vrange = smcf.smcf_ArrMap_vrange\n  and cf_ArrMap_app_in_HomCod_Arr[cat_cs_intros] = \n    smcf.smcf_ArrMap_app_in_HomCod_Arr\n  and cf_ObjMap_vsubset_Vset = smcf.smcf_ObjMap_vsubset_Vset\n  and cf_ArrMap_vsubset_Vset = smcf.smcf_ArrMap_vsubset_Vset\n  and cf_ObjMap_in_Vset = smcf.smcf_ObjMap_in_Vset\n  and cf_ArrMap_in_Vset = smcf.smcf_ArrMap_in_Vset\n  and cf_is_semifunctor_if_ge_Limit = smcf.smcf_is_semifunctor_if_ge_Limit\n  and cf_is_arr_HomCod = smcf.smcf_is_arr_HomCod\n  and cf_vimage_dghm_ArrMap_vsubset_Hom = \n    smcf.smcf_vimage_dghm_ArrMap_vsubset_Hom", "lemmas_with [unfolded slicing_simps]: \n  cf_ArrMap_Comp = smcf.smcf_ArrMap_Comp", "lemmas [cat_cs_simps] = \n  is_functor.cf_ObjMap_vdomain\n  is_functor.cf_ArrMap_vdomain\n  is_functor.cf_ArrMap_Comp", "lemmas [cat_cs_intros] =\n  is_functor.cf_ObjMap_app_in_HomCod_Obj\n  is_functor.cf_ArrMap_app_in_HomCod_Arr\n  is_functor.cf_ArrMap_is_arr'", "lemma cn_cf_ArrMap_Comp[cat_cn_cs_simps]: \n  assumes \"category \\<alpha> \\<AA>\" \n    and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"g : c \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b\"\n    and \"f : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> a\" \n  shows \"\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> g\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"", "lemma cf_eqI:\n  assumes \"\\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n    and \"\\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"\n    and \"\\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and \"\\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and \"\\<AA> = \\<CC>\"\n    and \"\\<BB> = \\<DD>\"\n  shows \"\\<GG> = \\<FF>\"", "lemma cf_smcf_eqI:\n  assumes \"\\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"\n    and \"\\<AA> = \\<CC>\"\n    and \"\\<BB> = \\<DD>\"\n    and \"cf_smcf \\<GG> = cf_smcf \\<FF>\"\n  shows \"\\<GG> = \\<FF>\"", "lemma (in is_functor) cf_def: \"\\<FF> = [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>, \\<FF>\\<lparr>HomDom\\<rparr>, \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\"", "lemma (in is_functor) cf_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"  \n  shows \"\\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>\"", "lemma (in is_functor) cf_is_functor_if_ge_Limit:\n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<beta>\\<^esub> \\<BB>\"", "lemma small_all_cfs[simp]: \"small {\\<FF>. \\<exists>\\<AA> \\<BB>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\"", "lemma (in is_functor) cf_in_Vset_7: \"\\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\"", "lemma (in \\<Z>) all_cfs_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"all_cfs \\<alpha> \\<in>\\<^sub>\\<circ> Vset \\<beta>\"", "lemma small_cfs[simp]: \"small {\\<FF>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\"", "lemma op_cf_components[cat_op_simps]:\n  shows \"op_cf \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and \"op_cf \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and \"op_cf \\<FF>\\<lparr>HomDom\\<rparr> = op_cat (\\<FF>\\<lparr>HomDom\\<rparr>)\"\n    and \"op_cf \\<FF>\\<lparr>HomCod\\<rparr> = op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)\"", "lemma cf_smcf_op_cf[slicing_commute]: \"op_smcf (cf_smcf \\<FF>) = cf_smcf (op_cf \\<FF>)\"", "lemma op_cf_vsv[cat_op_intros]: \"vsv (op_cf \\<FF>)\"", "lemma (in is_functor) is_functor_op: \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemma (in is_functor) is_functor_op'[cat_op_intros]: \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas is_functor_op[cat_op_intros] = is_functor.is_functor_op'", "lemma (in is_functor) cf_op_cf_op_cf[cat_op_simps]: \"op_cf (op_cf \\<FF>) = \\<FF>\"", "lemmas cf_op_cf_op_cf[cat_op_simps] = is_functor.cf_op_cf_op_cf", "lemma eq_op_cf_iff[cat_op_simps]: \n  assumes \"\\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"\\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"\n  shows \"op_cf \\<GG> = op_cf \\<FF> \\<longleftrightarrow> \\<GG> = \\<FF>\"", "lemma cf_smcf_smcf_comp[slicing_commute]: \n  \"cf_smcf \\<GG> \\<circ>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F cf_smcf \\<FF> = cf_smcf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\"", "lemma cf_comp_ObjMap_vsv[cat_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>)\"", "lemma cf_comp_ObjMap_vdomain[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"", "lemma cf_comp_ObjMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"", "lemma cf_comp_ObjMap_app[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and [simp]: \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"(\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\"", "lemma cf_comp_ArrMap_vsv[cat_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>)\"", "lemma cf_comp_ArrMap_vdomain[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"", "lemma cf_comp_ArrMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\"", "lemma cf_comp_ArrMap_app[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and [simp]: \"f \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Arr\\<rparr>\"\n  shows \"(\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>\"", "lemma cf_comp_is_functorI[cat_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma cf_comp_assoc[cat_cs_simps]:\n  assumes \"\\<HH> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\" and \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"(\\<HH> \\<circ>\\<^sub>C\\<^sub>F \\<GG>) \\<circ>\\<^sub>C\\<^sub>F \\<FF> = \\<HH> \\<circ>\\<^sub>C\\<^sub>F (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\"", "lemma op_cf_cf_comp[cat_op_simps]: \"op_cf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) = op_cf \\<GG> \\<circ>\\<^sub>C\\<^sub>F op_cf \\<FF>\"", "lemma cf_cn_comp_components:\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ> \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ> \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and [cat_cn_cs_simps]: \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>HomDom\\<rparr> = op_cat (\\<FF>\\<lparr>HomDom\\<rparr>)\"\n    and [cat_cn_cs_simps]: \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>HomCod\\<rparr> = \\<GG>\\<lparr>HomCod\\<rparr>\"", "lemma cf_smcf_cf_cn_comp[slicing_commute]: \n  \"cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> = cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\"", "lemma cf_cn_comp_ObjMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\"", "lemma cf_cn_comp_ObjMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"", "lemma cf_cn_comp_ObjMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"", "lemma cf_cn_comp_ObjMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\"", "lemma cf_cn_comp_ArrMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\"", "lemma cf_cn_comp_ArrMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"", "lemma cf_cn_comp_ArrMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\"", "lemma cf_cn_comp_ArrMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Arr\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\"", "lemma cf_cn_cov_comp_ObjMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\"", "lemma cf_cn_cov_comp_ObjMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"", "lemma cf_cn_cov_comp_ObjMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\"", "lemma cf_cn_cov_comp_ObjMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\"", "lemma cf_cn_cov_comp_ArrMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\"", "lemma cf_cn_cov_comp_ArrMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"", "lemma cf_cn_cov_comp_ArrMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\"", "lemma cf_cn_cov_comp_ArrMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Arr\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\"", "lemma cf_cn_comp_is_functorI[cat_cn_cs_intros]:\n  assumes \"category \\<alpha> \\<AA>\" and \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma cf_cn_cov_comp_is_functor[cat_cn_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma cf_cov_cn_comp_is_functor[cat_cn_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma op_cf_cf_cn_comp[cat_op_simps]: \"op_cf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = op_cf \\<GG> \\<^sub>C\\<^sub>F\\<circ> op_cf \\<FF>\"", "lemma cf_smcf_cf_id[slicing_commute]: \"smcf_id (cat_smc \\<CC>) = cf_smcf (cf_id \\<CC>)\"", "lemmas_with [unfolded slicing_simps]:\n  cat_smcf_id_is_semifunctor = smc.smc_smcf_id_is_semifunctor", "lemmas [cat_cs_simps] = dghm_id_ObjMap_app", "lemmas [cat_cs_simps] = dghm_id_ArrMap_app", "lemma op_cf_cf_id[cat_op_simps]: \"op_cf (cf_id \\<CC>) = cf_id (op_cat \\<CC>)\"", "lemma (in category) cat_cf_id_is_functor: \"cf_id \\<CC> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma (in category) cat_cf_id_is_functor': \n  assumes \"\\<AA> = \\<CC>\" and \"\\<BB> = \\<CC>\"\n  shows \"cf_id \\<CC> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemmas [cat_cs_intros] = category.cat_cf_id_is_functor'", "lemma (in is_functor) cf_cf_comp_cf_id_left[cat_cs_simps]: \"cf_id \\<BB> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = \\<FF>\"\n  \\<comment>\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>", "lemmas [cat_cs_simps] = is_functor.cf_cf_comp_cf_id_left", "lemma (in is_functor) cf_cf_comp_cf_id_right[cat_cs_simps]: \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F cf_id \\<AA> = \\<FF>\"\n  \\<comment>\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>", "lemmas [cat_cs_simps] = is_functor.cf_cf_comp_cf_id_right", "lemma cf_smcf_cf_const[slicing_commute]: \n  \"smcf_const (cat_smc \\<CC>) (cat_smc \\<DD>) a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) = cf_smcf (cf_const \\<CC> \\<DD> a)\"", "lemmas_with [where \\<DD>=\\<DD> and a=a and f=\\<open>\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\\<close>, cat_cs_simps]: \n  dghm_const_ObjMap_app\n  dghm_const_ArrMap_app", "lemma op_cf_cf_const[cat_op_simps]:\n  \"op_cf (cf_const \\<CC> \\<DD> a) = cf_const (op_cat \\<CC>) (op_cat \\<DD>) a\"", "lemma cf_const_is_functor: \n  assumes \"category \\<alpha> \\<CC>\" and \"category \\<alpha> \\<DD>\" and \"a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\" \n  shows \"cf_const \\<CC> \\<DD> a : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"", "lemma cf_const_is_functor'[cat_cs_intros]: \n  assumes \"category \\<alpha> \\<CC>\" \n    and \"category \\<alpha> \\<DD>\" \n    and \"a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\" \n    and \"\\<AA> = \\<CC>\"\n    and \"\\<BB> = \\<DD>\"\n  shows \"cf_const \\<CC> \\<DD> a : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma (in is_ft_functor) ft_cf_is_ft_functor':\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas [slicing_intros] = is_ft_functor.ft_cf_is_ft_functor'", "lemma (in is_ft_functor) is_ft_functor_axioms'[cf_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\"", "lemmas [cf_cs_intros] = is_ft_functorD(1)", "lemma is_ft_functorI':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ> Hom \\<AA> a b)\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma is_ft_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ> Hom \\<AA> a b)\"", "lemma is_ft_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ> Hom \\<AA> a b)\"", "lemmas_with [unfolded slicing_simps]:\n  ft_cf_v11_on_Hom = smcf.ft_smcf_v11_on_Hom", "lemma (in is_ft_functor) is_ft_functor_op': \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemma (in is_ft_functor) is_ft_functor_op: \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemmas is_ft_functor_op[cat_op_intros] = is_ft_functor.is_ft_functor_op'", "lemma cf_comp_is_ft_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma (in is_fl_functor) fl_cf_is_fl_functor'[slicing_intros]:\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas [slicing_intros] = is_fl_functor.fl_cf_is_fl_semifunctor", "lemma (in is_fl_functor) is_fl_functor_axioms'[cf_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\"", "lemmas [cf_cs_intros] = is_fl_functorD(1)", "lemma is_fl_functorI':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow>\n    \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ> (Hom \\<AA> a b) = Hom \\<BB> (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>) (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma is_fl_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow>\n    \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ> (Hom \\<AA> a b) = Hom \\<BB> (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>) (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\"", "lemma is_fl_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> \n    \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ> (Hom \\<AA> a b) = Hom \\<BB> (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>) (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\"", "lemmas_with [unfolded slicing_simps]:\n  fl_cf_surj_on_Hom = smcf.fl_smcf_surj_on_Hom", "lemma (in is_fl_functor) is_fl_functor_op[cat_op_intros]: \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemmas is_fl_functor_op[cat_op_intros] = is_fl_functor.is_fl_functor_op", "lemma cf_comp_is_fl_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemmas [cf_cs_intros] = is_ff_functorD", "lemma (in is_ff_functor) ff_cf_is_ff_semifunctor:\n  \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\"", "lemma (in is_ff_functor) ff_cf_is_ff_semifunctor'[slicing_intros]:\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas [slicing_intros] = is_ff_functor.ff_cf_is_ff_semifunctor'", "lemma (in is_ff_functor) is_ff_functor_op: \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemma (in is_ff_functor) is_ff_functor_op'[cat_op_intros]: \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas is_ff_functor_op[cat_op_intros] = is_ff_functor.is_ff_functor_op", "lemma cf_comp_is_ff_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma (in is_iso_functor) iso_cf_is_iso_semifunctor'[slicing_intros]:\n  assumes \"\\<AA>' = cat_smc \\<AA>\" \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\"", "lemmas [slicing_intros] = is_iso_semifunctor.iso_smcf_is_iso_dghm'", "lemma (in is_iso_functor) is_iso_functor_axioms'[cf_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\"", "lemma is_iso_functorI':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma is_iso_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\"", "lemma is_iso_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\"", "lemmas_with [unfolded slicing_simps]:\n  iso_cf_ObjMap_vrange[simp] = smcf.iso_smcf_ObjMap_vrange\n  and iso_cf_ArrMap_vrange[simp] = smcf.iso_smcf_ArrMap_vrange", "lemmas_with [unfolded slicing_simps]:\n  iso_cf_Obj_HomDom_if_Obj_HomCod[elim] = \n    smcf.iso_smcf_Obj_HomDom_if_Obj_HomCod\n  and iso_cf_Arr_HomDom_if_Arr_HomCod[elim] = \n    smcf.iso_smcf_Arr_HomDom_if_Arr_HomCod\n  and iso_cf_ObjMap_eqE[elim] = smcf.iso_smcf_ObjMap_eqE\n  and iso_cf_ArrMap_eqE[elim] = smcf.iso_smcf_ArrMap_eqE", "lemmas (in is_iso_functor) iso_cf_is_ff_functor = is_ff_functor_axioms", "lemmas [cf_cs_intros] = is_iso_functor.iso_cf_is_ff_functor", "lemma (in is_iso_functor) is_iso_functor_op: \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemma (in is_iso_functor) is_iso_functor_op': \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\"", "lemmas is_iso_functor_op[cat_op_intros] = \n  is_iso_functor.is_iso_functor_op'", "lemma cf_comp_is_iso_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma dghm_inv_semifunctor[slicing_commute]: \n  \"inv_smcf (cf_smcf \\<FF>) = cf_smcf (inv_cf \\<FF>)\"", "lemmas_with [unfolded slicing_simps slicing_commute]:\n  inv_cf_ObjMap_v11 = smcf.inv_smcf_ObjMap_v11\n  and inv_cf_ObjMap_vdomain = smcf.inv_smcf_ObjMap_vdomain\n  and inv_cf_ObjMap_app = smcf.inv_smcf_ObjMap_app\n  and inv_cf_ObjMap_vrange = smcf.inv_smcf_ObjMap_vrange\n  and inv_cf_ArrMap_v11 = smcf.inv_smcf_ArrMap_v11\n  and inv_cf_ArrMap_vdomain = smcf.inv_smcf_ArrMap_vdomain\n  and inv_cf_ArrMap_app = smcf.inv_smcf_ArrMap_app\n  and inv_cf_ArrMap_vrange = smcf.inv_smcf_ArrMap_vrange\n  and iso_cf_ObjMap_inv_cf_ObjMap_app =\n    smcf.iso_smcf_ObjMap_inv_smcf_ObjMap_app\n  and iso_cf_ArrMap_inv_cf_ArrMap_app = \n    smcf.iso_smcf_ArrMap_inv_smcf_ArrMap_app\n  and iso_cf_HomDom_is_arr_conv = smcf.iso_smcf_HomDom_is_arr_conv\n  and iso_cf_HomCod_is_arr_conv = smcf.iso_smcf_HomCod_is_arr_conv", "lemma is_arr_isomorphism_is_iso_functor:\n  \\<comment>\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\"\n    and \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = cf_id \\<AA>\"\n    and \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F \\<GG> = cf_id \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma is_iso_functor_is_arr_isomorphism:\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows [cf_cs_intros]: \"inv_cf \\<FF> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\"\n    and \"inv_cf \\<FF> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = cf_id \\<AA>\"\n    and \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F inv_cf \\<FF> = cf_id \\<BB>\"", "lemma (in category) cat_cf_id_is_iso_functor: \"cf_id \\<CC> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\"", "lemma iso_categoryI:\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma iso_categoryD[dest]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<exists>\\<FF>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma iso_categoryE[elim]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  obtains \\<FF> where \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"", "lemma (in iso_category) iso_cat_iso_semicategory: \n  \"cat_smc \\<AA> \\<approx>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\"", "lemma iso_category_refl: \n  assumes \"category \\<alpha> \\<AA>\" \n  shows \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\"", "lemma iso_category_sym[sym]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\"", "lemma iso_category_trans[trans]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"\\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" \n  shows \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], "translations": [["", "lemmas [cat_cs_simps] = dg_shared_cs_simps"], ["", "lemmas [cat_cs_intros] = dg_shared_cs_intros"], ["", "subsubsection\\<open>Slicing\\<close>"], ["", "definition cf_smcf :: \"V \\<Rightarrow> V\"\n  where \"cf_smcf \\<CC> = \n    [\\<CC>\\<lparr>ObjMap\\<rparr>, \\<CC>\\<lparr>ArrMap\\<rparr>, cat_smc (\\<CC>\\<lparr>HomDom\\<rparr>), cat_smc (\\<CC>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\""], ["", "text\\<open>Components.\\<close>"], ["", "lemma cf_smcf_components:\n  shows [slicing_simps]: \"cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and [slicing_simps]: \"cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and [slicing_commute]: \"cf_smcf \\<FF>\\<lparr>HomDom\\<rparr> = cat_smc (\\<FF>\\<lparr>HomDom\\<rparr>)\"\n    and [slicing_commute]: \"cf_smcf \\<FF>\\<lparr>HomCod\\<rparr> = cat_smc (\\<FF>\\<lparr>HomCod\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n     cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>) &&&\n    cf_smcf \\<FF>\\<lparr>HomDom\\<rparr> =\n    cat_smc (\\<FF>\\<lparr>HomDom\\<rparr>) &&&\n    cf_smcf \\<FF>\\<lparr>HomCod\\<rparr> =\n    cat_smc (\\<FF>\\<lparr>HomCod\\<rparr>)", "unfolding cf_smcf_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> =\n     \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> &&&\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> =\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     cat_smc\n      (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr> =\n    cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     cat_smc\n      (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr> =\n    cat_smc (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)", "by (auto simp: nat_omega_simps)"], ["", "subsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "locale is_functor = \n  \\<Z> \\<alpha> + vfsequence \\<FF> + HomDom: category \\<alpha> \\<AA> + HomCod: category \\<alpha> \\<BB> \n  for \\<alpha> \\<AA> \\<BB> \\<FF> +\n  assumes cf_length[cat_cs_simps]: \"vcard \\<FF> = 4\\<^sub>\\<nat>\" \n    and cf_is_semifunctor[slicing_intros]: \n      \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\" \n    and cf_HomDom[cat_cs_simps]: \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and cf_HomCod[cat_cs_simps]: \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and cf_ObjMap_CId[cat_cs_intros]: \n      \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["", "syntax \"_is_functor\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>(_ :/ _ \\<mapsto>\\<mapsto>\\<^sub>C\\<index> _)\\<close> [51, 51, 51] 51)"], ["", "translations \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \\<rightleftharpoons> \"CONST is_functor \\<alpha> \\<AA> \\<BB> \\<FF>\""], ["", "abbreviation (input) is_cn_cf :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  where \"is_cn_cf \\<alpha> \\<AA> \\<BB> \\<FF> \\<equiv> \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["", "syntax \"_is_cn_cf\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>(_ :/ _ \\<^sub>C\\<mapsto>\\<mapsto>\\<index> _)\\<close> [51, 51, 51] 51)"], ["", "translations \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \\<rightharpoonup> \"CONST is_cn_cf \\<alpha> \\<AA> \\<BB> \\<FF>\""], ["", "abbreviation all_cfs :: \"V \\<Rightarrow> V\"\n  where \"all_cfs \\<alpha> \\<equiv> set {\\<FF>. \\<exists>\\<AA> \\<BB>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\""], ["", "abbreviation cfs :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V\"\n  where \"cfs \\<alpha> \\<AA> \\<BB> \\<equiv> set {\\<FF>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\""], ["", "lemmas [cat_cs_simps] =\n  is_functor.cf_length\n  is_functor.cf_HomDom\n  is_functor.cf_HomCod\n  is_functor.cf_ObjMap_CId"], ["", "lemma cn_cf_ObjMap_CId[cat_cn_cs_simps]: \n  assumes \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "interpret is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "from assms(2)"], ["proof (chain)\npicking this:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>", "have c: \"c \\<in>\\<^sub>\\<circ> op_cat \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\nusing this:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. c \\<in>\\<^sub>\\<circ> op_cat \\<AA>\\<lparr>Obj\\<rparr>", "unfolding cat_op_simps"], ["proof (prove)\nusing this:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>", "by simp"], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> op_cat \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "by (rule cf_ObjMap_CId[OF c, unfolded cat_op_simps])"], ["proof (state)\nthis:\n  \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in is_functor) cf_is_semifunctor':\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<BB>", "by (rule cf_is_semifunctor)"], ["", "lemmas [slicing_intros] = is_functor.cf_is_semifunctor'"], ["", "lemma cn_smcf_comp_is_semifunctor: \n  assumes \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"cf_smcf \\<FF> : cat_smc \\<AA> \\<^sub>S\\<^sub>M\\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub>cat_smc \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<BB>", "unfolding slicing_simps slicing_commute"], ["proof (prove)\nusing this:\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<BB>", "by (rule is_functor.cf_is_semifunctor)"], ["", "lemma cn_smcf_comp_is_semifunctor'[slicing_intros]: \n  assumes \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n    and \"\\<AA>' = op_smc (cat_smc \\<AA>)\"\n    and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms(2,3)"], ["proof (prove)\nusing this:\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<BB>", "by (rule cn_smcf_comp_is_semifunctor)"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in is_functor) is_functor_axioms'[cat_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule is_functor_axioms)"], ["", "mk_ide rf is_functor_def[unfolded is_functor_axioms_def]\n  |intro is_functorI|\n  |dest is_functorD[dest]|\n  |elim is_functorE[elim]|"], ["", "lemmas [cat_cs_intros] = is_functorD(3,4)"], ["", "lemma is_functorI':\n  assumes \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<FF>\"\n    and \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"vcard \\<FF> = 4\\<^sub>\\<nat>\"\n    and \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and \"vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> f\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"\n    and \"(\\<And>c. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by \n    (\n      intro is_functorI is_semifunctorI', \n      unfold cf_smcf_components slicing_simps\n    )\n    (simp_all add: assms cf_smcf_def nat_omega_simps category.cat_semicategory)"], ["", "lemma is_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<FF>\"\n    and \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"vcard \\<FF> = 4\\<^sub>\\<nat>\"\n    and \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and \"vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> f\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"\n    and \"(\\<And>c. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Z> \\<alpha> &&& vfsequence \\<FF> &&& category \\<alpha> \\<AA>) &&&\n     (category \\<alpha> \\<BB> &&& vcard \\<FF> = 4\\<^sub>\\<nat>) &&&\n     \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA> &&&\n     \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>) &&&\n    ((vsv (\\<FF>\\<lparr>ObjMap\\<rparr>) &&&\n      vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)) &&&\n     \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n     \\<AA>\\<lparr>Obj\\<rparr> &&&\n     \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>)\n     \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>) &&&\n    (\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n     \\<AA>\\<lparr>Arr\\<rparr> &&&\n     (\\<And>a b f.\n         f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n         \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)) &&&\n    (\\<And>b c g a f.\n        \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c;\n         f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b\\<rbrakk>\n        \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n                       f\\<rparr> =\n                          \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n                          \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>) &&&\n    (\\<And>c.\n        c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n        \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n        \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)", "by \n    (\n      simp_all add: \n        is_functorD(2-9)[OF assms] \n        is_semifunctorD'[OF is_functorD(6)[OF assms], unfolded slicing_simps]\n    )"], ["", "lemma is_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<Z> \\<alpha>\"\n    and \"vfsequence \\<FF>\"\n    and \"category \\<alpha> \\<AA>\"\n    and \"category \\<alpha> \\<BB>\"\n    and \"vcard \\<FF> = 4\\<^sub>\\<nat>\"\n    and \"\\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\"\n    and \"\\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\"\n    and \"vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\"\n    and \"\\<And>a b f. f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>\"\n    and \"\\<And>b c g a f. \\<lbrakk> g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c; f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<rbrakk> \\<Longrightarrow>\n      \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> f\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\"\n    and \"(\\<And>c. c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Z> \\<alpha>; vfsequence \\<FF>; category \\<alpha> \\<AA>;\n      category \\<alpha> \\<BB>; vcard \\<FF> = 4\\<^sub>\\<nat>;\n      \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>;\n      \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>;\n      vsv (\\<FF>\\<lparr>ObjMap\\<rparr>); vsv (\\<FF>\\<lparr>ArrMap\\<rparr>);\n      \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n      \\<AA>\\<lparr>Obj\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>;\n      \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n      \\<AA>\\<lparr>Arr\\<rparr>;\n      \\<And>a b f.\n         f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n         \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>;\n      \\<And>b c g a f.\n         \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n                        f\\<rparr> =\n                           \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n                           \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>;\n      \\<And>c.\n         c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n         \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n         \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<Z> \\<alpha>; vfsequence \\<FF>; category \\<alpha> \\<AA>;\n      category \\<alpha> \\<BB>; vcard \\<FF> = 4\\<^sub>\\<nat>;\n      \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>;\n      \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>;\n      vsv (\\<FF>\\<lparr>ObjMap\\<rparr>); vsv (\\<FF>\\<lparr>ArrMap\\<rparr>);\n      \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n      \\<AA>\\<lparr>Obj\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>)\n      \\<subseteq>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>;\n      \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n      \\<AA>\\<lparr>Arr\\<rparr>;\n      \\<And>a b f.\n         f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b \\<Longrightarrow>\n         \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> : \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> \\<mapsto>\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>;\n      \\<And>b c g a f.\n         \\<lbrakk>g : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> c;\n          f : a \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b\\<rbrakk>\n         \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n                        f\\<rparr> =\n                           \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n                           \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>;\n      \\<And>c.\n         c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n         \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n         \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: is_functorD')"], ["", "text\\<open>A functor is a semifunctor.\\<close>"], ["", "context is_functor\nbegin"], ["", "interpretation smcf: is_semifunctor \\<alpha> \\<open>cat_smc \\<AA>\\<close> \\<open>cat_smc \\<BB>\\<close> \\<open>cf_smcf \\<FF>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<BB>", "by (rule cf_is_semifunctor)"], ["", "sublocale ObjMap: vsv \\<open>\\<FF>\\<lparr>ObjMap\\<rparr>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv (\\<FF>\\<lparr>ObjMap\\<rparr>)", "by (rule smcf.ObjMap.vsv_axioms[unfolded slicing_simps])"], ["", "sublocale ArrMap: vsv \\<open>\\<FF>\\<lparr>ArrMap\\<rparr>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv (\\<FF>\\<lparr>ArrMap\\<rparr>)", "by (rule smcf.ArrMap.vsv_axioms[unfolded slicing_simps])"], ["", "lemmas_with [unfolded slicing_simps]:\n  cf_ObjMap_vsv = smcf.smcf_ObjMap_vsv\n  and cf_ArrMap_vsv = smcf.smcf_ArrMap_vsv\n  and cf_ObjMap_vdomain[cat_cs_simps] = smcf.smcf_ObjMap_vdomain\n  and cf_ObjMap_vrange = smcf.smcf_ObjMap_vrange\n  and cf_ArrMap_vdomain[cat_cs_simps] = smcf.smcf_ArrMap_vdomain\n  and cf_ArrMap_is_arr = smcf.smcf_ArrMap_is_arr\n  and cf_ArrMap_is_arr''[cat_cs_intros] = smcf.smcf_ArrMap_is_arr''\n  and cf_ArrMap_is_arr'[cat_cs_intros] = smcf.smcf_ArrMap_is_arr'\n  and cf_ObjMap_app_in_HomCod_Obj[cat_cs_intros] = \n    smcf.smcf_ObjMap_app_in_HomCod_Obj\n  and cf_ArrMap_vrange = smcf.smcf_ArrMap_vrange\n  and cf_ArrMap_app_in_HomCod_Arr[cat_cs_intros] = \n    smcf.smcf_ArrMap_app_in_HomCod_Arr\n  and cf_ObjMap_vsubset_Vset = smcf.smcf_ObjMap_vsubset_Vset\n  and cf_ArrMap_vsubset_Vset = smcf.smcf_ArrMap_vsubset_Vset\n  and cf_ObjMap_in_Vset = smcf.smcf_ObjMap_in_Vset\n  and cf_ArrMap_in_Vset = smcf.smcf_ArrMap_in_Vset\n  and cf_is_semifunctor_if_ge_Limit = smcf.smcf_is_semifunctor_if_ge_Limit\n  and cf_is_arr_HomCod = smcf.smcf_is_arr_HomCod\n  and cf_vimage_dghm_ArrMap_vsubset_Hom = \n    smcf.smcf_vimage_dghm_ArrMap_vsubset_Hom"], ["", "lemmas_with [unfolded slicing_simps]: \n  cf_ArrMap_Comp = smcf.smcf_ArrMap_Comp"], ["", "end"], ["", "lemmas [cat_cs_simps] = \n  is_functor.cf_ObjMap_vdomain\n  is_functor.cf_ArrMap_vdomain\n  is_functor.cf_ArrMap_Comp"], ["", "lemmas [cat_cs_intros] =\n  is_functor.cf_ObjMap_app_in_HomCod_Obj\n  is_functor.cf_ArrMap_app_in_HomCod_Arr\n  is_functor.cf_ArrMap_is_arr'"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma cn_cf_ArrMap_Comp[cat_cn_cs_simps]: \n  assumes \"category \\<alpha> \\<AA>\" \n    and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"g : c \\<mapsto>\\<^bsub>\\<AA>\\<^esub> b\"\n    and \"f : b \\<mapsto>\\<^bsub>\\<AA>\\<^esub> a\" \n  shows \"\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub> g\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub> \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n g\\<rparr> =\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n g\\<rparr> =\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>", "interpret \\<AA>: category \\<alpha> \\<AA>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<AA>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n g\\<rparr> =\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>", "interpret \\<FF>: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n g\\<rparr> =\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n g\\<rparr> =\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n    \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>", "by \n      (\n        rule cn_smcf_ArrMap_Comp\n          [\n            OF \n              \\<AA>.cat_semicategory \n              \\<FF>.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_simps,\n            OF assms(3,4)\n          ]\n      )"], ["proof (state)\nthis:\n  \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f \\<circ>\\<^sub>A\\<^bsub>\\<AA>\\<^esub>\n                                     g\\<rparr> =\n  \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>g\\<rparr> \\<circ>\\<^sub>A\\<^bsub>\\<BB>\\<^esub>\n  \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_eqI:\n  assumes \"\\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n    and \"\\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"\n    and \"\\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and \"\\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and \"\\<AA> = \\<CC>\"\n    and \"\\<BB> = \\<DD>\"\n  shows \"\\<GG> = \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> = \\<FF>", "proof(rule vsv_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv \\<GG>\n 2. vsv \\<FF>\n 3. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "interpret L: is_functor \\<alpha> \\<AA> \\<BB> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(1))"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv \\<GG>\n 2. vsv \\<FF>\n 3. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "interpret R: is_functor \\<alpha> \\<CC> \\<DD> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "by (rule assms(2))"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv \\<GG>\n 2. vsv \\<FF>\n 3. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "from assms(1)"], ["proof (chain)\npicking this:\n  \\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "show \"vsv \\<GG>\""], ["proof (prove)\nusing this:\n  \\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. vsv \\<GG>", "by auto"], ["proof (state)\nthis:\n  vsv \\<GG>\n\ngoal (3 subgoals):\n 1. vsv \\<FF>\n 2. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n 3. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "show \"vsv \\<FF>\""], ["proof (prove)\nusing this:\n  \\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n\ngoal (1 subgoal):\n 1. vsv \\<FF>", "by auto"], ["proof (state)\nthis:\n  vsv \\<FF>\n\ngoal (2 subgoals):\n 1. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n 2. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "have dom: \"\\<D>\\<^sub>\\<circ> \\<GG> = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<GG> = 4\\<^sub>\\<nat>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<GG> = 4\\<^sub>\\<nat>\n\ngoal (2 subgoals):\n 1. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n 2. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "show \"\\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<GG> = \\<D>\\<^sub>\\<circ> \\<FF>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "from assms(5,6)"], ["proof (chain)\npicking this:\n  \\<AA> = \\<CC>\n  \\<BB> = \\<DD>", "have sup: \"\\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr>\" \"\\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<AA> = \\<CC>\n  \\<BB> = \\<DD>\n\ngoal (1 subgoal):\n 1. \\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr> &&&\n    \\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>", "by (simp_all add: cat_cs_simps)"], ["proof (state)\nthis:\n  \\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr>\n  \\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n       \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "show \"a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow> \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>\" for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n    \\<GG>\\<lparr>a\\<rparr> = \\<FF>\\<lparr>a\\<rparr>", "by (unfold dom, elim_in_numeral, insert assms(3,4) sup)\n      (auto simp: dghm_field_simps)"], ["proof (state)\nthis:\n  ?a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<GG> \\<Longrightarrow>\n  \\<GG>\\<lparr>?a\\<rparr> = \\<FF>\\<lparr>?a\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_smcf_eqI:\n  assumes \"\\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"\n    and \"\\<AA> = \\<CC>\"\n    and \"\\<BB> = \\<DD>\"\n    and \"cf_smcf \\<GG> = cf_smcf \\<FF>\"\n  shows \"\\<GG> = \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> = \\<FF>", "proof(rule cf_eqI)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<GG> :\n    ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>\n 2. \\<FF> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<DD>\n 3. \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n 4. \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n 5. ?\\<AA> = ?\\<CC>\n 6. ?\\<BB> = ?\\<DD>", "from assms(5)"], ["proof (chain)\npicking this:\n  cf_smcf \\<GG> = cf_smcf \\<FF>", "have \n    \"cf_smcf \\<GG>\\<lparr>ObjMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    \"cf_smcf \\<GG>\\<lparr>ArrMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr>\""], ["proof (prove)\nusing this:\n  cf_smcf \\<GG> = cf_smcf \\<FF>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<GG>\\<lparr>ObjMap\\<rparr> =\n    cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n    cf_smcf \\<GG>\\<lparr>ArrMap\\<rparr> =\n    cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr>", "by simp_all"], ["proof (state)\nthis:\n  cf_smcf \\<GG>\\<lparr>ObjMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr>\n  cf_smcf \\<GG>\\<lparr>ArrMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<GG> :\n    ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>\n 2. \\<FF> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<DD>\n 3. \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n 4. \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n 5. ?\\<AA> = ?\\<CC>\n 6. ?\\<BB> = ?\\<DD>", "then"], ["proof (chain)\npicking this:\n  cf_smcf \\<GG>\\<lparr>ObjMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr>\n  cf_smcf \\<GG>\\<lparr>ArrMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr>", "show \"\\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\" \"\\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\""], ["proof (prove)\nusing this:\n  cf_smcf \\<GG>\\<lparr>ObjMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr>\n  cf_smcf \\<GG>\\<lparr>ArrMap\\<rparr> = cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n    \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>", "unfolding slicing_simps"], ["proof (prove)\nusing this:\n  \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n  \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n    \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>", "by simp_all"], ["proof (state)\nthis:\n  \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n  \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n\ngoal (4 subgoals):\n 1. \\<GG> :\n    ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>\n 2. \\<FF> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<DD>\n 3. ?\\<AA> = ?\\<CC>\n 4. ?\\<BB> = ?\\<DD>", "qed (auto intro: assms(1,2) simp: assms(3-5))"], ["", "lemma (in is_functor) cf_def: \"\\<FF> = [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>, \\<FF>\\<lparr>HomDom\\<rparr>, \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> =\n    [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n     \\<FF>\\<lparr>HomDom\\<rparr>, \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>", "proof(rule vsv_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv \\<FF>\n 2. vsv [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n         \\<FF>\\<lparr>HomDom\\<rparr>,\n         \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 3. \\<D>\\<^sub>\\<circ> \\<FF> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>,\n      \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow>\n       \\<FF>\\<lparr>a\\<rparr> =\n       [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n        \\<FF>\\<lparr>HomDom\\<rparr>,\n        \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "have dom_lhs: \"\\<D>\\<^sub>\\<circ> \\<FF> = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<FF> = 4\\<^sub>\\<nat>", "by (cs_concl cs_simp: cat_cs_simps V_cs_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<FF> = 4\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv \\<FF>\n 2. vsv [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n         \\<FF>\\<lparr>HomDom\\<rparr>,\n         \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 3. \\<D>\\<^sub>\\<circ> \\<FF> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>,\n      \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow>\n       \\<FF>\\<lparr>a\\<rparr> =\n       [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n        \\<FF>\\<lparr>HomDom\\<rparr>,\n        \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "have dom_rhs: \"\\<D>\\<^sub>\\<circ> [\\<FF>\\<lparr>Obj\\<rparr>, \\<FF>\\<lparr>Arr\\<rparr>, \\<FF>\\<lparr>Dom\\<rparr>, \\<FF>\\<lparr>Cod\\<rparr>]\\<^sub>\\<circ> = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>Obj\\<rparr>, \\<FF>\\<lparr>Arr\\<rparr>,\n      \\<FF>\\<lparr>Dom\\<rparr>, \\<FF>\\<lparr>Cod\\<rparr>]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   [\\<FF>\\<lparr>Obj\\<rparr>, \\<FF>\\<lparr>Arr\\<rparr>,\n    \\<FF>\\<lparr>Dom\\<rparr>, \\<FF>\\<lparr>Cod\\<rparr>]\\<^sub>\\<circ> =\n  4\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv \\<FF>\n 2. vsv [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n         \\<FF>\\<lparr>HomDom\\<rparr>,\n         \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 3. \\<D>\\<^sub>\\<circ> \\<FF> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>,\n      \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow>\n       \\<FF>\\<lparr>a\\<rparr> =\n       [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n        \\<FF>\\<lparr>HomDom\\<rparr>,\n        \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "then"], ["proof (chain)\npicking this:\n  \\<D>\\<^sub>\\<circ>\n   [\\<FF>\\<lparr>Obj\\<rparr>, \\<FF>\\<lparr>Arr\\<rparr>,\n    \\<FF>\\<lparr>Dom\\<rparr>, \\<FF>\\<lparr>Cod\\<rparr>]\\<^sub>\\<circ> =\n  4\\<^sub>\\<nat>", "show \"\\<D>\\<^sub>\\<circ> \\<FF> = \\<D>\\<^sub>\\<circ> [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>, \\<FF>\\<lparr>HomDom\\<rparr>, \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\""], ["proof (prove)\nusing this:\n  \\<D>\\<^sub>\\<circ>\n   [\\<FF>\\<lparr>Obj\\<rparr>, \\<FF>\\<lparr>Arr\\<rparr>,\n    \\<FF>\\<lparr>Dom\\<rparr>, \\<FF>\\<lparr>Cod\\<rparr>]\\<^sub>\\<circ> =\n  4\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> \\<FF> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>,\n      \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>", "unfolding dom_lhs dom_rhs"], ["proof (prove)\nusing this:\n  4\\<^sub>\\<nat> = 4\\<^sub>\\<nat>\n\ngoal (1 subgoal):\n 1. 4\\<^sub>\\<nat> =\n    \\<D>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>,\n      \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> \\<FF> =\n  \\<D>\\<^sub>\\<circ>\n   [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n    \\<FF>\\<lparr>HomDom\\<rparr>, \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n\ngoal (3 subgoals):\n 1. vsv \\<FF>\n 2. vsv [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n         \\<FF>\\<lparr>HomDom\\<rparr>,\n         \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\n 3. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow>\n       \\<FF>\\<lparr>a\\<rparr> =\n       [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n        \\<FF>\\<lparr>HomDom\\<rparr>,\n        \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "show \"a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow> \\<FF>\\<lparr>a\\<rparr> = [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>, \\<FF>\\<lparr>HomDom\\<rparr>, \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>\" \n    for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow>\n    \\<FF>\\<lparr>a\\<rparr> =\n    [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n     \\<FF>\\<lparr>HomDom\\<rparr>,\n     \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>a\\<rparr>", "by (unfold dom_lhs, elim_in_numeral, unfold dghm_field_simps)\n      (simp_all add: nat_omega_simps)"], ["proof (state)\nthis:\n  ?a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> \\<FF> \\<Longrightarrow>\n  \\<FF>\\<lparr>?a\\<rparr> =\n  [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n   \\<FF>\\<lparr>HomDom\\<rparr>,\n   \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>?a\\<rparr>\n\ngoal (2 subgoals):\n 1. vsv \\<FF>\n 2. vsv [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n         \\<FF>\\<lparr>HomDom\\<rparr>,\n         \\<FF>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>", "qed (auto simp: vsv_axioms)"], ["", "text\\<open>Size.\\<close>"], ["", "lemma (in is_functor) cf_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"  \n  shows \"\\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "interpret \\<beta>: \\<Z> \\<beta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<beta>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "note [cat_cs_intros] = \n    cf_ObjMap_in_Vset \n    cf_ArrMap_in_Vset \n    HomDom.cat_in_Vset \n    HomCod.cat_in_Vset"], ["proof (state)\nthis:\n  \\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta> \\<Longrightarrow>\n  \\<FF>\\<lparr>ObjMap\\<rparr> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>\n  \\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta> \\<Longrightarrow>\n  \\<FF>\\<lparr>ArrMap\\<rparr> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>\n  \\<lbrakk>\\<Z> ?\\<beta>; \\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> \\<AA> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>\n  \\<lbrakk>\\<Z> ?\\<beta>; \\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> \\<BB> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (subst cf_def) \n      (cs_concl cs_simp: cat_cs_simps cs_intro: cat_cs_intros V_cs_intros)"], ["proof (state)\nthis:\n  \\<FF> \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in is_functor) cf_is_functor_if_ge_Limit:\n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<beta>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<beta>\\<^esub> \\<BB>", "by (rule is_functorI)\n    (\n      auto simp:\n        cat_cs_simps\n        assms \n        vfsequence_axioms\n        cf_is_semifunctor_if_ge_Limit\n        HomDom.cat_category_if_ge_Limit\n        HomCod.cat_category_if_ge_Limit\n        intro: cat_cs_intros \n    )"], ["", "lemma small_all_cfs[simp]: \"small {\\<FF>. \\<exists>\\<AA> \\<BB>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "proof(cases \\<open>\\<Z> \\<alpha>\\<close>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\n 2. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "case True"], ["proof (state)\nthis:\n  \\<Z> \\<alpha>\n\ngoal (2 subgoals):\n 1. \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\n 2. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "from is_functor.cf_in_Vset"], ["proof (chain)\npicking this:\n  \\<lbrakk>?\\<FF> :\n           ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>;\n   \\<Z> ?\\<beta>; ?\\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?\\<FF> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?\\<FF> :\n           ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>;\n   \\<Z> ?\\<beta>; ?\\<alpha> \\<in>\\<^sub>\\<circ> ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?\\<FF> \\<in>\\<^sub>\\<circ> Vset ?\\<beta>\n\ngoal (1 subgoal):\n 1. small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "by (intro down[of _ \\<open>Vset (\\<alpha> + \\<omega>)\\<close>])\n      (auto simp: True \\<Z>.\\<Z>_Limit_\\<alpha>\\<omega> \\<Z>.\\<Z>_\\<omega>_\\<alpha>\\<omega> \\<Z>.intro \\<Z>.\\<Z>_\\<alpha>_\\<alpha>\\<omega>)"], ["proof (state)\nthis:\n  small\n   {\\<FF>.\n    \\<exists>\\<AA> \\<BB>.\n       \\<FF> :\n       \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\n\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "case False"], ["proof (state)\nthis:\n  \\<not> \\<Z> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<Z> \\<alpha>", "have \"{\\<FF>. \\<exists>\\<AA> \\<BB>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>} = {}\""], ["proof (prove)\nusing this:\n  \\<not> \\<Z> \\<alpha>\n\ngoal (1 subgoal):\n 1. {\\<FF>.\n     \\<exists>\\<AA> \\<BB>.\n        \\<FF> :\n        \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>} =\n    {}", "by auto"], ["proof (state)\nthis:\n  {\\<FF>.\n   \\<exists>\\<AA> \\<BB>.\n      \\<FF> :\n      \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>} =\n  {}\n\ngoal (1 subgoal):\n 1. \\<not> \\<Z> \\<alpha> \\<Longrightarrow>\n    small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "then"], ["proof (chain)\npicking this:\n  {\\<FF>.\n   \\<exists>\\<AA> \\<BB>.\n      \\<FF> :\n      \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>} =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  {\\<FF>.\n   \\<exists>\\<AA> \\<BB>.\n      \\<FF> :\n      \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>} =\n  {}\n\ngoal (1 subgoal):\n 1. small\n     {\\<FF>.\n      \\<exists>\\<AA> \\<BB>.\n         \\<FF> :\n         \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "by simp"], ["proof (state)\nthis:\n  small\n   {\\<FF>.\n    \\<exists>\\<AA> \\<BB>.\n       \\<FF> :\n       \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in is_functor) cf_in_Vset_7: \"\\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "note [folded VPow_iff, folded Vset_succ[OF Ord_\\<alpha>], cat_cs_intros] =\n    cf_ObjMap_vsubset_Vset \n    cf_ArrMap_vsubset_Vset"], ["proof (state)\nthis:\n  \\<FF>\\<lparr>ObjMap\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n  \\<FF>\\<lparr>ArrMap\\<rparr>\n  \\<in>\\<^sub>\\<circ> Vset (ZFC_in_HOL.succ \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "from HomDom.cat_category_in_Vset_4"], ["proof (chain)\npicking this:\n  \\<AA> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "have [cat_cs_intros]:\n    \"\\<AA> \\<in>\\<^sub>\\<circ> Vset (succ (succ (succ (succ \\<alpha>))))\""], ["proof (prove)\nusing this:\n  \\<AA> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\n\ngoal (1 subgoal):\n 1. \\<AA>\n    \\<in>\\<^sub>\\<circ> Vset\n                         (ZFC_in_HOL.succ\n                           (ZFC_in_HOL.succ\n                             (ZFC_in_HOL.succ (ZFC_in_HOL.succ \\<alpha>))))", "by (succ_of_numeral) (cs_prems cs_simp: plus_V_succ_right V_cs_simps)"], ["proof (state)\nthis:\n  \\<AA>\n  \\<in>\\<^sub>\\<circ> Vset\n                       (ZFC_in_HOL.succ\n                         (ZFC_in_HOL.succ\n                           (ZFC_in_HOL.succ (ZFC_in_HOL.succ \\<alpha>))))\n\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "from HomCod.cat_category_in_Vset_4"], ["proof (chain)\npicking this:\n  \\<BB> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)", "have [cat_cs_intros]:\n    \"\\<BB> \\<in>\\<^sub>\\<circ> Vset (succ (succ (succ (succ \\<alpha>))))\""], ["proof (prove)\nusing this:\n  \\<BB> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 4\\<^sub>\\<nat>)\n\ngoal (1 subgoal):\n 1. \\<BB>\n    \\<in>\\<^sub>\\<circ> Vset\n                         (ZFC_in_HOL.succ\n                           (ZFC_in_HOL.succ\n                             (ZFC_in_HOL.succ (ZFC_in_HOL.succ \\<alpha>))))", "by (succ_of_numeral) (cs_prems cs_simp: plus_V_succ_right V_cs_simps)"], ["proof (state)\nthis:\n  \\<BB>\n  \\<in>\\<^sub>\\<circ> Vset\n                       (ZFC_in_HOL.succ\n                         (ZFC_in_HOL.succ\n                           (ZFC_in_HOL.succ (ZFC_in_HOL.succ \\<alpha>))))\n\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "by (subst cf_def, succ_of_numeral)\n      (\n        cs_concl \n          cs_simp: plus_V_succ_right V_cs_simps cat_cs_simps \n          cs_intro: cat_cs_intros V_cs_intros\n      )"], ["proof (state)\nthis:\n  \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in \\<Z>) all_cfs_in_Vset: \n  assumes \"\\<Z> \\<beta>\" and \"\\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\"\n  shows \"all_cfs \\<alpha> \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_cfs \\<alpha> \\<in>\\<^sub>\\<circ> Vset \\<beta>", "proof(rule vsubset_in_VsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. all_cfs \\<alpha> \\<subseteq>\\<^sub>\\<circ> ?A\n 2. ?A \\<in>\\<^sub>\\<circ> Vset \\<beta>", "interpret \\<beta>: \\<Z> \\<beta>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Z> \\<beta>", "by (rule assms(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. all_cfs \\<alpha> \\<subseteq>\\<^sub>\\<circ> ?A\n 2. ?A \\<in>\\<^sub>\\<circ> Vset \\<beta>", "show \"all_cfs \\<alpha> \\<subseteq>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_cfs \\<alpha>\n    \\<subseteq>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "proof(intro vsubsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> all_cfs \\<alpha> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "fix \\<FF>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> all_cfs \\<alpha> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "assume \"\\<FF> \\<in>\\<^sub>\\<circ> all_cfs \\<alpha>\""], ["proof (state)\nthis:\n  \\<FF> \\<in>\\<^sub>\\<circ> all_cfs \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> all_cfs \\<alpha> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "then"], ["proof (chain)\npicking this:\n  \\<FF> \\<in>\\<^sub>\\<circ> all_cfs \\<alpha>", "obtain \\<AA> \\<BB> where \\<FF>: \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\nusing this:\n  \\<FF> \\<in>\\<^sub>\\<circ> all_cfs \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<AA> \\<BB>.\n        \\<FF> :\n        \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> all_cfs \\<alpha> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "interpret is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using \\<FF>"], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in>\\<^sub>\\<circ> all_cfs \\<alpha> \\<Longrightarrow>\n       x \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "show \"\\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)", "by (rule cf_in_Vset_7)"], ["proof (state)\nthis:\n  \\<FF> \\<in>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  all_cfs \\<alpha>\n  \\<subseteq>\\<^sub>\\<circ> Vset (\\<alpha> + 7\\<^sub>\\<nat>)\n\ngoal (1 subgoal):\n 1. Vset (\\<alpha> + 7\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>", "from assms(2)"], ["proof (chain)\npicking this:\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>", "show \"Vset (\\<alpha> + 7\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>\""], ["proof (prove)\nusing this:\n  \\<alpha> \\<in>\\<^sub>\\<circ> \\<beta>\n\ngoal (1 subgoal):\n 1. Vset (\\<alpha> + 7\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>", "by (cs_concl cs_intro: V_cs_intros Ord_cs_intros)"], ["proof (state)\nthis:\n  Vset (\\<alpha> + 7\\<^sub>\\<nat>) \\<in>\\<^sub>\\<circ> Vset \\<beta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma small_cfs[simp]: \"small {\\<FF>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. small\n     {\\<FF>.\n      \\<FF> :\n      \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}", "by (rule down[of _ \\<open>set {\\<FF>. \\<exists>\\<AA> \\<BB>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>}\\<close>]) auto"], ["", "subsection\\<open>Opposite functor\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter II-2 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "definition op_cf :: \"V \\<Rightarrow> V\"\n  where \"op_cf \\<FF> =\n    [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>, op_cat (\\<FF>\\<lparr>HomDom\\<rparr>), op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\""], ["", "text\\<open>Components.\\<close>"], ["", "lemma op_cf_components[cat_op_simps]:\n  shows \"op_cf \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and \"op_cf \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and \"op_cf \\<FF>\\<lparr>HomDom\\<rparr> = op_cat (\\<FF>\\<lparr>HomDom\\<rparr>)\"\n    and \"op_cf \\<FF>\\<lparr>HomCod\\<rparr> = op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_cf \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n     op_cf \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>) &&&\n    op_cf \\<FF>\\<lparr>HomDom\\<rparr> =\n    op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) &&&\n    op_cf \\<FF>\\<lparr>HomCod\\<rparr> = op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)", "unfolding op_cf_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> =\n     \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> &&&\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> =\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     op_cat\n      (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr> =\n    op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     op_cat\n      (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr> =\n    op_cat (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)", "by (auto simp: nat_omega_simps)"], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma cf_smcf_op_cf[slicing_commute]: \"op_smcf (cf_smcf \\<FF>) = cf_smcf (op_cf \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_smcf (cf_smcf \\<FF>) = cf_smcf (op_cf \\<FF>)", "proof(rule vsv_eqI)"], ["proof (state)\ngoal (4 subgoals):\n 1. vsv (op_smcf (cf_smcf \\<FF>))\n 2. vsv (cf_smcf (op_cf \\<FF>))\n 3. \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) =\n    \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>))\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                              (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow>\n       op_smcf (cf_smcf \\<FF>)\\<lparr>a\\<rparr> =\n       cf_smcf (op_cf \\<FF>)\\<lparr>a\\<rparr>", "have dom_lhs: \"\\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) = 4\\<^sub>\\<nat>", "unfolding op_smcf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     [cf_smcf \\<FF>\\<lparr>ObjMap\\<rparr>,\n      cf_smcf \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_smc (cf_smcf \\<FF>\\<lparr>HomDom\\<rparr>),\n      op_smc (cf_smcf \\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (auto simp: nat_omega_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) = 4\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv (op_smcf (cf_smcf \\<FF>))\n 2. vsv (cf_smcf (op_cf \\<FF>))\n 3. \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) =\n    \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>))\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                              (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow>\n       op_smcf (cf_smcf \\<FF>)\\<lparr>a\\<rparr> =\n       cf_smcf (op_cf \\<FF>)\\<lparr>a\\<rparr>", "have dom_rhs: \"\\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>)) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>)) = 4\\<^sub>\\<nat>", "unfolding cf_smcf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     [op_cf \\<FF>\\<lparr>ObjMap\\<rparr>, op_cf \\<FF>\\<lparr>ArrMap\\<rparr>,\n      cat_smc (op_cf \\<FF>\\<lparr>HomDom\\<rparr>),\n      cat_smc (op_cf \\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (auto simp: nat_omega_simps)"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>)) = 4\\<^sub>\\<nat>\n\ngoal (4 subgoals):\n 1. vsv (op_smcf (cf_smcf \\<FF>))\n 2. vsv (cf_smcf (op_cf \\<FF>))\n 3. \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) =\n    \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>))\n 4. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                              (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow>\n       op_smcf (cf_smcf \\<FF>)\\<lparr>a\\<rparr> =\n       cf_smcf (op_cf \\<FF>)\\<lparr>a\\<rparr>", "show \"\\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) = \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) =\n    \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>))", "unfolding dom_lhs dom_rhs"], ["proof (prove)\ngoal (1 subgoal):\n 1. 4\\<^sub>\\<nat> = 4\\<^sub>\\<nat>", "by simp"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) =\n  \\<D>\\<^sub>\\<circ> (cf_smcf (op_cf \\<FF>))\n\ngoal (3 subgoals):\n 1. vsv (op_smcf (cf_smcf \\<FF>))\n 2. vsv (cf_smcf (op_cf \\<FF>))\n 3. \\<And>a.\n       a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                              (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow>\n       op_smcf (cf_smcf \\<FF>)\\<lparr>a\\<rparr> =\n       cf_smcf (op_cf \\<FF>)\\<lparr>a\\<rparr>", "show \"a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ> (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow> \n    op_smcf (cf_smcf \\<FF>)\\<lparr>a\\<rparr> = cf_smcf (op_cf \\<FF>)\\<lparr>a\\<rparr>\"\n    for a"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                           (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow>\n    op_smcf (cf_smcf \\<FF>)\\<lparr>a\\<rparr> =\n    cf_smcf (op_cf \\<FF>)\\<lparr>a\\<rparr>", "by \n      (\n        unfold dom_lhs, \n        elim_in_numeral,\n        unfold cf_smcf_def op_cf_def op_smcf_def dghm_field_simps\n      )\n      (auto simp: nat_omega_simps slicing_commute)"], ["proof (state)\nthis:\n  ?a \\<in>\\<^sub>\\<circ> \\<D>\\<^sub>\\<circ>\n                          (op_smcf (cf_smcf \\<FF>)) \\<Longrightarrow>\n  op_smcf (cf_smcf \\<FF>)\\<lparr>?a\\<rparr> =\n  cf_smcf (op_cf \\<FF>)\\<lparr>?a\\<rparr>\n\ngoal (2 subgoals):\n 1. vsv (op_smcf (cf_smcf \\<FF>))\n 2. vsv (cf_smcf (op_cf \\<FF>))", "qed (auto simp: cf_smcf_def op_smcf_def)"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma op_cf_vsv[cat_op_intros]: \"vsv (op_cf \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv (op_cf \\<FF>)", "unfolding op_cf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n         op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n         op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>", "by auto"], ["", "subsubsection\\<open>Further properties\\<close>"], ["", "lemma (in is_functor) is_functor_op: \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>", "proof(intro is_functorI, unfold cat_op_simps)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (op_cf \\<FF>)\n 3. category \\<alpha> (op_cat \\<AA>)\n 4. category \\<alpha> (op_cat \\<BB>)\n 5. vcard (op_cf \\<FF>) = 4\\<^sub>\\<nat>\n 6. cf_smcf (op_cf \\<FF>) :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      (op_cat \\<BB>)\n 7. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 8. op_cat (\\<FF>\\<lparr>HomCod\\<rparr>) = op_cat \\<BB>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vfsequence (op_cf \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence (op_cf \\<FF>)", "unfolding op_cf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>", "by simp"], ["proof (state)\nthis:\n  vfsequence (op_cf \\<FF>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> (op_cat \\<BB>)\n 4. vcard (op_cf \\<FF>) = 4\\<^sub>\\<nat>\n 5. cf_smcf (op_cf \\<FF>) :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      (op_cat \\<BB>)\n 6. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 7. op_cat (\\<FF>\\<lparr>HomCod\\<rparr>) = op_cat \\<BB>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vcard (op_cf \\<FF>) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard (op_cf \\<FF>) = 4\\<^sub>\\<nat>", "unfolding op_cf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      op_cat (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (auto simp: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard (op_cf \\<FF>) = 4\\<^sub>\\<nat>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> (op_cat \\<BB>)\n 4. cf_smcf (op_cf \\<FF>) :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      (op_cat \\<BB>)\n 5. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 6. op_cat (\\<FF>\\<lparr>HomCod\\<rparr>) = op_cat \\<BB>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "fix c"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> (op_cat \\<BB>)\n 4. cf_smcf (op_cf \\<FF>) :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      (op_cat \\<BB>)\n 5. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 6. op_cat (\\<FF>\\<lparr>HomCod\\<rparr>) = op_cat \\<BB>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "assume \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> (op_cat \\<BB>)\n 4. cf_smcf (op_cf \\<FF>) :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      (op_cat \\<BB>)\n 5. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 6. op_cat (\\<FF>\\<lparr>HomCod\\<rparr>) = op_cat \\<BB>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "then"], ["proof (chain)\npicking this:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>", "show \"\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\nusing this:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "unfolding cat_op_simps"], ["proof (prove)\nusing this:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "by (auto intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<BB>\\<lparr>CId\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> (op_cat \\<BB>)\n 4. cf_smcf (op_cf \\<FF>) :\n    cat_smc\n     (op_cat\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      (op_cat \\<BB>)\n 5. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 6. op_cat (\\<FF>\\<lparr>HomCod\\<rparr>) = op_cat \\<BB>", "qed \n  (\n    auto simp: \n      cat_cs_simps\n      slicing_commute[symmetric]\n      is_semifunctor.is_semifunctor_op \n      cf_is_semifunctor\n      HomCod.category_op \n      HomDom.category_op\n  )"], ["", "lemma (in is_functor) is_functor_op'[cat_op_intros]: \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms(1,2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>", "by (rule is_functor_op)"], ["", "lemmas is_functor_op[cat_op_intros] = is_functor.is_functor_op'"], ["", "lemma (in is_functor) cf_op_cf_op_cf[cat_op_simps]: \"op_cf (op_cf \\<FF>) = \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf (op_cf \\<FF>) = \\<FF>", "proof(rule cf_eqI[of \\<alpha> \\<AA> \\<BB> _ \\<AA> \\<BB>], unfold cat_op_simps)"], ["proof (state)\ngoal (6 subgoals):\n 1. op_cf (op_cf \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 3. \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n 4. \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n 5. \\<AA> = \\<AA>\n 6. \\<BB> = \\<BB>", "show \"op_cf (op_cf \\<FF>) : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf (op_cf \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by \n      (\n        metis \n          HomCod.cat_op_cat_op_cat \n          HomDom.cat_op_cat_op_cat \n          is_functor.is_functor_op \n          is_functor_op\n      )"], ["proof (state)\nthis:\n  op_cf (op_cf \\<FF>) :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (5 subgoals):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. \\<FF>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n 3. \\<FF>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n 4. \\<AA> = \\<AA>\n 5. \\<BB> = \\<BB>", "qed (auto simp: cat_cs_intros)"], ["", "lemmas cf_op_cf_op_cf[cat_op_simps] = is_functor.cf_op_cf_op_cf"], ["", "lemma eq_op_cf_iff[cat_op_simps]: \n  assumes \"\\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"\\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\"\n  shows \"op_cf \\<GG> = op_cf \\<FF> \\<longleftrightarrow> \\<GG> = \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (op_cf \\<GG> = op_cf \\<FF>) = (\\<GG> = \\<FF>)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. op_cf \\<GG> = op_cf \\<FF> \\<Longrightarrow> \\<GG> = \\<FF>\n 2. \\<GG> = \\<FF> \\<Longrightarrow> op_cf \\<GG> = op_cf \\<FF>", "interpret L: is_functor \\<alpha> \\<AA> \\<BB> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. op_cf \\<GG> = op_cf \\<FF> \\<Longrightarrow> \\<GG> = \\<FF>\n 2. \\<GG> = \\<FF> \\<Longrightarrow> op_cf \\<GG> = op_cf \\<FF>", "interpret R: is_functor \\<alpha> \\<CC> \\<DD> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "by (rule assms(2))"], ["proof (state)\ngoal (2 subgoals):\n 1. op_cf \\<GG> = op_cf \\<FF> \\<Longrightarrow> \\<GG> = \\<FF>\n 2. \\<GG> = \\<FF> \\<Longrightarrow> op_cf \\<GG> = op_cf \\<FF>", "assume prems: \"op_cf \\<GG> = op_cf \\<FF>\""], ["proof (state)\nthis:\n  op_cf \\<GG> = op_cf \\<FF>\n\ngoal (2 subgoals):\n 1. op_cf \\<GG> = op_cf \\<FF> \\<Longrightarrow> \\<GG> = \\<FF>\n 2. \\<GG> = \\<FF> \\<Longrightarrow> op_cf \\<GG> = op_cf \\<FF>", "show \"\\<GG> = \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> = \\<FF>", "proof(rule cf_eqI[OF assms])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n 2. \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n 3. \\<AA> = \\<CC>\n 4. \\<BB> = \\<DD>", "from prems R.cf_op_cf_op_cf L.cf_op_cf_op_cf"], ["proof (chain)\npicking this:\n  op_cf \\<GG> = op_cf \\<FF>\n  op_cf (op_cf \\<FF>) = \\<FF>\n  op_cf (op_cf \\<GG>) = \\<GG>", "show \n      \"\\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\" \"\\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\""], ["proof (prove)\nusing this:\n  op_cf \\<GG> = op_cf \\<FF>\n  op_cf (op_cf \\<FF>) = \\<FF>\n  op_cf (op_cf \\<GG>) = \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n    \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>", "by metis+"], ["proof (state)\nthis:\n  \\<GG>\\<lparr>ObjMap\\<rparr> = \\<FF>\\<lparr>ObjMap\\<rparr>\n  \\<GG>\\<lparr>ArrMap\\<rparr> = \\<FF>\\<lparr>ArrMap\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<AA> = \\<CC>\n 2. \\<BB> = \\<DD>", "from prems R.cf_op_cf_op_cf L.cf_op_cf_op_cf"], ["proof (chain)\npicking this:\n  op_cf \\<GG> = op_cf \\<FF>\n  op_cf (op_cf \\<FF>) = \\<FF>\n  op_cf (op_cf \\<GG>) = \\<GG>", "have \n      \"\\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr>\" \"\\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>\""], ["proof (prove)\nusing this:\n  op_cf \\<GG> = op_cf \\<FF>\n  op_cf (op_cf \\<FF>) = \\<FF>\n  op_cf (op_cf \\<GG>) = \\<GG>\n\ngoal (1 subgoal):\n 1. \\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr> &&&\n    \\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>", "by auto"], ["proof (state)\nthis:\n  \\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr>\n  \\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<AA> = \\<CC>\n 2. \\<BB> = \\<DD>", "then"], ["proof (chain)\npicking this:\n  \\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr>\n  \\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>", "show \"\\<AA> = \\<CC>\" \"\\<BB> = \\<DD>\""], ["proof (prove)\nusing this:\n  \\<GG>\\<lparr>HomDom\\<rparr> = \\<FF>\\<lparr>HomDom\\<rparr>\n  \\<GG>\\<lparr>HomCod\\<rparr> = \\<FF>\\<lparr>HomCod\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<AA> = \\<CC> &&& \\<BB> = \\<DD>", "by (simp_all add: cat_cs_simps)"], ["proof (state)\nthis:\n  \\<AA> = \\<CC>\n  \\<BB> = \\<DD>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<GG> = \\<FF>\n\ngoal (1 subgoal):\n 1. \\<GG> = \\<FF> \\<Longrightarrow> op_cf \\<GG> = op_cf \\<FF>", "qed auto"], ["", "subsection\\<open>Composition of covariant functors\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "abbreviation (input) cf_comp :: \"V \\<Rightarrow> V \\<Rightarrow> V\" (infixl \"\\<circ>\\<^sub>C\\<^sub>F\" 55)\n  where \"cf_comp \\<equiv> dghm_comp\""], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma cf_smcf_smcf_comp[slicing_commute]: \n  \"cf_smcf \\<GG> \\<circ>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F cf_smcf \\<FF> = cf_smcf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> =\n    cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>)", "unfolding dghm_comp_def cf_smcf_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ> =\n    [[\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     cat_smc\n      ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     cat_smc\n      ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["", "subsubsection\\<open>Object map\\<close>"], ["", "lemma cf_comp_ObjMap_vsv[cat_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ObjMap\\<rparr>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ObjMap\\<rparr>)", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ObjMap\\<rparr>)", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ObjMap\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ObjMap\\<rparr>)", "by \n      (\n        rule smcf_comp_ObjMap_vsv\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute\n          ]\n      )"], ["proof (state)\nthis:\n  vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ObjMap\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_ObjMap_vdomain[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "by \n      (\n        rule smcf_comp_ObjMap_vdomain\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute\n          ]\n      )"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n  \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_ObjMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "by \n      (\n        rule smcf_comp_ObjMap_vrange\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute\n          ]\n      )"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ>\n   ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_ObjMap_app[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and [simp]: \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"(\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "by \n      (\n        rule smcf_comp_ObjMap_app\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute, \n            OF assms(3)\n          ]\n      )"], ["proof (state)\nthis:\n  (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n   \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n  \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Arrow map\\<close>"], ["", "lemma cf_comp_ArrMap_vsv[cat_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ArrMap\\<rparr>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ArrMap\\<rparr>)", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ArrMap\\<rparr>)", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ArrMap\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n          \\<FF>)\\<lparr>ArrMap\\<rparr>)", "by \n      (\n        rule smcf_comp_ArrMap_vsv\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute\n          ]\n      )"], ["proof (state)\nthis:\n  vsv ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_ArrMap_vdomain[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "by \n      (\n        rule smcf_comp_ArrMap_vdomain\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute\n          ]\n      )"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n  \\<AA>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_ArrMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n       \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "by \n      (\n        rule smcf_comp_ArrMap_vrange\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute\n          ]\n      )"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ>\n   ((\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_ArrMap_app[cat_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and [simp]: \"f \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Arr\\<rparr>\"\n  shows \"(\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>", "by \n      (\n        rule smcf_comp_ArrMap_app\n          [\n            OF L.cf_is_semifunctor R.cf_is_semifunctor, \n            unfolded slicing_simps slicing_commute,\n            OF assms(3)\n          ]\n      )"], ["proof (state)\nthis:\n  (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n   \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr> =\n  \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>f\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Further properties\\<close>"], ["", "lemma cf_comp_is_functorI[cat_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret L: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof(rule is_functorI, unfold dghm_comp_components(3,4))"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>)\n 3. category \\<alpha> \\<AA>\n 4. category \\<alpha> \\<CC>\n 5. vcard (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) =\n    4\\<^sub>\\<nat>\n 6. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 7. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 8. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vfsequence (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>)", "by (simp add: dghm_comp_def)"], ["proof (state)\nthis:\n  vfsequence (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. vcard (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) =\n    4\\<^sub>\\<nat>\n 5. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 6. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 7. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vcard (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) =\n    4\\<^sub>\\<nat>", "unfolding dghm_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>,\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) =\n  4\\<^sub>\\<nat>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 5. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 6. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"cf_smcf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>", "unfolding cf_smcf_smcf_comp[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>", "by (cs_concl cs_intro: smc_cs_intros slicing_intros cat_cs_intros)"], ["proof (state)\nthis:\n  cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<CC>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "fix c"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "assume \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "with assms"], ["proof (chain)\npicking this:\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>", "show \n      \"(\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n                                     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "by (cs_concl cs_simp: cat_cs_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n   \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n                                   \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>", "qed (auto simp: cat_cs_simps intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_comp_assoc[cat_cs_simps]:\n  assumes \"\\<HH> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\" and \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"(\\<HH> \\<circ>\\<^sub>C\\<^sub>F \\<GG>) \\<circ>\\<^sub>C\\<^sub>F \\<FF> = \\<HH> \\<circ>\\<^sub>C\\<^sub>F (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<FF> =\n    \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>)", "proof(rule cf_eqI[of \\<alpha> \\<AA> \\<DD> _ \\<AA> \\<DD>])"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 2. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 3. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ObjMap\\<rparr>\n 4. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ArrMap\\<rparr>\n 5. \\<AA> = \\<AA>\n 6. \\<DD> = \\<DD>", "interpret \\<HH>: is_functor \\<alpha> \\<CC> \\<DD> \\<HH>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<HH> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "by (rule assms(1))"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 2. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 3. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ObjMap\\<rparr>\n 4. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ArrMap\\<rparr>\n 5. \\<AA> = \\<AA>\n 6. \\<DD> = \\<DD>", "interpret \\<GG>: is_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(2))"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 2. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 3. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ObjMap\\<rparr>\n 4. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ArrMap\\<rparr>\n 5. \\<AA> = \\<AA>\n 6. \\<DD> = \\<DD>", "interpret \\<FF>: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(3))"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 2. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n 3. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ObjMap\\<rparr>\n 4. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ArrMap\\<rparr>\n 5. \\<AA> = \\<AA>\n 6. \\<DD> = \\<DD>", "from \\<FF>.is_functor_axioms \\<GG>.is_functor_axioms \\<HH>.is_functor_axioms"], ["proof (chain)\npicking this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<HH> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "show \"\\<HH> \\<circ>\\<^sub>C\\<^sub>F (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\" and \"\\<HH> \\<circ>\\<^sub>C\\<^sub>F \\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\""], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<HH> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n\ngoal (1 subgoal):\n 1. \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD> &&&\n    \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n    \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "by (auto simp: cat_cs_simps intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n  \\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n\ngoal (4 subgoals):\n 1. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ObjMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ObjMap\\<rparr>\n 2. (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     \\<FF>)\\<lparr>ArrMap\\<rparr> =\n    (\\<HH> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n     (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M\n      \\<FF>))\\<lparr>ArrMap\\<rparr>\n 3. \\<AA> = \\<AA>\n 4. \\<DD> = \\<DD>", "qed (simp_all add: dghm_comp_components vcomp_assoc)"], ["", "text\\<open>The opposite of the covariant composition of functors.\\<close>"], ["", "lemma op_cf_cf_comp[cat_op_simps]: \"op_cf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) = op_cf \\<GG> \\<circ>\\<^sub>C\\<^sub>F op_cf \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) =\n    op_cf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M op_cf \\<FF>", "unfolding dghm_comp_def op_cf_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat\n      ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     op_cat\n      ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ> =\n    [[\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["", "subsection\\<open>Composition of contravariant functors\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See section 1.2 in \\cite{bodo_categories_1970}.\\<close>"], ["", "definition cf_cn_comp :: \"V \\<Rightarrow> V \\<Rightarrow> V\" (infixl \"\\<^sub>C\\<^sub>F\\<circ>\" 55)\n  where \"\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> =\n    [\n      \\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ> \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ> \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>\n    ]\\<^sub>\\<circ>\""], ["", "text\\<open>Components.\\<close>"], ["", "lemma cf_cn_comp_components:\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ> \\<FF>\\<lparr>ObjMap\\<rparr>\"\n    and \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ> \\<FF>\\<lparr>ArrMap\\<rparr>\"\n    and [cat_cn_cs_simps]: \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>HomDom\\<rparr> = op_cat (\\<FF>\\<lparr>HomDom\\<rparr>)\"\n    and [cat_cn_cs_simps]: \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>HomCod\\<rparr> = \\<GG>\\<lparr>HomCod\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr> =\n     \\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>ObjMap\\<rparr> &&&\n     (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr> =\n     \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>ArrMap\\<rparr>) &&&\n    (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>HomDom\\<rparr> =\n    op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) &&&\n    (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>HomCod\\<rparr> =\n    \\<GG>\\<lparr>HomCod\\<rparr>", "unfolding cf_cn_comp_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> =\n     \\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> &&&\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> =\n     \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr> =\n    op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>) &&&\n    [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr> =\n    \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>", "by (simp_all add: nat_omega_simps)"], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma cf_smcf_cf_cn_comp[slicing_commute]: \n  \"cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> = cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> =\n    cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)", "unfolding smcf_cn_comp_def cf_cn_comp_def cf_smcf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[\\<GG>\\<lparr>ObjMap\\<rparr>, \\<GG>\\<lparr>ArrMap\\<rparr>,\n      cat_smc (\\<GG>\\<lparr>HomDom\\<rparr>),\n      cat_smc\n       (\\<GG>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>HomDom\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\\<lparr>ObjMap\\<rparr>,\n     [\\<GG>\\<lparr>ObjMap\\<rparr>, \\<GG>\\<lparr>ArrMap\\<rparr>,\n      cat_smc (\\<GG>\\<lparr>HomDom\\<rparr>),\n      cat_smc\n       (\\<GG>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>HomDom\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\\<lparr>ArrMap\\<rparr>,\n     op_smc\n      ([\\<FF>\\<lparr>ObjMap\\<rparr>, \\<FF>\\<lparr>ArrMap\\<rparr>,\n        cat_smc (\\<FF>\\<lparr>HomDom\\<rparr>),\n        cat_smc\n         (\\<FF>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\\<lparr>HomDom\\<rparr>),\n     [\\<GG>\\<lparr>ObjMap\\<rparr>, \\<GG>\\<lparr>ArrMap\\<rparr>,\n      cat_smc (\\<GG>\\<lparr>HomDom\\<rparr>),\n      cat_smc\n       (\\<GG>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ> =\n    [[\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>ObjMap\\<rparr>,\n     [\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>ArrMap\\<rparr>,\n     cat_smc\n      ([\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>ObjMap\\<rparr>,\n        \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>ArrMap\\<rparr>,\n        op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n        \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>HomDom\\<rparr>),\n     cat_smc\n      ([\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>ObjMap\\<rparr>,\n        \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>ArrMap\\<rparr>,\n        op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n        \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>\\<lparr>HomCod\\<rparr>)]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps slicing_commute dghm_field_simps)"], ["", "subsubsection\\<open>Object map: two contravariant functors\\<close>"], ["", "lemma cf_cn_comp_ObjMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "by \n      (\n        rule smcf_cn_cov_comp_ObjMap_vsv\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_comp_ObjMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "by \n      (\n        rule smcf_cn_comp_ObjMap_vdomain\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n  \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_comp_ObjMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "by \n      (\n        rule smcf_cn_comp_ObjMap_vrange\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_comp_ObjMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "by \n      (\n        rule smcf_cn_comp_ObjMap_app\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps, \n            OF assms(3)\n          ]\n      )"], ["proof (state)\nthis:\n  (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n   \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n  \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Arrow map: two contravariant functors\\<close>"], ["", "lemma cf_cn_comp_ArrMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "by \n      (\n        rule smcf_cn_cov_comp_ArrMap_vsv\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_comp_ArrMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "by \n      (\n        rule smcf_cn_comp_ArrMap_vdomain\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n  \\<AA>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_comp_ArrMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "by \n      (\n        rule smcf_cn_comp_ArrMap_vrange\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_comp_ArrMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Arr\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "by \n      (\n        rule smcf_cn_comp_ArrMap_app\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps,\n            OF assms(3)\n          ]\n      )"], ["proof (state)\nthis:\n  (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n   \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n  \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Object map: contravariant and covariant functor\\<close>"], ["", "lemma cf_cn_cov_comp_ObjMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)", "by \n      (\n        rule smcf_cn_cov_comp_ObjMap_vsv\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]]\n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_cov_comp_ObjMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr>", "by \n      (\n        rule smcf_cn_cov_comp_ObjMap_vdomain\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor,\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) =\n  \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_cov_comp_ObjMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "by \n      (\n        rule smcf_cn_cov_comp_ObjMap_vrange\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor,\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_cov_comp_ObjMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "by \n      (\n        rule smcf_cn_cov_comp_ObjMap_app\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor,\n            unfolded slicing_commute slicing_simps,\n            OF assms(3)\n          ]\n      )"], ["proof (state)\nthis:\n  (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n   \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr> =\n  \\<GG>\\<lparr>ObjMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Arrow map: contravariant and covariant functors\\<close>"], ["", "lemma cf_cn_cov_comp_ArrMap_vsv[cat_cn_cs_intros]: \n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)", "by \n      (\n        rule smcf_cn_cov_comp_ArrMap_vsv\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]]\n              R.cf_is_semifunctor[unfolded slicing_commute[symmetric]],\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  vsv ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_cov_comp_ArrMap_vdomain[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<D>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<D>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr>", "by \n      (\n        rule smcf_cn_cov_comp_ArrMap_vdomain\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor,\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<D>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) =\n  \\<AA>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_cov_comp_ArrMap_vrange:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<R>\\<^sub>\\<circ> ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>) \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>\\<circ>\n     ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n    \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>", "by \n      (\n        rule smcf_cn_cov_comp_ArrMap_vrange\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor,\n            unfolded slicing_commute slicing_simps\n          ]\n      )"], ["proof (state)\nthis:\n  \\<R>\\<^sub>\\<circ>\n   ((\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>)\n  \\<subseteq>\\<^sub>\\<circ> \\<CC>\\<lparr>Arr\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_cn_cov_comp_ArrMap_app[cat_cn_cs_simps]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Arr\\<rparr>\"\n  shows \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> = \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n    \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>", "by \n      (\n        rule smcf_cn_cov_comp_ArrMap_app\n          [\n            OF \n              L.cf_is_semifunctor[unfolded slicing_commute[symmetric]] \n              R.cf_is_semifunctor,\n            unfolded slicing_commute slicing_simps,\n            OF assms(3)\n          ]\n      )"], ["proof (state)\nthis:\n  (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n   \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr> =\n  \\<GG>\\<lparr>ArrMap\\<rparr>\\<lparr>\\<FF>\\<lparr>ArrMap\\<rparr>\\<lparr>a\\<rparr>\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>Further properties\\<close>"], ["", "lemma cf_cn_comp_is_functorI[cat_cn_cs_intros]:\n  assumes \"category \\<alpha> \\<AA>\" and \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret R: is_functor \\<alpha> \\<open>op_cat \\<AA>\\<close> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(3))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret \\<AA>: category \\<alpha> \\<AA>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<AA>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof(rule is_functorI, unfold cf_cn_comp_components(3,4) cat_op_simps)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\n 3. category \\<alpha> \\<AA>\n 4. category \\<alpha> \\<CC>\n 5. vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\n 6. cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 7. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 8. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)", "unfolding cf_cn_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence\n     [\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\n 5. cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 6. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 7. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>", "unfolding cf_cn_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 5. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 6. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "from assms(1) L.cf_is_semifunctor R.cf_is_semifunctor"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<AA>\n  cf_smcf \\<GG> :\n  cat_smc\n   (op_cat\n     \\<BB>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<CC>\n  cf_smcf \\<FF> :\n  cat_smc\n   (op_cat\n     \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<BB>", "show \n      \"cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<AA>\n  cf_smcf \\<GG> :\n  cat_smc\n   (op_cat\n     \\<BB>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<CC>\n  cf_smcf \\<FF> :\n  cat_smc\n   (op_cat\n     \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<BB>\n\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>", "unfolding cf_smcf_cf_cn_comp[symmetric]"], ["proof (prove)\nusing this:\n  category \\<alpha> \\<AA>\n  cf_smcf \\<GG> :\n  cat_smc\n   (op_cat\n     \\<BB>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<CC>\n  cf_smcf \\<FF> :\n  cat_smc\n   (op_cat\n     \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<BB>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>", "by \n        (\n          cs_concl cs_intro: \n            cat_cs_intros slicing_intros smc_cn_cs_intros\n        )"], ["proof (state)\nthis:\n  cf_smcf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<CC>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "fix c"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "assume \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "with assms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<AA>\n  \\<GG> :\n  op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>", "show \n      \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<AA>\n  \\<GG> :\n  op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n                                     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "by \n        (\n          cs_concl \n            cs_simp: cat_op_simps cat_cn_cs_simps cs_intro: cat_cs_intros\n        )"], ["proof (state)\nthis:\n  (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n   \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n                                   \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<AA>\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>", "qed (auto simp: cat_cs_simps cat_cs_intros cat_op_simps)"], ["proof (state)\nthis:\n  \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>See section 1.2 in \\cite{bodo_categories_1970}).\\<close>"], ["", "lemma cf_cn_cov_comp_is_functor[cat_cn_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret L: is_functor \\<alpha> \\<open>op_cat \\<BB>\\<close> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret R: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof\n    (\n      rule is_functorI, \n      unfold cf_cn_comp_components(3,4) cat_op_simps slicing_commute[symmetric]\n    )"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\n 3. category \\<alpha> (op_cat \\<AA>)\n 4. category \\<alpha> \\<CC>\n 5. vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\n 6. cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<CC>\n 7. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 8. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)", "unfolding cf_cn_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence\n     [\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ>", "by simp"], ["proof (state)\nthis:\n  vfsequence (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> \\<CC>\n 4. vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\n 5. cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<CC>\n 6. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 7. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>", "unfolding cf_cn_comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [\\<GG>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ObjMap\\<rparr>,\n      \\<GG>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>ArrMap\\<rparr>,\n      op_cat (\\<FF>\\<lparr>HomDom\\<rparr>),\n      \\<GG>\\<lparr>HomCod\\<rparr>]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (auto simp: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = 4\\<^sub>\\<nat>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> \\<CC>\n 4. cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<CC>\n 5. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 6. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "from L.cf_is_semifunctor"], ["proof (chain)\npicking this:\n  cf_smcf \\<GG> :\n  cat_smc\n   (op_cat\n     \\<BB>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<CC>", "show \n      \"cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> : op_smc (cat_smc \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\nusing this:\n  cf_smcf \\<GG> :\n  cat_smc\n   (op_cat\n     \\<BB>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<CC>\n\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> :\n    op_smc\n     (cat_smc\n       \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n      \\<CC>", "by (cs_concl cs_intro: cat_cs_intros slicing_intros smc_cs_intros)"], ["proof (state)\nthis:\n  cf_smcf \\<GG> \\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F\\<circ> cf_smcf \\<FF> :\n  op_smc\n   (cat_smc\n     \\<AA>) \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n    \\<CC>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "fix c"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "assume \"c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\""], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n        \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n  \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "with assms"], ["proof (chain)\npicking this:\n  \\<GG> :\n  op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>", "show \"(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\nusing this:\n  \\<GG> :\n  op_cat \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  c \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n     \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n                                     \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "by \n        (\n          cs_concl \n            cs_simp: cat_cs_simps cat_cn_cs_simps \n            cs_intro: cat_cs_intros\n        )"], ["proof (state)\nthis:\n  (\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n   \\<FF>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<AA>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>(\\<GG> \\<^sub>C\\<^sub>F\\<circ>\n                                   \\<FF>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> (op_cat \\<AA>)\n 3. category \\<alpha> \\<CC>\n 4. op_cat (\\<FF>\\<lparr>HomDom\\<rparr>) = op_cat \\<AA>\n 5. \\<GG>\\<lparr>HomCod\\<rparr> = \\<CC>", "qed (auto simp: cat_cs_simps cat_cs_intros)"], ["proof (state)\nthis:\n  \\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>See section 1.2 in \\cite{bodo_categories_1970}.\\<close>"], ["", "lemma cf_cov_cn_comp_is_functor[cat_cn_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<^sub>C\\<mapsto>\\<mapsto>\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "using assms"], ["proof (prove)\nusing this:\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> :\n  op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule cf_comp_is_functorI)"], ["", "text\\<open>The opposite of the contravariant composition of functors.\\<close>"], ["", "lemma op_cf_cf_cn_comp[cat_op_simps]: \"op_cf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) = op_cf \\<GG> \\<^sub>C\\<^sub>F\\<circ> op_cf \\<FF>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf (\\<GG> \\<^sub>C\\<^sub>F\\<circ> \\<FF>) =\n    op_cf \\<GG> \\<^sub>C\\<^sub>F\\<circ> op_cf \\<FF>", "unfolding op_cf_def cf_cn_comp_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat\n      ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n        \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     op_cat\n      ([\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n        \\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ> =\n    [[\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr> \\<circ>\\<^sub>\\<circ>\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     op_cat\n      ([\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        op_cat (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n        op_cat\n         (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     [\\<GG>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<GG>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      op_cat (\\<GG>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      op_cat\n       (\\<GG>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>", "by (auto simp: nat_omega_simps)"], ["", "subsection\\<open>Identity functor\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "abbreviation (input) cf_id :: \"V \\<Rightarrow> V\" where \"cf_id \\<equiv> dghm_id\""], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma cf_smcf_cf_id[slicing_commute]: \"smcf_id (cat_smc \\<CC>) = cf_smcf (cf_id \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id (cat_smc \\<CC>) = cf_smcf (dghm_id \\<CC>)", "unfolding dghm_id_def cat_smc_def cf_smcf_def dghm_field_simps dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [vid_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n     vid_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>),\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ> =\n    [[vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n      vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n      \\<CC>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n      vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n      \\<CC>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [[vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [[vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["", "context category\nbegin"], ["", "interpretation smc: semicategory \\<alpha> \\<open>cat_smc \\<CC>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. semicategory \\<alpha> (cat_smc \\<CC>)", "by (rule cat_semicategory)"], ["", "lemmas_with [unfolded slicing_simps]:\n  cat_smcf_id_is_semifunctor = smc.smc_smcf_id_is_semifunctor"], ["", "end"], ["", "subsubsection\\<open>Object map\\<close>"], ["", "lemmas [cat_cs_simps] = dghm_id_ObjMap_app"], ["", "subsubsection\\<open>Arrow map\\<close>"], ["", "lemmas [cat_cs_simps] = dghm_id_ArrMap_app"], ["", "subsubsection\\<open>Opposite of an identity functor.\\<close>"], ["", "lemma op_cf_cf_id[cat_op_simps]: \"op_cf (cf_id \\<CC>) = cf_id (op_cat \\<CC>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf (dghm_id \\<CC>) = dghm_id (op_cat \\<CC>)", "unfolding dghm_id_def op_cat_def op_cf_def dghm_field_simps dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n      vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n      \\<CC>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n      vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n      \\<CC>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [[vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip\n       ([vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n         vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n         \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [[vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip\n       ([vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n         vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n         \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      [vid_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n       vid_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>), \\<CC>,\n       \\<CC>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ> =\n    [vid_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n        \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>),\n     vid_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n        \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>),\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ>", "by (auto simp: nat_omega_simps)"], ["", "subsubsection\\<open>An identity functor is a functor\\<close>"], ["", "lemma (in category) cat_cf_id_is_functor: \"cf_id \\<CC> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<CC> :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof(rule is_functorI, unfold dghm_id_components)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (dghm_id \\<CC>)\n 3. category \\<alpha> \\<CC>\n 4. category \\<alpha> \\<CC>\n 5. vcard (dghm_id \\<CC>) = 4\\<^sub>\\<nat>\n 6. cf_smcf (dghm_id \\<CC>) :\n    cat_smc\n     \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n 7. \\<CC> = \\<CC>\n 8. \\<CC> = \\<CC>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       vid_on\n        (\\<CC>\\<lparr>Arr\\<rparr>)\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>vid_on\n  (\\<CC>\\<lparr>Obj\\<rparr>)\\<lparr>c\\<rparr>\\<rparr>", "from cat_smcf_id_is_semifunctor"], ["proof (chain)\npicking this:\n  dghm_id (cat_smc \\<CC>) :\n  cat_smc\n   \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<CC>", "show \n    \"cf_smcf (cf_id \\<CC>) : cat_smc \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\nusing this:\n  dghm_id (cat_smc \\<CC>) :\n  cat_smc\n   \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<CC>\n\ngoal (1 subgoal):\n 1. cf_smcf (dghm_id \\<CC>) :\n    cat_smc\n     \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>", "by (simp add: slicing_commute)"], ["proof (state)\nthis:\n  cf_smcf (dghm_id \\<CC>) :\n  cat_smc\n   \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<CC>\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (dghm_id \\<CC>)\n 3. category \\<alpha> \\<CC>\n 4. category \\<alpha> \\<CC>\n 5. vcard (dghm_id \\<CC>) = 4\\<^sub>\\<nat>\n 6. \\<CC> = \\<CC>\n 7. \\<CC> = \\<CC>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       vid_on\n        (\\<CC>\\<lparr>Arr\\<rparr>)\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<CC>\\<lparr>CId\\<rparr>\\<lparr>vid_on\n  (\\<CC>\\<lparr>Obj\\<rparr>)\\<lparr>c\\<rparr>\\<rparr>", "from cat_CId_is_arr"], ["proof (chain)\npicking this:\n  ?a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a", "show \n    \"c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow> vid_on (\\<CC>\\<lparr>Arr\\<rparr>)\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<CC>\\<lparr>CId\\<rparr>\\<lparr>vid_on (\\<CC>\\<lparr>Obj\\<rparr>)\\<lparr>c\\<rparr>\\<rparr>\"\n    for c"], ["proof (prove)\nusing this:\n  ?a \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>?a\\<rparr> : ?a \\<mapsto>\\<^bsub>\\<CC>\\<^esub> ?a\n\ngoal (1 subgoal):\n 1. c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n    vid_on\n     (\\<CC>\\<lparr>Arr\\<rparr>)\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<CC>\\<lparr>CId\\<rparr>\\<lparr>vid_on\n                                     (\\<CC>\\<lparr>Obj\\<rparr>)\\<lparr>c\\<rparr>\\<rparr>", "by auto"], ["proof (state)\nthis:\n  ?c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n  vid_on\n   (\\<CC>\\<lparr>Arr\\<rparr>)\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>?c\\<rparr>\\<rparr> =\n  \\<CC>\\<lparr>CId\\<rparr>\\<lparr>vid_on\n                                   (\\<CC>\\<lparr>Obj\\<rparr>)\\<lparr>?c\\<rparr>\\<rparr>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (dghm_id \\<CC>)\n 3. category \\<alpha> \\<CC>\n 4. category \\<alpha> \\<CC>\n 5. vcard (dghm_id \\<CC>) = 4\\<^sub>\\<nat>\n 6. \\<CC> = \\<CC>\n 7. \\<CC> = \\<CC>", "qed (auto simp: dghm_id_def nat_omega_simps cat_cs_intros)"], ["", "lemma (in category) cat_cf_id_is_functor': \n  assumes \"\\<AA> = \\<CC>\" and \"\\<BB> = \\<CC>\"\n  shows \"cf_id \\<CC> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<CC> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<CC> :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule cat_cf_id_is_functor)"], ["", "lemmas [cat_cs_intros] = category.cat_cf_id_is_functor'"], ["", "subsubsection\\<open>Further properties\\<close>"], ["", "lemma (in is_functor) cf_cf_comp_cf_id_left[cat_cs_simps]: \"cf_id \\<BB> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = \\<FF>\"\n  \\<comment>\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<BB> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> = \\<FF>", "by \n    (\n      rule cf_eqI,\n      unfold dghm_id_components dghm_comp_components dghm_id_components\n    )\n    (auto intro: cat_cs_intros simp: cf_ArrMap_vrange cf_ObjMap_vrange)"], ["", "lemmas [cat_cs_simps] = is_functor.cf_cf_comp_cf_id_left"], ["", "lemma (in is_functor) cf_cf_comp_cf_id_right[cat_cs_simps]: \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F cf_id \\<AA> = \\<FF>\"\n  \\<comment>\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M dghm_id \\<AA> = \\<FF>", "by \n    (\n      rule cf_eqI, \n      unfold dghm_id_components dghm_comp_components dghm_id_components\n    )\n    (\n      auto \n        intro: cat_cs_intros \n        simp: cat_cs_simps cf_ArrMap_vrange cf_ObjMap_vrange \n    )"], ["", "lemmas [cat_cs_simps] = is_functor.cf_cf_comp_cf_id_right"], ["", "subsection\\<open>Constant functor\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter III-3 in \\cite{mac_lane_categories_2010}.\\<close>"], ["", "abbreviation cf_const :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V\"\n  where \"cf_const \\<CC> \\<DD> a \\<equiv> smcf_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\""], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma cf_smcf_cf_const[slicing_commute]: \n  \"smcf_const (cat_smc \\<CC>) (cat_smc \\<DD>) a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) = cf_smcf (cf_const \\<CC> \\<DD> a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_const (cat_smc \\<CC>) (cat_smc \\<DD>) a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) =\n    cf_smcf\n     (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>))", "unfolding \n    dghm_const_def cat_smc_def cf_smcf_def dghm_field_simps dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [vconst_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\n      a,\n     vconst_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n      (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [\\<DD>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<DD>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<DD>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      \\<DD>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<DD>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ> =\n    [[vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n      vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n       (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n      \\<CC>, \\<DD>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n      vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n       (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n      \\<CC>, \\<DD>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [[vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [[vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ>", "by (simp add: nat_omega_simps)"], ["", "subsubsection\\<open>Object map and arrow map\\<close>"], ["", "context\n  fixes \\<DD> a :: V\nbegin"], ["", "lemmas_with [where \\<DD>=\\<DD> and a=a and f=\\<open>\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>\\<close>, cat_cs_simps]: \n  dghm_const_ObjMap_app\n  dghm_const_ArrMap_app"], ["", "end"], ["", "subsubsection\\<open>Opposite constant functor\\<close>"], ["", "lemma op_cf_cf_const[cat_op_simps]:\n  \"op_cf (cf_const \\<CC> \\<DD> a) = cf_const (op_cat \\<CC>) (op_cat \\<DD>) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) =\n    dghm_const (op_cat \\<CC>) (op_cat \\<DD>) a\n     (op_cat \\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)", "unfolding dghm_const_def op_cat_def op_cf_def dghm_field_simps dg_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [[vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n      vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n       (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n      \\<CC>, \\<DD>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n      vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n       (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n      \\<CC>, \\<DD>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     [[vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip\n       ([vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n         vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n          (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n         \\<CC>,\n         \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [[vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip\n       ([vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n         vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n          (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n         \\<CC>,\n         \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      [vconst_on (\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>) a,\n       vconst_on (\\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n        (\\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n       \\<CC>,\n       \\<DD>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ> =\n    [vconst_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n        \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\n      a,\n     vconst_on\n      ([\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n        \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\n      ([\\<DD>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n        \\<DD>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n        \\<DD>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<DD>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n        fflip (\\<DD>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n        \\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>5\\<^sub>\\<nat>\\<rparr>\\<lparr>a\\<rparr>),\n     [\\<CC>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<CC>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<CC>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<CC>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<CC>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>,\n     [\\<DD>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<DD>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      \\<DD>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<DD>\\<lparr>2\\<^sub>\\<nat>\\<rparr>,\n      fflip (\\<DD>\\<lparr>4\\<^sub>\\<nat>\\<rparr>),\n      \\<DD>\\<lparr>5\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>]\\<^sub>\\<circ>", "by (auto simp: nat_omega_simps)"], ["", "subsubsection\\<open>A constant functor is a functor\\<close>"], ["", "lemma cf_const_is_functor: \n  assumes \"category \\<alpha> \\<CC>\" and \"category \\<alpha> \\<DD>\" and \"a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\" \n  shows \"cf_const \\<CC> \\<DD> a : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "interpret \\<CC>: category \\<alpha> \\<CC>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<CC>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "interpret \\<DD>: category \\<alpha> \\<DD>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<DD>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "proof(intro is_functorI, tactic\\<open>distinct_subgoals_tac\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence\n     (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>))\n 3. category \\<alpha> \\<CC>\n 4. category \\<alpha> \\<DD>\n 5. vcard\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) =\n    4\\<^sub>\\<nat>\n 6. cf_smcf\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) :\n    cat_smc\n     \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<DD>\n 7. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 8. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       dghm_const \\<CC> \\<DD> a\n        (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n  (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vfsequence (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence\n     (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>))", "unfolding dghm_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence\n     [vconst_on (\\<CC>\\<lparr>Obj\\<rparr>) a,\n      vconst_on (\\<CC>\\<lparr>Arr\\<rparr>)\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>),\n      \\<CC>, \\<DD>]\\<^sub>\\<circ>", "by simp"], ["proof (state)\nthis:\n  vfsequence\n   (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>))\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<CC>\n 3. category \\<alpha> \\<DD>\n 4. vcard\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) =\n    4\\<^sub>\\<nat>\n 5. cf_smcf\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) :\n    cat_smc\n     \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<DD>\n 6. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 7. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       dghm_const \\<CC> \\<DD> a\n        (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n  (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "show \"vcard (cf_const \\<CC> \\<DD> a) = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) =\n    4\\<^sub>\\<nat>", "unfolding dghm_const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [vconst_on (\\<CC>\\<lparr>Obj\\<rparr>) a,\n      vconst_on (\\<CC>\\<lparr>Arr\\<rparr>)\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>),\n      \\<CC>, \\<DD>]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard\n   (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) =\n  4\\<^sub>\\<nat>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<CC>\n 3. category \\<alpha> \\<DD>\n 4. cf_smcf\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) :\n    cat_smc\n     \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<DD>\n 5. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 6. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       dghm_const \\<CC> \\<DD> a\n        (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n  (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "from assms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  category \\<alpha> \\<DD>\n  a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>", "show \"cf_smcf (cf_const \\<CC> \\<DD> a) : cat_smc \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<DD>\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  category \\<alpha> \\<DD>\n  a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. cf_smcf\n     (dghm_const \\<CC> \\<DD> a\n       (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) :\n    cat_smc\n     \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<DD>", "by \n        ( \n          cs_concl\n            cs_simp: cat_cs_simps slicing_simps slicing_commute[symmetric] \n            cs_intro: smc_cs_intros cat_cs_intros slicing_intros\n        )"], ["proof (state)\nthis:\n  cf_smcf\n   (dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)) :\n  cat_smc\n   \\<CC> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<DD>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<CC>\n 3. category \\<alpha> \\<DD>\n 4. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 5. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       dghm_const \\<CC> \\<DD> a\n        (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n  (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "fix c"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<CC>\n 3. category \\<alpha> \\<DD>\n 4. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 5. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       dghm_const \\<CC> \\<DD> a\n        (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n  (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "assume \"c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\""], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<CC>\n 3. category \\<alpha> \\<DD>\n 4. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 5. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       dghm_const \\<CC> \\<DD> a\n        (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n  (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "with assms"], ["proof (chain)\npicking this:\n  category \\<alpha> \\<CC>\n  category \\<alpha> \\<DD>\n  a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\n  c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>", "show \n      \"cf_const \\<CC> \\<DD> a\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<DD>\\<lparr>CId\\<rparr>\\<lparr>cf_const \\<CC> \\<DD> a\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  category \\<alpha> \\<DD>\n  a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\n  c \\<in>\\<^sub>\\<circ> \\<CC>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n                                     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>", "by (cs_concl cs_simp: cat_cs_simps cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  dghm_const \\<CC> \\<DD> a\n   (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ArrMap\\<rparr>\\<lparr>\\<CC>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<DD>\\<lparr>CId\\<rparr>\\<lparr>dghm_const \\<CC> \\<DD> a\n                                   (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>ObjMap\\<rparr>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<CC>\n 3. category \\<alpha> \\<DD>\n 4. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomDom\\<rparr> =\n    \\<CC>\n 5. dghm_const \\<CC> \\<DD> a\n     (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>)\\<lparr>HomCod\\<rparr> =\n    \\<DD>", "qed (auto simp: dghm_const_components assms)"], ["proof (state)\nthis:\n  dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n  \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_const_is_functor'[cat_cs_intros]: \n  assumes \"category \\<alpha> \\<CC>\" \n    and \"category \\<alpha> \\<DD>\" \n    and \"a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\" \n    and \"\\<AA> = \\<CC>\"\n    and \"\\<BB> = \\<DD>\"\n  shows \"cf_const \\<CC> \\<DD> a : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms(1-3)"], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  category \\<alpha> \\<DD>\n  a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "unfolding assms(4,5)"], ["proof (prove)\nusing this:\n  category \\<alpha> \\<CC>\n  category \\<alpha> \\<DD>\n  a \\<in>\\<^sub>\\<circ> \\<DD>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. dghm_const \\<CC> \\<DD> a (\\<DD>\\<lparr>CId\\<rparr>\\<lparr>a\\<rparr>) :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<DD>", "by (rule cf_const_is_functor)"], ["", "subsection\\<open>Faithful functor\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["", "locale is_ft_functor = is_functor \\<alpha> \\<AA> \\<BB> \\<FF> for \\<alpha> \\<AA> \\<BB> \\<FF> + \n  assumes ft_cf_is_ft_semifunctor[slicing_intros]: \n    \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\""], ["", "syntax \"_is_ft_functor\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>(_ :/ _ \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<index> _)\\<close> [51, 51, 51] 51)"], ["", "translations \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \\<rightleftharpoons> \"CONST is_ft_functor \\<alpha> \\<AA> \\<BB> \\<FF>\""], ["", "lemma (in is_ft_functor) ft_cf_is_ft_functor':\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<BB>", "by (rule ft_cf_is_ft_semifunctor)"], ["", "lemmas [slicing_intros] = is_ft_functor.ft_cf_is_ft_functor'"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in is_ft_functor) is_ft_functor_axioms'[cf_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule is_ft_functor_axioms)"], ["", "mk_ide rf is_ft_functor_def[unfolded is_ft_functor_axioms_def]\n  |intro is_ft_functorI|\n  |dest is_ft_functorD[dest]|\n  |elim is_ft_functorE[elim]|"], ["", "lemmas [cf_cs_intros] = is_ft_functorD(1)"], ["", "lemma is_ft_functorI':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ> Hom \\<AA> a b)\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<lbrakk>?a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n   ?b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ>\n                         Hom \\<AA> ?a ?b)\n\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (intro is_ft_functorI)\n    (\n      simp_all add: \n        assms(1) \n        is_ft_semifunctorI'[OF is_functorD(6)[\n          OF assms(1)], unfolded slicing_simps\n          ]\n    )"], ["", "lemma is_ft_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ> Hom \\<AA> a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB> &&&\n    (\\<And>a b.\n        \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n         b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ>\n                               Hom \\<AA> a b))", "by \n    (\n      simp_all add: \n        is_ft_functorD[OF assms(1)] \n        is_ft_semifunctorD'(2)[\n          OF is_ft_functorD(2)[OF assms(1)], unfolded slicing_simps\n          ]\n    )"], ["", "lemma is_ft_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ> Hom \\<AA> a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<FF> :\n              \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>;\n      \\<And>a b.\n         \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n          b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n         \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ>\n                                Hom \\<AA> a b)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<FF> :\n              \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>;\n      \\<And>a b.\n         \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n          b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n         \\<Longrightarrow> v11 (\\<FF>\\<lparr>ArrMap\\<rparr> \\<restriction>\\<^sup>l\\<^sub>\\<circ>\n                                Hom \\<AA> a b)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp_all add: is_ft_functorD')"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "context is_ft_functor\nbegin"], ["", "interpretation smcf: is_ft_semifunctor \\<alpha> \\<open>cat_smc \\<AA>\\<close> \\<open>cat_smc \\<BB>\\<close> \\<open>cf_smcf \\<FF>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<BB>", "by (rule ft_cf_is_ft_semifunctor)"], ["", "lemmas_with [unfolded slicing_simps]:\n  ft_cf_v11_on_Hom = smcf.ft_smcf_v11_on_Hom"], ["", "end"], ["", "subsubsection\\<open>Opposite faithful functor.\\<close>"], ["", "lemma (in is_ft_functor) is_ft_functor_op': \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat\n                     \\<BB>", "by (rule is_ft_functorI, unfold slicing_commute[symmetric])\n    (\n      simp_all add: \n        is_functor_op is_ft_semifunctor.is_ft_semifunctor_op \n        ft_cf_is_ft_semifunctor\n    )"], ["", "lemma (in is_ft_functor) is_ft_functor_op: \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat\n                     \\<BB>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat\n                     \\<BB>", "by (rule is_ft_functor_op')"], ["", "lemmas is_ft_functor_op[cat_op_intros] = is_ft_functor.is_ft_functor_op'"], ["", "subsubsection\\<open>The composition of faithful functors is a faithful functor\\<close>"], ["", "lemma cf_comp_is_ft_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof(intro is_ft_functorI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<CC>", "interpret \\<GG>: is_ft_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (simp add: assms(1))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<CC>", "interpret \\<FF>: is_ft_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (simp add: assms(2))"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<CC>", "from \\<FF>.is_functor_axioms \\<GG>.is_functor_axioms"], ["proof (chain)\npicking this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (cs_concl cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<CC>", "then"], ["proof (chain)\npicking this:\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret is_functor \\<alpha> \\<AA> \\<CC> \\<open>\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>\\<close>"], ["proof (prove)\nusing this:\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "."], ["proof (state)\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<CC>", "show \"cf_smcf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                     \\<CC>", "by \n      ( \n        cs_concl \n          cs_simp: slicing_commute[symmetric] \n          cs_intro: cf_cs_intros smcf_cs_intros slicing_intros\n      )"], ["proof (state)\nthis:\n  cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Full functor\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["", "locale is_fl_functor = is_functor \\<alpha> \\<AA> \\<BB> \\<FF> for \\<alpha> \\<AA> \\<BB> \\<FF> + \n  assumes fl_cf_is_fl_semifunctor:\n    \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\""], ["", "syntax \"_is_fl_functor\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>(_ :/ _ \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<index> _)\\<close> [51, 51, 51] 51)"], ["", "translations \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \\<rightleftharpoons> \"CONST is_fl_functor \\<alpha> \\<AA> \\<BB> \\<FF>\""], ["", "lemma (in is_fl_functor) fl_cf_is_fl_functor'[slicing_intros]:\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<BB>", "by (rule fl_cf_is_fl_semifunctor)"], ["", "lemmas [slicing_intros] = is_fl_functor.fl_cf_is_fl_semifunctor"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in is_fl_functor) is_fl_functor_axioms'[cf_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule is_fl_functor_axioms)"], ["", "mk_ide rf is_fl_functor_def[unfolded is_fl_functor_axioms_def]\n  |intro is_fl_functorI|\n  |dest is_fl_functorD[dest]|\n  |elim is_fl_functorE[elim]|"], ["", "lemmas [cf_cs_intros] = is_fl_functorD(1)"], ["", "lemma is_fl_functorI':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow>\n    \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ> (Hom \\<AA> a b) = Hom \\<BB> (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>) (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<lbrakk>?a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n   ?b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n  \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ>\n                    Hom \\<AA> ?a ?b =\n                    Hom \\<BB>\n                     (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>?a\\<rparr>)\n                     (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>?b\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (intro is_fl_functorI)\n    (\n      simp_all add: \n        assms(1) \n        is_fl_semifunctorI'[\n          OF is_functorD(6)[OF assms(1)], unfolded slicing_simps\n          ]\n    )"], ["", "lemma is_fl_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow>\n    \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ> (Hom \\<AA> a b) = Hom \\<BB> (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>) (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB> &&&\n    (\\<And>a b.\n        \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n         b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n        \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ>\n                          Hom \\<AA> a b =\n                          Hom \\<BB>\n                           (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>)\n                           (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>))", "by \n    (\n      simp_all add: \n        is_fl_functorD[OF assms(1)] \n        is_fl_semifunctorD'(2)[\n          OF is_fl_functorD(2)[OF assms(1)], unfolded slicing_simps\n          ]\n    )"], ["", "lemma is_fl_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<And>a b. \\<lbrakk> a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>; b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr> \\<rbrakk> \\<Longrightarrow> \n    \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ> (Hom \\<AA> a b) = Hom \\<BB> (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>) (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<FF> :\n              \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>;\n      \\<And>a b.\n         \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n          b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n         \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ>\n                           Hom \\<AA> a b =\n                           Hom \\<BB>\n                            (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>)\n                            (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<FF> :\n              \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>;\n      \\<And>a b.\n         \\<lbrakk>a \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>;\n          b \\<in>\\<^sub>\\<circ> \\<AA>\\<lparr>Obj\\<rparr>\\<rbrakk>\n         \\<Longrightarrow> \\<FF>\\<lparr>ArrMap\\<rparr> `\\<^sub>\\<circ>\n                           Hom \\<AA> a b =\n                           Hom \\<BB>\n                            (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>a\\<rparr>)\n                            (\\<FF>\\<lparr>ObjMap\\<rparr>\\<lparr>b\\<rparr>)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp_all add: is_fl_functorD')"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "context is_fl_functor\nbegin"], ["", "interpretation smcf: is_fl_semifunctor \\<alpha> \\<open>cat_smc \\<AA>\\<close> \\<open>cat_smc \\<BB>\\<close> \\<open>cf_smcf \\<FF>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<BB>", "by (rule fl_cf_is_fl_semifunctor)"], ["", "lemmas_with [unfolded slicing_simps]:\n  fl_cf_surj_on_Hom = smcf.fl_smcf_surj_on_Hom"], ["", "end"], ["", "subsubsection\\<open>Opposite full functor\\<close>"], ["", "lemma (in is_fl_functor) is_fl_functor_op[cat_op_intros]: \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> op_cat\n                           \\<BB>", "by (rule is_fl_functorI, unfold slicing_commute[symmetric])\n    (simp_all add: cat_op_intros smc_op_intros slicing_intros)"], ["", "lemmas is_fl_functor_op[cat_op_intros] = is_fl_functor.is_fl_functor_op"], ["", "subsubsection\\<open>The composition of full functor is a full functor\\<close>"], ["", "lemma cf_comp_is_fl_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof(intro is_fl_functorI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<CC>", "interpret \\<FF>: is_fl_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<CC>", "interpret \\<GG>: is_fl_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<GG> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. \\<GG> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by simp"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<CC>", "from \\<FF>.is_functor_axioms \\<GG>.is_functor_axioms"], ["proof (chain)\npicking this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (cs_concl cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<CC>", "show \"cf_smcf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n     \\<CC>", "by \n      (\n        cs_concl \n          cs_simp: slicing_commute[symmetric] \n          cs_intro: cf_cs_intros smcf_cs_intros slicing_intros\n      )"], ["proof (state)\nthis:\n  cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Fully faithful functor\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["", "locale is_ff_functor = is_ft_functor \\<alpha> \\<AA> \\<BB> \\<FF> + is_fl_functor \\<alpha> \\<AA> \\<BB> \\<FF>\n  for \\<alpha> \\<AA> \\<BB> \\<FF>"], ["", "syntax \"_is_ff_functor\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>(_ :/ _ \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<index> _)\\<close> [51, 51, 51] 51)"], ["", "translations \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \\<rightleftharpoons> \"CONST is_ff_functor \\<alpha> \\<AA> \\<BB> \\<FF>\""], ["", "text\\<open>Rules.\\<close>"], ["", "mk_ide rf is_ff_functor_def\n  |intro is_ff_functorI|\n  |dest is_ff_functorD[dest]|\n  |elim is_ff_functorE[elim]|"], ["", "lemmas [cf_cs_intros] = is_ff_functorD"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "lemma (in is_ff_functor) ff_cf_is_ff_semifunctor:\n  \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                           \\<BB>", "by (rule is_ff_semifunctorI) (auto intro: slicing_intros)"], ["", "lemma (in is_ff_functor) ff_cf_is_ff_semifunctor'[slicing_intros]:\n  assumes \"\\<AA>' = cat_smc \\<AA>\" and \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                           \\<BB>", "by (rule ff_cf_is_ff_semifunctor)"], ["", "lemmas [slicing_intros] = is_ff_functor.ff_cf_is_ff_semifunctor'"], ["", "subsubsection\\<open>Opposite fully faithful functor\\<close>"], ["", "lemma (in is_ff_functor) is_ff_functor_op: \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> op_cat\n           \\<BB>", "by (rule is_ff_functorI) (auto simp: is_fl_functor_op is_ft_functor_op)"], ["", "lemma (in is_ff_functor) is_ff_functor_op'[cat_op_intros]: \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> op_cat\n           \\<BB>", "by (rule is_ff_functor_op)"], ["", "lemmas is_ff_functor_op[cat_op_intros] = is_ff_functor.is_ff_functor_op"], ["", "subsubsection\\<open>\nThe composition of fully faithful functors is a fully faithful functor\n\\<close>"], ["", "lemma cf_comp_is_ff_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "using assms"], ["proof (prove)\nusing this:\n  \\<GG> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (intro is_ff_functorI, elim is_ff_functorE) (auto simp: cf_cs_intros)"], ["", "subsection\\<open>Isomorphism of categories\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["", "locale is_iso_functor = is_functor \\<alpha> \\<AA> \\<BB> \\<FF> for \\<alpha> \\<AA> \\<BB> \\<FF> + \n  assumes iso_cf_is_iso_semifunctor: \n    \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\""], ["", "syntax \"_is_iso_functor\" :: \"V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> V \\<Rightarrow> bool\"\n  (\\<open>(_ :/ _ \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<index> _)\\<close> [51, 51, 51] 51)"], ["", "translations \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \\<rightleftharpoons> \"CONST is_iso_functor \\<alpha> \\<AA> \\<BB> \\<FF>\""], ["", "lemma (in is_iso_functor) iso_cf_is_iso_semifunctor'[slicing_intros]:\n  assumes \"\\<AA>' = cat_smc \\<AA>\" \"\\<BB>' = cat_smc \\<BB>\"\n  shows \"cf_smcf \\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "by (rule iso_cf_is_iso_semifunctor)"], ["", "lemmas [slicing_intros] = is_iso_semifunctor.iso_smcf_is_iso_dghm'"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma (in is_iso_functor) is_iso_functor_axioms'[cf_cs_intros]:\n  assumes \"\\<alpha>' = \\<alpha>\" and \"\\<AA>' = \\<AA>\" and \"\\<BB>' = \\<BB>\"\n  shows \"\\<FF> : \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA>' \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>'\\<^esub> \\<BB>'", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule is_iso_functor_axioms)"], ["", "mk_ide rf is_iso_functor_def[unfolded is_iso_functor_axioms_def]\n  |intro is_iso_functorI|\n  |dest is_iso_functorD[dest]|\n  |elim is_iso_functorE[elim]|"], ["", "lemma is_iso_functorI':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\n  v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\n  \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n  \\<BB>\\<lparr>Obj\\<rparr>\n  \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n  \\<BB>\\<lparr>Arr\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (intro is_iso_functorI)\n    (\n      simp_all add: \n        assms(1) \n        is_iso_semifunctorI'[\n          OF is_functorD(6)[OF assms(1)], unfolded slicing_simps\n          ]\n    )"], ["", "lemma is_iso_functorD':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<FF> :\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB> &&&\n     v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)) &&&\n    v11 (\\<FF>\\<lparr>ArrMap\\<rparr>) &&&\n    \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n    \\<BB>\\<lparr>Obj\\<rparr> &&&\n    \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n    \\<BB>\\<lparr>Arr\\<rparr>", "by \n    (\n      simp_all add: \n        is_iso_functorD[OF assms(1)] \n        is_iso_semifunctorD'(2-5)[\n          OF is_iso_functorD(2)[OF assms(1)], unfolded slicing_simps\n          ]\n    )"], ["", "lemma is_iso_functorE':\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  obtains \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"v11 (\\<FF>\\<lparr>ObjMap\\<rparr>)\"\n    and \"v11 (\\<FF>\\<lparr>ArrMap\\<rparr>)\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\"\n    and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<FF> :\n              \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>;\n      v11 (\\<FF>\\<lparr>ObjMap\\<rparr>); v11 (\\<FF>\\<lparr>ArrMap\\<rparr>);\n      \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n      \\<BB>\\<lparr>Obj\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n      \\<BB>\\<lparr>Arr\\<rparr>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>\\<FF> :\n              \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>;\n      v11 (\\<FF>\\<lparr>ObjMap\\<rparr>); v11 (\\<FF>\\<lparr>ArrMap\\<rparr>);\n      \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n      \\<BB>\\<lparr>Obj\\<rparr>;\n      \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n      \\<BB>\\<lparr>Arr\\<rparr>\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp_all add: is_iso_functorD')"], ["", "text\\<open>Elementary properties.\\<close>"], ["", "context is_iso_functor\nbegin"], ["", "interpretation smcf: is_iso_semifunctor \\<alpha> \\<open>cat_smc \\<AA>\\<close> \\<open>cat_smc \\<BB>\\<close> \\<open>cf_smcf \\<FF>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "by (rule iso_cf_is_iso_semifunctor)"], ["", "lemmas_with [unfolded slicing_simps]:\n  iso_cf_ObjMap_vrange[simp] = smcf.iso_smcf_ObjMap_vrange\n  and iso_cf_ArrMap_vrange[simp] = smcf.iso_smcf_ArrMap_vrange"], ["", "sublocale ObjMap: v11 \\<open>\\<FF>\\<lparr>ObjMap\\<rparr>\\<close>\n  rewrites \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<AA>\\<lparr>Obj\\<rparr>\" and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) = \\<BB>\\<lparr>Obj\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v11 (\\<FF>\\<lparr>ObjMap\\<rparr>) &&&\n    \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n    \\<AA>\\<lparr>Obj\\<rparr> &&&\n    \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ObjMap\\<rparr>) =\n    \\<BB>\\<lparr>Obj\\<rparr>", "by (rule smcf.ObjMap.v11_axioms[unfolded slicing_simps]) \n    (simp_all add: cat_cs_simps cf_cs_simps)"], ["", "sublocale ArrMap: v11 \\<open>\\<FF>\\<lparr>ArrMap\\<rparr>\\<close>\n  rewrites \"\\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<AA>\\<lparr>Arr\\<rparr>\" and \"\\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) = \\<BB>\\<lparr>Arr\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v11 (\\<FF>\\<lparr>ArrMap\\<rparr>) &&&\n    \\<D>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n    \\<AA>\\<lparr>Arr\\<rparr> &&&\n    \\<R>\\<^sub>\\<circ> (\\<FF>\\<lparr>ArrMap\\<rparr>) =\n    \\<BB>\\<lparr>Arr\\<rparr>", "by (rule smcf.ArrMap.v11_axioms[unfolded slicing_simps])\n    (simp_all add: cat_cs_simps smcf_cs_simps)"], ["", "lemmas_with [unfolded slicing_simps]:\n  iso_cf_Obj_HomDom_if_Obj_HomCod[elim] = \n    smcf.iso_smcf_Obj_HomDom_if_Obj_HomCod\n  and iso_cf_Arr_HomDom_if_Arr_HomCod[elim] = \n    smcf.iso_smcf_Arr_HomDom_if_Arr_HomCod\n  and iso_cf_ObjMap_eqE[elim] = smcf.iso_smcf_ObjMap_eqE\n  and iso_cf_ArrMap_eqE[elim] = smcf.iso_smcf_ArrMap_eqE"], ["", "end"], ["", "sublocale is_iso_functor \\<subseteq> is_ff_functor"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>f\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "proof(intro is_ff_functorI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "interpret is_iso_semifunctor \\<alpha> \\<open>cat_smc \\<AA>\\<close> \\<open>cat_smc \\<BB>\\<close> \\<open>cf_smcf \\<FF>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "by (rule iso_cf_is_iso_semifunctor)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "show \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by unfold_locales"], ["proof (state)\nthis:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>a\\<^sub>i\\<^sub>t\\<^sub>h\\<^sub>f\\<^sub>u\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "show \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by unfold_locales"], ["proof (state)\nthis:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>f\\<^sub>u\\<^sub>l\\<^sub>l\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas (in is_iso_functor) iso_cf_is_ff_functor = is_ff_functor_axioms"], ["", "lemmas [cf_cs_intros] = is_iso_functor.iso_cf_is_ff_functor"], ["", "subsubsection\\<open>Opposite isomorphism of categories\\<close>"], ["", "lemma (in is_iso_functor) is_iso_functor_op: \n  \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat\n                   \\<BB>", "by (rule is_iso_functorI, unfold slicing_simps slicing_commute[symmetric]) \n   (simp_all add: cat_op_intros smc_op_intros slicing_intros)"], ["", "lemma (in is_iso_functor) is_iso_functor_op': \n  assumes \"\\<AA>' = op_cat \\<AA>\" and \"\\<BB>' = op_cat \\<BB>\"\n  shows \"op_cf \\<FF> : op_cat \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat\n                   \\<BB>", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. op_cf \\<FF> :\n    op_cat\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> op_cat\n                   \\<BB>", "by (rule is_iso_functor_op)"], ["", "lemmas is_iso_functor_op[cat_op_intros] = \n  is_iso_functor.is_iso_functor_op'"], ["", "subsubsection\\<open>\nThe composition of isomorphisms of categories is an isomorphism of categories\n\\<close>"], ["", "lemma cf_comp_is_iso_functor[cf_cs_intros]:\n  assumes \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" and \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof(intro is_iso_functorI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>", "interpret \\<FF>: is_iso_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<GG> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>", "interpret \\<GG>: is_iso_functor \\<alpha> \\<BB> \\<CC> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "using assms"], ["proof (prove)\nusing this:\n  \\<GG> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<GG> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n 2. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>", "from \\<FF>.is_functor_axioms \\<GG>.is_functor_axioms"], ["proof (chain)\npicking this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\nusing this:\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (cs_concl cs_intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>", "show \"cf_smcf (\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF>) : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>", "unfolding slicing_commute[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<CC>", "by (cs_concl cs_intro: smcf_cs_intros slicing_intros)"], ["proof (state)\nthis:\n  cf_smcf (\\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF>) :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                 \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Inverse functor\\<close>"], ["", "abbreviation (input) inv_cf :: \"V \\<Rightarrow> V\"\n  where \"inv_cf \\<equiv> inv_dghm\""], ["", "text\\<open>Slicing.\\<close>"], ["", "lemma dghm_inv_semifunctor[slicing_commute]: \n  \"inv_smcf (cf_smcf \\<FF>) = cf_smcf (inv_cf \\<FF>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_dghm (cf_smcf \\<FF>) = cf_smcf (inv_dghm \\<FF>)", "unfolding cf_smcf_def inv_dghm_def dghm_field_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. [([\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n       \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n       cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n       cat_smc\n        (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n     ([\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n       \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n       cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n       cat_smc\n        (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n     [\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n      \\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n      cat_smc (\\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n      cat_smc\n       (\\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ> =\n    [[(\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n      (\\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n      \\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>,\n     [(\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n      (\\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n      \\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n      \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>1\\<^sub>\\<nat>\\<rparr>,\n     cat_smc\n      ([(\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n        (\\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n        \\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>2\\<^sub>\\<nat>\\<rparr>),\n     cat_smc\n      ([(\\<FF>\\<lparr>[]\\<^sub>\\<circ>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n        (\\<FF>\\<lparr>1\\<^sub>\\<nat>\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n        \\<FF>\\<lparr>3\\<^sub>\\<nat>\\<rparr>,\n        \\<FF>\\<lparr>2\\<^sub>\\<nat>\\<rparr>]\\<^sub>\\<circ>\\<lparr>3\\<^sub>\\<nat>\\<rparr>)]\\<^sub>\\<circ>", "by (simp_all add: nat_omega_simps)"], ["", "context is_iso_functor\nbegin"], ["", "interpretation smcf: is_iso_semifunctor \\<alpha> \\<open>cat_smc \\<AA>\\<close> \\<open>cat_smc \\<BB>\\<close> \\<open>cf_smcf \\<FF>\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "by (rule iso_cf_is_iso_semifunctor)"], ["", "lemmas_with [unfolded slicing_simps slicing_commute]:\n  inv_cf_ObjMap_v11 = smcf.inv_smcf_ObjMap_v11\n  and inv_cf_ObjMap_vdomain = smcf.inv_smcf_ObjMap_vdomain\n  and inv_cf_ObjMap_app = smcf.inv_smcf_ObjMap_app\n  and inv_cf_ObjMap_vrange = smcf.inv_smcf_ObjMap_vrange\n  and inv_cf_ArrMap_v11 = smcf.inv_smcf_ArrMap_v11\n  and inv_cf_ArrMap_vdomain = smcf.inv_smcf_ArrMap_vdomain\n  and inv_cf_ArrMap_app = smcf.inv_smcf_ArrMap_app\n  and inv_cf_ArrMap_vrange = smcf.inv_smcf_ArrMap_vrange\n  and iso_cf_ObjMap_inv_cf_ObjMap_app =\n    smcf.iso_smcf_ObjMap_inv_smcf_ObjMap_app\n  and iso_cf_ArrMap_inv_cf_ArrMap_app = \n    smcf.iso_smcf_ArrMap_inv_smcf_ArrMap_app\n  and iso_cf_HomDom_is_arr_conv = smcf.iso_smcf_HomDom_is_arr_conv\n  and iso_cf_HomCod_is_arr_conv = smcf.iso_smcf_HomCod_is_arr_conv"], ["", "end"], ["", "subsection\\<open>An isomorphism of categories is an isomorphism in the category \\<open>CAT\\<close>\\<close>"], ["", "lemma is_arr_isomorphism_is_iso_functor:\n  \\<comment>\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}.\\<close>\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n    and \"\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\"\n    and \"\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = cf_id \\<AA>\"\n    and \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F \\<GG> = cf_id \\<BB>\"\n  shows \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "interpret \\<FF>: is_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "interpret \\<GG>: is_functor \\<alpha> \\<BB> \\<AA> \\<GG>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "proof(rule is_iso_functorI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "have \\<GG>\\<FF>\\<AA>: \"cf_smcf \\<GG> \\<circ>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F cf_smcf \\<FF> = smcf_id (cat_smc \\<AA>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> =\n    dghm_id (cat_smc \\<AA>)", "by (simp add: assms(3) cf_smcf_cf_id cf_smcf_smcf_comp)"], ["proof (state)\nthis:\n  cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> =\n  dghm_id (cat_smc \\<AA>)\n\ngoal (2 subgoals):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "have \\<FF>\\<GG>\\<BB>: \"cf_smcf \\<FF> \\<circ>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>F cf_smcf \\<GG> = smcf_id (cat_smc \\<BB>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<GG> =\n    dghm_id (cat_smc \\<BB>)", "by (simp add: assms(4) cf_smcf_cf_id cf_smcf_smcf_comp)"], ["proof (state)\nthis:\n  cf_smcf \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<GG> =\n  dghm_id (cat_smc \\<BB>)\n\ngoal (2 subgoals):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n 2. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "from \\<FF>.cf_is_semifunctor \\<GG>.cf_is_semifunctor \\<GG>\\<FF>\\<AA> \\<FF>\\<GG>\\<BB>"], ["proof (chain)\npicking this:\n  cf_smcf \\<FF> :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<BB>\n  cf_smcf \\<GG> :\n  cat_smc\n   \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<AA>\n  cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> =\n  dghm_id (cat_smc \\<AA>)\n  cf_smcf \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<GG> =\n  dghm_id (cat_smc \\<BB>)", "show \n      \"cf_smcf \\<FF> : cat_smc \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\""], ["proof (prove)\nusing this:\n  cf_smcf \\<FF> :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<BB>\n  cf_smcf \\<GG> :\n  cat_smc\n   \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<AA>\n  cf_smcf \\<GG> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<FF> =\n  dghm_id (cat_smc \\<AA>)\n  cf_smcf \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M cf_smcf \\<GG> =\n  dghm_id (cat_smc \\<BB>)\n\ngoal (1 subgoal):\n 1. cf_smcf \\<FF> :\n    cat_smc\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<BB>", "by (rule is_arr_isomorphism_is_iso_semifunctor)"], ["proof (state)\nthis:\n  cf_smcf \\<FF> :\n  cat_smc\n   \\<AA> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                 \\<BB>\n\ngoal (1 subgoal):\n 1. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "qed (auto simp: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_iso_functor_is_arr_isomorphism:\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\"\n  shows [cf_cs_intros]: \"inv_cf \\<FF> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\"\n    and \"inv_cf \\<FF> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = cf_id \\<AA>\"\n    and \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F inv_cf \\<FF> = cf_id \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_dghm \\<FF> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA> &&&\n    inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n    dghm_id \\<AA> &&&\n    \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "proof-"], ["proof (state)\ngoal (3 subgoals):\n 1. inv_dghm \\<FF> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n 2. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n    dghm_id \\<AA>\n 3. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "let ?\\<GG> = \"inv_cf \\<FF>\""], ["proof (state)\ngoal (3 subgoals):\n 1. inv_dghm \\<FF> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n 2. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n    dghm_id \\<AA>\n 3. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "interpret is_iso_functor \\<alpha> \\<AA> \\<BB> \\<FF>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(1))"], ["proof (state)\ngoal (3 subgoals):\n 1. inv_dghm \\<FF> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n 2. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n    dghm_id \\<AA>\n 3. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "show \\<GG>: \"?\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_dghm \\<FF> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "proof(intro is_iso_functorI is_functorI, unfold inv_dghm_components)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<Z> \\<alpha>\n 2. vfsequence (inv_dghm \\<FF>)\n 3. category \\<alpha> \\<BB>\n 4. category \\<alpha> \\<AA>\n 5. vcard (inv_dghm \\<FF>) = 4\\<^sub>\\<nat>\n 6. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<AA>\n 7. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 8. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 9. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>\n 10. cf_smcf (inv_dghm \\<FF>) :\n     cat_smc\n      \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                    \\<AA>", "show \"vfsequence ?\\<GG>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vfsequence (inv_dghm \\<FF>)", "by (simp add: inv_dghm_def)"], ["proof (state)\nthis:\n  vfsequence (inv_dghm \\<FF>)\n\ngoal (9 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. vcard (inv_dghm \\<FF>) = 4\\<^sub>\\<nat>\n 5. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<AA>\n 6. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 7. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 8. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>\n 9. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<AA>", "show \"vcard ?\\<GG> = 4\\<^sub>\\<nat>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard (inv_dghm \\<FF>) = 4\\<^sub>\\<nat>", "unfolding inv_dghm_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vcard\n     [(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n      (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>,\n      \\<FF>\\<lparr>HomCod\\<rparr>,\n      \\<FF>\\<lparr>HomDom\\<rparr>]\\<^sub>\\<circ> =\n    4\\<^sub>\\<nat>", "by (simp add: nat_omega_simps)"], ["proof (state)\nthis:\n  vcard (inv_dghm \\<FF>) = 4\\<^sub>\\<nat>\n\ngoal (8 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<AA>\n 5. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 6. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 7. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>\n 8. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<AA>", "show \"cf_smcf ?\\<GG> : cat_smc \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n   \\<AA>", "by \n        (\n          metis \n            dghm_inv_semifunctor \n            iso_cf_is_iso_semifunctor \n            is_iso_semifunctor_def \n            is_iso_semifunctor_is_arr_isomorphism(1)\n        )"], ["proof (state)\nthis:\n  cf_smcf (inv_dghm \\<FF>) :\n  cat_smc\n   \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc\n \\<AA>\n\ngoal (7 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 5. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>\n 7. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<AA>", "show \"cf_smcf ?\\<GG> : cat_smc \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cf_smcf (inv_dghm \\<FF>) :\n    cat_smc\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                   \\<AA>", "by \n        (\n          metis \n            dghm_inv_semifunctor \n            iso_cf_is_iso_semifunctor \n            is_iso_semifunctor_is_arr_isomorphism(1)\n        )"], ["proof (state)\nthis:\n  cf_smcf (inv_dghm \\<FF>) :\n  cat_smc\n   \\<BB> \\<mapsto>\\<mapsto>\\<^sub>S\\<^sub>M\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> cat_smc\n                                 \\<AA>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 5. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>", "fix c"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 5. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>", "assume prems: \"c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\""], ["proof (state)\nthis:\n  c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\n\ngoal (6 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 5. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>\n 6. \\<And>c.\n       c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr> \\<Longrightarrow>\n       (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n       \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>", "from prems"], ["proof (chain)\npicking this:\n  c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>", "show \"(\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> = \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>\""], ["proof (prove)\nusing this:\n  c \\<in>\\<^sub>\\<circ> \\<BB>\\<lparr>Obj\\<rparr>\n\ngoal (1 subgoal):\n 1. (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n    \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>", "by (intro v11.v11_vconverse_app)\n        (\n           cs_concl \n            cs_intro: cat_cs_intros V_cs_intros\n            cs_simp: V_cs_simps cat_cs_simps\n         )+"], ["proof (state)\nthis:\n  (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>\\<BB>\\<lparr>CId\\<rparr>\\<lparr>c\\<rparr>\\<rparr> =\n  \\<AA>\\<lparr>CId\\<rparr>\\<lparr>(\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ>\\<lparr>c\\<rparr>\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<Z> \\<alpha>\n 2. category \\<alpha> \\<BB>\n 3. category \\<alpha> \\<AA>\n 4. \\<FF>\\<lparr>HomCod\\<rparr> = \\<BB>\n 5. \\<FF>\\<lparr>HomDom\\<rparr> = \\<AA>", "qed (simp_all add: cat_cs_simps cat_cs_intros)"], ["proof (state)\nthis:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n\ngoal (2 subgoals):\n 1. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n    dghm_id \\<AA>\n 2. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "show \"?\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> = cf_id \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n    dghm_id \\<AA>", "proof(rule cf_eqI, unfold dghm_comp_components inv_dghm_components)"], ["proof (state)\ngoal (6 subgoals):\n 1. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>\n 2. dghm_id \\<AA> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<DD>\n 3. (\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> \\<circ>\\<^sub>\\<circ>\n    \\<FF>\\<lparr>ObjMap\\<rparr> =\n    dghm_id \\<AA>\\<lparr>ObjMap\\<rparr>\n 4. (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> \\<circ>\\<^sub>\\<circ>\n    \\<FF>\\<lparr>ArrMap\\<rparr> =\n    dghm_id \\<AA>\\<lparr>ArrMap\\<rparr>\n 5. ?\\<AA> = ?\\<CC>\n 6. ?\\<BB> = ?\\<DD>", "from \\<GG> is_functor_axioms"], ["proof (chain)\npicking this:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "show \"?\\<GG> \\<circ>\\<^sub>C\\<^sub>F \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\""], ["proof (prove)\nusing this:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "by (blast intro: cat_cs_intros)"], ["proof (state)\nthis:\n  inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n\ngoal (5 subgoals):\n 1. dghm_id \\<AA> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> ?\\<DD>\n 2. (\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> \\<circ>\\<^sub>\\<circ>\n    \\<FF>\\<lparr>ObjMap\\<rparr> =\n    dghm_id \\<AA>\\<lparr>ObjMap\\<rparr>\n 3. (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> \\<circ>\\<^sub>\\<circ>\n    \\<FF>\\<lparr>ArrMap\\<rparr> =\n    dghm_id \\<AA>\\<lparr>ArrMap\\<rparr>\n 4. \\<AA> = ?\\<CC>\n 5. \\<AA> = ?\\<DD>", "qed \n    (\n      simp_all add: \n        HomDom.cat_cf_id_is_functor\n        ObjMap.v11_vcomp_vconverse \n        ArrMap.v11_vcomp_vconverse \n        dghm_id_components\n    )"], ["proof (state)\nthis:\n  inv_dghm \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M \\<FF> =\n  dghm_id \\<AA>\n\ngoal (1 subgoal):\n 1. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "show \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F ?\\<GG> = cf_id \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n    dghm_id \\<BB>", "proof(rule cf_eqI, unfold dghm_comp_components inv_dghm_components)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> :\n    ?\\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<BB>\n 2. dghm_id \\<BB> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>?\\<alpha>\\<^esub> ?\\<DD>\n 3. \\<FF>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n    (\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> =\n    dghm_id \\<BB>\\<lparr>ObjMap\\<rparr>\n 4. \\<FF>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n    (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> =\n    dghm_id \\<BB>\\<lparr>ArrMap\\<rparr>\n 5. ?\\<AA> = ?\\<CC>\n 6. ?\\<BB> = ?\\<DD>", "from \\<GG> is_functor_axioms"], ["proof (chain)\npicking this:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "show \"\\<FF> \\<circ>\\<^sub>C\\<^sub>F ?\\<GG> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\nusing this:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n  \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (blast intro: cat_cs_intros)"], ["proof (state)\nthis:\n  \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (5 subgoals):\n 1. dghm_id \\<BB> :\n    ?\\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> ?\\<DD>\n 2. \\<FF>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n    (\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> =\n    dghm_id \\<BB>\\<lparr>ObjMap\\<rparr>\n 3. \\<FF>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n    (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> =\n    dghm_id \\<BB>\\<lparr>ArrMap\\<rparr>\n 4. \\<BB> = ?\\<CC>\n 5. \\<BB> = ?\\<DD>", "show \"cf_id \\<BB> : \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<BB> :\n    \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (simp add: HomCod.cat_cf_id_is_functor)"], ["proof (state)\nthis:\n  dghm_id \\<BB> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (4 subgoals):\n 1. \\<FF>\\<lparr>ObjMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n    (\\<FF>\\<lparr>ObjMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> =\n    dghm_id \\<BB>\\<lparr>ObjMap\\<rparr>\n 2. \\<FF>\\<lparr>ArrMap\\<rparr> \\<circ>\\<^sub>\\<circ>\n    (\\<FF>\\<lparr>ArrMap\\<rparr>)\\<inverse>\\<^sub>\\<circ> =\n    dghm_id \\<BB>\\<lparr>ArrMap\\<rparr>\n 3. \\<BB> = \\<BB>\n 4. \\<BB> = \\<BB>", "qed \n    (\n      simp_all add:\n        ObjMap.v11_vcomp_vconverse' \n        ArrMap.v11_vcomp_vconverse' \n        dghm_id_components\n    )"], ["proof (state)\nthis:\n  \\<FF> \\<circ>\\<^sub>D\\<^sub>G\\<^sub>H\\<^sub>M inv_dghm \\<FF> =\n  dghm_id \\<BB>\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection\\<open>An identity functor is an isomorphism of categories\\<close>"], ["", "lemma (in category) cat_cf_id_is_iso_functor: \"cf_id \\<CC> : \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<CC> :\n    \\<CC> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule is_iso_functorI, unfold slicing_commute[symmetric])\n    (\n      simp_all add: \n        cat_cf_id_is_functor\n        semicategory.smc_smcf_id_is_iso_semifunctor\n        cat_semicategory\n    )"], ["", "subsection\\<open>Isomorphic categories\\<close>"], ["", "subsubsection\\<open>Definition and elementary properties\\<close>"], ["", "text\\<open>See Chapter I-3 in \\cite{mac_lane_categories_2010}).\\<close>"], ["", "locale iso_category = L: category \\<alpha> \\<AA> + R: category \\<alpha> \\<BB> for \\<alpha> \\<AA> \\<BB> +\n  assumes iso_cat_is_iso_functor: \"\\<exists>\\<FF>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["", "notation iso_category (infixl \"\\<approx>\\<^sub>C\\<index>\" 50)"], ["", "text\\<open>Rules.\\<close>"], ["", "lemma iso_categoryI:\n  assumes \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "unfolding iso_category_def iso_category_axioms_def"], ["proof (prove)\nusing this:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. category \\<alpha> \\<AA> \\<and>\n    category \\<alpha> \\<BB> \\<and>\n    (\\<exists>\\<FF>.\n        \\<FF> :\n        \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>)", "by auto"], ["", "lemma iso_categoryD[dest]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<exists>\\<FF>. \\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<FF>.\n       \\<FF> :\n       \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "using assms"], ["proof (prove)\nusing this:\n  \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<FF>.\n       \\<FF> :\n       \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "unfolding iso_category_def iso_category_axioms_def"], ["proof (prove)\nusing this:\n  category \\<alpha> \\<AA> \\<and>\n  category \\<alpha> \\<BB> \\<and>\n  (\\<exists>\\<FF>.\n      \\<FF> :\n      \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<FF>.\n       \\<FF> :\n       \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by simp_all"], ["", "lemma iso_categoryE[elim]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  obtains \\<FF> where \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<FF>.\n        \\<FF> :\n        \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<FF>.\n        \\<FF> :\n        \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["", "text\\<open>Isomorphic categories are isomorphic semicategories.\\<close>"], ["", "lemma (in iso_category) iso_cat_iso_semicategory: \n  \"cat_smc \\<AA> \\<approx>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> cat_smc \\<BB>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cat_smc \\<AA> \\<approx>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub>\n    cat_smc \\<BB>", "using iso_cat_is_iso_functor"], ["proof (prove)\nusing this:\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. cat_smc \\<AA> \\<approx>\\<^sub>S\\<^sub>M\\<^sub>C\\<^bsub>\\<alpha>\\<^esub>\n    cat_smc \\<BB>", "by (auto intro: slicing_intros iso_semicategoryI)"], ["", "subsubsection\\<open>A category isomorphism is an equivalence relation\\<close>"], ["", "lemma iso_category_refl: \n  assumes \"category \\<alpha> \\<AA>\" \n  shows \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "proof(rule iso_categoryI[of _ _ _ \\<open>cf_id \\<AA>\\<close>])"], ["proof (state)\ngoal (1 subgoal):\n 1. dghm_id \\<AA> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "interpret category \\<alpha> \\<AA>"], ["proof (prove)\ngoal (1 subgoal):\n 1. category \\<alpha> \\<AA>", "by (rule assms)"], ["proof (state)\ngoal (1 subgoal):\n 1. dghm_id \\<AA> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "show \"cf_id \\<AA> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dghm_id \\<AA> :\n    \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "by (simp add: cat_cf_id_is_iso_functor)"], ["proof (state)\nthis:\n  dghm_id \\<AA> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_category_sym[sym]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" \n  shows \"\\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "interpret iso_category \\<alpha> \\<AA> \\<BB>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "from iso_cat_is_iso_functor"], ["proof (chain)\npicking this:\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "obtain \\<FF> where \"\\<FF> : \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<FF>.\n        \\<FF> :\n        \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by clarsimp"], ["proof (state)\nthis:\n  \\<FF> :\n  \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n\ngoal (1 subgoal):\n 1. \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "from is_iso_functor_is_arr_isomorphism(1)[OF this]"], ["proof (chain)\npicking this:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "show ?thesis"], ["proof (prove)\nusing this:\n  inv_dghm \\<FF> :\n  \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n\ngoal (1 subgoal):\n 1. \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>", "by (auto intro: iso_categoryI)"], ["proof (state)\nthis:\n  \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<AA>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_category_trans[trans]:\n  assumes \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>\" and \"\\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\" \n  shows \"\\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret L: iso_category \\<alpha> \\<AA> \\<BB>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<BB>", "by (rule assms(1))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "interpret R: iso_category \\<alpha> \\<BB> \\<CC>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<BB> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (rule assms(2))"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "from L.iso_cat_is_iso_functor R.iso_cat_is_iso_functor"], ["proof (chain)\npicking this:\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<AA> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<BB>\n  \\<exists>\\<FF>.\n     \\<FF> :\n     \\<BB> \\<mapsto>\\<mapsto>\\<^sub>C\\<^sub>.\\<^sub>i\\<^sub>s\\<^sub>o\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal (1 subgoal):\n 1. \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>", "by (auto intro: iso_categoryI is_iso_functorI cf_comp_is_iso_functor)"], ["proof (state)\nthis:\n  \\<AA> \\<approx>\\<^sub>C\\<^bsub>\\<alpha>\\<^esub> \\<CC>\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>\\newpage\\<close>"], ["", "end"]]}