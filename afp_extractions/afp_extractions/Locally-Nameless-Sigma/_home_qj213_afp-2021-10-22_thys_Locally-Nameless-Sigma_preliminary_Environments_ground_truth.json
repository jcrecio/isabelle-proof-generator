{"file_name": "/home/qj213/afp-2021-10-22/thys/Locally-Nameless-Sigma/preliminary/Environments.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Locally-Nameless-Sigma", "problem_names": ["lemma subst_add:\n  fixes x y\n  assumes \"x \\<noteq> y\"\n  shows \"e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> = e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\"", "lemma ok_finite[simp]: \"ok e \\<Longrightarrow> finite (env_dom e)\"", "lemma ok_ok[simp]: \"ok e \\<Longrightarrow> \\<exists>x. e = (Env x)\"", "lemma env_defined:\n  fixes x :: string and e :: \"'a environment\"\n  assumes \"x \\<in> env_dom e\"\n  shows \"\\<exists>T . e!x = Some T\"", "lemma env_bigger: \"\\<lbrakk> a \\<notin> env_dom e; x \\<in> (env_dom e) \\<rbrakk> \\<Longrightarrow> x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\"", "lemma env_bigger2: \n  \"\\<lbrakk> a \\<notin> env_dom e; b \\<notin> (env_dom e); x \\<in> (env_dom e); a \\<noteq> b \\<rbrakk> \n  \\<Longrightarrow> x \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"", "lemma not_malformed: \"x \\<in> (env_dom e) \\<Longrightarrow> \\<exists>fun. e = Env fun\"", "lemma not_malformed_smaller: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"ok e\"", "lemma not_in_smaller:\n  fixes e :: \"'a environment\" and a :: string and X :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"a \\<notin> env_dom e\"", "lemma in_add:\n  fixes e :: \"'a environment\" and a :: string and X :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\"", "lemma ok_add_reverse:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"\n  shows \"(e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr>) = (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"", "lemma not_in_env_bigger: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string\n  assumes \"x \\<notin> (env_dom e)\" and \"x \\<noteq> a\"\n  shows \"x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\"", "lemma not_in_env_bigger_2: \n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and x :: string\n  assumes \"x \\<notin> (env_dom e)\" and \"x \\<noteq> a\" and \"x \\<noteq> b\"\n  shows \"x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"", "lemma not_in_env_smaller: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string\n  assumes \"x \\<notin> (env_dom (e\\<lparr>a:X\\<rparr>))\" and \"x \\<noteq> a\" and \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"x \\<notin> env_dom e\"", "lemma ok_add_2: \n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"\n  shows \"ok e \\<and> a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b\"", "lemma in_add_2:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"\n  shows \"a \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<and> b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"", "lemma ok_add_3:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and c :: string and Z :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\"\n  shows \n  \"a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> c \\<notin> env_dom e \\<and> a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c\"", "lemma in_env_smaller: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>))\" and \"x \\<noteq> a\"\n  shows \"x \\<in> env_dom e\"", "lemma in_env_smaller2:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>))\" and \"x \\<noteq> a\" and \"x \\<noteq> b\"\n  shows \"x \\<in> env_dom e\"", "lemma get_env_bigger:\n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>))\" and \"x \\<noteq> a\"\n  shows \"e!x = e\\<lparr>a:X\\<rparr>!x\"", "lemma get_env_bigger2: \n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>))\" and \"x \\<noteq> a\" and \"x \\<noteq> b\"\n  shows \"e!x = e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>!x\"", "lemma get_env_smaller: \"\\<lbrakk> x \\<in> env_dom e; a \\<notin> env_dom e \\<rbrakk> \\<Longrightarrow> e\\<lparr>a:X\\<rparr>!x = e!x\"", "lemma get_env_smaller2: \n  \"\\<lbrakk> x \\<in> env_dom e; a \\<notin> env_dom e; b \\<notin> env_dom e; a \\<noteq> b \\<rbrakk> \n  \\<Longrightarrow> e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>!x = e!x\"", "lemma add_get_eq: \"\\<lbrakk> xa \\<notin> env_dom e; ok e; the e\\<lparr>xa:U\\<rparr>!xa = T \\<rbrakk> \\<Longrightarrow> U = T\"", "lemma add_get: \"\\<lbrakk> xa \\<notin> env_dom e; ok e \\<rbrakk> \\<Longrightarrow> the e\\<lparr>xa:U\\<rparr>!xa = U\"", "lemma add_get2_1: \n  fixes e :: \"'a environment\" and x :: string and A :: 'a and y :: string and B :: 'a\n  assumes \"ok (e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>)\"\n  shows \"the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!x = A\"", "lemma add_get2_2:\n  fixes e :: \"'a environment\" and x :: string and A :: 'a and y :: string and B :: 'a\n  assumes \"ok (e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>)\"\n  shows \"the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!y = B\"", "lemma ok_add_ok: \"\\<lbrakk> ok e; x \\<notin> env_dom e \\<rbrakk> \\<Longrightarrow> ok (e\\<lparr>x:X\\<rparr>)\"", "lemma env_add_dom: \n  fixes e :: \"'a environment\" and x :: string\n  assumes \"ok e\" and \"x \\<notin> env_dom e\" \n  shows \"env_dom (e\\<lparr>x:X\\<rparr>) = env_dom e \\<union> {x}\"", "lemma env_add_dom_2:\n  fixes e :: \"'a environment\" and x :: string and y :: string\n  assumes \"ok e\" and \"x \\<notin> env_dom e\" and \"y \\<notin> env_dom e\" and \"x \\<noteq> y\"\n  shows \"env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) = env_dom e \\<union> {x,y}\"", "lemma env_app_dom:\n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\"\n  assumes \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\"\n  shows \"env_dom (e1+e2) = env_dom e1 \\<union> env_dom e2\"", "lemma env_app_same[simp]: \n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\" and x :: string\n  assumes \n  \"ok e1\" and \"x \\<in> env_dom e1\" and \n  \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\"\n  shows \"the (e1+e2!x) = the e1!x\"", "lemma env_app_ok[simp]: \n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\"\n  assumes \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\"\n  shows \"ok (e1+e2)\"", "lemma env_app_add[simp]:\n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\" and x :: string\n  assumes \n  \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\" and \n  \"x \\<notin> env_dom e1\" and \"x \\<notin> env_dom e2\"\n  shows \"(e1+e2)\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2\"", "lemma env_app_add2[simp]:\n  fixes \n  e1 :: \"'a environment\" and e2 :: \"'a environment\" and \n  x :: string and y :: string\n  assumes \n  \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\" and\n  \"x \\<notin> env_dom e1\" and \"x \\<notin> env_dom e2\" and \"y \\<notin> env_dom e1\" and\n  \"y \\<notin> env_dom e2\" and \"x \\<noteq> y\"\n  shows \"(e1+e2)\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> = e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2\""], "translations": [["", "lemma subst_add:\n  fixes x y\n  assumes \"x \\<noteq> y\"\n  shows \"e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> = e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n    e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n       e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\n 2. e = Malformed \\<Longrightarrow>\n    e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n    e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n       e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\n 2. e = Malformed \\<Longrightarrow>\n    e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n    e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Malformed\n\ngoal (1 subgoal):\n 1. e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n    e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "by simp"], ["proof (state)\nthis:\n  e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n  e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n       e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n       e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n       e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "with assms"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  e = Env f\n\ngoal (1 subgoal):\n 1. e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n    e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "proof (cases \"x \\<in> dom f\", simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; e = Env f; x \\<notin> dom f\\<rbrakk>\n    \\<Longrightarrow> e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n                      e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "case False"], ["proof (state)\nthis:\n  x \\<notin> dom f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; e = Env f; x \\<notin> dom f\\<rbrakk>\n    \\<Longrightarrow> e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n                      e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "with assms Env"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  e = Env f\n  x \\<notin> dom f", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  e = Env f\n  x \\<notin> dom f\n\ngoal (1 subgoal):\n 1. e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n    e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>", "proof (cases \"y \\<in> dom f\", simp_all, intro ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>y \\<notin> dom f; x \\<noteq> y; e = Env f; x \\<notin> dom f;\n        x \\<noteq> y; e = Env f; x \\<notin> dom f\\<rbrakk>\n       \\<Longrightarrow> (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n                         (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "fix xa :: string"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>y \\<notin> dom f; x \\<noteq> y; e = Env f; x \\<notin> dom f;\n        x \\<noteq> y; e = Env f; x \\<notin> dom f\\<rbrakk>\n       \\<Longrightarrow> (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n                         (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "case False"], ["proof (state)\nthis:\n  y \\<notin> dom f\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>y \\<notin> dom f; x \\<noteq> y; e = Env f; x \\<notin> dom f;\n        x \\<noteq> y; e = Env f; x \\<notin> dom f\\<rbrakk>\n       \\<Longrightarrow> (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n                         (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "with assms"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  y \\<notin> dom f", "show \"(f(x \\<mapsto> a,y \\<mapsto> b)) xa = (f(y \\<mapsto> b,x \\<mapsto> a)) xa\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  y \\<notin> dom f\n\ngoal (1 subgoal):\n 1. (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n    (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "proof (cases \"xa = x\", simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; y \\<notin> dom f; xa \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n                      (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "case False"], ["proof (state)\nthis:\n  xa \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; y \\<notin> dom f; xa \\<noteq> x\\<rbrakk>\n    \\<Longrightarrow> (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n                      (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "with assms"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  xa \\<noteq> x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  xa \\<noteq> x\n\ngoal (1 subgoal):\n 1. (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n    (f(y \\<mapsto> b, x \\<mapsto> a)) xa", "by (cases \"xa = y\", simp_all)"], ["proof (state)\nthis:\n  (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n  (f(y \\<mapsto> b, x \\<mapsto> a)) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f(x \\<mapsto> a, y \\<mapsto> b)) xa =\n  (f(y \\<mapsto> b, x \\<mapsto> a)) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n  e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e\\<lparr>x:a\\<rparr>\\<lparr>y:b\\<rparr> =\n  e\\<lparr>y:b\\<rparr>\\<lparr>x:a\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "(* A well-formed environment is finite *)"], ["", "lemma ok_finite[simp]: \"ok e \\<Longrightarrow> finite (env_dom e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ok e \\<Longrightarrow> finite (env_dom e)", "by (cases e, simp+)"], ["", "(* A well-formed environment is not malformed *)"], ["", "lemma ok_ok[simp]: \"ok e \\<Longrightarrow> \\<exists>x. e = (Env x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ok e \\<Longrightarrow> \\<exists>x. e = Env x", "by (cases e, simp+)"], ["", "(* If something is in the set of variable names, then it has a value assigned to it *)"], ["", "lemma env_defined:\n  fixes x :: string and e :: \"'a environment\"\n  assumes \"x \\<in> env_dom e\"\n  shows \"\\<exists>T . e!x = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>T. e!x = Some T", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> \\<exists>T. e!x = Some T\n 2. e = Malformed \\<Longrightarrow> \\<exists>T. e!x = Some T", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> \\<exists>T. e!x = Some T\n 2. e = Malformed \\<Longrightarrow> \\<exists>T. e!x = Some T", "with assms"], ["proof (chain)\npicking this:\n  x \\<in> env_dom e\n  e = Malformed", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> env_dom e\n  e = Malformed\n\ngoal (1 subgoal):\n 1. \\<exists>T. e!x = Some T", "by simp"], ["proof (state)\nthis:\n  \\<exists>T. e!x = Some T\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> \\<exists>T. e!x = Some T", "(* contradiction *)"], ["proof (state)\nthis:\n  \\<exists>T. e!x = Some T\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> \\<exists>T. e!x = Some T", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> \\<exists>T. e!x = Some T", "case Env"], ["proof (state)\nthis:\n  e = Env x1_\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> \\<exists>T. e!x = Some T", "with assms"], ["proof (chain)\npicking this:\n  x \\<in> env_dom e\n  e = Env x1_", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> env_dom e\n  e = Env x1_\n\ngoal (1 subgoal):\n 1. \\<exists>T. e!x = Some T", "by (simp, force)"], ["proof (state)\nthis:\n  \\<exists>T. e!x = Some T\n\ngoal:\nNo subgoals!", "qed"], ["", "(* adding of new elements does not remove elements *)"], ["", "lemma env_bigger: \"\\<lbrakk> a \\<notin> env_dom e; x \\<in> (env_dom e) \\<rbrakk> \\<Longrightarrow> x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> env_dom e; x \\<in> env_dom e\\<rbrakk>\n    \\<Longrightarrow> x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "by (cases e, simp_all)"], ["", "(* Added for convenience *)"], ["", "lemma env_bigger2: \n  \"\\<lbrakk> a \\<notin> env_dom e; b \\<notin> (env_dom e); x \\<in> (env_dom e); a \\<noteq> b \\<rbrakk> \n  \\<Longrightarrow> x \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> env_dom e; b \\<notin> env_dom e; x \\<in> env_dom e;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> x \\<in> env_dom\n                               (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "by (cases e, simp_all)"], ["", "(* If there is an entry, then the environment is sane. *)"], ["", "lemma not_malformed: \"x \\<in> (env_dom e) \\<Longrightarrow> \\<exists>fun. e = Env fun\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> env_dom e \\<Longrightarrow> \\<exists>fun. e = Env fun", "by (cases e, simp_all)"], ["", "(* Smaller environments are well formed. *)"], ["", "lemma not_malformed_smaller: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"ok e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ok e", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> ok e\n 2. e = Malformed \\<Longrightarrow> ok e", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> ok e\n 2. e = Malformed \\<Longrightarrow> ok e", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Malformed", "show ?thesis"], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Malformed\n\ngoal (1 subgoal):\n 1. ok e", "by simp"], ["proof (state)\nthis:\n  ok e\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> ok e", "(* contradiction *)"], ["proof (state)\nthis:\n  ok e\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> ok e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> ok e", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> ok e", "with ok_finite[OF assms] assms"], ["proof (chain)\npicking this:\n  finite (env_dom (e\\<lparr>a:X\\<rparr>))\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (env_dom (e\\<lparr>a:X\\<rparr>))\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f\n\ngoal (1 subgoal):\n 1. ok e", "by (cases \"a \\<notin> dom f\", simp_all)"], ["proof (state)\nthis:\n  ok e\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Elements not in a bigger environment are not in a smaller one either *)"], ["", "lemma not_in_smaller:\n  fixes e :: \"'a environment\" and a :: string and X :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"a \\<notin> env_dom e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> a \\<notin> env_dom e\n 2. e = Malformed \\<Longrightarrow> a \\<notin> env_dom e", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> a \\<notin> env_dom e\n 2. e = Malformed \\<Longrightarrow> a \\<notin> env_dom e", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Malformed\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e", "by simp"], ["proof (state)\nthis:\n  a \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> a \\<notin> env_dom e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> a \\<notin> env_dom e", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> a \\<notin> env_dom e", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e", "by (cases \"a \\<notin> dom f\", simp_all)"], ["proof (state)\nthis:\n  a \\<notin> env_dom e\n\ngoal:\nNo subgoals!", "qed"], ["", "(* A variable that got added is in the environment *)"], ["", "lemma in_add:\n  fixes e :: \"'a environment\" and a :: string and X :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n 2. e = Malformed \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n 2. e = Malformed \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Malformed", "show ?thesis"], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Malformed\n\ngoal (1 subgoal):\n 1. a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "(* contradiction *)"], ["proof (state)\nthis:\n  a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow> a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f\n\ngoal (1 subgoal):\n 1. a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)", "by (cases \"a \\<notin> dom f\", simp_all)"], ["proof (state)\nthis:\n  a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Similar to subst_add, but using a more convenient premise *)"], ["", "lemma ok_add_reverse:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"\n  shows \"(e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr>) = (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n    e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n       e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\n 2. e = Malformed \\<Longrightarrow>\n    e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n    e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n       e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\n 2. e = Malformed \\<Longrightarrow>\n    e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n    e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  e = Malformed", "show ?thesis"], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  e = Malformed\n\ngoal (1 subgoal):\n 1. e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n    e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "by simp"], ["proof (state)\nthis:\n  e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n       e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "(* contradiction *)"], ["proof (state)\nthis:\n  e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n       e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n       e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n       e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "with \n    not_in_smaller[OF \\<open>ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\\<close>] in_add[OF assms]\n    not_in_smaller[OF not_malformed_smaller[OF assms]] \n    in_add[OF not_malformed_smaller[OF assms]]"], ["proof (chain)\npicking this:\n  b \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n  b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  a \\<notin> env_dom e\n  a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n  b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  a \\<notin> env_dom e\n  a \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  e = Env f\n\ngoal (1 subgoal):\n 1. e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n    e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "by (simp, intro conjI impI, elim conjE, auto simp: fun_upd_twist)"], ["proof (state)\nthis:\n  e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_in_env_bigger: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string\n  assumes \"x \\<notin> (env_dom e)\" and \"x \\<noteq> a\"\n  shows \"x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n 2. e = Malformed \\<Longrightarrow>\n    x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n 2. e = Malformed \\<Longrightarrow>\n    x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Malformed\n\ngoal (1 subgoal):\n 1. x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "with assms"], ["proof (chain)\npicking this:\n  x \\<notin> env_dom e\n  x \\<noteq> a\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> env_dom e\n  x \\<noteq> a\n  e = Env f\n\ngoal (1 subgoal):\n 1. x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)", "by (cases \"a \\<notin> dom f\", simp_all)"], ["proof (state)\nthis:\n  x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_in_env_bigger_2: \n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and x :: string\n  assumes \"x \\<notin> (env_dom e)\" and \"x \\<noteq> a\" and \"x \\<noteq> b\"\n  shows \"x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n 2. e = Malformed \\<Longrightarrow>\n    x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n 2. e = Malformed \\<Longrightarrow>\n    x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  e = Malformed\n\ngoal (1 subgoal):\n 1. x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       e = Env x1 \\<Longrightarrow>\n       x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "with assms"], ["proof (chain)\npicking this:\n  x \\<notin> env_dom e\n  x \\<noteq> a\n  x \\<noteq> b\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> env_dom e\n  x \\<noteq> a\n  x \\<noteq> b\n  e = Env f\n\ngoal (1 subgoal):\n 1. x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "by (cases \"a \\<notin> dom f\", simp_all)"], ["proof (state)\nthis:\n  x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma not_in_env_smaller: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string\n  assumes \"x \\<notin> (env_dom (e\\<lparr>a:X\\<rparr>))\" and \"x \\<noteq> a\" and \"ok (e\\<lparr>a:X\\<rparr>)\"\n  shows \"x \\<notin> env_dom e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> env_dom e", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> x \\<notin> env_dom e\n 2. e = Malformed \\<Longrightarrow> x \\<notin> env_dom e", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> x \\<notin> env_dom e\n 2. e = Malformed \\<Longrightarrow> x \\<notin> env_dom e", "with assms(3)"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Malformed", "show ?thesis"], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Malformed\n\ngoal (1 subgoal):\n 1. x \\<notin> env_dom e", "by simp"], ["proof (state)\nthis:\n  x \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> x \\<notin> env_dom e", "(* contradiction *)"], ["proof (state)\nthis:\n  x \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> x \\<notin> env_dom e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> x \\<notin> env_dom e", "case (Env f)"], ["proof (state)\nthis:\n  e = Env f\n\ngoal (1 subgoal):\n 1. \\<And>x1. e = Env x1 \\<Longrightarrow> x \\<notin> env_dom e", "with assms"], ["proof (chain)\npicking this:\n  x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  ok (e\\<lparr>a:X\\<rparr>)\n  e = Env f\n\ngoal (1 subgoal):\n 1. x \\<notin> env_dom e", "by (cases \"a \\<notin> dom f\", simp_all)"], ["proof (state)\nthis:\n  x \\<notin> env_dom e\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Conditions derivable from the well-formedness *)"], ["", "lemma ok_add_2: \n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"\n  shows \"ok e \\<and> a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "assume \"ok (e\\<lparr>b:X\\<rparr>\\<lparr>b:Y\\<rparr>)\""], ["proof (state)\nthis:\n  ok (e\\<lparr>b:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "from not_in_smaller[OF this] in_add[OF not_malformed_smaller[OF this]]"], ["proof (chain)\npicking this:\n  b \\<notin> env_dom (e\\<lparr>b:X\\<rparr>)\n  b \\<in> env_dom (e\\<lparr>b:X\\<rparr>)", "have False"], ["proof (prove)\nusing this:\n  b \\<notin> env_dom (e\\<lparr>b:X\\<rparr>)\n  b \\<in> env_dom (e\\<lparr>b:X\\<rparr>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "}"], ["proof (state)\nthis:\n  ok (e\\<lparr>b:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  ok (e\\<lparr>b:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<Longrightarrow> False", "have \"a \\<noteq> b\""], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  ok (e\\<lparr>b:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. a \\<noteq> b", "by auto"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "moreover"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "from assms ok_add_reverse[OF assms]"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>", "have \"ok (e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr>)\""], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n  e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\n\ngoal (1 subgoal):\n 1. ok (e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  ok (e\\<lparr>b:Y\\<rparr>\\<lparr>a:X\\<rparr>)\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "note not_in_smaller[OF not_malformed_smaller[OF this]]"], ["proof (state)\nthis:\n  b \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "ultimately"], ["proof (chain)\npicking this:\n  a \\<noteq> b\n  b \\<notin> env_dom e", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  b \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "using \n      not_malformed_smaller[OF not_malformed_smaller[OF assms]]\n      not_in_smaller[OF not_malformed_smaller[OF assms]]"], ["proof (prove)\nusing this:\n  a \\<noteq> b\n  b \\<notin> env_dom e\n  ok e\n  a \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. ok e \\<and>\n    a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "by simp"], ["proof (state)\nthis:\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b\n\ngoal:\nNo subgoals!", "qed"], ["", "(* A variable that got added is in the environment *)"], ["", "lemma in_add_2:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\"\n  shows \"a \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<and> b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<and>\n    b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<and>\n    b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "from ok_add_2[OF assms]"], ["proof (chain)\npicking this:\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b", "show ?thesis"], ["proof (prove)\nusing this:\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<and>\n    b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)", "by (elim conjE, intro conjI, (cases e, simp_all)+)"], ["proof (state)\nthis:\n  a \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>) \\<and>\n  b \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Convenience version *)"], ["", "lemma ok_add_3:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and c :: string and Z :: 'a\n  assumes \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\"\n  shows \n  \"a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> c \\<notin> env_dom e \\<and> a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "assume \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\""], ["proof (state)\nthis:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "from not_in_smaller[OF this] in_add[OF not_malformed_smaller[OF this]]"], ["proof (chain)\npicking this:\n  c \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>)\n  c \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>)", "have False"], ["proof (prove)\nusing this:\n  c \\<notin> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>)\n  c \\<in> env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "}"], ["proof (state)\nthis:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>\\<lparr>c:Z\\<rparr>) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "with assms"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>\\<lparr>c:Z\\<rparr>) \\<Longrightarrow>\n  False", "have \"b \\<noteq> c\""], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Y\\<rparr>\\<lparr>c:Z\\<rparr>) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. b \\<noteq> c", "by auto"], ["proof (state)\nthis:\n  b \\<noteq> c\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "moreover"], ["proof (state)\nthis:\n  b \\<noteq> c\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "from assms ok_add_reverse[OF assms]"], ["proof (chain)\npicking this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\n  e\\<lparr>a:X\\<rparr>\\<lparr>c:Z\\<rparr>\\<lparr>b:Y\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>", "have \"ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Z\\<rparr>\\<lparr>b:Y\\<rparr>)\""], ["proof (prove)\nusing this:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>)\n  e\\<lparr>a:X\\<rparr>\\<lparr>c:Z\\<rparr>\\<lparr>b:Y\\<rparr> =\n  e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>\\<lparr>c:Z\\<rparr>\n\ngoal (1 subgoal):\n 1. ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Z\\<rparr>\\<lparr>b:Y\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  ok (e\\<lparr>a:X\\<rparr>\\<lparr>c:Z\\<rparr>\\<lparr>b:Y\\<rparr>)\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "note ok_add_2[OF not_malformed_smaller[OF this]]"], ["proof (state)\nthis:\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> c \\<notin> env_dom e \\<and> a \\<noteq> c\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "ultimately"], ["proof (chain)\npicking this:\n  b \\<noteq> c\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> c \\<notin> env_dom e \\<and> a \\<noteq> c", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<noteq> c\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> c \\<notin> env_dom e \\<and> a \\<noteq> c\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "using ok_add_2[OF not_malformed_smaller[OF assms]]"], ["proof (prove)\nusing this:\n  b \\<noteq> c\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> c \\<notin> env_dom e \\<and> a \\<noteq> c\n  ok e \\<and>\n  a \\<notin> env_dom e \\<and> b \\<notin> env_dom e \\<and> a \\<noteq> b\n\ngoal (1 subgoal):\n 1. a \\<notin> env_dom e \\<and>\n    b \\<notin> env_dom e \\<and>\n    c \\<notin> env_dom e \\<and>\n    a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c", "by simp"], ["proof (state)\nthis:\n  a \\<notin> env_dom e \\<and>\n  b \\<notin> env_dom e \\<and>\n  c \\<notin> env_dom e \\<and>\n  a \\<noteq> b \\<and> b \\<noteq> c \\<and> a \\<noteq> c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_env_smaller: \n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>))\" and \"x \\<noteq> a\"\n  shows \"x \\<in> env_dom e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", "from not_malformed[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>fun. e\\<lparr>a:X\\<rparr> = Env fun", "obtain f where f: \"e\\<lparr>a:X\\<rparr> = Env f\""], ["proof (prove)\nusing this:\n  \\<exists>fun. e\\<lparr>a:X\\<rparr> = Env fun\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        e\\<lparr>a:X\\<rparr> = Env f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e\\<lparr>a:X\\<rparr> = Env f\n\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", "with assms"], ["proof (chain)\npicking this:\n  x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  e\\<lparr>a:X\\<rparr> = Env f", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  e\\<lparr>a:X\\<rparr> = Env f\n\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n        e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> env_dom e\n 2. \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n     e\\<lparr>a:X\\<rparr> = Env f; e = Malformed\\<rbrakk>\n    \\<Longrightarrow> x \\<in> env_dom e", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n        e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> env_dom e\n 2. \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n     e\\<lparr>a:X\\<rparr> = Env f; e = Malformed\\<rbrakk>\n    \\<Longrightarrow> x \\<in> env_dom e", "with \\<open>e\\<lparr>a:X\\<rparr> = Env f\\<close>"], ["proof (chain)\npicking this:\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Malformed", "have False"], ["proof (prove)\nusing this:\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Malformed\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n        e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> env_dom e\n 2. \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n     e\\<lparr>a:X\\<rparr> = Env f; e = Malformed\\<rbrakk>\n    \\<Longrightarrow> x \\<in> env_dom e", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", ".."], ["proof (state)\nthis:\n  x \\<in> env_dom e\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n        e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> env_dom e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n        e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> env_dom e", "case (Env f')"], ["proof (state)\nthis:\n  e = Env f'\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>x \\<in> env_dom (e\\<lparr>a:X\\<rparr>); x \\<noteq> a;\n        e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> x \\<in> env_dom e", "with assms f"], ["proof (chain)\npicking this:\n  x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Env f'", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Env f'\n\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", "by (simp, cases \"a \\<in> dom f'\", simp_all, force)"], ["proof (state)\nthis:\n  x \\<in> env_dom e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> env_dom e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_env_smaller2:\n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>))\" and \"x \\<noteq> a\" and \"x \\<noteq> b\"\n  shows \"x \\<in> env_dom e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> env_dom e", "by (simp add: in_env_smaller[OF in_env_smaller[OF assms(1) assms(3)] assms(2)])"], ["", "lemma get_env_bigger:\n  fixes e :: \"'a environment\" and a :: string and X :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>))\" and \"x \\<noteq> a\"\n  shows \"e!x = e\\<lparr>a:X\\<rparr>!x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>!x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>!x", "from not_malformed[OF assms(1)]"], ["proof (chain)\npicking this:\n  \\<exists>fun. e\\<lparr>a:X\\<rparr> = Env fun", "obtain f where f: \"e\\<lparr>a:X\\<rparr> = Env f\""], ["proof (prove)\nusing this:\n  \\<exists>fun. e\\<lparr>a:X\\<rparr> = Env fun\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        e\\<lparr>a:X\\<rparr> = Env f \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e\\<lparr>a:X\\<rparr> = Env f\n\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>!x", "thus ?thesis"], ["proof (prove)\nusing this:\n  e\\<lparr>a:X\\<rparr> = Env f\n\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>!x", "proof (cases e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x\n 2. \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Malformed\\<rbrakk>\n    \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x", "case Malformed"], ["proof (state)\nthis:\n  e = Malformed\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x\n 2. \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Malformed\\<rbrakk>\n    \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x", "with \\<open>e\\<lparr>a:X\\<rparr> = Env f\\<close>"], ["proof (chain)\npicking this:\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Malformed", "show ?thesis"], ["proof (prove)\nusing this:\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Malformed\n\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>!x", "by simp"], ["proof (state)\nthis:\n  e!x = e\\<lparr>a:X\\<rparr>!x\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x", "(* contradiction *)"], ["proof (state)\nthis:\n  e!x = e\\<lparr>a:X\\<rparr>!x\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x", "case (Env f')"], ["proof (state)\nthis:\n  e = Env f'\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>e\\<lparr>a:X\\<rparr> = Env f; e = Env x1\\<rbrakk>\n       \\<Longrightarrow> e!x = e\\<lparr>a:X\\<rparr>!x", "with assms f"], ["proof (chain)\npicking this:\n  x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Env f'", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> env_dom (e\\<lparr>a:X\\<rparr>)\n  x \\<noteq> a\n  e\\<lparr>a:X\\<rparr> = Env f\n  e = Env f'\n\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>!x", "by (cases \"a \\<notin> dom f'\", auto)"], ["proof (state)\nthis:\n  e!x = e\\<lparr>a:X\\<rparr>!x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e!x = e\\<lparr>a:X\\<rparr>!x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma get_env_bigger2: \n  fixes \n  e :: \"'a environment\" and a :: string and X :: 'a and \n  b :: string and Y :: 'a and x :: string \n  assumes \"x \\<in> (env_dom (e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>))\" and \"x \\<noteq> a\" and \"x \\<noteq> b\"\n  shows \"e!x = e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>!x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e!x = e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>!x", "by (simp add: get_env_bigger[OF assms(1) assms(3)]\n                get_env_bigger[OF in_env_smaller[OF assms(1) assms(3)] assms(2)])"], ["", "lemma get_env_smaller: \"\\<lbrakk> x \\<in> env_dom e; a \\<notin> env_dom e \\<rbrakk> \\<Longrightarrow> e\\<lparr>a:X\\<rparr>!x = e!x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> env_dom e; a \\<notin> env_dom e\\<rbrakk>\n    \\<Longrightarrow> e\\<lparr>a:X\\<rparr>!x = e!x", "by (cases e, auto)"], ["", "lemma get_env_smaller2: \n  \"\\<lbrakk> x \\<in> env_dom e; a \\<notin> env_dom e; b \\<notin> env_dom e; a \\<noteq> b \\<rbrakk> \n  \\<Longrightarrow> e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>!x = e!x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> env_dom e; a \\<notin> env_dom e; b \\<notin> env_dom e;\n     a \\<noteq> b\\<rbrakk>\n    \\<Longrightarrow> e\\<lparr>a:X\\<rparr>\\<lparr>b:Y\\<rparr>!x = e!x", "by (cases e, auto)"], ["", "lemma add_get_eq: \"\\<lbrakk> xa \\<notin> env_dom e; ok e; the e\\<lparr>xa:U\\<rparr>!xa = T \\<rbrakk> \\<Longrightarrow> U = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<notin> env_dom e; ok e;\n     the e\\<lparr>xa:U\\<rparr>!xa = T\\<rbrakk>\n    \\<Longrightarrow> U = T", "by (cases e, auto)"], ["", "lemma add_get: \"\\<lbrakk> xa \\<notin> env_dom e; ok e \\<rbrakk> \\<Longrightarrow> the e\\<lparr>xa:U\\<rparr>!xa = U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<notin> env_dom e; ok e\\<rbrakk>\n    \\<Longrightarrow> the e\\<lparr>xa:U\\<rparr>!xa = U", "by (cases e, auto)"], ["", "lemma add_get2_1: \n  fixes e :: \"'a environment\" and x :: string and A :: 'a and y :: string and B :: 'a\n  assumes \"ok (e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>)\"\n  shows \"the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!x = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!x = A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!x = A", "from ok_add_2[OF assms]"], ["proof (chain)\npicking this:\n  ok e \\<and>\n  x \\<notin> env_dom e \\<and> y \\<notin> env_dom e \\<and> x \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  ok e \\<and>\n  x \\<notin> env_dom e \\<and> y \\<notin> env_dom e \\<and> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!x = A", "by (cases e, elim conjE, simp_all)"], ["proof (state)\nthis:\n  the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!x = A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma add_get2_2:\n  fixes e :: \"'a environment\" and x :: string and A :: 'a and y :: string and B :: 'a\n  assumes \"ok (e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>)\"\n  shows \"the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!y = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!y = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!y = B", "from ok_add_2[OF assms]"], ["proof (chain)\npicking this:\n  ok e \\<and>\n  x \\<notin> env_dom e \\<and> y \\<notin> env_dom e \\<and> x \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  ok e \\<and>\n  x \\<notin> env_dom e \\<and> y \\<notin> env_dom e \\<and> x \\<noteq> y\n\ngoal (1 subgoal):\n 1. the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!y = B", "by (cases e, elim conjE, simp_all)"], ["proof (state)\nthis:\n  the e\\<lparr>x:A\\<rparr>\\<lparr>y:B\\<rparr>!y = B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ok_add_ok: \"\\<lbrakk> ok e; x \\<notin> env_dom e \\<rbrakk> \\<Longrightarrow> ok (e\\<lparr>x:X\\<rparr>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ok e; x \\<notin> env_dom e\\<rbrakk>\n    \\<Longrightarrow> ok (e\\<lparr>x:X\\<rparr>)", "by (cases e, auto)"], ["", "lemma env_add_dom: \n  fixes e :: \"'a environment\" and x :: string\n  assumes \"ok e\" and \"x \\<notin> env_dom e\" \n  shows \"env_dom (e\\<lparr>x:X\\<rparr>) = env_dom e \\<union> {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_dom (e\\<lparr>x:X\\<rparr>) = env_dom e \\<union> {x}", "proof (auto simp: in_add[OF ok_add_ok[OF assms]], rule ccontr)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>);\n        xa \\<notin> env_dom e; xa \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>);\n        xa \\<notin> env_dom e; xa \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "assume \"y \\<in> env_dom (e\\<lparr>x:X\\<rparr>)\" and \"y \\<notin> env_dom e\" and \"y \\<noteq> x\""], ["proof (state)\nthis:\n  y \\<in> env_dom (e\\<lparr>x:X\\<rparr>)\n  y \\<notin> env_dom e\n  y \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>);\n        xa \\<notin> env_dom e; xa \\<noteq> x\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "from in_env_smaller[OF this(1) this(3)] this(2)"], ["proof (chain)\npicking this:\n  y \\<in> env_dom e\n  y \\<notin> env_dom e", "show False"], ["proof (prove)\nusing this:\n  y \\<in> env_dom e\n  y \\<notin> env_dom e\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "assume \"y \\<in> env_dom e\""], ["proof (state)\nthis:\n  y \\<in> env_dom e\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> env_dom e \\<Longrightarrow>\n       xa \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "from env_bigger[OF not_in_smaller[OF ok_add_ok[OF assms]] this]"], ["proof (chain)\npicking this:\n  y \\<in> env_dom (e\\<lparr>x:?X\\<rparr>)", "show \"y \\<in> env_dom (e\\<lparr>x:X\\<rparr>)\""], ["proof (prove)\nusing this:\n  y \\<in> env_dom (e\\<lparr>x:?X\\<rparr>)\n\ngoal (1 subgoal):\n 1. y \\<in> env_dom (e\\<lparr>x:X\\<rparr>)", "by assumption"], ["proof (state)\nthis:\n  y \\<in> env_dom (e\\<lparr>x:X\\<rparr>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma env_add_dom_2:\n  fixes e :: \"'a environment\" and x :: string and y :: string\n  assumes \"ok e\" and \"x \\<notin> env_dom e\" and \"y \\<notin> env_dom e\" and \"x \\<noteq> y\"\n  shows \"env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) = env_dom e \\<union> {x,y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) =\n    env_dom e \\<union> {x, y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) =\n    env_dom e \\<union> {x, y}", "from env_add_dom[OF assms(1-2)] assms(3-4)"], ["proof (chain)\npicking this:\n  env_dom (e\\<lparr>x:?X\\<rparr>) = env_dom e \\<union> {x}\n  y \\<notin> env_dom e\n  x \\<noteq> y", "have \"y \\<notin> env_dom (e\\<lparr>x:X\\<rparr>)\""], ["proof (prove)\nusing this:\n  env_dom (e\\<lparr>x:?X\\<rparr>) = env_dom e \\<union> {x}\n  y \\<notin> env_dom e\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<notin> env_dom (e\\<lparr>x:X\\<rparr>)", "by simp"], ["proof (state)\nthis:\n  y \\<notin> env_dom (e\\<lparr>x:X\\<rparr>)\n\ngoal (1 subgoal):\n 1. env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) =\n    env_dom e \\<union> {x, y}", "from \n    env_add_dom[OF assms(1-2)] \n    env_add_dom[OF ok_add_ok[OF assms(1-2)] this]"], ["proof (chain)\npicking this:\n  env_dom (e\\<lparr>x:?X\\<rparr>) = env_dom e \\<union> {x}\n  env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:?X\\<rparr>) =\n  env_dom (e\\<lparr>x:X\\<rparr>) \\<union> {y}", "show ?thesis"], ["proof (prove)\nusing this:\n  env_dom (e\\<lparr>x:?X\\<rparr>) = env_dom e \\<union> {x}\n  env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:?X\\<rparr>) =\n  env_dom (e\\<lparr>x:X\\<rparr>) \\<union> {y}\n\ngoal (1 subgoal):\n 1. env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) =\n    env_dom e \\<union> {x, y}", "by auto"], ["proof (state)\nthis:\n  env_dom (e\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>) =\n  env_dom e \\<union> {x, y}\n\ngoal:\nNo subgoals!", "qed"], ["", "fun\n   env_app :: \"('a environment) \\<Rightarrow>  ('a environment) \\<Rightarrow> ('a environment)\" (\"_+_\")\nwhere\n  \"env_app (Env a) (Env b) = \n  (if (ok (Env a) \\<and> ok (Env b) \\<and> env_dom (Env b) \\<inter> env_dom (Env a) = {}) \n   then  Env (a ++ b) else Malformed )\""], ["", "lemma env_app_dom:\n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\"\n  assumes \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\"\n  shows \"env_dom (e1+e2) = env_dom e1 \\<union> env_dom e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_dom e1+e2 = env_dom e1 \\<union> env_dom e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. env_dom e1+e2 = env_dom e1 \\<union> env_dom e2", "from ok_ok[OF \\<open>ok e1\\<close>] ok_ok[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x", "obtain f1 f2 where \"e1 = Env f1\" and \"e2 = Env f2\""], ["proof (prove)\nusing this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x\n\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<lbrakk>e1 = Env f1; e2 = Env f2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. env_dom e1+e2 = env_dom e1 \\<union> env_dom e2", "with assms(2) ok_finite[OF \\<open>ok e1\\<close>] ok_finite[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  env_dom e1 \\<inter> env_dom e2 = {}\n  finite (env_dom e1)\n  finite (env_dom e2)\n  e1 = Env f1\n  e2 = Env f2", "show ?thesis"], ["proof (prove)\nusing this:\n  env_dom e1 \\<inter> env_dom e2 = {}\n  finite (env_dom e1)\n  finite (env_dom e2)\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. env_dom e1+e2 = env_dom e1 \\<union> env_dom e2", "by auto"], ["proof (state)\nthis:\n  env_dom e1+e2 = env_dom e1 \\<union> env_dom e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma env_app_same[simp]: \n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\" and x :: string\n  assumes \n  \"ok e1\" and \"x \\<in> env_dom e1\" and \n  \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\"\n  shows \"the (e1+e2!x) = the e1!x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the e1+e2!x = the e1!x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. the e1+e2!x = the e1!x", "from ok_ok[OF \\<open>ok e1\\<close>] ok_ok[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x", "obtain f1 f2 where \"e1 = Env f1\" and \"e2 = Env f2\""], ["proof (prove)\nusing this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x\n\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<lbrakk>e1 = Env f1; e2 = Env f2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. the e1+e2!x = the e1!x", "with assms(2-3) ok_finite[OF \\<open>ok e1\\<close>] ok_finite[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  x \\<in> env_dom e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  finite (env_dom e1)\n  finite (env_dom e2)\n  e1 = Env f1\n  e2 = Env f2", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> env_dom e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  finite (env_dom e1)\n  finite (env_dom e2)\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. the e1+e2!x = the e1!x", "proof (auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>dom f1 \\<inter> dom f2 = {}; finite (dom f1);\n        finite (dom f2); e1 = Env f1; e2 = Env f2; f1 x = Some y;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> the ((f1 ++ f2) x) = y", "fix y :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>dom f1 \\<inter> dom f2 = {}; finite (dom f1);\n        finite (dom f2); e1 = Env f1; e2 = Env f2; f1 x = Some y;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> the ((f1 ++ f2) x) = y", "assume \"dom f1 \\<inter> dom f2 = {}\" and \"f1 x = Some y\""], ["proof (state)\nthis:\n  dom f1 \\<inter> dom f2 = {}\n  f1 x = Some y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>dom f1 \\<inter> dom f2 = {}; finite (dom f1);\n        finite (dom f2); e1 = Env f1; e2 = Env f2; f1 x = Some y;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> the ((f1 ++ f2) x) = y", "from map_add_comm[OF this(1)] this(2)"], ["proof (chain)\npicking this:\n  f1 ++ f2 = f2 ++ f1\n  f1 x = Some y", "have \"(f1 ++ f2) x = Some y\""], ["proof (prove)\nusing this:\n  f1 ++ f2 = f2 ++ f1\n  f1 x = Some y\n\ngoal (1 subgoal):\n 1. (f1 ++ f2) x = Some y", "by (simp add: map_add_Some_iff)"], ["proof (state)\nthis:\n  (f1 ++ f2) x = Some y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>dom f1 \\<inter> dom f2 = {}; finite (dom f1);\n        finite (dom f2); e1 = Env f1; e2 = Env f2; f1 x = Some y;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> the ((f1 ++ f2) x) = y", "thus \"the ((f1 ++ f2) x) = y\""], ["proof (prove)\nusing this:\n  (f1 ++ f2) x = Some y\n\ngoal (1 subgoal):\n 1. the ((f1 ++ f2) x) = y", "by auto"], ["proof (state)\nthis:\n  the ((f1 ++ f2) x) = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the e1+e2!x = the e1!x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma env_app_ok[simp]: \n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\"\n  assumes \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\"\n  shows \"ok (e1+e2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ok e1+e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ok e1+e2", "from ok_ok[OF \\<open>ok e1\\<close>] ok_ok[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x", "obtain f1 f2 where \"e1 = Env f1\" and \"e2 = Env f2\""], ["proof (prove)\nusing this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x\n\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<lbrakk>e1 = Env f1; e2 = Env f2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. ok e1+e2", "with assms"], ["proof (chain)\npicking this:\n  ok e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  ok e2\n  e1 = Env f1\n  e2 = Env f2", "show ?thesis"], ["proof (prove)\nusing this:\n  ok e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  ok e2\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. ok e1+e2", "by (simp,force)"], ["proof (state)\nthis:\n  ok e1+e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma env_app_add[simp]:\n  fixes e1 :: \"'a environment\" and e2 :: \"'a environment\" and x :: string\n  assumes \n  \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\" and \n  \"x \\<notin> env_dom e1\" and \"x \\<notin> env_dom e2\"\n  shows \"(e1+e2)\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2", "from ok_ok[OF \\<open>ok e1\\<close>] ok_ok[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x", "obtain f1 f2 where \"e1 = Env f1\" and \"e2 = Env f2\""], ["proof (prove)\nusing this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x\n\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<lbrakk>e1 = Env f1; e2 = Env f2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2", "with assms"], ["proof (chain)\npicking this:\n  ok e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  ok e2\n  x \\<notin> env_dom e1\n  x \\<notin> env_dom e2\n  e1 = Env f1\n  e2 = Env f2", "show ?thesis"], ["proof (prove)\nusing this:\n  ok e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  ok e2\n  x \\<notin> env_dom e1\n  x \\<notin> env_dom e2\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2", "proof (clarify, simp, intro impI ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>finite (dom f1); dom f1 \\<inter> dom f2 = {};\n        finite (dom f2); x \\<notin> dom f1; x \\<notin> dom f2; e1 = Env f1;\n        e2 = Env f2; ok e1; env_dom e1 \\<inter> env_dom e2 = {}; ok e2;\n        x \\<notin> env_dom e1; x \\<notin> env_dom e2; e1 = Env f1;\n        e2 = Env f2; dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X)) xa =\n                         (f1(x \\<mapsto> X) ++ f2) xa", "fix xa :: string"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>finite (dom f1); dom f1 \\<inter> dom f2 = {};\n        finite (dom f2); x \\<notin> dom f1; x \\<notin> dom f2; e1 = Env f1;\n        e2 = Env f2; ok e1; env_dom e1 \\<inter> env_dom e2 = {}; ok e2;\n        x \\<notin> env_dom e1; x \\<notin> env_dom e2; e1 = Env f1;\n        e2 = Env f2; dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X)) xa =\n                         (f1(x \\<mapsto> X) ++ f2) xa", "assume \"x \\<notin> dom f1\" and \"x \\<notin> dom f2\""], ["proof (state)\nthis:\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>finite (dom f1); dom f1 \\<inter> dom f2 = {};\n        finite (dom f2); x \\<notin> dom f1; x \\<notin> dom f2; e1 = Env f1;\n        e2 = Env f2; ok e1; env_dom e1 \\<inter> env_dom e2 = {}; ok e2;\n        x \\<notin> env_dom e1; x \\<notin> env_dom e2; e1 = Env f1;\n        e2 = Env f2; dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X)) xa =\n                         (f1(x \\<mapsto> X) ++ f2) xa", "thus \"((f1 ++ f2)(x \\<mapsto> X)) xa = (f1(x \\<mapsto> X) ++ f2) xa\""], ["proof (prove)\nusing this:\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n\ngoal (1 subgoal):\n 1. ((f1 ++ f2)(x \\<mapsto> X)) xa = (f1(x \\<mapsto> X) ++ f2) xa", "proof (cases \"x = xa\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X) ++ f2) xa\n 2. \\<lbrakk>x \\<noteq> xa; x \\<notin> dom f1; x \\<notin> dom f2\\<rbrakk>\n    \\<Longrightarrow> (f1 ++ f2) xa = (f1(x \\<mapsto> X) ++ f2) xa", "case False"], ["proof (state)\nthis:\n  x \\<noteq> xa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X) ++ f2) xa\n 2. \\<lbrakk>x \\<noteq> xa; x \\<notin> dom f1; x \\<notin> dom f2\\<rbrakk>\n    \\<Longrightarrow> (f1 ++ f2) xa = (f1(x \\<mapsto> X) ++ f2) xa", "thus \"(f1 ++ f2) xa = (f1(x \\<mapsto> X) ++ f2) xa\""], ["proof (prove)\nusing this:\n  x \\<noteq> xa\n\ngoal (1 subgoal):\n 1. (f1 ++ f2) xa = (f1(x \\<mapsto> X) ++ f2) xa", "by (simp add: map_add_def split: option.split)"], ["proof (state)\nthis:\n  (f1 ++ f2) xa = (f1(x \\<mapsto> X) ++ f2) xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X) ++ f2) xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X) ++ f2) xa", "case True"], ["proof (state)\nthis:\n  x = xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X) ++ f2) xa", "with \\<open>x \\<notin> dom f1\\<close> \\<open>x \\<notin> dom f2\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  x = xa", "have \"(f1(xa \\<mapsto> X) ++ f2) xa = Some X\""], ["proof (prove)\nusing this:\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  x = xa\n\ngoal (1 subgoal):\n 1. (f1(xa \\<mapsto> X) ++ f2) xa = Some X", "by (auto simp: map_add_Some_iff)"], ["proof (state)\nthis:\n  (f1(xa \\<mapsto> X) ++ f2) xa = Some X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X) ++ f2) xa", "thus \"Some X = (f1(xa \\<mapsto> X) ++ f2) xa\""], ["proof (prove)\nusing this:\n  (f1(xa \\<mapsto> X) ++ f2) xa = Some X\n\ngoal (1 subgoal):\n 1. Some X = (f1(xa \\<mapsto> X) ++ f2) xa", "by simp"], ["proof (state)\nthis:\n  Some X = (f1(xa \\<mapsto> X) ++ f2) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((f1 ++ f2)(x \\<mapsto> X)) xa = (f1(x \\<mapsto> X) ++ f2) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e1+e2\\<lparr>x:X\\<rparr> = e1\\<lparr>x:X\\<rparr>+e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma env_app_add2[simp]:\n  fixes \n  e1 :: \"'a environment\" and e2 :: \"'a environment\" and \n  x :: string and y :: string\n  assumes \n  \"ok e1\" and \"env_dom e1 \\<inter> env_dom e2 = {}\" and \"ok e2\" and\n  \"x \\<notin> env_dom e1\" and \"x \\<notin> env_dom e2\" and \"y \\<notin> env_dom e1\" and\n  \"y \\<notin> env_dom e2\" and \"x \\<noteq> y\"\n  shows \"(e1+e2)\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> = e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> =\n    e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> =\n    e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2", "from ok_ok[OF \\<open>ok e1\\<close>] ok_ok[OF \\<open>ok e2\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x", "obtain f1 f2 where \"e1 = Env f1\" and \"e2 = Env f2\""], ["proof (prove)\nusing this:\n  \\<exists>x. e1 = Env x\n  \\<exists>x. e2 = Env x\n\ngoal (1 subgoal):\n 1. (\\<And>f1 f2.\n        \\<lbrakk>e1 = Env f1; e2 = Env f2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> =\n    e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2", "with assms"], ["proof (chain)\npicking this:\n  ok e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  ok e2\n  x \\<notin> env_dom e1\n  x \\<notin> env_dom e2\n  y \\<notin> env_dom e1\n  y \\<notin> env_dom e2\n  x \\<noteq> y\n  e1 = Env f1\n  e2 = Env f2", "show ?thesis"], ["proof (prove)\nusing this:\n  ok e1\n  env_dom e1 \\<inter> env_dom e2 = {}\n  ok e2\n  x \\<notin> env_dom e1\n  x \\<notin> env_dom e2\n  y \\<notin> env_dom e1\n  y \\<notin> env_dom e2\n  x \\<noteq> y\n  e1 = Env f1\n  e2 = Env f2\n\ngoal (1 subgoal):\n 1. e1+e2\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> =\n    e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2", "proof (clarify, simp, intro impI ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>finite (dom f1); dom f1 \\<inter> dom f2 = {};\n        finite (dom f2); x \\<notin> dom f1; x \\<notin> dom f2;\n        y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> y; e1 = Env f1;\n        e2 = Env f2; ok e1; env_dom e1 \\<inter> env_dom e2 = {}; ok e2;\n        x \\<notin> env_dom e1; x \\<notin> env_dom e2; y \\<notin> env_dom e1;\n        y \\<notin> env_dom e2; x \\<noteq> y; e1 = Env f1; e2 = Env f2;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                         (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "fix xa :: string"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>finite (dom f1); dom f1 \\<inter> dom f2 = {};\n        finite (dom f2); x \\<notin> dom f1; x \\<notin> dom f2;\n        y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> y; e1 = Env f1;\n        e2 = Env f2; ok e1; env_dom e1 \\<inter> env_dom e2 = {}; ok e2;\n        x \\<notin> env_dom e1; x \\<notin> env_dom e2; y \\<notin> env_dom e1;\n        y \\<notin> env_dom e2; x \\<noteq> y; e1 = Env f1; e2 = Env f2;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                         (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "assume \"x \\<notin> dom f1\" and \"x \\<notin> dom f2\" and \"y \\<notin> dom f1\" and \"y \\<notin> dom f2\""], ["proof (state)\nthis:\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>finite (dom f1); dom f1 \\<inter> dom f2 = {};\n        finite (dom f2); x \\<notin> dom f1; x \\<notin> dom f2;\n        y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> y; e1 = Env f1;\n        e2 = Env f2; ok e1; env_dom e1 \\<inter> env_dom e2 = {}; ok e2;\n        x \\<notin> env_dom e1; x \\<notin> env_dom e2; y \\<notin> env_dom e1;\n        y \\<notin> env_dom e2; x \\<noteq> y; e1 = Env f1; e2 = Env f2;\n        dom f2 \\<inter> dom f1 = {}\\<rbrakk>\n       \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                         (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "with \\<open>x \\<noteq> y\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2", "show \"((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa = (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2\n\ngoal (1 subgoal):\n 1. ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n    (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "proof (cases \"x = xa\", simp)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>xa \\<noteq> y; xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa;\n     y \\<notin> dom f1; y \\<notin> dom f2\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n 2. \\<lbrakk>x \\<noteq> y; x \\<notin> dom f1; x \\<notin> dom f2;\n     y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "case True"], ["proof (state)\nthis:\n  x = xa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xa \\<noteq> y; xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa;\n     y \\<notin> dom f1; y \\<notin> dom f2\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n 2. \\<lbrakk>x \\<noteq> y; x \\<notin> dom f1; x \\<notin> dom f2;\n     y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "with \\<open>x \\<noteq> y\\<close> \\<open>x \\<notin> dom f1\\<close> \\<open>x \\<notin> dom f2\\<close> \\<open>y \\<notin> dom f1\\<close> \\<open>y \\<notin> dom f2\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2\n  x = xa", "have \"(f1(xa \\<mapsto> X,y \\<mapsto> Y) ++ f2) xa = Some X\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2\n  x = xa\n\ngoal (1 subgoal):\n 1. (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa = Some X", "by (auto simp: map_add_Some_iff)"], ["proof (state)\nthis:\n  (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa = Some X\n\ngoal (2 subgoals):\n 1. \\<lbrakk>xa \\<noteq> y; xa \\<notin> dom f1; xa \\<notin> dom f2; x = xa;\n     y \\<notin> dom f1; y \\<notin> dom f2\\<rbrakk>\n    \\<Longrightarrow> Some X = (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n 2. \\<lbrakk>x \\<noteq> y; x \\<notin> dom f1; x \\<notin> dom f2;\n     y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "thus \"Some X = (f1(xa \\<mapsto> X,y \\<mapsto> Y) ++ f2) xa\""], ["proof (prove)\nusing this:\n  (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa = Some X\n\ngoal (1 subgoal):\n 1. Some X = (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "by simp"], ["proof (state)\nthis:\n  Some X = (f1(xa \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<notin> dom f1; x \\<notin> dom f2;\n     y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<notin> dom f1; x \\<notin> dom f2;\n     y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "case False"], ["proof (state)\nthis:\n  x \\<noteq> xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> y; x \\<notin> dom f1; x \\<notin> dom f2;\n     y \\<notin> dom f1; y \\<notin> dom f2; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> xa\n\ngoal (1 subgoal):\n 1. ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n    (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "proof (cases \"y = xa\", simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>y = xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa\n 2. \\<lbrakk>y \\<noteq> xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> (f1 ++ f2) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "case False"], ["proof (state)\nthis:\n  y \\<noteq> xa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>y = xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa\n 2. \\<lbrakk>y \\<noteq> xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> (f1 ++ f2) xa =\n                      (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "with \\<open>x \\<noteq> xa\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> xa\n  y \\<noteq> xa", "show \"(f1 ++ f2) xa = (f1(x \\<mapsto> X,y \\<mapsto> Y) ++ f2) xa\""], ["proof (prove)\nusing this:\n  x \\<noteq> xa\n  y \\<noteq> xa\n\ngoal (1 subgoal):\n 1. (f1 ++ f2) xa = (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa", "by (simp add: map_add_def split: option.split)"], ["proof (state)\nthis:\n  (f1 ++ f2) xa = (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y = xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>y = xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa", "case True"], ["proof (state)\nthis:\n  y = xa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y = xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa", "with \\<open>x \\<noteq> y\\<close> \\<open>x \\<notin> dom f1\\<close> \\<open>x \\<notin> dom f2\\<close> \\<open>y \\<notin> dom f1\\<close> \\<open>y \\<notin> dom f2\\<close>"], ["proof (chain)\npicking this:\n  x \\<noteq> y\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2\n  y = xa", "have \"(f1(x \\<mapsto> X,xa \\<mapsto> Y) ++ f2) xa = Some Y\""], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  x \\<notin> dom f1\n  x \\<notin> dom f2\n  y \\<notin> dom f1\n  y \\<notin> dom f2\n  y = xa\n\ngoal (1 subgoal):\n 1. (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa = Some Y", "by (auto simp: map_add_Some_iff)"], ["proof (state)\nthis:\n  (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa = Some Y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y = xa; x \\<noteq> xa\\<rbrakk>\n    \\<Longrightarrow> Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa", "thus \"Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa\""], ["proof (prove)\nusing this:\n  (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa = Some Y\n\ngoal (1 subgoal):\n 1. Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa", "by simp"], ["proof (state)\nthis:\n  Some Y = (f1(x \\<mapsto> X, xa \\<mapsto> Y) ++ f2) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n  (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((f1 ++ f2)(x \\<mapsto> X, y \\<mapsto> Y)) xa =\n  (f1(x \\<mapsto> X, y \\<mapsto> Y) ++ f2) xa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  e1+e2\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr> =\n  e1\\<lparr>x:X\\<rparr>\\<lparr>y:Y\\<rparr>+e2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}