{"file_name": "/home/qj213/afp-2021-10-22/thys/Locally-Nameless-Sigma/preliminary/FMap.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Locally-Nameless-Sigma", "problem_names": ["theorem fset_induct:\n  \"P {} \\<Longrightarrow> (\\<And>x (F::('a::finite)set). x \\<notin> F \\<Longrightarrow> P F \\<Longrightarrow> P (insert x F)) \\<Longrightarrow> P F\"", "theorem fmap_unique: \"x = y \\<Longrightarrow> (f::('a,'b)fmap) x = f y\"", "theorem fmap_case:\n  \"(F::('a -~> 'b)) = Map.empty \\<or> (\\<exists>x y (F'::('a -~> 'b)). F = F'(x \\<mapsto> y))\"", "lemma insert_lem : \"insert x A = B \\<Longrightarrow> x \\<in> B\"", "lemma fmap_minus_fmap: \n  fixes F x a b\n  assumes \"(F -- x) a = Some b\"\n  shows \"F a = Some b\"", "lemma set_fmap_minus_iff: \n  \"set_fmap ((F::(('a::finite) -~> 'b)) -- x) = set_fmap F - {x}\"", "lemma set_fmap_minus_insert:\n  fixes F :: \"('a::finite * 'b)set\" and  F':: \"('a::finite) -~> 'b\" and x\n  assumes \"x \\<notin> F\" and \"insert x F = set_fmap F'\"\n  shows \"F = set_fmap (F' -- x)\"", "lemma notin_fmap_minus: \"x \\<notin> set_fmap ((F::(('a::finite) -~> 'b)) -- x)\"", "lemma fst_notin_fmap_minus_dom:\n  fixes F x and F' :: \"('a::finite) -~> 'b\"\n  assumes \"insert x F = set_fmap F'\"\n  shows \"fst x \\<notin> dom (F' -- x)\"", "lemma  set_fmap_pair: \n  \"x \\<in> set_fmap F \\<Longrightarrow> (fst x \\<in> dom F \\<and> snd x = the (F (fst x)))\"", "lemma  set_fmap_inv1: \n  \"\\<lbrakk> fst x \\<in> dom F; snd x = the (F (fst x)) \\<rbrakk> \\<Longrightarrow> (F -- x)(fst x \\<mapsto> snd x) = F\"", "lemma set_fmap_inv2: \n  \"fst x \\<notin> dom F \\<Longrightarrow> insert x (set_fmap F) = set_fmap (F(fst x \\<mapsto> snd x))\"", "lemma rep_fmap_base: \"P (F::('a  -~> 'b)) = (pred_set_fmap P)(set_fmap F)\"", "lemma rep_fmap: \n  \"\\<exists>(Fp ::('a * 'b)set) (P'::('a * 'b)set \\<Rightarrow> bool). P (F::('a -~> 'b)) = P' Fp\"", "theorem finite_fsets: \"finite (F::('a::finite)set)\"", "lemma finite_dom_fmap: \"finite (dom (F::('a -~> 'b))::('a::finite)set)\"", "lemma finite_fmap_ran: \"finite (ran (F::(('a::finite) -~> 'b)))\"", "lemma finite_fset_map: \"finite (set_fmap (F::(('a::finite) -~> 'b)))\"", "lemma rep_fmap_imp: \n  \"\\<forall>F x z. x \\<notin> dom (F::('a -~> 'b)) \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  \\<Longrightarrow> (\\<forall>F x z. x \\<notin> fst ` (set_fmap F) \\<longrightarrow> (pred_set_fmap P)(set_fmap F) \n        \\<longrightarrow> (pred_set_fmap P) (insert (x,z) (set_fmap F)))\"", "lemma empty_dom: \n  fixes g\n  assumes \"{} = dom g\"\n  shows \"g = Map.empty\"", "theorem fmap_induct[rule_format, case_names empty insert]:\n  fixes  P  :: \"(('a :: finite) -~> 'b) \\<Rightarrow> bool\" and  F' :: \"('a  -~> 'b)\"\n  assumes \n  \"P Map.empty\" and\n  \"\\<forall>(F::('a -~> 'b)) x z. x \\<notin> dom F \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\"\n  shows \"P F'\"", "lemma fmap_induct3[consumes 2, case_names empty insert]:\n  \"\\<And>(F2::('a::finite) -~> 'b) (F3::('a -~> 'b)).\n   \\<lbrakk> dom (F1::('a -~> 'b)) = dom F2; dom F3 = dom F1; \n     P Map.empty Map.empty Map.empty;\n     \\<And>x a b c (F1::('a -~> 'b)) (F2::('a -~> 'b)) (F3::('a -~> 'b)).\n     \\<lbrakk> P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1; x \\<notin> dom F1 \\<rbrakk>\n     \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b)) (F3(x \\<mapsto> c)) \\<rbrakk>\n  \\<Longrightarrow> P F1 F2 F3\"", "lemma fmap_ex_cof2:\n  \"\\<And>(P::'c \\<Rightarrow> 'c \\<Rightarrow> 'b option \\<Rightarrow> 'b option \\<Rightarrow> 'a \\<Rightarrow> bool)\n     (f'::('a::finite) -~> 'b).\n  \\<lbrakk> dom f' = dom (f::('a -~> 'b)); \n    \\<forall>l\\<in>dom f. (\\<exists>L. finite L \n                  \\<and> (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p\n                      \\<longrightarrow> P s p (f l) (f' l) l)) \\<rbrakk>\n  \\<Longrightarrow> \\<exists>L. finite L \\<and> (\\<forall>l\\<in>dom f. (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \n                                   \\<longrightarrow> P s p (f l) (f' l) l))\"", "lemma fmap_ex_cof:\n  fixes\n  P :: \"'c \\<Rightarrow> 'c \\<Rightarrow> 'b option \\<Rightarrow> ('a::finite) \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a -~> 'b)).\n  (\\<exists>L. finite L \\<and> (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow> P s p (f l) l))\"\n  shows\n  \"\\<exists>L. finite L \\<and> (\\<forall>l\\<in>dom f. (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow> P s p (f l) l))\"", "lemma fmap_ball_all2:\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'b option \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a::finite) -~> 'b). \\<forall>(x::'c) (y::'d). Px x y \\<longrightarrow> P x y (f l)\"\n  shows\n  \"\\<forall>x y. Px x y \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y (f l))\"", "lemma fmap_ball_all2':\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'b option \\<Rightarrow> ('a::finite) \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a -~> 'b)). \\<forall>(x::'c) (y::'d). Px x y \\<longrightarrow> P x y (f l) l\"\n  shows\n  \"\\<forall>x y. Px x y \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y (f l) l)\"", "lemma fmap_ball_all3:\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> 'b option \\<Rightarrow> 'b option \\<Rightarrow> bool\" and\n  f :: \"('a::finite) -~> 'b\" and f' :: \"'a -~> 'b\"\n  assumes\n  \"dom f' = dom f\" and\n  \"\\<forall>l\\<in>dom f.\n     \\<forall>(x::'c) (y::'d) (z::'e). Px x y z \\<longrightarrow> P x y z (f l) (f' l)\"\n  shows\n  \"\\<forall>x y z. Px x y z \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y z (f l) (f' l))\"", "lemma fmap_ball_all4':\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> 'f \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> 'f \\<Rightarrow> 'b option \\<Rightarrow> ('a::finite) \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a -~> 'b)). \n    \\<forall>(x::'c) (y::'d) (z::'e) (a::'f). Px x y z a \\<longrightarrow> P x y z a (f l) l\"\n  shows\n  \"\\<forall>x y z a. Px x y z a \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y z a (f l) l)\""], "translations": [["", "theorem fset_induct:\n  \"P {} \\<Longrightarrow> (\\<And>x (F::('a::finite)set). x \\<notin> F \\<Longrightarrow> P F \\<Longrightarrow> P (insert x F)) \\<Longrightarrow> P F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P {};\n     \\<And>x F.\n        \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n        \\<Longrightarrow> P (insert x F)\\<rbrakk>\n    \\<Longrightarrow> P F", "proof (rule_tac P=P and F=F in finite_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>P {};\n     \\<And>x F.\n        \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n        \\<Longrightarrow> P (insert x F)\\<rbrakk>\n    \\<Longrightarrow> finite F\n 2. \\<lbrakk>P {};\n     \\<And>x F.\n        \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n        \\<Longrightarrow> P (insert x F)\\<rbrakk>\n    \\<Longrightarrow> P {}\n 3. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "from finite_subset[OF subset_UNIV]"], ["proof (chain)\npicking this:\n  finite UNIV \\<Longrightarrow> finite ?A", "show \"finite F\""], ["proof (prove)\nusing this:\n  finite UNIV \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite F", "by auto"], ["proof (state)\nthis:\n  finite F\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P {};\n     \\<And>x F.\n        \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n        \\<Longrightarrow> P (insert x F)\\<rbrakk>\n    \\<Longrightarrow> P {}\n 2. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P {};\n     \\<And>x F.\n        \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n        \\<Longrightarrow> P (insert x F)\\<rbrakk>\n    \\<Longrightarrow> P {}\n 2. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "assume \"P {}\""], ["proof (state)\nthis:\n  P {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P {};\n     \\<And>x F.\n        \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n        \\<Longrightarrow> P (insert x F)\\<rbrakk>\n    \\<Longrightarrow> P {}\n 2. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "thus \"P {}\""], ["proof (prove)\nusing this:\n  P {}\n\ngoal (1 subgoal):\n 1. P {}", "by simp"], ["proof (state)\nthis:\n  P {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "fix x F"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "assume \"\\<And>x F. \\<lbrakk> x \\<notin> F; P F \\<rbrakk> \\<Longrightarrow> P (insert x F)\" and \"x \\<notin> F\" and \"P F\""], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<notin> ?F; P ?F\\<rbrakk> \\<Longrightarrow> P (insert ?x ?F)\n  x \\<notin> F\n  P F\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>P {};\n        \\<And>x F.\n           \\<lbrakk>x \\<notin> F; P F\\<rbrakk>\n           \\<Longrightarrow> P (insert x F);\n        finite F; x \\<notin> F; P F\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "thus \"P (insert x F)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<notin> ?F; P ?F\\<rbrakk> \\<Longrightarrow> P (insert ?x ?F)\n  x \\<notin> F\n  P F\n\ngoal (1 subgoal):\n 1. P (insert x F)", "by simp"], ["proof (state)\nthis:\n  P (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fmap_unique: \"x = y \\<Longrightarrow> (f::('a,'b)fmap) x = f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y \\<Longrightarrow> f x = f y", "by (erule ssubst, rule refl)"], ["", "theorem fmap_case:\n  \"(F::('a -~> 'b)) = Map.empty \\<or> (\\<exists>x y (F'::('a -~> 'b)). F = F'(x \\<mapsto> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "proof (cases \"F = Map.empty\")"], ["proof (state)\ngoal (2 subgoals):\n 1. F = Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))\n 2. F \\<noteq> Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "case True"], ["proof (state)\nthis:\n  F = Map.empty\n\ngoal (2 subgoals):\n 1. F = Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))\n 2. F \\<noteq> Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "thus ?thesis"], ["proof (prove)\nusing this:\n  F = Map.empty\n\ngoal (1 subgoal):\n 1. F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "by (rule disjI1)"], ["proof (state)\nthis:\n  F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))\n\ngoal (1 subgoal):\n 1. F \\<noteq> Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<noteq> Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "case False"], ["proof (state)\nthis:\n  F \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. F \\<noteq> Map.empty \\<Longrightarrow>\n    F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "thus ?thesis"], ["proof (prove)\nusing this:\n  F \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))", "proof (simp)"], ["proof (state)\ngoal (1 subgoal):\n 1. F \\<noteq> Map.empty \\<Longrightarrow>\n    \\<exists>x y F'. F = F'(x \\<mapsto> y)", "from \\<open>F \\<noteq> Map.empty\\<close>"], ["proof (chain)\npicking this:\n  F \\<noteq> Map.empty", "have \"\\<exists>x. F x \\<noteq> None\""], ["proof (prove)\nusing this:\n  F \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. \\<exists>x. F x \\<noteq> None", "proof (rule contrapos_np)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x. F x \\<noteq> None \\<Longrightarrow> F = Map.empty", "assume \"\\<not> (\\<exists>x. F x \\<noteq> None)\""], ["proof (state)\nthis:\n  \\<nexists>x. F x \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<nexists>x. F x \\<noteq> None \\<Longrightarrow> F = Map.empty", "hence \"\\<forall>x. F x = None\""], ["proof (prove)\nusing this:\n  \\<nexists>x. F x \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<forall>x. F x = None", "by simp"], ["proof (state)\nthis:\n  \\<forall>x. F x = None\n\ngoal (1 subgoal):\n 1. \\<nexists>x. F x \\<noteq> None \\<Longrightarrow> F = Map.empty", "hence \"\\<And>x. F x = None\""], ["proof (prove)\nusing this:\n  \\<forall>x. F x = None\n\ngoal (1 subgoal):\n 1. \\<And>x. F x = None", "by simp"], ["proof (state)\nthis:\n  F ?x = None\n\ngoal (1 subgoal):\n 1. \\<nexists>x. F x \\<noteq> None \\<Longrightarrow> F = Map.empty", "thus \"F = Map.empty\""], ["proof (prove)\nusing this:\n  F ?x = None\n\ngoal (1 subgoal):\n 1. F = Map.empty", "by (rule ext)"], ["proof (state)\nthis:\n  F = Map.empty\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. F x \\<noteq> None\n\ngoal (1 subgoal):\n 1. F \\<noteq> Map.empty \\<Longrightarrow>\n    \\<exists>x y F'. F = F'(x \\<mapsto> y)", "thus \"\\<exists>x y F'. F = F'(x \\<mapsto> y)\""], ["proof (prove)\nusing this:\n  \\<exists>x. F x \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<exists>x y F'. F = F'(x \\<mapsto> y)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       F x \\<noteq> None \\<Longrightarrow>\n       \\<exists>x y F'. F = F'(x \\<mapsto> y)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       F x \\<noteq> None \\<Longrightarrow>\n       \\<exists>x y F'. F = F'(x \\<mapsto> y)", "assume \"F x \\<noteq> None\""], ["proof (state)\nthis:\n  F x \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       F x \\<noteq> None \\<Longrightarrow>\n       \\<exists>x y F'. F = F'(x \\<mapsto> y)", "hence \"\\<And>y. F y = (F(x \\<mapsto> the (F x))) y\""], ["proof (prove)\nusing this:\n  F x \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>y. F y = (F(x \\<mapsto> the (F x))) y", "by auto"], ["proof (state)\nthis:\n  F ?y = (F(x \\<mapsto> the (F x))) ?y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       F x \\<noteq> None \\<Longrightarrow>\n       \\<exists>x y F'. F = F'(x \\<mapsto> y)", "hence \"F = F(x \\<mapsto> the (F x))\""], ["proof (prove)\nusing this:\n  F ?y = (F(x \\<mapsto> the (F x))) ?y\n\ngoal (1 subgoal):\n 1. F = F(x \\<mapsto> the (F x))", "by (rule ext)"], ["proof (state)\nthis:\n  F = F(x \\<mapsto> the (F x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       F x \\<noteq> None \\<Longrightarrow>\n       \\<exists>x y F'. F = F'(x \\<mapsto> y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  F = F(x \\<mapsto> the (F x))\n\ngoal (1 subgoal):\n 1. \\<exists>x y F'. F = F'(x \\<mapsto> y)", "by auto"], ["proof (state)\nthis:\n  \\<exists>x y F'. F = F'(x \\<mapsto> y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x y F'. F = F'(x \\<mapsto> y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F = Map.empty \\<or> (\\<exists>x y F'. F = F'(x \\<mapsto> y))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* define the witness as a constant function so it may be used in the proof of\nthe induction scheme below *)"], ["", "definition  \n  set_fmap :: \"'a -~> 'b \\<Rightarrow> ('a * 'b)set\" where\n  \"set_fmap F = {(x, y). x \\<in> dom F \\<and> F x = Some y}\""], ["", "definition\n  pred_set_fmap :: \"(('a -~> 'b) \\<Rightarrow> bool) \\<Rightarrow> (('a * 'b)set) \\<Rightarrow> bool\" where\n  \"pred_set_fmap P = (\\<lambda>S. P (\\<lambda>x. if x \\<in> fst ` S \n                                  then (THE y. (\\<exists>z. y = Some z \\<and> (x, z) \\<in> S)) \n                                  else None))\""], ["", "definition\n  fmap_minus_direct :: \"[('a -~> 'b), ('a * 'b)] \\<Rightarrow> ('a -~> 'b)\" (infixl \"--\" 50) where\n  \"F -- x = (\\<lambda>z. if (fst x = z \\<and> ((F (fst x)) = Some (snd x))) \n                   then None \n                   else (F z))\""], ["", "lemma insert_lem : \"insert x A = B \\<Longrightarrow> x \\<in> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x A = B \\<Longrightarrow> x \\<in> B", "by auto"], ["", "lemma fmap_minus_fmap: \n  fixes F x a b\n  assumes \"(F -- x) a = Some b\"\n  shows \"F a = Some b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F a = Some b", "proof (rule ccontr, cases \"F a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>F a \\<noteq> Some b; F a = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "case None"], ["proof (state)\nthis:\n  F a = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>F a \\<noteq> Some b; F a = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"a \\<notin> dom F\""], ["proof (prove)\nusing this:\n  F a = None\n\ngoal (1 subgoal):\n 1. a \\<notin> dom F", "by auto"], ["proof (state)\nthis:\n  a \\<notin> dom F\n\ngoal (2 subgoals):\n 1. \\<lbrakk>F a \\<noteq> Some b; F a = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "hence \"(F -- x) a = None\""], ["proof (prove)\nusing this:\n  a \\<notin> dom F\n\ngoal (1 subgoal):\n 1. (F -- x) a = None", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  a \\<notin> dom F\n\ngoal (1 subgoal):\n 1. (if fst x = a \\<and> F (fst x) = Some (snd x) then None else F a) = None", "by auto"], ["proof (state)\nthis:\n  (F -- x) a = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>F a \\<noteq> Some b; F a = None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>(F -- x) a = Some b\\<close>"], ["proof (chain)\npicking this:\n  (F -- x) a = Some b\n  (F -- x) a = None", "show False"], ["proof (prove)\nusing this:\n  (F -- x) a = Some b\n  (F -- x) a = None\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"F a \\<noteq> Some b\""], ["proof (state)\nthis:\n  F a \\<noteq> Some b\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "case (Some y)"], ["proof (state)\nthis:\n  F a = Some y\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>F a \\<noteq> Some b; F a = Some aa\\<rbrakk>\n       \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  F a = Some y\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"fst x = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>F a = Some y; fst x = a\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>F a = Some y; fst x \\<noteq> a\\<rbrakk> \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  fst x = a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>F a = Some y; fst x = a\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>F a = Some y; fst x \\<noteq> a\\<rbrakk> \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  fst x = a\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"snd x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x = a; snd x = y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  snd x = y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x = a; snd x = y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "with \\<open>F a = Some y\\<close> \\<open>fst x = a\\<close>"], ["proof (chain)\npicking this:\n  F a = Some y\n  fst x = a\n  snd x = y", "have \"(F -- x) a = None\""], ["proof (prove)\nusing this:\n  F a = Some y\n  fst x = a\n  snd x = y\n\ngoal (1 subgoal):\n 1. (F -- x) a = None", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  F a = Some y\n  fst x = a\n  snd x = y\n\ngoal (1 subgoal):\n 1. (if fst x = a \\<and> F (fst x) = Some (snd x) then None else F a) = None", "by auto"], ["proof (state)\nthis:\n  (F -- x) a = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fst x = a; snd x = y\\<rbrakk> \\<Longrightarrow> False\n 2. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "with \\<open>(F -- x) a = Some b\\<close>"], ["proof (chain)\npicking this:\n  (F -- x) a = Some b\n  (F -- x) a = None", "show False"], ["proof (prove)\nusing this:\n  (F -- x) a = Some b\n  (F -- x) a = None\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  snd x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "with \\<open>F a = Some y\\<close> \\<open>fst x = a\\<close>"], ["proof (chain)\npicking this:\n  F a = Some y\n  fst x = a\n  snd x \\<noteq> y", "have \"F (fst x) \\<noteq> Some (snd x)\""], ["proof (prove)\nusing this:\n  F a = Some y\n  fst x = a\n  snd x \\<noteq> y\n\ngoal (1 subgoal):\n 1. F (fst x) \\<noteq> Some (snd x)", "by auto"], ["proof (state)\nthis:\n  F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "with \\<open>(F -- x) a = Some b\\<close>"], ["proof (chain)\npicking this:\n  (F -- x) a = Some b\n  F (fst x) \\<noteq> Some (snd x)", "have \"F a = Some b\""], ["proof (prove)\nusing this:\n  (F -- x) a = Some b\n  F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. F a = Some b", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  (if fst x = a \\<and> F (fst x) = Some (snd x) then None else F a) = Some b\n  F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. F a = Some b", "by auto"], ["proof (state)\nthis:\n  F a = Some b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x = a; snd x \\<noteq> y\\<rbrakk> \\<Longrightarrow> False", "with \\<open>F a \\<noteq> Some b\\<close>"], ["proof (chain)\npicking this:\n  F a \\<noteq> Some b\n  F a = Some b", "show False"], ["proof (prove)\nusing this:\n  F a \\<noteq> Some b\n  F a = Some b\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F a = Some y; fst x \\<noteq> a\\<rbrakk> \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>F a = Some y; fst x \\<noteq> a\\<rbrakk> \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  fst x \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F a = Some y; fst x \\<noteq> a\\<rbrakk> \\<Longrightarrow> False", "with \\<open>(F -- x) a = Some b\\<close>"], ["proof (chain)\npicking this:\n  (F -- x) a = Some b\n  fst x \\<noteq> a", "have \"F a = Some b\""], ["proof (prove)\nusing this:\n  (F -- x) a = Some b\n  fst x \\<noteq> a\n\ngoal (1 subgoal):\n 1. F a = Some b", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  (if fst x = a \\<and> F (fst x) = Some (snd x) then None else F a) = Some b\n  fst x \\<noteq> a\n\ngoal (1 subgoal):\n 1. F a = Some b", "by auto"], ["proof (state)\nthis:\n  F a = Some b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F a = Some y; fst x \\<noteq> a\\<rbrakk> \\<Longrightarrow> False", "with \\<open>F a \\<noteq> Some b\\<close>"], ["proof (chain)\npicking this:\n  F a \\<noteq> Some b\n  F a = Some b", "show False"], ["proof (prove)\nusing this:\n  F a \\<noteq> Some b\n  F a = Some b\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_fmap_minus_iff: \n  \"set_fmap ((F::(('a::finite) -~> 'b)) -- x) = set_fmap F - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_fmap (F -- x) = set_fmap F - {x}", "unfolding set_fmap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(xa, y). xa \\<in> dom (F -- x) \\<and> (F -- x) xa = Some y} =\n    {(x, y). x \\<in> dom F \\<and> F x = Some y} - {x}", "proof (auto)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       (F -- x) a = Some b \\<Longrightarrow> \\<exists>y. F a = Some y\n 2. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 3. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 5. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "fix a b"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b.\n       (F -- x) a = Some b \\<Longrightarrow> \\<exists>y. F a = Some y\n 2. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 3. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 5. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "assume \"(F -- x) a = Some b\""], ["proof (state)\nthis:\n  (F -- x) a = Some b\n\ngoal (5 subgoals):\n 1. \\<And>a b.\n       (F -- x) a = Some b \\<Longrightarrow> \\<exists>y. F a = Some y\n 2. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 3. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 5. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "from fmap_minus_fmap[OF this]"], ["proof (chain)\npicking this:\n  F a = Some b", "show \"\\<exists>y. F a = Some y\""], ["proof (prove)\nusing this:\n  F a = Some b\n\ngoal (1 subgoal):\n 1. \\<exists>y. F a = Some y", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. F a = Some y\n\ngoal (4 subgoals):\n 1. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 2. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 2. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "fix a b"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 2. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "assume \"(F -- x) a = Some b\""], ["proof (state)\nthis:\n  (F -- x) a = Some b\n\ngoal (4 subgoals):\n 1. \\<And>a b. (F -- x) a = Some b \\<Longrightarrow> F a = Some b\n 2. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 4. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "from fmap_minus_fmap[OF this]"], ["proof (chain)\npicking this:\n  F a = Some b", "show \"F a = Some b\""], ["proof (prove)\nusing this:\n  F a = Some b\n\ngoal (1 subgoal):\n 1. F a = Some b", "by assumption"], ["proof (state)\nthis:\n  F a = Some b\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "fix a b"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "assume \"(F -- (a, b)) a = Some b\""], ["proof (state)\nthis:\n  (F -- (a, b)) a = Some b\n\ngoal (3 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(F -- (a, b)) a = Some b; x = (a, b)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 3. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "with fmap_minus_fmap[OF this]"], ["proof (chain)\npicking this:\n  F a = Some b\n  (F -- (a, b)) a = Some b", "show False"], ["proof (prove)\nusing this:\n  F a = Some b\n  (F -- (a, b)) a = Some b\n\ngoal (1 subgoal):\n 1. False", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  F a = Some b\n  (if fst (a, b) = a \\<and> F (fst (a, b)) = Some (snd (a, b)) then None\n   else F a) =\n  Some b\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "assume \"(a,b) \\<noteq> x\" and \"F a = Some b\""], ["proof (state)\nthis:\n  (a, b) \\<noteq> x\n  F a = Some b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "hence \"fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\""], ["proof (prove)\nusing this:\n  (a, b) \\<noteq> x\n  F a = Some b\n\ngoal (1 subgoal):\n 1. fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)", "by auto"], ["proof (state)\nthis:\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. (F -- x) a = Some y\n 2. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "with \\<open>F a = Some b\\<close>"], ["proof (chain)\npicking this:\n  F a = Some b\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)", "show \"\\<exists>y. (F -- x) a = Some y\""], ["proof (prove)\nusing this:\n  F a = Some b\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. \\<exists>y. (F -- x) a = Some y", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  F a = Some b\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (if fst x = a \\<and> F (fst x) = Some (snd x) then None else F a) =\n       Some y", "by (rule_tac x = b in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>y. (F -- x) a = Some y\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "fix a b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "assume \"(a,b) \\<noteq> x\" and \"F a = Some b\""], ["proof (state)\nthis:\n  (a, b) \\<noteq> x\n  F a = Some b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "hence \"fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\""], ["proof (prove)\nusing this:\n  (a, b) \\<noteq> x\n  F a = Some b\n\ngoal (1 subgoal):\n 1. fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)", "by auto"], ["proof (state)\nthis:\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>(a, b) \\<noteq> x; F a = Some b\\<rbrakk>\n       \\<Longrightarrow> (F -- x) a = Some b", "with \\<open>F a = Some b\\<close>"], ["proof (chain)\npicking this:\n  F a = Some b\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)", "show \"(F -- x) a = Some b\""], ["proof (prove)\nusing this:\n  F a = Some b\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. (F -- x) a = Some b", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  F a = Some b\n  fst x \\<noteq> a \\<or> F (fst x) \\<noteq> Some (snd x)\n\ngoal (1 subgoal):\n 1. (if fst x = a \\<and> F (fst x) = Some (snd x) then None else F a) =\n    Some b", "by simp"], ["proof (state)\nthis:\n  (F -- x) a = Some b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_fmap_minus_insert:\n  fixes F :: \"('a::finite * 'b)set\" and  F':: \"('a::finite) -~> 'b\" and x\n  assumes \"x \\<notin> F\" and \"insert x F = set_fmap F'\"\n  shows \"F = set_fmap (F' -- x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F = set_fmap (F' -- x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F = set_fmap (F' -- x)", "from \\<open>x \\<notin> F\\<close> sym[OF \\<open>insert x F = set_fmap F'\\<close>] set_fmap_minus_iff[of F' x]"], ["proof (chain)\npicking this:\n  x \\<notin> F\n  set_fmap F' = insert x F\n  set_fmap (F' -- x) = set_fmap F' - {x}", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> F\n  set_fmap F' = insert x F\n  set_fmap (F' -- x) = set_fmap F' - {x}\n\ngoal (1 subgoal):\n 1. F = set_fmap (F' -- x)", "by simp"], ["proof (state)\nthis:\n  F = set_fmap (F' -- x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma notin_fmap_minus: \"x \\<notin> set_fmap ((F::(('a::finite) -~> 'b)) -- x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> set_fmap (F -- x)", "by (auto simp: set_fmap_minus_iff)"], ["", "lemma fst_notin_fmap_minus_dom:\n  fixes F x and F' :: \"('a::finite) -~> 'b\"\n  assumes \"insert x F = set_fmap F'\"\n  shows \"fst x \\<notin> dom (F' -- x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst x \\<notin> dom (F' -- x)", "proof (rule ccontr, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. (F' -- x) (fst x) = Some y \\<Longrightarrow> False", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y. (F' -- x) (fst x) = Some y \\<Longrightarrow> False", "assume \"(F' -- x) (fst x) = Some y\""], ["proof (state)\nthis:\n  (F' -- x) (fst x) = Some y\n\ngoal (1 subgoal):\n 1. \\<And>y. (F' -- x) (fst x) = Some y \\<Longrightarrow> False", "with notin_fmap_minus[of x F']"], ["proof (chain)\npicking this:\n  x \\<notin> set_fmap (F' -- x)\n  (F' -- x) (fst x) = Some y", "have \"y \\<noteq> snd x\""], ["proof (prove)\nusing this:\n  x \\<notin> set_fmap (F' -- x)\n  (F' -- x) (fst x) = Some y\n\ngoal (1 subgoal):\n 1. y \\<noteq> snd x", "unfolding set_fmap_def"], ["proof (prove)\nusing this:\n  x \\<notin> {(xa, y). xa \\<in> dom (F' -- x) \\<and> (F' -- x) xa = Some y}\n  (F' -- x) (fst x) = Some y\n\ngoal (1 subgoal):\n 1. y \\<noteq> snd x", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> snd x\n\ngoal (1 subgoal):\n 1. \\<And>y. (F' -- x) (fst x) = Some y \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  y \\<noteq> snd x\n\ngoal (1 subgoal):\n 1. \\<And>y. (F' -- x) (fst x) = Some y \\<Longrightarrow> False", "from insert_lem[OF \\<open>insert x F = set_fmap F'\\<close>]"], ["proof (chain)\npicking this:\n  x \\<in> set_fmap F'", "have \"F' (fst x) = Some (snd x)\""], ["proof (prove)\nusing this:\n  x \\<in> set_fmap F'\n\ngoal (1 subgoal):\n 1. F' (fst x) = Some (snd x)", "unfolding set_fmap_def"], ["proof (prove)\nusing this:\n  x \\<in> {(x, y). x \\<in> dom F' \\<and> F' x = Some y}\n\ngoal (1 subgoal):\n 1. F' (fst x) = Some (snd x)", "by auto"], ["proof (state)\nthis:\n  F' (fst x) = Some (snd x)\n\ngoal (1 subgoal):\n 1. \\<And>y. (F' -- x) (fst x) = Some y \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  y \\<noteq> snd x\n  F' (fst x) = Some (snd x)", "show False"], ["proof (prove)\nusing this:\n  y \\<noteq> snd x\n  F' (fst x) = Some (snd x)\n\ngoal (1 subgoal):\n 1. False", "using fmap_minus_fmap[OF \\<open>(F' -- x) (fst x) = Some y\\<close>]"], ["proof (prove)\nusing this:\n  y \\<noteq> snd x\n  F' (fst x) = Some (snd x)\n  F' (fst x) = Some y\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  set_fmap_pair: \n  \"x \\<in> set_fmap F \\<Longrightarrow> (fst x \\<in> dom F \\<and> snd x = the (F (fst x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set_fmap F \\<Longrightarrow>\n    fst x \\<in> dom F \\<and> snd x = the (F (fst x))", "by (simp add: set_fmap_def, auto)"], ["", "lemma  set_fmap_inv1: \n  \"\\<lbrakk> fst x \\<in> dom F; snd x = the (F (fst x)) \\<rbrakk> \\<Longrightarrow> (F -- x)(fst x \\<mapsto> snd x) = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fst x \\<in> dom F; snd x = the (F (fst x))\\<rbrakk>\n    \\<Longrightarrow> (F -- x)(fst x \\<mapsto> snd x) = F", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>fst x \\<in> dom F; snd x = the (F (fst x))\\<rbrakk>\n       \\<Longrightarrow> ((F -- x)(fst x \\<mapsto> snd x)) xa = F xa", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>fst x \\<in> dom F; snd x = the (F (fst x))\\<rbrakk>\n       \\<Longrightarrow> ((F -- x)(fst x \\<mapsto> snd x)) xa = F xa", "assume \"fst x \\<in> dom F\" and \"snd x = the (F (fst x))\""], ["proof (state)\nthis:\n  fst x \\<in> dom F\n  snd x = the (F (fst x))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>fst x \\<in> dom F; snd x = the (F (fst x))\\<rbrakk>\n       \\<Longrightarrow> ((F -- x)(fst x \\<mapsto> snd x)) xa = F xa", "thus \"((F -- x)(fst x \\<mapsto> snd x)) xa = F xa\""], ["proof (prove)\nusing this:\n  fst x \\<in> dom F\n  snd x = the (F (fst x))\n\ngoal (1 subgoal):\n 1. ((F -- x)(fst x \\<mapsto> snd x)) xa = F xa", "unfolding fmap_minus_direct_def"], ["proof (prove)\nusing this:\n  fst x \\<in> dom F\n  snd x = the (F (fst x))\n\ngoal (1 subgoal):\n 1. ((\\<lambda>z.\n         if fst x = z \\<and> F (fst x) = Some (snd x) then None else F z)\n     (fst x \\<mapsto> snd x))\n     xa =\n    F xa", "by (case_tac \"xa = fst x\", auto)"], ["proof (state)\nthis:\n  ((F -- x)(fst x \\<mapsto> snd x)) xa = F xa\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma set_fmap_inv2: \n  \"fst x \\<notin> dom F \\<Longrightarrow> insert x (set_fmap F) = set_fmap (F(fst x \\<mapsto> snd x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    insert x (set_fmap F) = set_fmap (F(fst x \\<mapsto> snd x))", "unfolding set_fmap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    insert x {(x, y). x \\<in> dom F \\<and> F x = Some y} =\n    {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n    \\<subseteq> {(xa, y).\n                 xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                 (F(fst x \\<mapsto> snd x)) xa = Some y}\n 2. fst x \\<notin> dom F \\<Longrightarrow>\n    {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "assume \"fst x \\<notin> dom F\""], ["proof (state)\nthis:\n  fst x \\<notin> dom F\n\ngoal (2 subgoals):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n    \\<subseteq> {(xa, y).\n                 xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                 (F(fst x \\<mapsto> snd x)) xa = Some y}\n 2. fst x \\<notin> dom F \\<Longrightarrow>\n    {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "thus\n    \"insert x {(x, y). x \\<in> dom F \\<and> F x = Some y} \\<subseteq> \n    {(xa, y). xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and> (F(fst x \\<mapsto> snd x)) xa = Some y}\""], ["proof (prove)\nusing this:\n  fst x \\<notin> dom F\n\ngoal (1 subgoal):\n 1. insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n    \\<subseteq> {(xa, y).\n                 xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                 (F(fst x \\<mapsto> snd x)) xa = Some y}", "by force"], ["proof (state)\nthis:\n  insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n  \\<subseteq> {(xa, y).\n               xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n               (F(fst x \\<mapsto> snd x)) xa = Some y}\n\ngoal (1 subgoal):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "have\n    \"\\<And>z. z \\<in> {(xa, y). xa \\<in> dom (F(fst x \\<mapsto> snd x)) \n                     \\<and> (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<Longrightarrow> z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {(xa, y).\n                xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n       z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {(xa, y).\n                xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n       z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {(xa, y).\n                xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n       z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "assume \n        z: \"z \\<in> {(xa, y). xa \\<in> dom (F(fst x \\<mapsto> snd x)) \n                     \\<and> (F(fst x \\<mapsto> snd x)) xa = Some y}\""], ["proof (state)\nthis:\n  z \\<in> {(xa, y).\n           xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n           (F(fst x \\<mapsto> snd x)) xa = Some y}\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {(xa, y).\n                xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n       z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "hence \"z = x \\<or> ((fst z) \\<in> dom F \\<and> F (fst z) = Some (snd z))\""], ["proof (prove)\nusing this:\n  z \\<in> {(xa, y).\n           xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n           (F(fst x \\<mapsto> snd x)) xa = Some y}\n\ngoal (1 subgoal):\n 1. z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "proof (cases \"fst x = fst z\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x = fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)\n 2. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x \\<noteq> fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "case True"], ["proof (state)\nthis:\n  fst x = fst z\n\ngoal (2 subgoals):\n 1. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x = fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)\n 2. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x \\<noteq> fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst x = fst z\n\ngoal (1 subgoal):\n 1. z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "using z"], ["proof (prove)\nusing this:\n  fst x = fst z\n  z \\<in> {(xa, y).\n           xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n           (F(fst x \\<mapsto> snd x)) xa = Some y}\n\ngoal (1 subgoal):\n 1. z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "by auto"], ["proof (state)\nthis:\n  z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x \\<noteq> fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x \\<noteq> fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "case False"], ["proof (state)\nthis:\n  fst x \\<noteq> fst z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>z \\<in> {(xa, y).\n                      xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                      (F(fst x \\<mapsto> snd x)) xa = Some y};\n     fst x \\<noteq> fst z\\<rbrakk>\n    \\<Longrightarrow> z = x \\<or>\n                      fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fst x \\<noteq> fst z\n\ngoal (1 subgoal):\n 1. z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "using z"], ["proof (prove)\nusing this:\n  fst x \\<noteq> fst z\n  z \\<in> {(xa, y).\n           xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n           (F(fst x \\<mapsto> snd x)) xa = Some y}\n\ngoal (1 subgoal):\n 1. z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)", "by auto"], ["proof (state)\nthis:\n  z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)\n\ngoal (1 subgoal):\n 1. \\<And>z.\n       z \\<in> {(xa, y).\n                xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n                (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n       z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "thus \"z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\""], ["proof (prove)\nusing this:\n  z = x \\<or> fst z \\<in> dom F \\<and> F (fst z) = Some (snd z)\n\ngoal (1 subgoal):\n 1. z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "by fastforce"], ["proof (state)\nthis:\n  z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?z \\<in> {(xa, y).\n            xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n            (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n  ?z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. fst x \\<notin> dom F \\<Longrightarrow>\n    {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "thus \n    \"{(xa, y). xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and> (F(fst x \\<mapsto> snd x)) xa = Some y} \\<subseteq> \n    insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\""], ["proof (prove)\nusing this:\n  ?z \\<in> {(xa, y).\n            xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n            (F(fst x \\<mapsto> snd x)) xa = Some y} \\<Longrightarrow>\n  ?z \\<in> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. {(xa, y).\n     xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n     (F(fst x \\<mapsto> snd x)) xa = Some y}\n    \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}", "by auto"], ["proof (state)\nthis:\n  {(xa, y).\n   xa \\<in> dom (F(fst x \\<mapsto> snd x)) \\<and>\n   (F(fst x \\<mapsto> snd x)) xa = Some y}\n  \\<subseteq> insert x {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rep_fmap_base: \"P (F::('a  -~> 'b)) = (pred_set_fmap P)(set_fmap F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P F = pred_set_fmap P (set_fmap F)", "unfolding pred_set_fmap_def set_fmap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P F =\n    P (\\<lambda>x.\n          if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n          then THE y.\n                  \\<exists>z.\n                     y = Some z \\<and>\n                     (x, z)\n                     \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n          else None)", "proof (rule_tac f = P in arg_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. F =\n    (\\<lambda>x.\n        if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        then THE y.\n                \\<exists>z.\n                   y = Some z \\<and>\n                   (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        else None)", "have \n    \"\\<And>x. F x = \n         (\\<lambda>x. if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n               then THE y. \\<exists>z. y = Some z \n                             \\<and> (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n               else None) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       F x =\n       (if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        then THE y.\n                \\<exists>z.\n                   y = Some z \\<and>\n                   (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        else None)", "proof auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       F a = Some b \\<Longrightarrow>\n       Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\n 2. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "fix a b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       F a = Some b \\<Longrightarrow>\n       Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\n 2. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "assume \"F a = Some b\""], ["proof (state)\nthis:\n  F a = Some b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       F a = Some b \\<Longrightarrow>\n       Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\n 2. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "hence \"\\<exists>!x. x = Some b \\<and> a \\<in> dom F\""], ["proof (prove)\nusing this:\n  F a = Some b\n\ngoal (1 subgoal):\n 1. \\<exists>!x. x = Some b \\<and> a \\<in> dom F", "proof (rule_tac a = \"F a\" in ex1I)"], ["proof (state)\ngoal (2 subgoals):\n 1. F a = Some b \\<Longrightarrow> F a = Some b \\<and> a \\<in> dom F\n 2. \\<And>x.\n       \\<lbrakk>F a = Some b; x = Some b \\<and> a \\<in> dom F\\<rbrakk>\n       \\<Longrightarrow> x = F a", "assume \"F a = Some b\""], ["proof (state)\nthis:\n  F a = Some b\n\ngoal (2 subgoals):\n 1. F a = Some b \\<Longrightarrow> F a = Some b \\<and> a \\<in> dom F\n 2. \\<And>x.\n       \\<lbrakk>F a = Some b; x = Some b \\<and> a \\<in> dom F\\<rbrakk>\n       \\<Longrightarrow> x = F a", "thus \"F a = Some b \\<and> a \\<in> dom F\""], ["proof (prove)\nusing this:\n  F a = Some b\n\ngoal (1 subgoal):\n 1. F a = Some b \\<and> a \\<in> dom F", "by (simp add: dom_def)"], ["proof (state)\nthis:\n  F a = Some b \\<and> a \\<in> dom F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>F a = Some b; x = Some b \\<and> a \\<in> dom F\\<rbrakk>\n       \\<Longrightarrow> x = F a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>F a = Some b; x = Some b \\<and> a \\<in> dom F\\<rbrakk>\n       \\<Longrightarrow> x = F a", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>F a = Some b; x = Some b \\<and> a \\<in> dom F\\<rbrakk>\n       \\<Longrightarrow> x = F a", "assume \"F a = Some b\" and \"x = Some b \\<and> a \\<in> dom F\""], ["proof (state)\nthis:\n  F a = Some b\n  x = Some b \\<and> a \\<in> dom F\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>F a = Some b; x = Some b \\<and> a \\<in> dom F\\<rbrakk>\n       \\<Longrightarrow> x = F a", "thus \"x = F a\""], ["proof (prove)\nusing this:\n  F a = Some b\n  x = Some b \\<and> a \\<in> dom F\n\ngoal (1 subgoal):\n 1. x = F a", "by simp"], ["proof (state)\nthis:\n  x = F a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>!x. x = Some b \\<and> a \\<in> dom F\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       F a = Some b \\<Longrightarrow>\n       Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\n 2. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "hence \"(THE y. y = Some b \\<and> a \\<in> dom F) = Some b \\<and> a \\<in> dom F\""], ["proof (prove)\nusing this:\n  \\<exists>!x. x = Some b \\<and> a \\<in> dom F\n\ngoal (1 subgoal):\n 1. (THE y. y = Some b \\<and> a \\<in> dom F) = Some b \\<and> a \\<in> dom F", "by (rule theI')"], ["proof (state)\nthis:\n  (THE y. y = Some b \\<and> a \\<in> dom F) = Some b \\<and> a \\<in> dom F\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       F a = Some b \\<Longrightarrow>\n       Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\n 2. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "thus \"Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\""], ["proof (prove)\nusing this:\n  (THE y. y = Some b \\<and> a \\<in> dom F) = Some b \\<and> a \\<in> dom F\n\ngoal (1 subgoal):\n 1. Some b = (THE y. y = Some b \\<and> a \\<in> dom F)", "by simp"], ["proof (state)\nthis:\n  Some b = (THE y. y = Some b \\<and> a \\<in> dom F)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "assume nin_x: \"x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\""], ["proof (state)\nthis:\n  x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<notin> fst `\n                  {(x, y).\n                   x \\<in> dom F \\<and> F x = Some y} \\<Longrightarrow>\n       F x = None", "thus \"F x = None\""], ["proof (prove)\nusing this:\n  x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. F x = None", "proof (cases \"F x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y};\n     F x = None\\<rbrakk>\n    \\<Longrightarrow> F x = None\n 2. \\<And>a.\n       \\<lbrakk>x \\<notin> fst `\n                           {(x, y). x \\<in> dom F \\<and> F x = Some y};\n        F x = Some a\\<rbrakk>\n       \\<Longrightarrow> F x = None", "case None"], ["proof (state)\nthis:\n  F x = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y};\n     F x = None\\<rbrakk>\n    \\<Longrightarrow> F x = None\n 2. \\<And>a.\n       \\<lbrakk>x \\<notin> fst `\n                           {(x, y). x \\<in> dom F \\<and> F x = Some y};\n        F x = Some a\\<rbrakk>\n       \\<Longrightarrow> F x = None", "thus ?thesis"], ["proof (prove)\nusing this:\n  F x = None\n\ngoal (1 subgoal):\n 1. F x = None", "by assumption"], ["proof (state)\nthis:\n  F x = None\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x \\<notin> fst `\n                           {(x, y). x \\<in> dom F \\<and> F x = Some y};\n        F x = Some a\\<rbrakk>\n       \\<Longrightarrow> F x = None", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x \\<notin> fst `\n                           {(x, y). x \\<in> dom F \\<and> F x = Some y};\n        F x = Some a\\<rbrakk>\n       \\<Longrightarrow> F x = None", "case (Some a)"], ["proof (state)\nthis:\n  F x = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x \\<notin> fst `\n                           {(x, y). x \\<in> dom F \\<and> F x = Some y};\n        F x = Some a\\<rbrakk>\n       \\<Longrightarrow> F x = None", "hence \"x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\""], ["proof (prove)\nusing this:\n  F x = Some a\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}", "by (simp add: image_def dom_def)"], ["proof (state)\nthis:\n  x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>x \\<notin> fst `\n                           {(x, y). x \\<in> dom F \\<and> F x = Some y};\n        F x = Some a\\<rbrakk>\n       \\<Longrightarrow> F x = None", "with nin_x"], ["proof (chain)\npicking this:\n  x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n  x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n  x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. F x = None", "by simp"], ["proof (state)\nthis:\n  F x = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F x = None\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F ?x =\n  (if ?x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n   then THE y.\n           \\<exists>z.\n              y = Some z \\<and>\n              (?x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n   else None)\n\ngoal (1 subgoal):\n 1. F =\n    (\\<lambda>x.\n        if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        then THE y.\n                \\<exists>z.\n                   y = Some z \\<and>\n                   (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        else None)", "thus \n    \"F = (\\<lambda>x. if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n               then THE y. \\<exists>z. y = Some z \n                             \\<and> (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n               else None)\""], ["proof (prove)\nusing this:\n  F ?x =\n  (if ?x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n   then THE y.\n           \\<exists>z.\n              y = Some z \\<and>\n              (?x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n   else None)\n\ngoal (1 subgoal):\n 1. F =\n    (\\<lambda>x.\n        if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        then THE y.\n                \\<exists>z.\n                   y = Some z \\<and>\n                   (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n        else None)", "by (rule ext)"], ["proof (state)\nthis:\n  F =\n  (\\<lambda>x.\n      if x \\<in> fst ` {(x, y). x \\<in> dom F \\<and> F x = Some y}\n      then THE y.\n              \\<exists>z.\n                 y = Some z \\<and>\n                 (x, z) \\<in> {(x, y). x \\<in> dom F \\<and> F x = Some y}\n      else None)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rep_fmap: \n  \"\\<exists>(Fp ::('a * 'b)set) (P'::('a * 'b)set \\<Rightarrow> bool). P (F::('a -~> 'b)) = P' Fp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Fp P'. P F = P' Fp", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>Fp P'. P F = P' Fp", "from rep_fmap_base"], ["proof (chain)\npicking this:\n  ?P ?F = pred_set_fmap ?P (set_fmap ?F)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?P ?F = pred_set_fmap ?P (set_fmap ?F)\n\ngoal (1 subgoal):\n 1. \\<exists>Fp P'. P F = P' Fp", "by blast"], ["proof (state)\nthis:\n  \\<exists>Fp P'. P F = P' Fp\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem finite_fsets: \"finite (F::('a::finite)set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite F", "from finite_subset[OF subset_UNIV]"], ["proof (chain)\npicking this:\n  finite UNIV \\<Longrightarrow> finite ?A", "show \"finite F\""], ["proof (prove)\nusing this:\n  finite UNIV \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite F", "by auto"], ["proof (state)\nthis:\n  finite F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_dom_fmap: \"finite (dom (F::('a -~> 'b))::('a::finite)set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (dom F)", "by (rule finite_fsets)"], ["", "lemma finite_fmap_ran: \"finite (ran (F::(('a::finite) -~> 'b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (ran F)", "unfolding ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {b. \\<exists>a. F a = Some b}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {b. \\<exists>a. F a = Some b}", "from finite_dom_fmap finite_imageI"], ["proof (chain)\npicking this:\n  finite (dom ?F)\n  finite ?F \\<Longrightarrow> finite (?h ` ?F)", "have \"finite ((\\<lambda>x. the (F x)) ` (dom F))\""], ["proof (prove)\nusing this:\n  finite (dom ?F)\n  finite ?F \\<Longrightarrow> finite (?h ` ?F)\n\ngoal (1 subgoal):\n 1. finite ((\\<lambda>x. the (F x)) ` dom F)", "by blast"], ["proof (state)\nthis:\n  finite ((\\<lambda>x. the (F x)) ` dom F)\n\ngoal (1 subgoal):\n 1. finite {b. \\<exists>a. F a = Some b}", "moreover"], ["proof (state)\nthis:\n  finite ((\\<lambda>x. the (F x)) ` dom F)\n\ngoal (1 subgoal):\n 1. finite {b. \\<exists>a. F a = Some b}", "have \"{b. \\<exists>a. F a = Some b} = (\\<lambda>x. the (F x)) ` (dom F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {b. \\<exists>a. F a = Some b} = (\\<lambda>x. the (F x)) ` dom F", "unfolding image_def dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {b. \\<exists>a. F a = Some b} =\n    {y. \\<exists>x\\<in>{a. F a \\<noteq> None}. y = the (F x)}", "by force"], ["proof (state)\nthis:\n  {b. \\<exists>a. F a = Some b} = (\\<lambda>x. the (F x)) ` dom F\n\ngoal (1 subgoal):\n 1. finite {b. \\<exists>a. F a = Some b}", "ultimately"], ["proof (chain)\npicking this:\n  finite ((\\<lambda>x. the (F x)) ` dom F)\n  {b. \\<exists>a. F a = Some b} = (\\<lambda>x. the (F x)) ` dom F", "show \"finite {b. \\<exists>a. F a = Some b}\""], ["proof (prove)\nusing this:\n  finite ((\\<lambda>x. the (F x)) ` dom F)\n  {b. \\<exists>a. F a = Some b} = (\\<lambda>x. the (F x)) ` dom F\n\ngoal (1 subgoal):\n 1. finite {b. \\<exists>a. F a = Some b}", "by simp"], ["proof (state)\nthis:\n  finite {b. \\<exists>a. F a = Some b}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_fset_map: \"finite (set_fmap (F::(('a::finite) -~> 'b)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "from finite_cartesian_product[OF finite_dom_fmap finite_fmap_ran]"], ["proof (chain)\npicking this:\n  finite (dom ?F2 \\<times> ran ?F1)", "have \"finite (dom F \\<times> ran F)\""], ["proof (prove)\nusing this:\n  finite (dom ?F2 \\<times> ran ?F1)\n\ngoal (1 subgoal):\n 1. finite (dom F \\<times> ran F)", "."], ["proof (state)\nthis:\n  finite (dom F \\<times> ran F)\n\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "moreover"], ["proof (state)\nthis:\n  finite (dom F \\<times> ran F)\n\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "have \"set_fmap F \\<subseteq> dom F \\<times> ran F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_fmap F \\<subseteq> dom F \\<times> ran F", "unfolding set_fmap_def dom_def ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). x \\<in> {a. F a \\<noteq> None} \\<and> F x = Some y}\n    \\<subseteq> {a. F a \\<noteq> None} \\<times>\n                {b. \\<exists>a. F a = Some b}", "by fastforce"], ["proof (state)\nthis:\n  set_fmap F \\<subseteq> dom F \\<times> ran F\n\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "ultimately"], ["proof (chain)\npicking this:\n  finite (dom F \\<times> ran F)\n  set_fmap F \\<subseteq> dom F \\<times> ran F", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (dom F \\<times> ran F)\n  set_fmap F \\<subseteq> dom F \\<times> ran F\n\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "using finite_subset"], ["proof (prove)\nusing this:\n  finite (dom F \\<times> ran F)\n  set_fmap F \\<subseteq> dom F \\<times> ran F\n  \\<lbrakk>?A \\<subseteq> ?B; finite ?B\\<rbrakk> \\<Longrightarrow> finite ?A\n\ngoal (1 subgoal):\n 1. finite (set_fmap F)", "by auto"], ["proof (state)\nthis:\n  finite (set_fmap F)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rep_fmap_imp: \n  \"\\<forall>F x z. x \\<notin> dom (F::('a -~> 'b)) \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  \\<Longrightarrow> (\\<forall>F x z. x \\<notin> fst ` (set_fmap F) \\<longrightarrow> (pred_set_fmap P)(set_fmap F) \n        \\<longrightarrow> (pred_set_fmap P) (insert (x,z) (set_fmap F)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F x z.\n       x \\<notin> dom F \\<longrightarrow>\n       P F \\<longrightarrow> P (F(x \\<mapsto> z)) \\<Longrightarrow>\n    \\<forall>F x z.\n       x \\<notin> fst ` set_fmap F \\<longrightarrow>\n       pred_set_fmap P (set_fmap F) \\<longrightarrow>\n       pred_set_fmap P (insert (x, z) (set_fmap F))", "proof (clarify)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "fix P F x z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "assume \n    \"\\<forall>F x z. x \\<notin> dom (F::('a -~> 'b)) \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\" and\n    \"x \\<notin> fst ` set_fmap F\" and \"(pred_set_fmap P)(set_fmap F)\""], ["proof (state)\nthis:\n  \\<forall>F x z.\n     x \\<notin> dom F \\<longrightarrow>\n     P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  x \\<notin> fst ` set_fmap F\n  pred_set_fmap P (set_fmap F)\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "hence notin: \"x \\<notin> dom F\""], ["proof (prove)\nusing this:\n  \\<forall>F x z.\n     x \\<notin> dom F \\<longrightarrow>\n     P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  x \\<notin> fst ` set_fmap F\n  pred_set_fmap P (set_fmap F)\n\ngoal (1 subgoal):\n 1. x \\<notin> dom F", "unfolding set_fmap_def image_def dom_def"], ["proof (prove)\nusing this:\n  \\<forall>F x z.\n     x \\<notin> {a. F a \\<noteq> None} \\<longrightarrow>\n     P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  x \\<notin> {y. \\<exists>x\\<in>{(x, y).\n                                 x \\<in> {a. F a \\<noteq> None} \\<and>\n                                 F x = Some y}.\n                    y = fst x}\n  pred_set_fmap P\n   {(x, y). x \\<in> {a. F a \\<noteq> None} \\<and> F x = Some y}\n\ngoal (1 subgoal):\n 1. x \\<notin> {a. F a \\<noteq> None}", "by simp"], ["proof (state)\nthis:\n  x \\<notin> dom F\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "moreover"], ["proof (state)\nthis:\n  x \\<notin> dom F\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "from \\<open>pred_set_fmap P (set_fmap F)\\<close>"], ["proof (chain)\npicking this:\n  pred_set_fmap P (set_fmap F)", "have \"P F\""], ["proof (prove)\nusing this:\n  pred_set_fmap P (set_fmap F)\n\ngoal (1 subgoal):\n 1. P F", "by (simp add: rep_fmap_base)"], ["proof (state)\nthis:\n  P F\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "ultimately"], ["proof (chain)\npicking this:\n  x \\<notin> dom F\n  P F", "have \"P (F(x \\<mapsto> z))\""], ["proof (prove)\nusing this:\n  x \\<notin> dom F\n  P F\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> z))", "using \\<open>\\<forall>F x z. x \\<notin> dom F \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\\<close>"], ["proof (prove)\nusing this:\n  x \\<notin> dom F\n  P F\n  \\<forall>F x z.\n     x \\<notin> dom F \\<longrightarrow>\n     P F \\<longrightarrow> P (F(x \\<mapsto> z))\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> z))", "by blast"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> z))\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "hence \"(pred_set_fmap P) (set_fmap (F(x \\<mapsto> z)))\""], ["proof (prove)\nusing this:\n  P (F(x \\<mapsto> z))\n\ngoal (1 subgoal):\n 1. pred_set_fmap P (set_fmap (F(x \\<mapsto> z)))", "by (simp add: rep_fmap_base)"], ["proof (state)\nthis:\n  pred_set_fmap P (set_fmap (F(x \\<mapsto> z)))\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "moreover"], ["proof (state)\nthis:\n  pred_set_fmap P (set_fmap (F(x \\<mapsto> z)))\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "from notin"], ["proof (chain)\npicking this:\n  x \\<notin> dom F", "have \"(insert (x,z) (set_fmap F)) = (set_fmap (F(fst (x,z) \\<mapsto> snd (x,z))))\""], ["proof (prove)\nusing this:\n  x \\<notin> dom F\n\ngoal (1 subgoal):\n 1. insert (x, z) (set_fmap F) =\n    set_fmap (F(fst (x, z) \\<mapsto> snd (x, z)))", "by (simp add: set_fmap_inv2)"], ["proof (state)\nthis:\n  insert (x, z) (set_fmap F) = set_fmap (F(fst (x, z) \\<mapsto> snd (x, z)))\n\ngoal (1 subgoal):\n 1. \\<And>F x z.\n       \\<lbrakk>\\<forall>F x z.\n                   x \\<notin> dom F \\<longrightarrow>\n                   P F \\<longrightarrow> P (F(x \\<mapsto> z));\n        x \\<notin> fst ` set_fmap F; pred_set_fmap P (set_fmap F)\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (insert (x, z) (set_fmap F))", "ultimately"], ["proof (chain)\npicking this:\n  pred_set_fmap P (set_fmap (F(x \\<mapsto> z)))\n  insert (x, z) (set_fmap F) = set_fmap (F(fst (x, z) \\<mapsto> snd (x, z)))", "show \"(pred_set_fmap P) (insert (x,z) (set_fmap F))\""], ["proof (prove)\nusing this:\n  pred_set_fmap P (set_fmap (F(x \\<mapsto> z)))\n  insert (x, z) (set_fmap F) = set_fmap (F(fst (x, z) \\<mapsto> snd (x, z)))\n\ngoal (1 subgoal):\n 1. pred_set_fmap P (insert (x, z) (set_fmap F))", "by simp"], ["proof (state)\nthis:\n  pred_set_fmap P (insert (x, z) (set_fmap F))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_dom: \n  fixes g\n  assumes \"{} = dom g\"\n  shows \"g = Map.empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g = Map.empty", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. g x = None", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. g x = None", "from assms"], ["proof (chain)\npicking this:\n  {} = dom g", "show \"g x = None\""], ["proof (prove)\nusing this:\n  {} = dom g\n\ngoal (1 subgoal):\n 1. g x = None", "by auto"], ["proof (state)\nthis:\n  g x = None\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem fmap_induct[rule_format, case_names empty insert]:\n  fixes  P  :: \"(('a :: finite) -~> 'b) \\<Rightarrow> bool\" and  F' :: \"('a  -~> 'b)\"\n  assumes \n  \"P Map.empty\" and\n  \"\\<forall>(F::('a -~> 'b)) x z. x \\<notin> dom F \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\"\n  shows \"P F'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P F'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P F'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. P F'", "fix F :: \"('a \\<times> 'b) set\""], ["proof (state)\ngoal (1 subgoal):\n 1. P F'", "assume \"finite F\""], ["proof (state)\nthis:\n  finite F\n\ngoal (1 subgoal):\n 1. P F'", "hence \"\\<forall>F'. F = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\""], ["proof (prove)\nusing this:\n  finite F\n\ngoal (1 subgoal):\n 1. \\<forall>F'.\n       F = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')", "proof (induct F)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>F'.\n       {} = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>F'.\n           F = set_fmap F' \\<longrightarrow>\n           pred_set_fmap P (set_fmap F')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F'.\n                            insert x F = set_fmap F' \\<longrightarrow>\n                            pred_set_fmap P (set_fmap F')", "case empty"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>F'.\n       {} = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>F'.\n           F = set_fmap F' \\<longrightarrow>\n           pred_set_fmap P (set_fmap F')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F'.\n                            insert x F = set_fmap F' \\<longrightarrow>\n                            pred_set_fmap P (set_fmap F')", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>F'.\n       {} = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       {} = set_fmap F' \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "fix F' :: \"'a -~> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       {} = set_fmap F' \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "assume \"{} = set_fmap F'\""], ["proof (state)\nthis:\n  {} = set_fmap F'\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       {} = set_fmap F' \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "hence \"\\<And>a. F' a = None\""], ["proof (prove)\nusing this:\n  {} = set_fmap F'\n\ngoal (1 subgoal):\n 1. \\<And>a. F' a = None", "unfolding set_fmap_def"], ["proof (prove)\nusing this:\n  {} = {(x, y). x \\<in> dom F' \\<and> F' x = Some y}\n\ngoal (1 subgoal):\n 1. \\<And>a. F' a = None", "by auto"], ["proof (state)\nthis:\n  F' ?a = None\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       {} = set_fmap F' \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "hence \"F' = Map.empty\""], ["proof (prove)\nusing this:\n  F' ?a = None\n\ngoal (1 subgoal):\n 1. F' = Map.empty", "by (rule ext)"], ["proof (state)\nthis:\n  F' = Map.empty\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       {} = set_fmap F' \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "with \\<open>P Map.empty\\<close> rep_fmap_base[of P Map.empty]"], ["proof (chain)\npicking this:\n  P Map.empty\n  P Map.empty = pred_set_fmap P (set_fmap Map.empty)\n  F' = Map.empty", "show \"pred_set_fmap P (set_fmap F')\""], ["proof (prove)\nusing this:\n  P Map.empty\n  P Map.empty = pred_set_fmap P (set_fmap Map.empty)\n  F' = Map.empty\n\ngoal (1 subgoal):\n 1. pred_set_fmap P (set_fmap F')", "by simp"], ["proof (state)\nthis:\n  pred_set_fmap P (set_fmap F')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>F'.\n     {} = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>F'.\n           F = set_fmap F' \\<longrightarrow>\n           pred_set_fmap P (set_fmap F')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F'.\n                            insert x F = set_fmap F' \\<longrightarrow>\n                            pred_set_fmap P (set_fmap F')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>F'.\n           F = set_fmap F' \\<longrightarrow>\n           pred_set_fmap P (set_fmap F')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F'.\n                            insert x F = set_fmap F' \\<longrightarrow>\n                            pred_set_fmap P (set_fmap F')", "case (insert x Fa)"], ["proof (state)\nthis:\n  finite Fa\n  x \\<notin> Fa\n  \\<forall>F'.\n     Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<forall>F'.\n           F = set_fmap F' \\<longrightarrow>\n           pred_set_fmap P (set_fmap F')\\<rbrakk>\n       \\<Longrightarrow> \\<forall>F'.\n                            insert x F = set_fmap F' \\<longrightarrow>\n                            pred_set_fmap P (set_fmap F')", "thus ?case"], ["proof (prove)\nusing this:\n  finite Fa\n  x \\<notin> Fa\n  \\<forall>F'.\n     Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n\ngoal (1 subgoal):\n 1. \\<forall>F'.\n       insert x Fa = set_fmap F' \\<longrightarrow>\n       pred_set_fmap P (set_fmap F')", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "fix Fb :: \"'a -~> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "assume \"insert x Fa = set_fmap Fb\""], ["proof (state)\nthis:\n  insert x Fa = set_fmap Fb\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "from \n          set_fmap_minus_insert[OF \\<open>x \\<notin> Fa\\<close> this]\n          \\<open>\\<forall>F'. Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\\<close> \n          rep_fmap_base[of P \"Fb -- x\"]"], ["proof (chain)\npicking this:\n  Fa = set_fmap (Fb -- x)\n  \\<forall>F'.\n     Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n  P (Fb -- x) = pred_set_fmap P (set_fmap (Fb -- x))", "have \"P (Fb -- x)\""], ["proof (prove)\nusing this:\n  Fa = set_fmap (Fb -- x)\n  \\<forall>F'.\n     Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n  P (Fb -- x) = pred_set_fmap P (set_fmap (Fb -- x))\n\ngoal (1 subgoal):\n 1. P (Fb -- x)", "by blast"], ["proof (state)\nthis:\n  P (Fb -- x)\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "with \n          \\<open>\\<forall>F x z. x \\<notin> dom F \\<longrightarrow> P F \\<longrightarrow> P (F(x \\<mapsto> z))\\<close> \n          fst_notin_fmap_minus_dom[OF \\<open>insert x Fa = set_fmap Fb\\<close>]"], ["proof (chain)\npicking this:\n  \\<forall>F x z.\n     x \\<notin> dom F \\<longrightarrow>\n     P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  fst x \\<notin> dom (Fb -- x)\n  P (Fb -- x)", "have \"P ((Fb -- x)(fst x \\<mapsto> snd x))\""], ["proof (prove)\nusing this:\n  \\<forall>F x z.\n     x \\<notin> dom F \\<longrightarrow>\n     P F \\<longrightarrow> P (F(x \\<mapsto> z))\n  fst x \\<notin> dom (Fb -- x)\n  P (Fb -- x)\n\ngoal (1 subgoal):\n 1. P ((Fb -- x)(fst x \\<mapsto> snd x))", "by blast"], ["proof (state)\nthis:\n  P ((Fb -- x)(fst x \\<mapsto> snd x))\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "moreover"], ["proof (state)\nthis:\n  P ((Fb -- x)(fst x \\<mapsto> snd x))\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "from \n          insert_absorb[OF insert_lem[OF \\<open>insert x Fa = set_fmap Fb\\<close>]]\n          set_fmap_minus_iff[of Fb x]\n          set_fmap_inv2[OF \n           fst_notin_fmap_minus_dom[OF \\<open>insert x Fa = set_fmap Fb\\<close>]]"], ["proof (chain)\npicking this:\n  insert x (set_fmap Fb) = set_fmap Fb\n  set_fmap (Fb -- x) = set_fmap Fb - {x}\n  insert x (set_fmap (Fb -- x)) =\n  set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))", "have \"set_fmap Fb = set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))\""], ["proof (prove)\nusing this:\n  insert x (set_fmap Fb) = set_fmap Fb\n  set_fmap (Fb -- x) = set_fmap Fb - {x}\n  insert x (set_fmap (Fb -- x)) =\n  set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))\n\ngoal (1 subgoal):\n 1. set_fmap Fb = set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))", "by simp"], ["proof (state)\nthis:\n  set_fmap Fb = set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))\n\ngoal (1 subgoal):\n 1. \\<And>F'.\n       \\<lbrakk>finite Fa; x \\<notin> Fa;\n        \\<forall>F'.\n           Fa = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F');\n        insert x Fa = set_fmap F'\\<rbrakk>\n       \\<Longrightarrow> pred_set_fmap P (set_fmap F')", "ultimately"], ["proof (chain)\npicking this:\n  P ((Fb -- x)(fst x \\<mapsto> snd x))\n  set_fmap Fb = set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))", "show \"pred_set_fmap P (set_fmap Fb)\""], ["proof (prove)\nusing this:\n  P ((Fb -- x)(fst x \\<mapsto> snd x))\n  set_fmap Fb = set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))\n\ngoal (1 subgoal):\n 1. pred_set_fmap P (set_fmap Fb)", "using rep_fmap_base[of P \"(Fb -- x)(fst x \\<mapsto> snd x)\"]"], ["proof (prove)\nusing this:\n  P ((Fb -- x)(fst x \\<mapsto> snd x))\n  set_fmap Fb = set_fmap ((Fb -- x)(fst x \\<mapsto> snd x))\n  P ((Fb -- x)(fst x \\<mapsto> snd x)) =\n  pred_set_fmap P (set_fmap ((Fb -- x)(fst x \\<mapsto> snd x)))\n\ngoal (1 subgoal):\n 1. pred_set_fmap P (set_fmap Fb)", "by simp"], ["proof (state)\nthis:\n  pred_set_fmap P (set_fmap Fb)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>F'.\n     insert x Fa = set_fmap F' \\<longrightarrow>\n     pred_set_fmap P (set_fmap F')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>F'.\n     F = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n\ngoal (1 subgoal):\n 1. P F'", "}"], ["proof (state)\nthis:\n  finite ?F2 \\<Longrightarrow>\n  \\<forall>F'.\n     ?F2 = set_fmap F' \\<longrightarrow> pred_set_fmap P (set_fmap F')\n\ngoal (1 subgoal):\n 1. P F'", "from this[OF finite_fset_map[of F']]\n       rep_fmap_base[of P F']"], ["proof (chain)\npicking this:\n  \\<forall>F'a.\n     set_fmap F' = set_fmap F'a \\<longrightarrow>\n     pred_set_fmap P (set_fmap F'a)\n  P F' = pred_set_fmap P (set_fmap F')", "show \"P F'\""], ["proof (prove)\nusing this:\n  \\<forall>F'a.\n     set_fmap F' = set_fmap F'a \\<longrightarrow>\n     pred_set_fmap P (set_fmap F'a)\n  P F' = pred_set_fmap P (set_fmap F')\n\ngoal (1 subgoal):\n 1. P F'", "by blast"], ["proof (state)\nthis:\n  P F'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_induct3[consumes 2, case_names empty insert]:\n  \"\\<And>(F2::('a::finite) -~> 'b) (F3::('a -~> 'b)).\n   \\<lbrakk> dom (F1::('a -~> 'b)) = dom F2; dom F3 = dom F1; \n     P Map.empty Map.empty Map.empty;\n     \\<And>x a b c (F1::('a -~> 'b)) (F2::('a -~> 'b)) (F3::('a -~> 'b)).\n     \\<lbrakk> P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1; x \\<notin> dom F1 \\<rbrakk>\n     \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b)) (F3(x \\<mapsto> c)) \\<rbrakk>\n  \\<Longrightarrow> P F1 F2 F3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F2 F3.\n       \\<lbrakk>dom F1 = dom F2; dom F3 = dom F1;\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P F1 F2 F3", "proof (induct F1 rule: fmap_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>F2 F3.\n       \\<lbrakk>dom Map.empty = dom F2; dom F3 = dom Map.empty;\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P Map.empty F2 F3\n 2. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "case empty"], ["proof (state)\nthis:\n  dom Map.empty = dom F2\n  dom F3 = dom Map.empty\n  P Map.empty Map.empty Map.empty\n  \\<lbrakk>P ?F1.0 ?F2.0 ?F3.0; dom ?F1.0 = dom ?F2.0;\n   dom ?F3.0 = dom ?F1.0; ?x \\<notin> dom ?F1.0\\<rbrakk>\n  \\<Longrightarrow> P (?F1.0(?x \\<mapsto> ?a)) (?F2.0(?x \\<mapsto> ?b))\n                     (?F3.0(?x \\<mapsto> ?c))\n\ngoal (2 subgoals):\n 1. \\<And>F2 F3.\n       \\<lbrakk>dom Map.empty = dom F2; dom F3 = dom Map.empty;\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P Map.empty F2 F3\n 2. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "from \\<open>dom Map.empty = dom F2\\<close>"], ["proof (chain)\npicking this:\n  dom Map.empty = dom F2", "have \"F2 = Map.empty\""], ["proof (prove)\nusing this:\n  dom Map.empty = dom F2\n\ngoal (1 subgoal):\n 1. F2 = Map.empty", "by (simp add: empty_dom)"], ["proof (state)\nthis:\n  F2 = Map.empty\n\ngoal (2 subgoals):\n 1. \\<And>F2 F3.\n       \\<lbrakk>dom Map.empty = dom F2; dom F3 = dom Map.empty;\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P Map.empty F2 F3\n 2. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "moreover"], ["proof (state)\nthis:\n  F2 = Map.empty\n\ngoal (2 subgoals):\n 1. \\<And>F2 F3.\n       \\<lbrakk>dom Map.empty = dom F2; dom F3 = dom Map.empty;\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P Map.empty F2 F3\n 2. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "from \\<open>dom F3 = dom Map.empty\\<close>"], ["proof (chain)\npicking this:\n  dom F3 = dom Map.empty", "have \"F3 = Map.empty\""], ["proof (prove)\nusing this:\n  dom F3 = dom Map.empty\n\ngoal (1 subgoal):\n 1. F3 = Map.empty", "by (simp add: empty_dom)"], ["proof (state)\nthis:\n  F3 = Map.empty\n\ngoal (2 subgoals):\n 1. \\<And>F2 F3.\n       \\<lbrakk>dom Map.empty = dom F2; dom F3 = dom Map.empty;\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P Map.empty F2 F3\n 2. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "ultimately"], ["proof (chain)\npicking this:\n  F2 = Map.empty\n  F3 = Map.empty", "show ?case"], ["proof (prove)\nusing this:\n  F2 = Map.empty\n  F3 = Map.empty\n\ngoal (1 subgoal):\n 1. P Map.empty F2 F3", "using \\<open>P Map.empty Map.empty Map.empty\\<close>"], ["proof (prove)\nusing this:\n  F2 = Map.empty\n  F3 = Map.empty\n  P Map.empty Map.empty Map.empty\n\ngoal (1 subgoal):\n 1. P Map.empty F2 F3", "by simp"], ["proof (state)\nthis:\n  P Map.empty F2 F3\n\ngoal (1 subgoal):\n 1. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "case (insert F x y)"], ["proof (state)\nthis:\n  x \\<notin> dom F\n  \\<lbrakk>dom F = dom ?F2.0; dom ?F3.0 = dom F;\n   P Map.empty Map.empty Map.empty;\n   \\<And>x a b c F1 F2 F3.\n      \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n       x \\<notin> dom F1\\<rbrakk>\n      \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                         (F3(x \\<mapsto> c))\\<rbrakk>\n  \\<Longrightarrow> P F ?F2.0 ?F3.0\n  dom (F(x \\<mapsto> y)) = dom F2\n  dom F3 = dom (F(x \\<mapsto> y))\n  P Map.empty Map.empty Map.empty\n  \\<lbrakk>P ?F1.0 ?F2.0 ?F3.0; dom ?F1.0 = dom ?F2.0;\n   dom ?F3.0 = dom ?F1.0; ?x \\<notin> dom ?F1.0\\<rbrakk>\n  \\<Longrightarrow> P (?F1.0(?x \\<mapsto> ?a)) (?F2.0(?x \\<mapsto> ?b))\n                     (?F3.0(?x \\<mapsto> ?c))\n\ngoal (1 subgoal):\n 1. \\<And>F x z F2 F3.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>F2 F3.\n           \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n            P Map.empty Map.empty Map.empty;\n            \\<And>x a b c F1 F2 F3.\n               \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n                x \\<notin> dom F1\\<rbrakk>\n               \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                                  (F3(x \\<mapsto> c))\\<rbrakk>\n           \\<Longrightarrow> P F F2 F3;\n        dom (F(x \\<mapsto> z)) = dom F2; dom F3 = dom (F(x \\<mapsto> z));\n        P Map.empty Map.empty Map.empty;\n        \\<And>x a b c F1 F2 F3.\n           \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n            x \\<notin> dom F1\\<rbrakk>\n           \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                              (F3(x \\<mapsto> c))\\<rbrakk>\n       \\<Longrightarrow> P (F(x \\<mapsto> z)) F2 F3", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<notin> dom F\n  \\<lbrakk>dom F = dom ?F2.0; dom ?F3.0 = dom F;\n   P Map.empty Map.empty Map.empty;\n   \\<And>x a b c F1 F2 F3.\n      \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n       x \\<notin> dom F1\\<rbrakk>\n      \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                         (F3(x \\<mapsto> c))\\<rbrakk>\n  \\<Longrightarrow> P F ?F2.0 ?F3.0\n  dom (F(x \\<mapsto> y)) = dom F2\n  dom F3 = dom (F(x \\<mapsto> y))\n  P Map.empty Map.empty Map.empty\n  \\<lbrakk>P ?F1.0 ?F2.0 ?F3.0; dom ?F1.0 = dom ?F2.0;\n   dom ?F3.0 = dom ?F1.0; ?x \\<notin> dom ?F1.0\\<rbrakk>\n  \\<Longrightarrow> P (?F1.0(?x \\<mapsto> ?a)) (?F2.0(?x \\<mapsto> ?b))\n                     (?F3.0(?x \\<mapsto> ?c))\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "proof (cases \"F2 = Map.empty\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 = Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3\n 2. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "case True"], ["proof (state)\nthis:\n  F2 = Map.empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 = Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3\n 2. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "with \\<open>dom (F(x \\<mapsto> y)) = dom F2\\<close>"], ["proof (chain)\npicking this:\n  dom (F(x \\<mapsto> y)) = dom F2\n  F2 = Map.empty", "have \"dom (F(x \\<mapsto> y)) = {}\""], ["proof (prove)\nusing this:\n  dom (F(x \\<mapsto> y)) = dom F2\n  F2 = Map.empty\n\ngoal (1 subgoal):\n 1. dom (F(x \\<mapsto> y)) = {}", "by auto"], ["proof (state)\nthis:\n  dom (F(x \\<mapsto> y)) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 = Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3\n 2. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "thus ?thesis"], ["proof (prove)\nusing this:\n  dom (F(x \\<mapsto> y)) = {}\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "by auto"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "case False"], ["proof (state)\nthis:\n  F2 \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<notin> dom F;\n     \\<And>F2 F3.\n        \\<lbrakk>dom F = dom F2; dom F3 = dom F;\n         P Map.empty Map.empty Map.empty;\n         \\<And>x a b c F1 F2 F3.\n            \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n             x \\<notin> dom F1\\<rbrakk>\n            \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                               (F3(x \\<mapsto> c))\\<rbrakk>\n        \\<Longrightarrow> P F F2 F3;\n     dom (F(x \\<mapsto> y)) = dom F2; dom F3 = dom (F(x \\<mapsto> y));\n     P Map.empty Map.empty Map.empty;\n     \\<And>F1 F2 F3 x a b c.\n        \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n         x \\<notin> dom F1\\<rbrakk>\n        \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                           (F3(x \\<mapsto> c));\n     F2 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "thus ?thesis"], ["proof (prove)\nusing this:\n  F2 \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "proof (cases \"F3 = Map.empty\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>F2 \\<noteq> Map.empty; F3 = Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3\n 2. \\<lbrakk>F2 \\<noteq> Map.empty; F3 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "case True"], ["proof (state)\nthis:\n  F3 = Map.empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>F2 \\<noteq> Map.empty; F3 = Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3\n 2. \\<lbrakk>F2 \\<noteq> Map.empty; F3 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "with \\<open>dom F3 = dom (F(x \\<mapsto> y))\\<close>"], ["proof (chain)\npicking this:\n  dom F3 = dom (F(x \\<mapsto> y))\n  F3 = Map.empty", "have \"dom (F(x \\<mapsto> y)) = {}\""], ["proof (prove)\nusing this:\n  dom F3 = dom (F(x \\<mapsto> y))\n  F3 = Map.empty\n\ngoal (1 subgoal):\n 1. dom (F(x \\<mapsto> y)) = {}", "by simp"], ["proof (state)\nthis:\n  dom (F(x \\<mapsto> y)) = {}\n\ngoal (2 subgoals):\n 1. \\<lbrakk>F2 \\<noteq> Map.empty; F3 = Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3\n 2. \\<lbrakk>F2 \\<noteq> Map.empty; F3 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "thus ?thesis"], ["proof (prove)\nusing this:\n  dom (F(x \\<mapsto> y)) = {}\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "by simp"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F2 \\<noteq> Map.empty; F3 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>F2 \\<noteq> Map.empty; F3 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "case False"], ["proof (state)\nthis:\n  F3 \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. \\<lbrakk>F2 \\<noteq> Map.empty; F3 \\<noteq> Map.empty\\<rbrakk>\n    \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "thus ?thesis"], ["proof (prove)\nusing this:\n  F3 \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "from \\<open>F2 \\<noteq> Map.empty\\<close>"], ["proof (chain)\npicking this:\n  F2 \\<noteq> Map.empty", "have \"\\<forall>l\\<in>dom F2. \\<exists>f'. F2 = f'(l \\<mapsto> the (F2 l)) \\<and> l \\<notin> dom f'\""], ["proof (prove)\nusing this:\n  F2 \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>dom F2.\n       \\<exists>f'. F2 = f'(l \\<mapsto> the (F2 l)) \\<and> l \\<notin> dom f'", "by (simp add: one_more_dom)"], ["proof (state)\nthis:\n  \\<forall>l\\<in>dom F2.\n     \\<exists>f'. F2 = f'(l \\<mapsto> the (F2 l)) \\<and> l \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "moreover"], ["proof (state)\nthis:\n  \\<forall>l\\<in>dom F2.\n     \\<exists>f'. F2 = f'(l \\<mapsto> the (F2 l)) \\<and> l \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "from \\<open>dom (F(x \\<mapsto> y)) = dom F2\\<close>"], ["proof (chain)\npicking this:\n  dom (F(x \\<mapsto> y)) = dom F2", "have \"x \\<in> dom F2\""], ["proof (prove)\nusing this:\n  dom (F(x \\<mapsto> y)) = dom F2\n\ngoal (1 subgoal):\n 1. x \\<in> dom F2", "by force"], ["proof (state)\nthis:\n  x \\<in> dom F2\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>dom F2.\n     \\<exists>f'. F2 = f'(l \\<mapsto> the (F2 l)) \\<and> l \\<notin> dom f'\n  x \\<in> dom F2", "have \"\\<exists>f'. F2 = f'(x \\<mapsto> the (F2 x)) \\<and> x \\<notin> dom f'\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>dom F2.\n     \\<exists>f'. F2 = f'(l \\<mapsto> the (F2 l)) \\<and> l \\<notin> dom f'\n  x \\<in> dom F2\n\ngoal (1 subgoal):\n 1. \\<exists>f'. F2 = f'(x \\<mapsto> the (F2 x)) \\<and> x \\<notin> dom f'", "by blast"], ["proof (state)\nthis:\n  \\<exists>f'. F2 = f'(x \\<mapsto> the (F2 x)) \\<and> x \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "then"], ["proof (chain)\npicking this:\n  \\<exists>f'. F2 = f'(x \\<mapsto> the (F2 x)) \\<and> x \\<notin> dom f'", "obtain F2' where \"F2 = F2'(x \\<mapsto> the (F2 x))\" and \"x \\<notin> dom F2'\""], ["proof (prove)\nusing this:\n  \\<exists>f'. F2 = f'(x \\<mapsto> the (F2 x)) \\<and> x \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. (\\<And>F2'.\n        \\<lbrakk>F2 = F2'(x \\<mapsto> the (F2 x));\n         x \\<notin> dom F2'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  F2 = F2'(x \\<mapsto> the (F2 x))\n  x \\<notin> dom F2'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "from \\<open>F3 \\<noteq> Map.empty\\<close>"], ["proof (chain)\npicking this:\n  F3 \\<noteq> Map.empty", "have \"\\<forall>l\\<in>dom F3. \\<exists>f'. F3 = f'(l \\<mapsto> the (F3 l)) \\<and> l \\<notin> dom f'\""], ["proof (prove)\nusing this:\n  F3 \\<noteq> Map.empty\n\ngoal (1 subgoal):\n 1. \\<forall>l\\<in>dom F3.\n       \\<exists>f'. F3 = f'(l \\<mapsto> the (F3 l)) \\<and> l \\<notin> dom f'", "by (simp add: one_more_dom)"], ["proof (state)\nthis:\n  \\<forall>l\\<in>dom F3.\n     \\<exists>f'. F3 = f'(l \\<mapsto> the (F3 l)) \\<and> l \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "moreover"], ["proof (state)\nthis:\n  \\<forall>l\\<in>dom F3.\n     \\<exists>f'. F3 = f'(l \\<mapsto> the (F3 l)) \\<and> l \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "from \\<open>dom F3 = dom (F(x \\<mapsto> y))\\<close>"], ["proof (chain)\npicking this:\n  dom F3 = dom (F(x \\<mapsto> y))", "have \"x \\<in> dom F3\""], ["proof (prove)\nusing this:\n  dom F3 = dom (F(x \\<mapsto> y))\n\ngoal (1 subgoal):\n 1. x \\<in> dom F3", "by force"], ["proof (state)\nthis:\n  x \\<in> dom F3\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>dom F3.\n     \\<exists>f'. F3 = f'(l \\<mapsto> the (F3 l)) \\<and> l \\<notin> dom f'\n  x \\<in> dom F3", "have \"\\<exists>f'. F3 = f'(x \\<mapsto> the (F3 x)) \\<and> x \\<notin> dom f'\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>dom F3.\n     \\<exists>f'. F3 = f'(l \\<mapsto> the (F3 l)) \\<and> l \\<notin> dom f'\n  x \\<in> dom F3\n\ngoal (1 subgoal):\n 1. \\<exists>f'. F3 = f'(x \\<mapsto> the (F3 x)) \\<and> x \\<notin> dom f'", "by blast"], ["proof (state)\nthis:\n  \\<exists>f'. F3 = f'(x \\<mapsto> the (F3 x)) \\<and> x \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "then"], ["proof (chain)\npicking this:\n  \\<exists>f'. F3 = f'(x \\<mapsto> the (F3 x)) \\<and> x \\<notin> dom f'", "obtain F3' where \"F3 = F3'(x \\<mapsto> the (F3 x))\" and \"x \\<notin> dom F3'\""], ["proof (prove)\nusing this:\n  \\<exists>f'. F3 = f'(x \\<mapsto> the (F3 x)) \\<and> x \\<notin> dom f'\n\ngoal (1 subgoal):\n 1. (\\<And>F3'.\n        \\<lbrakk>F3 = F3'(x \\<mapsto> the (F3 x));\n         x \\<notin> dom F3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  F3 = F3'(x \\<mapsto> the (F3 x))\n  x \\<notin> dom F3'\n\ngoal (1 subgoal):\n 1. F3 \\<noteq> Map.empty \\<Longrightarrow> P (F(x \\<mapsto> y)) F2 F3", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "from \\<open>dom (F(x \\<mapsto> y)) = dom F2\\<close> \\<open>F2 = F2'(x \\<mapsto> the (F2 x))\\<close>"], ["proof (chain)\npicking this:\n  dom (F(x \\<mapsto> y)) = dom F2\n  F2 = F2'(x \\<mapsto> the (F2 x))", "have \"dom (F(x \\<mapsto> y)) = dom (F2'(x \\<mapsto> the (F2 x)))\""], ["proof (prove)\nusing this:\n  dom (F(x \\<mapsto> y)) = dom F2\n  F2 = F2'(x \\<mapsto> the (F2 x))\n\ngoal (1 subgoal):\n 1. dom (F(x \\<mapsto> y)) = dom (F2'(x \\<mapsto> the (F2 x)))", "by simp"], ["proof (state)\nthis:\n  dom (F(x \\<mapsto> y)) = dom (F2'(x \\<mapsto> the (F2 x)))\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "with \\<open>x \\<notin> dom F\\<close> \\<open>x \\<notin> dom F2'\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> dom F\n  x \\<notin> dom F2'\n  dom (F(x \\<mapsto> y)) = dom (F2'(x \\<mapsto> the (F2 x)))", "have \"dom F = dom F2'\""], ["proof (prove)\nusing this:\n  x \\<notin> dom F\n  x \\<notin> dom F2'\n  dom (F(x \\<mapsto> y)) = dom (F2'(x \\<mapsto> the (F2 x)))\n\ngoal (1 subgoal):\n 1. dom F = dom F2'", "by auto"], ["proof (state)\nthis:\n  dom F = dom F2'\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "moreover"], ["proof (state)\nthis:\n  dom F = dom F2'\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "from \\<open>dom F3 = dom (F(x \\<mapsto> y))\\<close> \\<open>F3 = F3'(x \\<mapsto> the (F3 x))\\<close>"], ["proof (chain)\npicking this:\n  dom F3 = dom (F(x \\<mapsto> y))\n  F3 = F3'(x \\<mapsto> the (F3 x))", "have \"dom (F(x \\<mapsto> y)) = dom (F3'(x \\<mapsto> the (F3 x)))\""], ["proof (prove)\nusing this:\n  dom F3 = dom (F(x \\<mapsto> y))\n  F3 = F3'(x \\<mapsto> the (F3 x))\n\ngoal (1 subgoal):\n 1. dom (F(x \\<mapsto> y)) = dom (F3'(x \\<mapsto> the (F3 x)))", "by simp"], ["proof (state)\nthis:\n  dom (F(x \\<mapsto> y)) = dom (F3'(x \\<mapsto> the (F3 x)))\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "with \\<open>x \\<notin> dom F\\<close> \\<open>x \\<notin> dom F3'\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> dom F\n  x \\<notin> dom F3'\n  dom (F(x \\<mapsto> y)) = dom (F3'(x \\<mapsto> the (F3 x)))", "have \"dom F3' = dom F\""], ["proof (prove)\nusing this:\n  x \\<notin> dom F\n  x \\<notin> dom F3'\n  dom (F(x \\<mapsto> y)) = dom (F3'(x \\<mapsto> the (F3 x)))\n\ngoal (1 subgoal):\n 1. dom F3' = dom F", "by auto"], ["proof (state)\nthis:\n  dom F3' = dom F\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "ultimately"], ["proof (chain)\npicking this:\n  dom F = dom F2'\n  dom F3' = dom F", "have \"P F F2' F3'\""], ["proof (prove)\nusing this:\n  dom F = dom F2'\n  dom F3' = dom F\n\ngoal (1 subgoal):\n 1. P F F2' F3'", "using insert"], ["proof (prove)\nusing this:\n  dom F = dom F2'\n  dom F3' = dom F\n  x \\<notin> dom F\n  \\<lbrakk>dom F = dom ?F2.0; dom ?F3.0 = dom F;\n   P Map.empty Map.empty Map.empty;\n   \\<And>x a b c F1 F2 F3.\n      \\<lbrakk>P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1;\n       x \\<notin> dom F1\\<rbrakk>\n      \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b))\n                         (F3(x \\<mapsto> c))\\<rbrakk>\n  \\<Longrightarrow> P F ?F2.0 ?F3.0\n  dom (F(x \\<mapsto> y)) = dom F2\n  dom F3 = dom (F(x \\<mapsto> y))\n  P Map.empty Map.empty Map.empty\n  \\<lbrakk>P ?F1.0 ?F2.0 ?F3.0; dom ?F1.0 = dom ?F2.0;\n   dom ?F3.0 = dom ?F1.0; ?x \\<notin> dom ?F1.0\\<rbrakk>\n  \\<Longrightarrow> P (?F1.0(?x \\<mapsto> ?a)) (?F2.0(?x \\<mapsto> ?b))\n                     (?F3.0(?x \\<mapsto> ?c))\n\ngoal (1 subgoal):\n 1. P F F2' F3'", "by simp"], ["proof (state)\nthis:\n  P F F2' F3'\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "with \n            \\<open>\\<And>F1 F2 F3 x a b c.\n              \\<lbrakk> P F1 F2 F3; dom F1 = dom F2; dom F3 = dom F1; x \\<notin> dom F1 \\<rbrakk>\n              \\<Longrightarrow> P (F1(x \\<mapsto> a)) (F2(x \\<mapsto> b)) (F3(x \\<mapsto> c))\\<close>\n            \\<open>dom F = dom F2'\\<close>\n            \\<open>dom F3' = dom F\\<close>\n            \\<open>x \\<notin> dom F\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>P ?F1.0 ?F2.0 ?F3.0; dom ?F1.0 = dom ?F2.0;\n   dom ?F3.0 = dom ?F1.0; ?x \\<notin> dom ?F1.0\\<rbrakk>\n  \\<Longrightarrow> P (?F1.0(?x \\<mapsto> ?a)) (?F2.0(?x \\<mapsto> ?b))\n                     (?F3.0(?x \\<mapsto> ?c))\n  dom F = dom F2'\n  dom F3' = dom F\n  x \\<notin> dom F\n  P F F2' F3'", "have \"P (F(x \\<mapsto> y)) (F2'(x \\<mapsto> the (F2 x))) (F3'(x \\<mapsto> the (F3 x)))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>P ?F1.0 ?F2.0 ?F3.0; dom ?F1.0 = dom ?F2.0;\n   dom ?F3.0 = dom ?F1.0; ?x \\<notin> dom ?F1.0\\<rbrakk>\n  \\<Longrightarrow> P (?F1.0(?x \\<mapsto> ?a)) (?F2.0(?x \\<mapsto> ?b))\n                     (?F3.0(?x \\<mapsto> ?c))\n  dom F = dom F2'\n  dom F3' = dom F\n  x \\<notin> dom F\n  P F F2' F3'\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) (F2'(x \\<mapsto> the (F2 x)))\n     (F3'(x \\<mapsto> the (F3 x)))", "by simp"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) (F2'(x \\<mapsto> the (F2 x)))\n   (F3'(x \\<mapsto> the (F3 x)))\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "with \\<open>F2 = F2'(x \\<mapsto> the (F2 x))\\<close> \\<open>F3 = F3'(x \\<mapsto> the (F3 x))\\<close>"], ["proof (chain)\npicking this:\n  F2 = F2'(x \\<mapsto> the (F2 x))\n  F3 = F3'(x \\<mapsto> the (F3 x))\n  P (F(x \\<mapsto> y)) (F2'(x \\<mapsto> the (F2 x)))\n   (F3'(x \\<mapsto> the (F3 x)))", "show \"P (F(x \\<mapsto> y)) F2 F3\""], ["proof (prove)\nusing this:\n  F2 = F2'(x \\<mapsto> the (F2 x))\n  F3 = F3'(x \\<mapsto> the (F3 x))\n  P (F(x \\<mapsto> y)) (F2'(x \\<mapsto> the (F2 x)))\n   (F3'(x \\<mapsto> the (F3 x)))\n\ngoal (1 subgoal):\n 1. P (F(x \\<mapsto> y)) F2 F3", "by simp"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (F(x \\<mapsto> y)) F2 F3\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_ex_cof2:\n  \"\\<And>(P::'c \\<Rightarrow> 'c \\<Rightarrow> 'b option \\<Rightarrow> 'b option \\<Rightarrow> 'a \\<Rightarrow> bool)\n     (f'::('a::finite) -~> 'b).\n  \\<lbrakk> dom f' = dom (f::('a -~> 'b)); \n    \\<forall>l\\<in>dom f. (\\<exists>L. finite L \n                  \\<and> (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p\n                      \\<longrightarrow> P s p (f l) (f' l) l)) \\<rbrakk>\n  \\<Longrightarrow> \\<exists>L. finite L \\<and> (\\<forall>l\\<in>dom f. (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \n                                   \\<longrightarrow> P s p (f l) (f' l) l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P f'.\n       \\<lbrakk>dom f' = dom f;\n        \\<forall>l\\<in>dom f.\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p (f l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom f.\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p (f l) (f' l) l)", "proof (induct f rule: fmap_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P f'.\n       \\<lbrakk>dom f' = dom Map.empty;\n        \\<forall>l\\<in>dom Map.empty.\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p None (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom Map.empty.\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p None (f' l) l)\n 2. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "case empty"], ["proof (state)\nthis:\n  dom f' = dom Map.empty\n  \\<forall>l\\<in>dom Map.empty.\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p None (f' l) l)\n\ngoal (2 subgoals):\n 1. \\<And>P f'.\n       \\<lbrakk>dom f' = dom Map.empty;\n        \\<forall>l\\<in>dom Map.empty.\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p None (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom Map.empty.\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p None (f' l) l)\n 2. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "thus ?case"], ["proof (prove)\nusing this:\n  dom f' = dom Map.empty\n  \\<forall>l\\<in>dom Map.empty.\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p None (f' l) l)\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>l\\<in>dom Map.empty.\n           \\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p None (f' l) l)", "by blast"], ["proof (state)\nthis:\n  \\<exists>L.\n     finite L \\<and>\n     (\\<forall>l\\<in>dom Map.empty.\n         \\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p None (f' l) l)\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "case (insert f l t P f')"], ["proof (state)\nthis:\n  l \\<notin> dom f\n  \\<lbrakk>dom ?f' = dom f;\n   \\<forall>l\\<in>dom f.\n      \\<exists>L.\n         finite L \\<and>\n         (\\<forall>s p.\n             s \\<notin> L \\<and>\n             p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n             ?P s p (f l) (?f' l) l)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L.\n                       finite L \\<and>\n                       (\\<forall>l\\<in>dom f.\n                           \\<forall>s p.\n                              s \\<notin> L \\<and>\n                              p \\<notin> L \\<and>\n                              s \\<noteq> p \\<longrightarrow>\n                              ?P s p (f l) (?f' l) l)\n  dom f' = dom (f(l \\<mapsto> t))\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "note imp = this(2) and pred = this(4)"], ["proof (state)\nthis:\n  \\<lbrakk>dom ?f' = dom f;\n   \\<forall>l\\<in>dom f.\n      \\<exists>L.\n         finite L \\<and>\n         (\\<forall>s p.\n             s \\<notin> L \\<and>\n             p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n             ?P s p (f l) (?f' l) l)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L.\n                       finite L \\<and>\n                       (\\<forall>l\\<in>dom f.\n                           \\<forall>s p.\n                              s \\<notin> L \\<and>\n                              p \\<notin> L \\<and>\n                              s \\<noteq> p \\<longrightarrow>\n                              ?P s p (f l) (?f' l) l)\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "define pred_cof where \"pred_cof L b b' l \\<longleftrightarrow> (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow> P s p b b' l)\"\n    for L b b' l"], ["proof (state)\nthis:\n  pred_cof ?L ?b ?b' ?l =\n  (\\<forall>s p.\n      s \\<notin> ?L \\<and>\n      p \\<notin> ?L \\<and> s \\<noteq> p \\<longrightarrow>\n      P s p ?b ?b' ?l)\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "from \n    map_upd_nonempty[of f l t] \\<open>dom f' = dom (f(l \\<mapsto> t))\\<close>\n    one_more_dom[of l f']"], ["proof (chain)\npicking this:\n  f(l \\<mapsto> t) \\<noteq> Map.empty\n  dom f' = dom (f(l \\<mapsto> t))\n  l \\<in> dom f' \\<Longrightarrow>\n  \\<exists>f'a. f' = f'a(l \\<mapsto> the (f' l)) \\<and> l \\<notin> dom f'a", "obtain f'a where \n    \"f' = f'a(l \\<mapsto> the(f' l))\" and \"l \\<notin> dom f'a\" and\n    \"dom (f'a(l \\<mapsto> the(f' l))) = dom (f(l \\<mapsto> t))\""], ["proof (prove)\nusing this:\n  f(l \\<mapsto> t) \\<noteq> Map.empty\n  dom f' = dom (f(l \\<mapsto> t))\n  l \\<in> dom f' \\<Longrightarrow>\n  \\<exists>f'a. f' = f'a(l \\<mapsto> the (f' l)) \\<and> l \\<notin> dom f'a\n\ngoal (1 subgoal):\n 1. (\\<And>f'a.\n        \\<lbrakk>f' = f'a(l \\<mapsto> the (f' l)); l \\<notin> dom f'a;\n         dom (f'a(l \\<mapsto> the (f' l))) = dom (f(l \\<mapsto> t))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  f' = f'a(l \\<mapsto> the (f' l))\n  l \\<notin> dom f'a\n  dom (f'a(l \\<mapsto> the (f' l))) = dom (f(l \\<mapsto> t))\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "from \\<open>l \\<notin> dom f\\<close>"], ["proof (chain)\npicking this:\n  l \\<notin> dom f", "have\n    fla: \"\\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\" and\n    \"\\<forall>la\\<in>dom f. f'a la = (f'a(l \\<mapsto> the(f' l))) la\""], ["proof (prove)\nusing this:\n  l \\<notin> dom f\n\ngoal (1 subgoal):\n 1. \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la &&&\n    \\<forall>la\\<in>dom f. f'a la = (f'a(l \\<mapsto> the (f' l))) la", "by auto"], ["proof (state)\nthis:\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = (f'a(l \\<mapsto> the (f' l))) la\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "with \\<open>f' = f'a(l \\<mapsto> the(f' l))\\<close>"], ["proof (chain)\npicking this:\n  f' = f'a(l \\<mapsto> the (f' l))\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = (f'a(l \\<mapsto> the (f' l))) la", "have f'ala: \"\\<forall>la\\<in>dom f. f'a la = f' la\""], ["proof (prove)\nusing this:\n  f' = f'a(l \\<mapsto> the (f' l))\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = (f'a(l \\<mapsto> the (f' l))) la\n\ngoal (1 subgoal):\n 1. \\<forall>la\\<in>dom f. f'a la = f' la", "by simp"], ["proof (state)\nthis:\n  \\<forall>la\\<in>dom f. f'a la = f' la\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "have \"\\<exists>L. finite L \\<and> (\\<forall>la\\<in>dom f. pred_cof L (f la) (f'a la) la)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>la\\<in>dom f. pred_cof L (f la) (f'a la) la)", "unfolding pred_cof_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>la\\<in>dom f.\n           \\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f la) (f'a la) la)", "proof \n    (intro imp[OF insert_dom_less_eq[OF \\<open>l \\<notin> dom f'a\\<close> \\<open>l \\<notin> dom f\\<close> \n                                        \\<open>dom (f'a(l \\<mapsto> the(f' l))) = dom (f(l \\<mapsto> t))\\<close>]],\n      intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la.\n       la \\<in> dom f \\<Longrightarrow>\n       \\<exists>L.\n          finite L \\<and>\n          (\\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f la) (f'a la) la)", "fix la"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la.\n       la \\<in> dom f \\<Longrightarrow>\n       \\<exists>L.\n          finite L \\<and>\n          (\\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f la) (f'a la) la)", "assume \"la \\<in> dom f\""], ["proof (state)\nthis:\n  la \\<in> dom f\n\ngoal (1 subgoal):\n 1. \\<And>la.\n       la \\<in> dom f \\<Longrightarrow>\n       \\<exists>L.\n          finite L \\<and>\n          (\\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f la) (f'a la) la)", "with fla f'ala"], ["proof (chain)\npicking this:\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = f' la\n  la \\<in> dom f", "have \n      \"la \\<in> dom (f(l \\<mapsto> t))\" and \n      \"f la = (f(l \\<mapsto> t)) la\" and \"f'a la = f' la\""], ["proof (prove)\nusing this:\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = f' la\n  la \\<in> dom f\n\ngoal (1 subgoal):\n 1. la \\<in> dom (f(l \\<mapsto> t)) &&&\n    f la = (f(l \\<mapsto> t)) la &&& f'a la = f' la", "by auto"], ["proof (state)\nthis:\n  la \\<in> dom (f(l \\<mapsto> t))\n  f la = (f(l \\<mapsto> t)) la\n  f'a la = f' la\n\ngoal (1 subgoal):\n 1. \\<And>la.\n       la \\<in> dom f \\<Longrightarrow>\n       \\<exists>L.\n          finite L \\<and>\n          (\\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f la) (f'a la) la)", "with pred"], ["proof (chain)\npicking this:\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n  la \\<in> dom (f(l \\<mapsto> t))\n  f la = (f(l \\<mapsto> t)) la\n  f'a la = f' la", "show \"\\<exists>L. finite L \\<and> (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow> P s p (f la) (f'a la) la)\""], ["proof (prove)\nusing this:\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n  la \\<in> dom (f(l \\<mapsto> t))\n  f la = (f(l \\<mapsto> t)) la\n  f'a la = f' la\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>s p.\n           s \\<notin> L \\<and>\n           p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n           P s p (f la) (f'a la) la)", "by (elim ssubst, blast)"], ["proof (state)\nthis:\n  \\<exists>L.\n     finite L \\<and>\n     (\\<forall>s p.\n         s \\<notin> L \\<and>\n         p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n         P s p (f la) (f'a la) la)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>L.\n     finite L \\<and> (\\<forall>la\\<in>dom f. pred_cof L (f la) (f'a la) la)\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "with fla f'ala"], ["proof (chain)\npicking this:\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = f' la\n  \\<exists>L.\n     finite L \\<and> (\\<forall>la\\<in>dom f. pred_cof L (f la) (f'a la) la)", "obtain L where \n    \"finite L\" and predf: \"\\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\""], ["proof (prove)\nusing this:\n  \\<forall>la\\<in>dom f. f la = (f(l \\<mapsto> t)) la\n  \\<forall>la\\<in>dom f. f'a la = f' la\n  \\<exists>L.\n     finite L \\<and> (\\<forall>la\\<in>dom f. pred_cof L (f la) (f'a la) la)\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        \\<lbrakk>finite L;\n         \\<forall>la\\<in>dom f.\n            pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  finite L\n  \\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "moreover"], ["proof (state)\nthis:\n  finite L\n  \\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "have \"l \\<in> dom (f(l \\<mapsto> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<in> dom (f(l \\<mapsto> t))", "by simp"], ["proof (state)\nthis:\n  l \\<in> dom (f(l \\<mapsto> t))\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "with pred"], ["proof (chain)\npicking this:\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n  l \\<in> dom (f(l \\<mapsto> t))", "obtain L' where\n    \"finite L'\" and predfl: \"pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l\""], ["proof (prove)\nusing this:\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n  l \\<in> dom (f(l \\<mapsto> t))\n\ngoal (1 subgoal):\n 1. (\\<And>L'.\n        \\<lbrakk>finite L';\n         pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding pred_cof_def"], ["proof (prove)\nusing this:\n  \\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n  l \\<in> dom (f(l \\<mapsto> t))\n\ngoal (1 subgoal):\n 1. (\\<And>L'.\n        \\<lbrakk>finite L';\n         \\<forall>s p.\n            s \\<notin> L' \\<and>\n            p \\<notin> L' \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) l) (f' l) l\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  finite L'\n  pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l\n\ngoal (1 subgoal):\n 1. \\<And>F x z P f'.\n       \\<lbrakk>x \\<notin> dom F;\n        \\<And>P f'.\n           \\<lbrakk>dom f' = dom F;\n            \\<forall>l\\<in>dom F.\n               \\<exists>L.\n                  finite L \\<and>\n                  (\\<forall>s p.\n                      s \\<notin> L \\<and>\n                      p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                      P s p (F l) (f' l) l)\\<rbrakk>\n           \\<Longrightarrow> \\<exists>L.\n                                finite L \\<and>\n                                (\\<forall>l\\<in>dom F.\n                                    \\<forall>s p.\n s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n P s p (F l) (f' l) l);\n        dom f' = dom (F(x \\<mapsto> z));\n        \\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n           \\<exists>L.\n              finite L \\<and>\n              (\\<forall>s p.\n                  s \\<notin> L \\<and>\n                  p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n                  P s p ((F(x \\<mapsto> z)) l) (f' l) l)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>L.\n                            finite L \\<and>\n                            (\\<forall>l\\<in>dom (F(x \\<mapsto> z)).\n                                \\<forall>s p.\n                                   s \\<notin> L \\<and>\n                                   p \\<notin> L \\<and>\n                                   s \\<noteq> p \\<longrightarrow>\n                                   P s p ((F(x \\<mapsto> z)) l) (f' l) l)", "ultimately"], ["proof (chain)\npicking this:\n  finite L\n  \\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\n  finite L'\n  pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l", "show ?case"], ["proof (prove)\nusing this:\n  finite L\n  \\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\n  finite L'\n  pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n           \\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p ((f(l \\<mapsto> t)) la) (f' la) la)", "proof (rule_tac x = \"L \\<union> L'\" in exI, \n      intro conjI, simp, intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la s p.\n       \\<lbrakk>finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l; finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l; finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l;\n        la \\<in> dom (f(l \\<mapsto> t));\n        s \\<notin> L \\<union> L' \\<and>\n        p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\\<rbrakk>\n       \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "fix s p la"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>la s p.\n       \\<lbrakk>finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l; finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l; finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l;\n        la \\<in> dom (f(l \\<mapsto> t));\n        s \\<notin> L \\<union> L' \\<and>\n        p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\\<rbrakk>\n       \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "assume \n      sp: \"s \\<notin> L \\<union> L' \\<and> p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\" and indom: \"la \\<in> dom (f(l \\<mapsto> t))\""], ["proof (state)\nthis:\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  la \\<in> dom (f(l \\<mapsto> t))\n\ngoal (1 subgoal):\n 1. \\<And>la s p.\n       \\<lbrakk>finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l; finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l; finite L;\n        \\<forall>la\\<in>dom f.\n           pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la;\n        finite L'; pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l;\n        la \\<in> dom (f(l \\<mapsto> t));\n        s \\<notin> L \\<union> L' \\<and>\n        p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\\<rbrakk>\n       \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "show \"P s p ((f(l \\<mapsto> t)) la) (f' la) la\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s p ((f(l \\<mapsto> t)) la) (f' la) la", "proof (cases \"la = l\")"], ["proof (state)\ngoal (2 subgoals):\n 1. la = l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la\n 2. la \\<noteq> l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "case True"], ["proof (state)\nthis:\n  la = l\n\ngoal (2 subgoals):\n 1. la = l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la\n 2. la \\<noteq> l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "with sp predfl"], ["proof (chain)\npicking this:\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l\n  la = l", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  pred_cof L' ((f(l \\<mapsto> t)) l) (f' l) l\n  la = l\n\ngoal (1 subgoal):\n 1. P s p ((f(l \\<mapsto> t)) la) (f' la) la", "unfolding pred_cof_def"], ["proof (prove)\nusing this:\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  \\<forall>s p.\n     s \\<notin> L' \\<and>\n     p \\<notin> L' \\<and> s \\<noteq> p \\<longrightarrow>\n     P s p ((f(l \\<mapsto> t)) l) (f' l) l\n  la = l\n\ngoal (1 subgoal):\n 1. P s p ((f(l \\<mapsto> t)) la) (f' la) la", "by simp"], ["proof (state)\nthis:\n  P s p ((f(l \\<mapsto> t)) la) (f' la) la\n\ngoal (1 subgoal):\n 1. la \\<noteq> l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. la \\<noteq> l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "case False"], ["proof (state)\nthis:\n  la \\<noteq> l\n\ngoal (1 subgoal):\n 1. la \\<noteq> l \\<Longrightarrow> P s p ((f(l \\<mapsto> t)) la) (f' la) la", "with indom sp predf"], ["proof (chain)\npicking this:\n  la \\<in> dom (f(l \\<mapsto> t))\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  \\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\n  la \\<noteq> l", "show ?thesis"], ["proof (prove)\nusing this:\n  la \\<in> dom (f(l \\<mapsto> t))\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  \\<forall>la\\<in>dom f. pred_cof L ((f(l \\<mapsto> t)) la) (f' la) la\n  la \\<noteq> l\n\ngoal (1 subgoal):\n 1. P s p ((f(l \\<mapsto> t)) la) (f' la) la", "unfolding pred_cof_def"], ["proof (prove)\nusing this:\n  la \\<in> dom (f(l \\<mapsto> t))\n  s \\<notin> L \\<union> L' \\<and>\n  p \\<notin> L \\<union> L' \\<and> s \\<noteq> p\n  \\<forall>la\\<in>dom f.\n     \\<forall>s p.\n        s \\<notin> L \\<and>\n        p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n        P s p ((f(l \\<mapsto> t)) la) (f' la) la\n  la \\<noteq> l\n\ngoal (1 subgoal):\n 1. P s p ((f(l \\<mapsto> t)) la) (f' la) la", "by force"], ["proof (state)\nthis:\n  P s p ((f(l \\<mapsto> t)) la) (f' la) la\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P s p ((f(l \\<mapsto> t)) la) (f' la) la\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>L.\n     finite L \\<and>\n     (\\<forall>la\\<in>dom (f(l \\<mapsto> t)).\n         \\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p ((f(l \\<mapsto> t)) la) (f' la) la)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_ex_cof:\n  fixes\n  P :: \"'c \\<Rightarrow> 'c \\<Rightarrow> 'b option \\<Rightarrow> ('a::finite) \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a -~> 'b)).\n  (\\<exists>L. finite L \\<and> (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow> P s p (f l) l))\"\n  shows\n  \"\\<exists>L. finite L \\<and> (\\<forall>l\\<in>dom f. (\\<forall>s p. s \\<notin> L \\<and> p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow> P s p (f l) l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>l\\<in>dom f.\n           \\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f l) l)", "using assms fmap_ex_cof2[of f f  \"\\<lambda>s p b b' l. P s p b l\"]"], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>dom f.\n     \\<exists>L.\n        finite L \\<and>\n        (\\<forall>s p.\n            s \\<notin> L \\<and>\n            p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n            P s p (f l) l)\n  \\<lbrakk>dom f = dom f;\n   \\<forall>l\\<in>dom f.\n      \\<exists>L.\n         finite L \\<and>\n         (\\<forall>s p.\n             s \\<notin> L \\<and>\n             p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n             P s p (f l) l)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>L.\n                       finite L \\<and>\n                       (\\<forall>l\\<in>dom f.\n                           \\<forall>s p.\n                              s \\<notin> L \\<and>\n                              p \\<notin> L \\<and>\n                              s \\<noteq> p \\<longrightarrow>\n                              P s p (f l) l)\n\ngoal (1 subgoal):\n 1. \\<exists>L.\n       finite L \\<and>\n       (\\<forall>l\\<in>dom f.\n           \\<forall>s p.\n              s \\<notin> L \\<and>\n              p \\<notin> L \\<and> s \\<noteq> p \\<longrightarrow>\n              P s p (f l) l)", "by auto"], ["", "lemma fmap_ball_all2:\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'b option \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a::finite) -~> 'b). \\<forall>(x::'c) (y::'d). Px x y \\<longrightarrow> P x y (f l)\"\n  shows\n  \"\\<forall>x y. Px x y \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y (f l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       Px x y \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y (f l))", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y l.\n       \\<lbrakk>Px x y; l \\<in> dom f\\<rbrakk> \\<Longrightarrow> P x y (f l)", "fix x y l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y l.\n       \\<lbrakk>Px x y; l \\<in> dom f\\<rbrakk> \\<Longrightarrow> P x y (f l)", "assume \"Px x y\" and \"l \\<in> dom f\""], ["proof (state)\nthis:\n  Px x y\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. \\<And>x y l.\n       \\<lbrakk>Px x y; l \\<in> dom f\\<rbrakk> \\<Longrightarrow> P x y (f l)", "with assms"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>dom f. \\<forall>x y. Px x y \\<longrightarrow> P x y (f l)\n  Px x y\n  l \\<in> dom f", "show \"P x y (f l)\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>dom f. \\<forall>x y. Px x y \\<longrightarrow> P x y (f l)\n  Px x y\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. P x y (f l)", "by blast"], ["proof (state)\nthis:\n  P x y (f l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_ball_all2':\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'b option \\<Rightarrow> ('a::finite) \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a -~> 'b)). \\<forall>(x::'c) (y::'d). Px x y \\<longrightarrow> P x y (f l) l\"\n  shows\n  \"\\<forall>x y. Px x y \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y (f l) l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       Px x y \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y (f l) l)", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y l.\n       \\<lbrakk>Px x y; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y (f l) l", "fix x y l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y l.\n       \\<lbrakk>Px x y; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y (f l) l", "assume \"Px x y\" and \"l \\<in> dom f\""], ["proof (state)\nthis:\n  Px x y\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. \\<And>x y l.\n       \\<lbrakk>Px x y; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y (f l) l", "with assms"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>dom f. \\<forall>x y. Px x y \\<longrightarrow> P x y (f l) l\n  Px x y\n  l \\<in> dom f", "show \"P x y (f l) l\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>dom f. \\<forall>x y. Px x y \\<longrightarrow> P x y (f l) l\n  Px x y\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. P x y (f l) l", "by blast"], ["proof (state)\nthis:\n  P x y (f l) l\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_ball_all3:\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> 'b option \\<Rightarrow> 'b option \\<Rightarrow> bool\" and\n  f :: \"('a::finite) -~> 'b\" and f' :: \"'a -~> 'b\"\n  assumes\n  \"dom f' = dom f\" and\n  \"\\<forall>l\\<in>dom f.\n     \\<forall>(x::'c) (y::'d) (z::'e). Px x y z \\<longrightarrow> P x y z (f l) (f' l)\"\n  shows\n  \"\\<forall>x y z. Px x y z \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y z (f l) (f' l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       Px x y z \\<longrightarrow>\n       (\\<forall>l\\<in>dom f. P x y z (f l) (f' l))", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z l.\n       \\<lbrakk>Px x y z; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y z (f l) (f' l)", "fix x y z l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z l.\n       \\<lbrakk>Px x y z; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y z (f l) (f' l)", "assume \"Px x y z\" and \"l \\<in> dom f\""], ["proof (state)\nthis:\n  Px x y z\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. \\<And>x y z l.\n       \\<lbrakk>Px x y z; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y z (f l) (f' l)", "with assms"], ["proof (chain)\npicking this:\n  dom f' = dom f\n  \\<forall>l\\<in>dom f.\n     \\<forall>x y z. Px x y z \\<longrightarrow> P x y z (f l) (f' l)\n  Px x y z\n  l \\<in> dom f", "show \"P x y z (f l) (f' l)\""], ["proof (prove)\nusing this:\n  dom f' = dom f\n  \\<forall>l\\<in>dom f.\n     \\<forall>x y z. Px x y z \\<longrightarrow> P x y z (f l) (f' l)\n  Px x y z\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. P x y z (f l) (f' l)", "by blast"], ["proof (state)\nthis:\n  P x y z (f l) (f' l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fmap_ball_all4':\n  fixes \n  Px :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> 'f \\<Rightarrow> bool\" and \n  P :: \"'c \\<Rightarrow> 'd \\<Rightarrow> 'e \\<Rightarrow> 'f \\<Rightarrow> 'b option \\<Rightarrow> ('a::finite) \\<Rightarrow> bool\"\n  assumes\n  \"\\<forall>l\\<in>dom (f::('a -~> 'b)). \n    \\<forall>(x::'c) (y::'d) (z::'e) (a::'f). Px x y z a \\<longrightarrow> P x y z a (f l) l\"\n  shows\n  \"\\<forall>x y z a. Px x y z a \\<longrightarrow> (\\<forall>l\\<in>dom f. P x y z a (f l) l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z a.\n       Px x y z a \\<longrightarrow>\n       (\\<forall>l\\<in>dom f. P x y z a (f l) l)", "proof (intro strip)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z a l.\n       \\<lbrakk>Px x y z a; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y z a (f l) l", "fix x y z a l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z a l.\n       \\<lbrakk>Px x y z a; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y z a (f l) l", "assume \"Px x y z a\" and \"l \\<in> dom f\""], ["proof (state)\nthis:\n  Px x y z a\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. \\<And>x y z a l.\n       \\<lbrakk>Px x y z a; l \\<in> dom f\\<rbrakk>\n       \\<Longrightarrow> P x y z a (f l) l", "with assms"], ["proof (chain)\npicking this:\n  \\<forall>l\\<in>dom f.\n     \\<forall>x y z a. Px x y z a \\<longrightarrow> P x y z a (f l) l\n  Px x y z a\n  l \\<in> dom f", "show \"P x y z a (f l) l\""], ["proof (prove)\nusing this:\n  \\<forall>l\\<in>dom f.\n     \\<forall>x y z a. Px x y z a \\<longrightarrow> P x y z a (f l) l\n  Px x y z a\n  l \\<in> dom f\n\ngoal (1 subgoal):\n 1. P x y z a (f l) l", "by blast"], ["proof (state)\nthis:\n  P x y z a (f l) l\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}