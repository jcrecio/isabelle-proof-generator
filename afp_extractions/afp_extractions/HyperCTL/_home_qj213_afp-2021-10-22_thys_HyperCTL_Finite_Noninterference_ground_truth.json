{"file_name": "/home/qj213/afp-2021-10-22/thys/HyperCTL/Finite_Noninterference.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HyperCTL", "problem_names": ["lemma finite_UminusGH: \"finite (UNIV - GH)\"", "lemma finite_GL: \"finite GL\"", "lemma EqOnUC_eqOnUC[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqOnUC p p' u c) env = eqOnUC i i' u c\"", "lemma finite_EqButGH:\n\"finite {EqOnUC p p' u c | u c. (u,c) \\<in> (UNIV - GH) \\<times> UNIV}\" (is \"finite ?K\")", "lemma EqButGH_eqButGH[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqButGH p p') env = eqButGH i i'\"", "lemma FV_EqButGH: \"FV (EqButGH p p') \\<subseteq> {p,p'}\" (is \"?L \\<subseteq> ?R\")", "lemma EqOnUOut_eqOnUOut[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqOnUOut p p' u ou) env = eqOnUOut i i' u ou\"", "lemma finite_EqOnGL:\n\"finite {EqOnUOut p p' u ou | u ou. (u,ou) \\<in> GL \\<times> UNIV}\" (is \"finite ?K\")", "lemma EqOnGL_eqOnGL[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqOnGL p p') env = eqOnGL i i'\"", "lemma FV_EqOnGL: \"FV (EqOnGL p p') \\<subseteq> {p,p'}\" (is \"?L \\<subseteq> ?R\")", "lemma p0p1[simp]: \"p0 \\<noteq> p1\"", "lemma sem_nonintDfmla: \"sem nonintDfmla env = nonintSfmla\"", "lemma wff_nonintDfmla[simp]: \"wff nonintDfmla\"", "lemma closed_nonintDfmla[simp]: \"FV nonintDfmla = {}\"", "theorem semClosed_nonintDfmla: \"semClosed nonintDfmla = nonint\""], "translations": [["", "lemma finite_UminusGH: \"finite (UNIV - GH)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (UNIV - GH)", "by (metis finite_Diff finite_U)"], ["", "lemma finite_GL: \"finite GL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite GL", "by (metis Diff_UNIV finite_Diff2 finite_U)"], ["", "definition EqOnUC ::\n\"pvar \\<Rightarrow> pvar \\<Rightarrow> 'U \\<Rightarrow> 'C \\<Rightarrow> ('U,'C,'Out) aprop dfmla\"\nwhere\n\"EqOnUC p p' u c \\<equiv> Eq (Atom (Last u c) p) (Atom (Last u c) p')\""], ["", "lemma EqOnUC_eqOnUC[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqOnUC p p' u c) env = eqOnUC i i' u c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sem (EqOnUC p p' u c) env = eqOnUC i i' u c", "using assms"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n\ngoal (1 subgoal):\n 1. sem (EqOnUC p p' u c) env = eqOnUC i i' u c", "unfolding EqOnUC_def eqOnUC_def"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n\ngoal (1 subgoal):\n 1. sem (Eq (Atom (Last u c) p) (Atom (Last u c) p')) env =\n    eq (atom (Last u c) i) (atom (Last u c) i')", "by simp"], ["", "definition EqButGH ::\n\"pvar \\<Rightarrow> pvar \\<Rightarrow> ('U,'C,'Out) aprop dfmla\"\nwhere\n\"EqButGH p p' \\<equiv> Scon {EqOnUC p p' u c | u c. (u,c) \\<in> (UNIV - GH) \\<times> UNIV}\""], ["", "lemma finite_EqButGH:\n\"finite {EqOnUC p p' u c | u c. (u,c) \\<in> (UNIV - GH) \\<times> UNIV}\" (is \"finite ?K\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "have 1: \"?K = (\\<lambda> (u,c). EqOnUC p p' u c) ` ((UNIV - GH) \\<times> UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV} =\n    (\\<lambda>(u, c). EqOnUC p p' u c) ` ((UNIV - GH) \\<times> UNIV)", "by auto"], ["proof (state)\nthis:\n  {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV} =\n  (\\<lambda>(u, c). EqOnUC p p' u c) ` ((UNIV - GH) \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. finite {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "unfolding 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>(x, y). EqOnUC p p' x y) ` ((UNIV - GH) \\<times> UNIV))", "apply(rule finite_imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((UNIV - GH) \\<times> UNIV)", "by (metis finite_C finite_SigmaI finite_UminusGH)"], ["proof (state)\nthis:\n  finite {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma EqButGH_eqButGH[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqButGH p p') env = eqButGH i i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sem (EqButGH p p') env = eqButGH i i'", "using assms finite_EqButGH"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n  finite {EqOnUC ?p ?p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. sem (EqButGH p p') env = eqButGH i i'", "unfolding EqButGH_def eqButGH_def sem_Scon[OF finite_EqButGH] image_def"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n  finite {EqOnUC ?p ?p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. scon\n     {y. \\<exists>x\\<in>{EqOnUC p p' u c |u c.\n                         (u, c) \\<in> (UNIV - GH) \\<times> UNIV}.\n            y = sem x env} =\n    scon {eqOnUC i i' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "by simp (metis (hide_lams, no_types) EqOnUC_eqOnUC)"], ["", "lemma FV_EqButGH: \"FV (EqButGH p p') \\<subseteq> {p,p'}\" (is \"?L \\<subseteq> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. FV (EqButGH p p') \\<subseteq> {p, p'}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. FV (EqButGH p p') \\<subseteq> {p, p'}", "have \"?L = \\<Union> {FV (EqOnUC p p' u c) | u c. (u,c) \\<in> (UNIV - GH) \\<times> UNIV}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FV (EqButGH p p') =\n    \\<Union>\n     {FV (EqOnUC p p' u c) |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "unfolding EqButGH_def FV_Scon[OF finite_EqButGH]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (FV ` {EqOnUC p p' u c |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}) =\n    \\<Union>\n     {FV (EqOnUC p p' u c) |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}", "by auto"], ["proof (state)\nthis:\n  FV (EqButGH p p') =\n  \\<Union>\n   {FV (EqOnUC p p' u c) |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. FV (EqButGH p p') \\<subseteq> {p, p'}", "also"], ["proof (state)\nthis:\n  FV (EqButGH p p') =\n  \\<Union>\n   {FV (EqOnUC p p' u c) |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. FV (EqButGH p p') \\<subseteq> {p, p'}", "have \"... \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {FV (EqOnUC p p' u c) |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n    \\<subseteq> {p, p'}", "unfolding EqOnUC_def der_Op_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {FV (Neg (Dis (Neg (Dis (Neg (Atom (Last u c) p))\n                          (Atom (Last u c) p')))\n                (Neg (Dis (Neg (Atom (Last u c) p'))\n                       (Atom (Last u c) p))))) |\n      u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n    \\<subseteq> {p, p'}", "by auto"], ["proof (state)\nthis:\n  \\<Union>\n   {FV (EqOnUC p p' u c) |u c. (u, c) \\<in> (UNIV - GH) \\<times> UNIV}\n  \\<subseteq> {p, p'}\n\ngoal (1 subgoal):\n 1. FV (EqButGH p p') \\<subseteq> {p, p'}", "finally"], ["proof (chain)\npicking this:\n  FV (EqButGH p p') \\<subseteq> {p, p'}", "show ?thesis"], ["proof (prove)\nusing this:\n  FV (EqButGH p p') \\<subseteq> {p, p'}\n\ngoal (1 subgoal):\n 1. FV (EqButGH p p') \\<subseteq> {p, p'}", "."], ["proof (state)\nthis:\n  FV (EqButGH p p') \\<subseteq> {p, p'}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition EqOnUOut ::\n\"pvar \\<Rightarrow> pvar \\<Rightarrow> 'U \\<Rightarrow> 'Out \\<Rightarrow> ('U,'C,'Out) aprop dfmla\"\nwhere\n\"EqOnUOut p p' u ou \\<equiv> Eq (Atom (Obs u ou) p) (Atom (Obs u ou) p')\""], ["", "lemma EqOnUOut_eqOnUOut[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqOnUOut p p' u ou) env = eqOnUOut i i' u ou\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sem (EqOnUOut p p' u ou) env = eqOnUOut i i' u ou", "using assms"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n\ngoal (1 subgoal):\n 1. sem (EqOnUOut p p' u ou) env = eqOnUOut i i' u ou", "unfolding EqOnUOut_def eqOnUOut_def"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n\ngoal (1 subgoal):\n 1. sem (Eq (Atom (Obs u ou) p) (Atom (Obs u ou) p')) env =\n    eq (atom (Obs u ou) i) (atom (Obs u ou) i')", "by simp"], ["", "definition EqOnGL ::\n\"pvar \\<Rightarrow> pvar \\<Rightarrow> ('U,'C,'Out) aprop dfmla\"\nwhere\n\"EqOnGL p p' \\<equiv> Scon {EqOnUOut p p' u ou | u ou. (u,ou) \\<in> GL \\<times> UNIV}\""], ["", "lemma finite_EqOnGL:\n\"finite {EqOnUOut p p' u ou | u ou. (u,ou) \\<in> GL \\<times> UNIV}\" (is \"finite ?K\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "have 1: \"?K = (\\<lambda> (u,ou). EqOnUOut p p' u ou) ` (GL \\<times> UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV} =\n    (\\<lambda>(u, ou). EqOnUOut p p' u ou) ` (GL \\<times> UNIV)", "by auto"], ["proof (state)\nthis:\n  {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV} =\n  (\\<lambda>(u, ou). EqOnUOut p p' u ou) ` (GL \\<times> UNIV)\n\ngoal (1 subgoal):\n 1. finite {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "unfolding 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite ((\\<lambda>(x, y). EqOnUOut p p' x y) ` (GL \\<times> UNIV))", "apply(rule finite_imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (GL \\<times> UNIV)", "by (metis finite_Out finite_SigmaI finite_GL)"], ["proof (state)\nthis:\n  finite {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma EqOnGL_eqOnGL[simp]:\nassumes \"env p = i\" and \"env p' = i'\"\nshows \"sem (EqOnGL p p') env = eqOnGL i i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sem (EqOnGL p p') env = eqOnGL i i'", "using assms finite_EqOnGL"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n  finite {EqOnUOut ?p ?p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. sem (EqOnGL p p') env = eqOnGL i i'", "unfolding EqOnGL_def eqOnGL_def sem_Scon[OF finite_EqOnGL] image_def"], ["proof (prove)\nusing this:\n  env p = i\n  env p' = i'\n  finite {EqOnUOut ?p ?p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. scon\n     {y. \\<exists>x\\<in>{EqOnUOut p p' u ou |u ou.\n                         (u, ou) \\<in> GL \\<times> UNIV}.\n            y = sem x env} =\n    scon {eqOnUOut i i' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "by simp (metis (hide_lams, no_types) EqOnUOut_eqOnUOut)"], ["", "lemma FV_EqOnGL: \"FV (EqOnGL p p') \\<subseteq> {p,p'}\" (is \"?L \\<subseteq> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') \\<subseteq> {p, p'}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') \\<subseteq> {p, p'}", "have \"?L = \\<Union> {FV (EqOnUOut p p' u ou) | u ou. (u,ou) \\<in> GL \\<times> UNIV}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') =\n    \\<Union> {FV (EqOnUOut p p' u ou) |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "unfolding EqOnGL_def FV_Scon[OF finite_EqOnGL]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (FV ` {EqOnUOut p p' u ou |u ou. (u, ou) \\<in> GL \\<times> UNIV}) =\n    \\<Union> {FV (EqOnUOut p p' u ou) |u ou. (u, ou) \\<in> GL \\<times> UNIV}", "by auto"], ["proof (state)\nthis:\n  FV (EqOnGL p p') =\n  \\<Union> {FV (EqOnUOut p p' u ou) |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') \\<subseteq> {p, p'}", "also"], ["proof (state)\nthis:\n  FV (EqOnGL p p') =\n  \\<Union> {FV (EqOnUOut p p' u ou) |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') \\<subseteq> {p, p'}", "have \"... \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> {FV (EqOnUOut p p' u ou) |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n    \\<subseteq> {p, p'}", "unfolding EqOnUOut_def der_Op_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     {FV (Neg (Dis (Neg (Dis (Neg (Atom (Obs u ou) p))\n                          (Atom (Obs u ou) p')))\n                (Neg (Dis (Neg (Atom (Obs u ou) p'))\n                       (Atom (Obs u ou) p))))) |\n      u ou. (u, ou) \\<in> GL \\<times> UNIV}\n    \\<subseteq> {p, p'}", "by auto"], ["proof (state)\nthis:\n  \\<Union> {FV (EqOnUOut p p' u ou) |u ou. (u, ou) \\<in> GL \\<times> UNIV}\n  \\<subseteq> {p, p'}\n\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') \\<subseteq> {p, p'}", "finally"], ["proof (chain)\npicking this:\n  FV (EqOnGL p p') \\<subseteq> {p, p'}", "show ?thesis"], ["proof (prove)\nusing this:\n  FV (EqOnGL p p') \\<subseteq> {p, p'}\n\ngoal (1 subgoal):\n 1. FV (EqOnGL p p') \\<subseteq> {p, p'}", "."], ["proof (state)\nthis:\n  FV (EqOnGL p p') \\<subseteq> {p, p'}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"p0 = getFresh {}\""], ["", "definition \"p1 = getFresh {p0}\""], ["", "lemma p0p1[simp]: \"p0 \\<noteq> p1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p0 \\<noteq> p1", "unfolding p1_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. p0 \\<noteq> getFresh {p0}", "by (metis Diff_cancel getFresh infinite_imp_nonempty infinite_remove insertI1)"], ["", "definition nonintDfmla :: \"('U,'C,'Out) aprop dfmla\" where\n\"nonintDfmla \\<equiv>\n Fall2 p0 p1 (Imp (Alw (EqButGH p0 p1)) (Alw (EqOnGL p0 p1)))\""], ["", "lemma sem_nonintDfmla: \"sem nonintDfmla env = nonintSfmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sem nonintDfmla env = nonintSfmla", "unfolding nonintDfmla_def nonintSfmla_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sem (Fall2 p0 p1 (Imp (Alw (EqButGH p0 p1)) (Alw (EqOnGL p0 p1)))) env =\n    fall2\n     (\\<lambda>\\<pi>' \\<pi> \\<pi>l.\n         imp (alw (eqButGH (length \\<pi>l) (Suc (length \\<pi>l))))\n          (alw (eqOnGL (length \\<pi>l) (Suc (length \\<pi>l))))\n          (\\<pi>l @ [\\<pi>, \\<pi>']))", "by simp"], ["", "lemma wff_nonintDfmla[simp]: \"wff nonintDfmla\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wff nonintDfmla", "unfolding nonintDfmla_def Fall2_def Fall_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wff (Neg (Exi p0\n               (Neg (Neg (Exi p1\n                           (Neg (Imp (Alw (EqButGH p0 p1))\n                                  (Alw (EqOnGL p0 p1)))))))))", "by simp"], ["", "lemma closed_nonintDfmla[simp]: \"FV nonintDfmla = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. FV nonintDfmla = {}", "unfolding nonintDfmla_def Fall2_def Fall_def der_Op_defs"], ["proof (prove)\ngoal (1 subgoal):\n 1. FV (Neg (Exi p0\n              (Neg (Neg (Exi p1\n                          (Neg (Dis (Neg\n(Neg (Until (Neg Fls) (Neg (EqButGH p0 p1)))))\n                                 (Neg (Until (Neg Fls)\n  (Neg (EqOnGL p0 p1))))))))))) =\n    {}", "using FV_EqButGH FV_EqOnGL"], ["proof (prove)\nusing this:\n  FV (EqButGH ?p ?p') \\<subseteq> {?p, ?p'}\n  FV (EqOnGL ?p ?p') \\<subseteq> {?p, ?p'}\n\ngoal (1 subgoal):\n 1. FV (Neg (Exi p0\n              (Neg (Neg (Exi p1\n                          (Neg (Dis (Neg\n(Neg (Until (Neg Fls) (Neg (EqButGH p0 p1)))))\n                                 (Neg (Until (Neg Fls)\n  (Neg (EqOnGL p0 p1))))))))))) =\n    {}", "by fastforce"], ["", "text\\<open>In the end, we obtain that the semantics of the closed (syntactic) formula\nnonintDfmla expresses noninterference faithfully:\\<close>"], ["", "theorem semClosed_nonintDfmla: \"semClosed nonintDfmla = nonint\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semClosed nonintDfmla = nonint", "unfolding nonintSfmla_iff_nonint[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. semClosed nonintDfmla = nonintSfmla []", "apply(subst sem_nonintDfmla[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. semClosed nonintDfmla = sem nonintDfmla ?env []", "apply(rule semClosed_Nil)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wff nonintDfmla\n 2. FV nonintDfmla = {}", "by auto"], ["", "(*<*)"], ["", "end"], ["", "(* context GM_sec_model_finite  *)\n(*>*)"], ["", "text\\<open>end-of-context GM-sec-model-finite\\<close>"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}