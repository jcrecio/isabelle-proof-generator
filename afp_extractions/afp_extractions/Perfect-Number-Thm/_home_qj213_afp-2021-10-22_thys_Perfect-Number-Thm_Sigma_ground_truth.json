{"file_name": "/home/qj213/afp-2021-10-22/thys/Perfect-Number-Thm/Sigma.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Perfect-Number-Thm", "problem_names": ["lemma divisors_eq_dvd[iff]: \"(a \\<in> divisors(n)) \\<longleftrightarrow> (a dvd n)\"", "lemma finite_divisors [simp]:\n   assumes \"n>0\" shows \"finite (divisors n)\"", "lemma divs_of_zero_UNIV[simp]: \"divisors(0) = UNIV\"", "lemma sigma0[simp]: \"sigma(0) = 0\"", "lemma sigma1[simp]: \"sigma(Suc 0) = 1\"", "lemma prime_divisors: \"prime p \\<longleftrightarrow> divisors p = {1,p} \\<and> p>1\"", "lemma prime_imp_sigma: \"prime (p::nat) \\<Longrightarrow> sigma(p) = p+1\"", "lemma sigma_third_divisor:\n  assumes \"1 < a\" \"a < n\" \"a dvd n\"\n  shows \"1+a+n \\<le> sigma(n)\"", "lemma dvd_prime_power_iff:\n  fixes p::nat\n  assumes prime: \"prime p\"\n  shows \"{d. d dvd p^n} = (\\<lambda>k. p^k) ` {0..n}\"", "lemma rewrite_sum_of_powers:\n  assumes p: \"(p::nat)>1\"\n  shows \"\\<Sum> ((^) p ` {0..n}) = (\\<Sum> i = 0 .. n . p^i)\" (is \"?l = ?r\")", "lemma sum_of_powers_int: \"(x - 1::int) * (\\<Sum>i=0..n . x^i) = x ^ Suc n - 1\"", "lemma sum_of_powers_nat: \"(x - 1::nat) * (\\<Sum>i=0..n . x^i) = x ^ Suc n - 1\"\n   (is \"?l = ?r\")", "theorem sigma_primepower:\n  assumes \"prime p\"\n  shows \"(p - 1) * sigma(p^e) = p^(e+1) - 1\"", "lemma prodsums_eq_sumprods:\n  fixes p :: nat and m :: nat\n  assumes \"coprime p m\"\n  shows \"\\<Sum>((\\<lambda>k. p^k) ` {0..n}) * sigma m = \\<Sum>{p^k * b |k b. k \\<le> n \\<and> b dvd m}\"\n    (is \"?lhs = ?rhs\")", "lemma div_decomp_comp:\n  fixes a::nat\n  shows \"coprime m n \\<Longrightarrow> a dvd m*n \\<longleftrightarrow> (\\<exists>b c. a = b * c \\<and> b dvd m \\<and> c dvd n)\"", "theorem sigma_semimultiplicative:\n  assumes p: \"prime p\" and cop: \"coprime p m\"\n  shows \"sigma (p^n) * sigma m = sigma (p^n * m)\" (is \"?lhs = ?rhs\")"], "translations": [["", "lemma divisors_eq_dvd[iff]: \"(a \\<in> divisors(n)) \\<longleftrightarrow> (a dvd n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<in> divisors n) = (a dvd n)", "by(simp add: divisors_def)"], ["", "lemma finite_divisors [simp]:\n   assumes \"n>0\" shows \"finite (divisors n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (divisors n)", "by (simp add: assms divisors_def)"], ["", "lemma divs_of_zero_UNIV[simp]: \"divisors(0) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. divisors 0 = UNIV", "by(auto simp add: divisors_def)"], ["", "lemma sigma0[simp]: \"sigma(0) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma 0 = 0", "by simp"], ["", "lemma sigma1[simp]: \"sigma(Suc 0) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma (Suc 0) = 1", "by (simp add: sum_eq_Suc0_iff)"], ["", "lemma prime_divisors: \"prime p \\<longleftrightarrow> divisors p = {1,p} \\<and> p>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p = (divisors p = {1, p} \\<and> 1 < p)", "by (auto simp add: divisors_def prime_nat_iff)"], ["", "lemma prime_imp_sigma: \"prime (p::nat) \\<Longrightarrow> sigma(p) = p+1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> sigma p = p + 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> sigma p = p + 1", "assume \"prime (p::nat)\""], ["proof (state)\nthis:\n  prime p\n\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> sigma p = p + 1", "hence \"p>1 \\<and> divisors(p) = {1,p}\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. 1 < p \\<and> divisors p = {1, p}", "by (simp add: prime_divisors)"], ["proof (state)\nthis:\n  1 < p \\<and> divisors p = {1, p}\n\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> sigma p = p + 1", "hence \"p>1 \\<and> sigma(p) = \\<Sum> {1,p}\""], ["proof (prove)\nusing this:\n  1 < p \\<and> divisors p = {1, p}\n\ngoal (1 subgoal):\n 1. 1 < p \\<and> sigma p = \\<Sum> {1, p}", "by (auto simp only: divisors_def)"], ["proof (state)\nthis:\n  1 < p \\<and> sigma p = \\<Sum> {1, p}\n\ngoal (1 subgoal):\n 1. prime p \\<Longrightarrow> sigma p = p + 1", "thus \"sigma(p) = p+1\""], ["proof (prove)\nusing this:\n  1 < p \\<and> sigma p = \\<Sum> {1, p}\n\ngoal (1 subgoal):\n 1. sigma p = p + 1", "by simp"], ["proof (state)\nthis:\n  sigma p = p + 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sigma_third_divisor:\n  assumes \"1 < a\" \"a < n\" \"a dvd n\"\n  shows \"1+a+n \\<le> sigma(n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + a + n \\<le> sigma n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 + a + n \\<le> sigma n", "from assms"], ["proof (chain)\npicking this:\n  1 < a\n  a < n\n  a dvd n", "have \"{1,a,n} \\<le> divisors n\""], ["proof (prove)\nusing this:\n  1 < a\n  a < n\n  a dvd n\n\ngoal (1 subgoal):\n 1. {1, a, n} \\<subseteq> divisors n", "by auto"], ["proof (state)\nthis:\n  {1, a, n} \\<subseteq> divisors n\n\ngoal (1 subgoal):\n 1. 1 + a + n \\<le> sigma n", "hence \"\\<Sum> {1,a,n} \\<le> sigma n\""], ["proof (prove)\nusing this:\n  {1, a, n} \\<subseteq> divisors n\n\ngoal (1 subgoal):\n 1. \\<Sum> {1, a, n} \\<le> sigma n", "by (meson \\<open>a < n\\<close> finite_divisors order.strict_trans1 sum_mono2 zero_le)"], ["proof (state)\nthis:\n  \\<Sum> {1, a, n} \\<le> sigma n\n\ngoal (1 subgoal):\n 1. 1 + a + n \\<le> sigma n", "with assms"], ["proof (chain)\npicking this:\n  1 < a\n  a < n\n  a dvd n\n  \\<Sum> {1, a, n} \\<le> sigma n", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < a\n  a < n\n  a dvd n\n  \\<Sum> {1, a, n} \\<le> sigma n\n\ngoal (1 subgoal):\n 1. 1 + a + n \\<le> sigma n", "by auto"], ["proof (state)\nthis:\n  1 + a + n \\<le> sigma n\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition prime_iff_sigma: \"prime n \\<longleftrightarrow> sigma(n) = Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prime n = (sigma n = Suc n)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. prime n \\<Longrightarrow> sigma n = Suc n\n 2. sigma n = Suc n \\<Longrightarrow> prime n", "assume L: \"sigma(n) = Suc n\""], ["proof (state)\nthis:\n  sigma n = Suc n\n\ngoal (2 subgoals):\n 1. prime n \\<Longrightarrow> sigma n = Suc n\n 2. sigma n = Suc n \\<Longrightarrow> prime n", "then"], ["proof (chain)\npicking this:\n  sigma n = Suc n", "have \"n > 1\""], ["proof (prove)\nusing this:\n  sigma n = Suc n\n\ngoal (1 subgoal):\n 1. 1 < n", "using less_linear sigma1"], ["proof (prove)\nusing this:\n  sigma n = Suc n\n  ?x < ?y \\<or> ?x = ?y \\<or> ?y < ?x\n  sigma (Suc 0) = 1\n\ngoal (1 subgoal):\n 1. 1 < n", "by fastforce"], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. prime n \\<Longrightarrow> sigma n = Suc n\n 2. sigma n = Suc n \\<Longrightarrow> prime n", "moreover"], ["proof (state)\nthis:\n  1 < n\n\ngoal (2 subgoals):\n 1. prime n \\<Longrightarrow> sigma n = Suc n\n 2. sigma n = Suc n \\<Longrightarrow> prime n", "have \"m = Suc 0\" if \"m dvd n\" \"m \\<noteq> n\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Suc 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. m = Suc 0", "have \"0 < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m", "using that"], ["proof (prove)\nusing this:\n  m dvd n\n  m \\<noteq> n\n\ngoal (1 subgoal):\n 1. 0 < m", "by auto"], ["proof (state)\nthis:\n  0 < m\n\ngoal (1 subgoal):\n 1. m = Suc 0", "then"], ["proof (chain)\npicking this:\n  0 < m", "have \"\\<not> 1 + m + n \\<le> 1 + n\""], ["proof (prove)\nusing this:\n  0 < m\n\ngoal (1 subgoal):\n 1. \\<not> 1 + m + n \\<le> 1 + n", "by linarith"], ["proof (state)\nthis:\n  \\<not> 1 + m + n \\<le> 1 + n\n\ngoal (1 subgoal):\n 1. m = Suc 0", "then"], ["proof (chain)\npicking this:\n  \\<not> 1 + m + n \\<le> 1 + n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> 1 + m + n \\<le> 1 + n\n\ngoal (1 subgoal):\n 1. m = Suc 0", "using sigma_third_divisor [of m]"], ["proof (prove)\nusing this:\n  \\<not> 1 + m + n \\<le> 1 + n\n  \\<lbrakk>1 < m; m < ?n; m dvd ?n\\<rbrakk>\n  \\<Longrightarrow> 1 + m + ?n \\<le> sigma ?n\n\ngoal (1 subgoal):\n 1. m = Suc 0", "by (metis L One_nat_def Suc_lessD Suc_lessI \\<open>n > 1\\<close> dvd_imp_le \\<open>0 < m\\<close> less_le plus_1_eq_Suc that)"], ["proof (state)\nthis:\n  m = Suc 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?m dvd n; ?m \\<noteq> n\\<rbrakk> \\<Longrightarrow> ?m = Suc 0\n\ngoal (2 subgoals):\n 1. prime n \\<Longrightarrow> sigma n = Suc n\n 2. sigma n = Suc n \\<Longrightarrow> prime n", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?m dvd n; ?m \\<noteq> n\\<rbrakk> \\<Longrightarrow> ?m = Suc 0", "have \"divisors n = {n,1}\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?m dvd n; ?m \\<noteq> n\\<rbrakk> \\<Longrightarrow> ?m = Suc 0\n\ngoal (1 subgoal):\n 1. divisors n = {n, 1}", "by (auto simp: divisors_def)"], ["proof (state)\nthis:\n  divisors n = {n, 1}\n\ngoal (2 subgoals):\n 1. prime n \\<Longrightarrow> sigma n = Suc n\n 2. sigma n = Suc n \\<Longrightarrow> prime n", "ultimately"], ["proof (chain)\npicking this:\n  1 < n\n  divisors n = {n, 1}", "show \"prime n\""], ["proof (prove)\nusing this:\n  1 < n\n  divisors n = {n, 1}\n\ngoal (1 subgoal):\n 1. prime n", "by (simp add: insert_commute prime_divisors)"], ["proof (state)\nthis:\n  prime n\n\ngoal (1 subgoal):\n 1. prime n \\<Longrightarrow> sigma n = Suc n", "qed (use prime_divisors in auto)"], ["", "lemma dvd_prime_power_iff:\n  fixes p::nat\n  assumes prime: \"prime p\"\n  shows \"{d. d dvd p^n} = (\\<lambda>k. p^k) ` {0..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {d. d dvd p ^ n} = (^) p ` {0..n}", "using divides_primepow_nat prime"], ["proof (prove)\nusing this:\n  prime ?p \\<Longrightarrow>\n  (?d dvd ?p ^ ?k) = (\\<exists>i\\<le>?k. ?d = ?p ^ i)\n  prime p\n\ngoal (1 subgoal):\n 1. {d. d dvd p ^ n} = (^) p ` {0..n}", "by (auto simp add: le_imp_power_dvd)"], ["", "lemma rewrite_sum_of_powers:\n  assumes p: \"(p::nat)>1\"\n  shows \"\\<Sum> ((^) p ` {0..n}) = (\\<Sum> i = 0 .. n . p^i)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) = sum ((^) p) {0..n}", "by (metis inj_on_def p power_inject_exp sum.reindex_cong)"], ["", "lemma sum_of_powers_int: \"(x - 1::int) * (\\<Sum>i=0..n . x^i) = x ^ Suc n - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "by (metis atLeast0AtMost lessThan_Suc_atMost power_diff_1_eq)"], ["", "lemma sum_of_powers_nat: \"(x - 1::nat) * (\\<Sum>i=0..n . x^i) = x ^ Suc n - 1\"\n   (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "proof (cases \"x = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1\n 2. x \\<noteq> 0 \\<Longrightarrow>\n    (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "case False"], ["proof (state)\nthis:\n  x \\<noteq> 0\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1\n 2. x \\<noteq> 0 \\<Longrightarrow>\n    (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> 0", "have \"int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)\""], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n\ngoal (1 subgoal):\n 1. int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)", "using sum_of_powers_int [of \"int x\" n]"], ["proof (prove)\nusing this:\n  x \\<noteq> 0\n  (int x - 1) * sum ((^) (int x)) {0..n} = int x ^ Suc n - 1\n\ngoal (1 subgoal):\n 1. int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)", "by (simp add: of_nat_diff)"], ["proof (state)\nthis:\n  int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)\n\ngoal (2 subgoals):\n 1. x = 0 \\<Longrightarrow> (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1\n 2. x \\<noteq> 0 \\<Longrightarrow>\n    (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "then"], ["proof (chain)\npicking this:\n  int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)\n\ngoal (1 subgoal):\n 1. (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "using of_nat_eq_iff"], ["proof (prove)\nusing this:\n  int ((x - 1) * sum ((^) x) {0..n}) = int (x ^ Suc n - 1)\n  (of_nat ?m = of_nat ?n) = (?m = ?n)\n\ngoal (1 subgoal):\n 1. (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "by blast"], ["proof (state)\nthis:\n  (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1\n\ngoal (1 subgoal):\n 1. x = 0 \\<Longrightarrow> (x - 1) * sum ((^) x) {0..n} = x ^ Suc n - 1", "qed auto"], ["", "theorem sigma_primepower:\n  assumes \"prime p\"\n  shows \"(p - 1) * sigma(p^e) = p^(e+1) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p - 1) * sigma (p ^ e) = p ^ (e + 1) - 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (p - 1) * sigma (p ^ e) = p ^ (e + 1) - 1", "have \"sigma(p^e) = (\\<Sum>i=0..e . p^i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma (p ^ e) = sum ((^) p) {0..e}", "using assms divisors_def dvd_prime_power_iff prime_nat_iff rewrite_sum_of_powers"], ["proof (prove)\nusing this:\n  prime p\n  divisors ?m \\<equiv> {n. n dvd ?m}\n  prime ?p \\<Longrightarrow> {d. d dvd ?p ^ ?n} = (^) ?p ` {0..?n}\n  prime ?n =\n  (1 < ?n \\<and>\n   (\\<forall>m. m dvd ?n \\<longrightarrow> m = 1 \\<or> m = ?n))\n  1 < ?p \\<Longrightarrow> \\<Sum> ((^) ?p ` {0..?n}) = sum ((^) ?p) {0..?n}\n\ngoal (1 subgoal):\n 1. sigma (p ^ e) = sum ((^) p) {0..e}", "by auto"], ["proof (state)\nthis:\n  sigma (p ^ e) = sum ((^) p) {0..e}\n\ngoal (1 subgoal):\n 1. (p - 1) * sigma (p ^ e) = p ^ (e + 1) - 1", "thus \"(p - 1)*sigma(p^e) = p^(e+1) - 1\""], ["proof (prove)\nusing this:\n  sigma (p ^ e) = sum ((^) p) {0..e}\n\ngoal (1 subgoal):\n 1. (p - 1) * sigma (p ^ e) = p ^ (e + 1) - 1", "using sum_of_powers_nat"], ["proof (prove)\nusing this:\n  sigma (p ^ e) = sum ((^) p) {0..e}\n  (?x - 1) * sum ((^) ?x) {0..?n} = ?x ^ Suc ?n - 1\n\ngoal (1 subgoal):\n 1. (p - 1) * sigma (p ^ e) = p ^ (e + 1) - 1", "by auto"], ["proof (state)\nthis:\n  (p - 1) * sigma (p ^ e) = p ^ (e + 1) - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "proposition sigma_prime_power_two: \"sigma(2^n) = 2^(n+1) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma (2 ^ n) = 2 ^ (n + 1) - 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sigma (2 ^ n) = 2 ^ (n + 1) - 1", "have \"(2 - 1) * sigma(2^n) = 2^(n+1) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 - 1) * sigma (2 ^ n) = 2 ^ (n + 1) - 1", "by (auto simp only: sigma_primepower two_is_prime_nat)"], ["proof (state)\nthis:\n  (2 - 1) * sigma (2 ^ n) = 2 ^ (n + 1) - 1\n\ngoal (1 subgoal):\n 1. sigma (2 ^ n) = 2 ^ (n + 1) - 1", "thus ?thesis"], ["proof (prove)\nusing this:\n  (2 - 1) * sigma (2 ^ n) = 2 ^ (n + 1) - 1\n\ngoal (1 subgoal):\n 1. sigma (2 ^ n) = 2 ^ (n + 1) - 1", "by simp"], ["proof (state)\nthis:\n  sigma (2 ^ n) = 2 ^ (n + 1) - 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prodsums_eq_sumprods:\n  fixes p :: nat and m :: nat\n  assumes \"coprime p m\"\n  shows \"\\<Sum>((\\<lambda>k. p^k) ` {0..n}) * sigma m = \\<Sum>{p^k * b |k b. k \\<le> n \\<and> b dvd m}\"\n    (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "have \"coprime p x\" if \"x dvd m\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime p x", "using assms"], ["proof (prove)\nusing this:\n  coprime p m\n\ngoal (1 subgoal):\n 1. coprime p x", "by (rule coprime_imp_coprime) (auto intro: dvd_trans that)"], ["proof (state)\nthis:\n  ?x dvd m \\<Longrightarrow> coprime p ?x\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "then"], ["proof (chain)\npicking this:\n  ?x dvd m \\<Longrightarrow> coprime p ?x", "have \"coprime (p ^ f) x\" if \"x dvd m\" for x f"], ["proof (prove)\nusing this:\n  ?x dvd m \\<Longrightarrow> coprime p ?x\n\ngoal (1 subgoal):\n 1. coprime (p ^ f) x", "using that"], ["proof (prove)\nusing this:\n  ?x dvd m \\<Longrightarrow> coprime p ?x\n  x dvd m\n\ngoal (1 subgoal):\n 1. coprime (p ^ f) x", "by simp"], ["proof (state)\nthis:\n  ?x dvd m \\<Longrightarrow> coprime (p ^ ?f) ?x\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "then"], ["proof (chain)\npicking this:\n  ?x dvd m \\<Longrightarrow> coprime (p ^ ?f) ?x", "have \"?lhs = \\<Sum>{a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m}\""], ["proof (prove)\nusing this:\n  ?x dvd m \\<Longrightarrow> coprime (p ^ ?f) ?x\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum>\n     {a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m}", "apply (subst sum_mult_sum_if_inj [OF mult_inj_if_coprime_nat])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<And>x f.\n        x dvd m \\<Longrightarrow> coprime (p ^ f) x) \\<Longrightarrow>\n    inj_on (\\<lambda>a. a) ((^) p ` {0..n})\n 2. (\\<And>x f.\n        x dvd m \\<Longrightarrow> coprime (p ^ f) x) \\<Longrightarrow>\n    inj_on (\\<lambda>b. b) (divisors m)\n 3. \\<And>a b.\n       \\<lbrakk>\\<And>x f. x dvd m \\<Longrightarrow> coprime (p ^ f) x;\n        a \\<in> (^) p ` {0..n}; b \\<in> divisors m\\<rbrakk>\n       \\<Longrightarrow> coprime a b\n 4. (\\<And>x f.\n        x dvd m \\<Longrightarrow> coprime (p ^ f) x) \\<Longrightarrow>\n    sum id {a * b |a b. a \\<in> (^) p ` {0..n} \\<and> b \\<in> divisors m} =\n    \\<Sum>\n     {a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m}", "apply (force intro!: sum.cong)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum>\n   {a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "also"], ["proof (state)\nthis:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum>\n   {a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "have \"... = ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum>\n     {a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m} =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "by (blast intro: sum.cong)"], ["proof (state)\nthis:\n  \\<Sum>\n   {a * b |a b. (\\<exists>f. a = p ^ f \\<and> f \\<le> n) \\<and> b dvd m} =\n  \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "finally"], ["proof (chain)\npicking this:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}", "."], ["proof (state)\nthis:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum> {p ^ k * b |k b. k \\<le> n \\<and> b dvd m}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma div_decomp_comp:\n  fixes a::nat\n  shows \"coprime m n \\<Longrightarrow> a dvd m*n \\<longleftrightarrow> (\\<exists>b c. a = b * c \\<and> b dvd m \\<and> c dvd n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime m n \\<Longrightarrow>\n    (a dvd m * n) = (\\<exists>b c. a = b * c \\<and> b dvd m \\<and> c dvd n)", "by (auto simp only: division_decomp mult_dvd_mono)"], ["", "theorem sigma_semimultiplicative:\n  assumes p: \"prime p\" and cop: \"coprime p m\"\n  shows \"sigma (p^n) * sigma m = sigma (p^n * m)\" (is \"?lhs = ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "from cop"], ["proof (chain)\npicking this:\n  coprime p m", "have cop2: \"coprime (p^n) m\""], ["proof (prove)\nusing this:\n  coprime p m\n\ngoal (1 subgoal):\n 1. coprime (p ^ n) m", "by simp"], ["proof (state)\nthis:\n  coprime (p ^ n) m\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "from p"], ["proof (chain)\npicking this:\n  prime p", "have \"?lhs = \\<Sum>((\\<lambda>f. p^f) ` {0..n}) * sigma m\""], ["proof (prove)\nusing this:\n  prime p\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = \\<Sum> ((^) p ` {0..n}) * sigma m", "using divisors_def dvd_prime_power_iff"], ["proof (prove)\nusing this:\n  prime p\n  divisors ?m \\<equiv> {n. n dvd ?m}\n  prime ?p \\<Longrightarrow> {d. d dvd ?p ^ ?n} = (^) ?p ` {0..?n}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = \\<Sum> ((^) p ` {0..n}) * sigma m", "by auto"], ["proof (state)\nthis:\n  sigma (p ^ n) * sigma m = \\<Sum> ((^) p ` {0..n}) * sigma m\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "also"], ["proof (state)\nthis:\n  sigma (p ^ n) * sigma m = \\<Sum> ((^) p ` {0..n}) * sigma m\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "from cop"], ["proof (chain)\npicking this:\n  coprime p m", "have \"... = (\\<Sum> {p^f*b| f b . f\\<le>n \\<and> b dvd m})\""], ["proof (prove)\nusing this:\n  coprime p m\n\ngoal (1 subgoal):\n 1. \\<Sum> ((^) p ` {0..n}) * sigma m =\n    \\<Sum> {p ^ f * b |f b. f \\<le> n \\<and> b dvd m}", "by (auto simp add: prodsums_eq_sumprods prime_nat_iff)"], ["proof (state)\nthis:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum> {p ^ f * b |f b. f \\<le> n \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "also"], ["proof (state)\nthis:\n  \\<Sum> ((^) p ` {0..n}) * sigma m =\n  \\<Sum> {p ^ f * b |f b. f \\<le> n \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "have \"... = (\\<Sum> {a*b| a b . a dvd (p^n) \\<and> b dvd m})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {p ^ f * b |f b. f \\<le> n \\<and> b dvd m} =\n    \\<Sum> {a * b |a b. a dvd p ^ n \\<and> b dvd m}", "by (metis (no_types, hide_lams) le_imp_power_dvd divides_primepow_nat p)"], ["proof (state)\nthis:\n  \\<Sum> {p ^ f * b |f b. f \\<le> n \\<and> b dvd m} =\n  \\<Sum> {a * b |a b. a dvd p ^ n \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "also"], ["proof (state)\nthis:\n  \\<Sum> {p ^ f * b |f b. f \\<le> n \\<and> b dvd m} =\n  \\<Sum> {a * b |a b. a dvd p ^ n \\<and> b dvd m}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "have \"\\<dots> = \\<Sum>{c. c dvd (p^n*m)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sum> {a * b |a b. a dvd p ^ n \\<and> b dvd m} =\n    \\<Sum> {c. c dvd p ^ n * m}", "using cop2 div_decomp_comp"], ["proof (prove)\nusing this:\n  coprime (p ^ n) m\n  coprime ?m ?n \\<Longrightarrow>\n  (?a dvd ?m * ?n) =\n  (\\<exists>b c. ?a = b * c \\<and> b dvd ?m \\<and> c dvd ?n)\n\ngoal (1 subgoal):\n 1. \\<Sum> {a * b |a b. a dvd p ^ n \\<and> b dvd m} =\n    \\<Sum> {c. c dvd p ^ n * m}", "by auto"], ["proof (state)\nthis:\n  \\<Sum> {a * b |a b. a dvd p ^ n \\<and> b dvd m} =\n  \\<Sum> {c. c dvd p ^ n * m}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "finally"], ["proof (chain)\npicking this:\n  sigma (p ^ n) * sigma m = \\<Sum> {c. c dvd p ^ n * m}", "show ?thesis"], ["proof (prove)\nusing this:\n  sigma (p ^ n) * sigma m = \\<Sum> {c. c dvd p ^ n * m}\n\ngoal (1 subgoal):\n 1. sigma (p ^ n) * sigma m = sigma (p ^ n * m)", "by (simp add: divisors_def)"], ["proof (state)\nthis:\n  sigma (p ^ n) * sigma m = sigma (p ^ n * m)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}