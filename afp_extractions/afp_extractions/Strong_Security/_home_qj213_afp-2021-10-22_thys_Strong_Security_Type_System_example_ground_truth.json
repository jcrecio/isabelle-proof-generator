{"file_name": "/home/qj213/afp-2021-10-22/thys/Strong_Security/Type_System_example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Strong_Security", "problem_names": ["lemma ExprTypable_with_smallerD_implies_d_indistinguishable:\n\"\\<lbrakk> \\<turnstile>\\<^bsub>\\<E>\\<^esub> e : D'; \\<forall>d' \\<in> D'. d' \\<le> d \\<rbrakk> \\<Longrightarrow> e \\<equiv>\\<^bsub>d\\<^esub> e\""], "translations": [["", "lemma ExprTypable_with_smallerD_implies_d_indistinguishable:\n\"\\<lbrakk> \\<turnstile>\\<^bsub>\\<E>\\<^esub> e : D'; \\<forall>d' \\<in> D'. d' \\<le> d \\<rbrakk> \\<Longrightarrow> e \\<equiv>\\<^bsub>d\\<^esub> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<turnstile>\\<^bsub>\\<E>\\<^esub> e : D';\n     \\<forall>d'\\<in>D'. d' \\<le> d\\<rbrakk>\n    \\<Longrightarrow> e \\<equiv>\\<^bsub>d\\<^esub> e", "proof (induct rule: ExprSecTyping.induct, \n    simp_all add: Strongly_Secure_Programs.d_indistinguishable_def \n    Strong_Security.d_equal_def, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "fix dl and arglist::\"(('id, 'val) Expr) list\" and f::\"'val list \\<Rightarrow> 'val\" \n    and m1::\"('id,'val) State\" and m2::\"('id,'val) State\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume main: \"\\<forall>i < length arglist. \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist!i : dl!i \\<and>\n    ((\\<forall>d' \\<in> (dl!i). d' \\<le> d) \\<longrightarrow> \n    (\\<forall>m m'. (\\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x) \n    \\<longrightarrow> ExprEval (arglist!i) m = ExprEval (arglist!i) m'))\""], ["proof (state)\nthis:\n  \\<forall>i<length arglist.\n     \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n      (\\<forall>m m'.\n          (\\<forall>x.\n              DA x \\<le> d \\<longrightarrow> m x = m' x) \\<longrightarrow>\n          ExprEval (arglist ! i) m = ExprEval (arglist ! i) m'))\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume smaller: \"\\<forall>D. (\\<exists>i < length arglist. D = (dl!i)) \n    \\<longrightarrow> (\\<forall>d'\\<in>D. d' \\<le> d)\""], ["proof (state)\nthis:\n  \\<forall>D.\n     (\\<exists>i<length arglist. D = dl ! i) \\<longrightarrow>\n     (\\<forall>d'\\<in>D. d' \\<le> d)\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "assume eqstate: \"\\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\""], ["proof (state)\nthis:\n  \\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "from smaller"], ["proof (chain)\npicking this:\n  \\<forall>D.\n     (\\<exists>i<length arglist. D = dl ! i) \\<longrightarrow>\n     (\\<forall>d'\\<in>D. d' \\<le> d)", "have irangesubst: \n    \"\\<forall>i < length arglist. \\<forall>d' \\<in> (dl!i). d' \\<le> d\""], ["proof (prove)\nusing this:\n  \\<forall>D.\n     (\\<exists>i<length arglist. D = dl ! i) \\<longrightarrow>\n     (\\<forall>d'\\<in>D. d' \\<le> d)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length arglist. \\<forall>d'\\<in>dl ! i. d' \\<le> d", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length arglist. \\<forall>d'\\<in>dl ! i. d' \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "with eqstate main"], ["proof (chain)\npicking this:\n  \\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\n  \\<forall>i<length arglist.\n     \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n      (\\<forall>m m'.\n          (\\<forall>x.\n              DA x \\<le> d \\<longrightarrow> m x = m' x) \\<longrightarrow>\n          ExprEval (arglist ! i) m = ExprEval (arglist ! i) m'))\n  \\<forall>i<length arglist. \\<forall>d'\\<in>dl ! i. d' \\<le> d", "have \n    \"\\<forall>i < length arglist. ExprEval (arglist!i) m1 \n    = ExprEval (arglist!i) m2\""], ["proof (prove)\nusing this:\n  \\<forall>x. DA x \\<le> d \\<longrightarrow> m1 x = m2 x\n  \\<forall>i<length arglist.\n     \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist ! i : dl ! i \\<and>\n     ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n      (\\<forall>m m'.\n          (\\<forall>x.\n              DA x \\<le> d \\<longrightarrow> m x = m' x) \\<longrightarrow>\n          ExprEval (arglist ! i) m = ExprEval (arglist ! i) m'))\n  \\<forall>i<length arglist. \\<forall>d'\\<in>dl ! i. d' \\<le> d\n\ngoal (1 subgoal):\n 1. \\<forall>i<length arglist.\n       ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2", "by force"], ["proof (state)\nthis:\n  \\<forall>i<length arglist.\n     ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "hence substmap: \"(ExprEvalL arglist m1) = (ExprEvalL arglist m2)\""], ["proof (prove)\nusing this:\n  \\<forall>i<length arglist.\n     ExprEval (arglist ! i) m1 = ExprEval (arglist ! i) m2\n\ngoal (1 subgoal):\n 1. ExprEvalL arglist m1 = ExprEvalL arglist m2", "by (induct arglist, auto, force)"], ["proof (state)\nthis:\n  ExprEvalL arglist m1 = ExprEvalL arglist m2\n\ngoal (1 subgoal):\n 1. \\<And>arglist dl f m m'.\n       \\<lbrakk>\\<forall>i<length arglist.\n                   \\<turnstile>\\<^bsub>\\<E>\\<^esub> arglist !\n              i : dl ! i \\<and>\n                   ((\\<forall>d'\\<in>dl ! i. d' \\<le> d) \\<longrightarrow>\n                    (\\<forall>m m'.\n                        (\\<forall>x.\n                            DA x \\<le> d \\<longrightarrow>\n                            m x = m' x) \\<longrightarrow>\n                        ExprEval (arglist ! i) m =\n                        ExprEval (arglist ! i) m'));\n        \\<forall>y.\n           (\\<exists>i<length arglist. y = dl ! i) \\<longrightarrow>\n           (\\<forall>d'\\<in>y. d' \\<le> d);\n        \\<forall>x. DA x \\<le> d \\<longrightarrow> m x = m' x\\<rbrakk>\n       \\<Longrightarrow> f (ExprEvalL arglist m) = f (ExprEvalL arglist m')", "show \"f (ExprEvalL arglist m1) = f (ExprEvalL arglist m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (ExprEvalL arglist m1) = f (ExprEvalL arglist m2)", "by (subst substmap, auto)"], ["proof (state)\nthis:\n  f (ExprEvalL arglist m1) = f (ExprEvalL arglist m2)\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation Type_System_example: Type_System ExprEval BMap DA\n  synAssignSC synWhileSC synIfSC"], ["proof (prove)\ngoal (1 subgoal):\n 1. Type_System ExprEval BMap DA synAssignSC synWhileSC synIfSC", "by (unfold_locales, simp add: synAssignSC_def,\n  metis ExprTypable_with_smallerD_implies_d_indistinguishable,\n  simp add: synWhileSC_def,\n  metis ExprTypable_with_smallerD_implies_d_indistinguishable,\n  simp add: synIfSC_def, metis)"], ["", "end"]]}