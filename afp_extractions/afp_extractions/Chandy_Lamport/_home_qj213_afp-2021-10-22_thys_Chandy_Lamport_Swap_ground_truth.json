{"file_name": "/home/qj213/afp-2021-10-22/thys/Chandy_Lamport/Swap.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Chandy_Lamport", "problem_names": ["lemma swap_msgs_Trans_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Send_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Recv_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Send_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Trans_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Recv_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Trans_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Send_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Recv_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma same_cs_implies_same_resulting_cs:\n  assumes\n    \"cs c i = cs d i\"\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\" and\n    \"regular_event ev\"\n  shows\n    \"cs c' i = cs d' i\"", "lemma regular_event_implies_same_channel_snapshot_Recv_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma regular_event_implies_same_channel_snapshot_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"~ isRecv ev\" and\n    \"regular_event ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma same_messages_2:\n  assumes\n    \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\" and\n    \"msgs c i = msgs d i\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\" and\n    \"~ regular_event ev\"\n  shows\n    \"msgs c' i = msgs d' i\"", "lemma same_cs_2:\n  assumes\n    \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\" and\n    \"cs c i = cs d i\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\"\n  shows\n    \"cs c' i = cs d' i\"", "lemma swap_Snapshot_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Trans_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e' i = msgs e i\"", "lemma swap_Trans_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_Send_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_Snapshot_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_Recv_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_Snapshot_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Recv_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_RecvMarker_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_msgs_Send_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_RecvMarker_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\"", "lemma swap_cs_Trans_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Snapshot_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Send_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Snapshot_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Recv_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Snapshot_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Trans_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_RecvMarker_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Send_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_RecvMarker_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\"", "lemma swap_cs_Recv_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\""], "translations": [["", "lemma swap_msgs_Trans_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain u u' where \"ev = Trans ?p u u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u u'.\n        ev = Trans (occurs_on ev) u u' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(1))"], ["proof (state)\nthis:\n  ev = Trans (occurs_on ev) u u'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain u'' u''' where \"ev' = Trans ?q u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev' = Trans (occurs_on ev') u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(1))"], ["proof (state)\nthis:\n  ev' = Trans (occurs_on ev') u'' u'''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  ev' = Trans (occurs_on ev') u'' u'''", "have \"msgs d' i = msgs d i\""], ["proof (prove)\nusing this:\n  ev' = Trans (occurs_on ev') u'' u'''\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "by (metis Trans_msg assms(1) assms(3) assms(4) assms(5))"], ["proof (state)\nthis:\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs d' i = msgs d i", "have \"msgs e i = msgs e' i\""], ["proof (prove)\nusing this:\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using Trans_msg assms(2) assms(3) assms(4) assms(6)"], ["proof (prove)\nusing this:\n  msgs d' i = msgs d i\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev\n  isTrans ev'\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by blast"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Send_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i' r u u' m where Send_ev: \"ev = Send i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Send i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i'' s u'' u''' m' where Send_ev': \"ev' = Send i'' ?q s u'' u''' m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' s u'' u''' m'.\n        ev' = Send i'' (occurs_on ev') s u'' u''' m' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(2))"], ["proof (state)\nthis:\n  ev' = Send i'' (occurs_on ev') s u'' u''' m'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "have \"i' \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> i''", "by (metis (mono_tags, lifting) \\<open>ev = Send i' (occurs_on ev) r u u' m\\<close> \\<open>ev' = Send i'' (occurs_on ev') s u'' u''' m'\\<close> assms(1) assms(2) assms(7) can_occur_def event.simps(27) happen_implies_can_occur option.simps(1) prod.simps(1))"], ["proof (state)\nthis:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i''", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i' \\<or> i = i''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i''; i = i' \\<or> i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  i = i' \\<or> i = i''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i''; i = i' \\<or> i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i' \\<or> i = i''", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i' \\<or> i = i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i'\""], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis \\<open>ev = Send i' (occurs_on ev) r u u' m\\<close> assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis \\<open>ev' = Send i'' (occurs_on ev') s u'' u''' m'\\<close> \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(2) assms(4) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (metis \\<open>ev' = Send i'' (occurs_on ev') s u'' u''' m'\\<close> \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(4) assms(5) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis \\<open>ev = Send i' (occurs_on ev) r u u' m\\<close> \\<open>i = i'\\<close> assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i''\""], ["proof (state)\nthis:\n  i = i''\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i''", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Send_ev \\<open>i' \\<noteq> i''\\<close> assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i @ [Msg m']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Msg m']", "by (metis Send_ev' \\<open>i = i''\\<close> assms(2) next_send)"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Msg m']\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Msg m']\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i @ [Msg m']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Msg m']", "by (metis Send_ev' \\<open>i = i''\\<close> assms(5) next_send)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Msg m']\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Msg m']\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis Send_ev \\<open>i = i''\\<close> \\<open>i' \\<noteq> i''\\<close> assms(3) assms(6) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  msgs e i = msgs d i @ [Msg m']\n  msgs d' i = msgs c i @ [Msg m']\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  msgs e i = msgs d i @ [Msg m']\n  msgs d' i = msgs c i @ [Msg m']\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  \\<not> (i = i' \\<or> i = i'')", "have \"msgs e i = msgs d i\""], ["proof (prove)\nusing this:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "using Send_ev' assms"], ["proof (prove)\nusing this:\n  \\<not> (i = i' \\<or> i = i'')\n  ev' = Send i'' (occurs_on ev') s u'' u''' m'\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis False Send_ev assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by (metis (no_types, hide_lams) \\<open>msgs d i = msgs c i\\<close> assms(2) assms(4) assms(5) calculation regular_event same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e' i", "by (metis (no_types, hide_lams) \\<open>msgs c i = msgs d' i\\<close> \\<open>msgs d i = msgs c i\\<close> assms(1) assms(3) assms(6) regular_event same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs d' i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "finally"], ["proof (chain)\npicking this:\n  msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Recv_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i' r u u' m where Recv_ev: \"ev = Recv i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Recv i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i'' s u'' u''' m' where Recv_ev': \"ev' = Recv i'' ?q s u'' u''' m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' s u'' u''' m'.\n        ev' = Recv i'' (occurs_on ev') s u'' u''' m' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(3))"], ["proof (state)\nthis:\n  ev' = Recv i'' (occurs_on ev') s u'' u''' m'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "have \"i' \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> i''", "by (metis Recv_ev Recv_ev' assms(1) assms(2) assms(7) can_occur_Recv happen_implies_can_occur option.simps(1) prod.simps(1))"], ["proof (state)\nthis:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i' \\<or> i = i''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<or> i = i'' \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  i = i' \\<or> i = i''\n\ngoal (2 subgoals):\n 1. i = i' \\<or> i = i'' \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i' \\<or> i = i''", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i' \\<or> i = i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i'\""], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"Msg m # msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "using Recv_ev assms"], ["proof (prove)\nusing this:\n  i = i'\n  ev = Recv i' (occurs_on ev) r u u' m\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "by (metis next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis Recv_ev' \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(2) assms(4) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (metis Recv_ev' \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(4) assms(5) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv_ev \\<open>i = i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i''\""], ["proof (state)\nthis:\n  i = i''\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i''", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Recv_ev \\<open>i' \\<noteq> i''\\<close> assms(1) assms(3) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m' # msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m' # msgs e i = msgs d i", "by (metis Recv_ev' \\<open>i = i''\\<close> assms(2) next_recv)"], ["proof (state)\nthis:\n  Msg m' # msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m' # msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m' # msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m' # msgs d' i = msgs c i", "by (metis Recv_ev' \\<open>i = i''\\<close> assms(5) next_recv)"], ["proof (state)\nthis:\n  Msg m' # msgs d' i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m' # msgs d' i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis Recv_ev \\<open>i = i''\\<close> \\<open>i' \\<noteq> i''\\<close> assms(3) assms(6) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  Msg m' # msgs e i = msgs d i\n  Msg m' # msgs d' i = msgs c i\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  Msg m' # msgs e i = msgs d i\n  Msg m' # msgs d' i = msgs c i\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  \\<not> (i = i' \\<or> i = i'')", "have \"msgs e i = msgs d i\""], ["proof (prove)\nusing this:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis Recv_ev' assms(2) assms(4) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis False Recv_ev assms(1) assms(3) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by (metis (no_types, hide_lams) \\<open>msgs d i = msgs c i\\<close> assms(2) assms(4) assms(5) calculation regular_event same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e' i", "by (metis (no_types, lifting) \\<open>msgs c i = msgs d' i\\<close> \\<open>msgs d i = msgs c i\\<close> assms(1) assms(3) assms(6) regular_event same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs d' i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> msgs e i = msgs e' i", "finally"], ["proof (chain)\npicking this:\n  msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Send_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i' r u u' m where Send: \"ev = Send i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Send i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain u'' u''' where Trans: \"ev' = Trans ?q u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev' = Trans (occurs_on ev') u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(1))"], ["proof (state)\nthis:\n  ev' = Trans (occurs_on ev') u'' u'''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "using Trans_msg assms(2) assms(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by auto"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "using Trans_msg assms(4) assms(5)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by auto"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis Send True assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "have \"msgs e i = msgs d i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "using Trans_msg assms(2) assms(4)"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by auto"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis False Send assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "using Trans_msg assms(4) assms(5)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by blast"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e' i", "by (metis (no_types, lifting) \\<open>msgs c i = msgs d' i\\<close> \\<open>msgs d i = msgs c i\\<close> assms(1) assms(3) assms(6) regular_event same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs d' i = msgs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "finally"], ["proof (chain)\npicking this:\n  msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Trans_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_msgs_Send_Trans"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSend ?ev; isTrans ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_msgs_Recv_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i' r u u' m where Recv: \"ev = Recv i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Recv i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain u'' u''' where Trans: \"ev' = Trans ?q u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev' = Trans (occurs_on ev') u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(1))"], ["proof (state)\nthis:\n  ev' = Trans (occurs_on ev') u'' u'''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"Msg m # msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "by (metis Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "using Trans_msg assms(2) assms(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by auto"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "using Trans_msg assms(4) assms(5)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by auto"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv True assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "have \"msgs e i = msgs d i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "using Trans_msg assms(2) assms(4)"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by auto"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis False Recv assms(1) assms(3) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "using Trans_msg assms(4) assms(5)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by blast"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e' i", "by (metis False Recv assms(6) next_recv)"], ["proof (state)\nthis:\n  msgs d' i = msgs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> msgs e i = msgs e' i", "finally"], ["proof (chain)\npicking this:\n  msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Trans_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_msgs_Recv_Trans"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isRecv ?ev; isTrans ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_msgs_Send_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i' r u u' m where Send: \"ev = Send i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Send i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain i'' s u'' u''' m' where Recv: \"ev' = Recv i'' ?q s u'' u''' m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' s u'' u''' m'.\n        ev' = Recv i'' (occurs_on ev') s u'' u''' m' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(3))"], ["proof (state)\nthis:\n  ev' = Recv i'' (occurs_on ev') s u'' u''' m'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i'\"; cases \"i = i''\", goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case 1"], ["proof (state)\nthis:\n  i = i'\n  i = i''\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  i = i''", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\nusing this:\n  i = i'\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m' # msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m' # msgs d' i = msgs c i", "by (metis \"1\"(2) Recv assms(5) next_recv)"], ["proof (state)\nthis:\n  Msg m' # msgs d' i = msgs c i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m' # msgs d' i = msgs c i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis \"1\"(1) Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m' # msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m' # msgs e i = msgs d i", "by (metis \"1\"(2) Recv assms(2) next_recv)"], ["proof (state)\nthis:\n  Msg m' # msgs e i = msgs d i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs e' i = msgs d' i @ [Msg m]\n  Msg m' # msgs d' i = msgs c i\n  msgs d i = msgs c i @ [Msg m]\n  Msg m' # msgs e i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e' i = msgs d' i @ [Msg m]\n  Msg m' # msgs d' i = msgs c i\n  msgs d i = msgs c i @ [Msg m]\n  Msg m' # msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.sel(2) list.sel(3) not_Cons_self2 tl_append2)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case 2"], ["proof (state)\nthis:\n  i = i'\n  i \\<noteq> i''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  i \\<noteq> i''", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\nusing this:\n  i = i'\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis \"2\"(2) Recv assms(2) assms(4) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (metis \"2\"(2) Recv assms(4) assms(5) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis Send 2(1) assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume 3: \"i \\<noteq> i'\" \"i = i''\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  i = i''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  i = i''", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Send assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m' # msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m' # msgs e i = msgs d i", "using 3 Recv assms"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  i = i''\n  ev' = Recv i'' (occurs_on ev') s u'' u''' m'\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. Msg m' # msgs e i = msgs d i", "by (metis next_recv)"], ["proof (state)\nthis:\n  Msg m' # msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m' # msgs e i = msgs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m' # msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m' # msgs d' i = msgs c i", "by (metis \"3\"(2) Recv assms(5) next_recv)"], ["proof (state)\nthis:\n  Msg m' # msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m' # msgs d' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis \"3\"(1) Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  Msg m' # msgs e i = msgs d i\n  Msg m' # msgs d' i = msgs c i\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  Msg m' # msgs e i = msgs d i\n  Msg m' # msgs d' i = msgs c i\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume 4: \"i \\<noteq> i'\" \"i \\<noteq> i''\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  i \\<noteq> i''", "have \"msgs e i = msgs d i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis Recv assms(2) assms(4) event.sel(9) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis \"4\"(1) Send assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by (metis \"4\"(2) Recv assms(5) next_recv)"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "also"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"... = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e' i", "by (metis \"4\"(1) Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs d' i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "finally"], ["proof (chain)\npicking this:\n  msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Recv_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_msgs_Send_Recv"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSend ?ev; isRecv ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma same_cs_implies_same_resulting_cs:\n  assumes\n    \"cs c i = cs d i\"\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\" and\n    \"regular_event ev\"\n  shows\n    \"cs c' i = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using assms"], ["proof (prove)\nusing this:\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> cs c' i = cs d' i\n 2. isSend ev \\<Longrightarrow> cs c' i = cs d' i\n 3. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "assume \"isTrans ev\""], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> cs c' i = cs d' i\n 2. isSend ev \\<Longrightarrow> cs c' i = cs d' i\n 3. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (metis (no_types, lifting) assms(1) assms(2) assms(3) assms(4) event.distinct_disc(4) no_cs_change_if_no_event)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c' i = cs d' i\n 2. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c' i = cs d' i\n 2. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "assume \"isSend ev\""], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c' i = cs d' i\n 2. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  isSend ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (metis (no_types, lifting) assms(1) assms(2) assms(3) assms(4) event.distinct_disc(10) no_cs_change_if_no_event)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "assume \"isRecv ev\""], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain i' r s u u' m where Recv: \"ev = Recv i' r s u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s u u' m.\n        ev = Recv i' r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecv_def)"], ["proof (state)\nthis:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (cases \"i' = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i' r s u u' m; i' = i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ev = Recv i' r s u u' m; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "case True"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i' r s u u' m; i' = i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ev = Recv i' r s u u' m; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "with assms Recv"], ["proof (chain)\npicking this:\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Recv i' r s u u' m\n  i' = i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Recv i' r s u u' m\n  i' = i\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (cases \"snd (cs c i) = Recording\", auto)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i' r s u u' m; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i' r s u u' m; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "case False"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i' r s u u' m; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "using assms Recv"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by simp"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma regular_event_implies_same_channel_snapshot_Recv_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "obtain i' r u u' m where Recv_ev: \"ev = Recv i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Recv i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "obtain i'' s u'' u''' m' where Recv_ev': \"ev' = Recv i'' ?q s u'' u''' m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' s u'' u''' m'.\n        ev' = Recv i'' (occurs_on ev') s u'' u''' m' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(3))"], ["proof (state)\nthis:\n  ev' = Recv i'' (occurs_on ev') s u'' u''' m'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "have \"i' \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> i''", "by (metis Recv_ev Recv_ev' assms(1) assms(5) assms(7) can_occur_Recv happen_implies_can_occur option.simps(1) prod.simps(1))"], ["proof (state)\nthis:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"i = i' \\<or> i = i''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<or> i = i'' \\<Longrightarrow> cs e i = cs e' i\n 2. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  i = i' \\<or> i = i''\n\ngoal (2 subgoals):\n 1. i = i' \\<or> i = i'' \\<Longrightarrow> cs e i = cs e' i\n 2. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i = i' \\<or> i = i''", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i' \\<or> i = i''\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i = i'' \\<Longrightarrow> cs e i = cs e' i", "assume \"i = i'\""], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"cs d' i = cs c i\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "using assms(4) assms(5) assms(7) no_cs_change_if_no_event"], ["proof (prove)\nusing this:\n  i = i'\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "by (metis Recv_ev' \\<open>i' \\<noteq> i''\\<close> event.sel(9) regular_event)"], ["proof (state)\nthis:\n  cs d' i = cs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs c i", "have \"cs e' i = cs d i\""], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs e' i = cs d i", "using assms(1) assms(3) assms(6) distributed_system.same_cs_implies_same_resulting_cs distributed_system_axioms regular_event"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>distributed_system ?channel; cs ?c ?i = cs ?d ?i;\n   distributed_system.next ?channel ?trans ?send ?recv ?c ?ev ?c';\n   distributed_system.next ?channel ?trans ?send ?recv ?d ?ev ?d';\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n  distributed_system channel\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n\ngoal (1 subgoal):\n 1. cs e' i = cs d i", "by blast"], ["proof (state)\nthis:\n  cs e' i = cs d i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs e' i = cs d i", "have \"cs d i = cs e i\""], ["proof (prove)\nusing this:\n  cs e' i = cs d i\n\ngoal (1 subgoal):\n 1. cs d i = cs e i", "by (metis Recv_ev' \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(2) assms(4) event.sel(9) no_cs_change_if_no_event regular_event)"], ["proof (state)\nthis:\n  cs d i = cs e i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs e i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d i = cs e i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (simp add: \\<open>cs e' i = cs d i\\<close>)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> cs e i = cs e' i", "assume \"i = i''\""], ["proof (state)\nthis:\n  i = i''\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i = i''", "have \"cs d i = cs c i\""], ["proof (prove)\nusing this:\n  i = i''\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis Recv_ev \\<open>i' \\<noteq> i''\\<close> assms(1) assms(3) event.sel(9) no_cs_change_if_no_event regular_event)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using assms(2) assms(4) assms(5) regular_event same_cs_implies_same_resulting_cs"], ["proof (prove)\nusing this:\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n  \\<lbrakk>cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs e i = cs d' i", "have \"cs d' i = cs e' i\""], ["proof (prove)\nusing this:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by (metis Recv_ev \\<open>i = i''\\<close> \\<open>i' \\<noteq> i''\\<close> assms(3) assms(6) event.sel(9) no_cs_change_if_no_event regular_event)"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (simp add: \\<open>cs e i = cs d' i\\<close>)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. \\<not> (i = i' \\<or> i = i'') \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  \\<not> (i = i' \\<or> i = i'')", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis Recv_ev Recv_ev' assms(1) assms(2) assms(5) assms(6) next_recv)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma regular_event_implies_same_channel_snapshot_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"~ isRecv ev\" and\n    \"regular_event ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "obtain i' s u'' u''' m' where Recv: \"ev' = Recv i' ?q s u'' u''' m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' s u'' u''' m'.\n        ev' = Recv i' (occurs_on ev') s u'' u''' m' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(5) event.collapse(3))"], ["proof (state)\nthis:\n  ev' = Recv i' (occurs_on ev') s u'' u''' m'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"cs d i = cs c i\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "using assms(1) assms(3) assms(7) no_cs_change_if_no_event \\<open>regular_event ev\\<close> \\<open>~ isRecv ev\\<close>"], ["proof (prove)\nusing this:\n  i = i'\n  c \\<turnstile> ev \\<mapsto> d\n  \\<not> isRecv ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n  regular_event ev\n  \\<not> isRecv ev\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by auto"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using assms(2) assms(5) assms(6) regular_event same_cs_implies_same_resulting_cs"], ["proof (prove)\nusing this:\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n  \\<lbrakk>cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs e i = cs d' i", "have \"cs d' i = cs e' i\""], ["proof (prove)\nusing this:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using True assms(3) assms(6) assms(7) no_cs_change_if_no_event \\<open>regular_event ev\\<close> \\<open>~ isRecv ev\\<close>"], ["proof (prove)\nusing this:\n  cs e i = cs d' i\n  i = i'\n  \\<not> isRecv ev\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n  regular_event ev\n  \\<not> isRecv ev\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by auto"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (simp add: \\<open>cs e i = cs d' i\\<close>)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "have \"cs d i = cs c i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "using assms(1) assms(3) assms(4) no_cs_change_if_no_event"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  c \\<turnstile> ev \\<mapsto> d\n  \\<not> isRecv ev\n  regular_event ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by auto"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs d' i = cs e i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "by (metis (no_types, lifting) assms(2) assms(5) assms(6) regular_event same_cs_implies_same_resulting_cs)"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs e i", "show \"cs e i = cs e' i\""], ["proof (prove)\nusing this:\n  cs d' i = cs e i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "using assms(3) assms(4) assms(7) no_cs_change_if_no_event"], ["proof (prove)\nusing this:\n  cs d' i = cs e i\n  \\<not> isRecv ev\n  regular_event ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by auto"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_messages_2:\n  assumes\n    \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\" and\n    \"msgs c i = msgs d i\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\" and\n    \"~ regular_event ev\"\n  shows\n    \"msgs c' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs c' i = msgs d' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs c' i = msgs d' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms(2) assms(3) assms(4) no_msgs_change_if_no_channel"], ["proof (prove)\nusing this:\n  channel i = None\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by auto"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "have \"isSnapshot ev \\<or> isRecvMarker ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isRecvMarker ev", "using assms(5) event.exhaust_disc"], ["proof (prove)\nusing this:\n  \\<not> regular_event ev\n  \\<lbrakk>isTrans ?event \\<Longrightarrow> ?P;\n   isSend ?event \\<Longrightarrow> ?P; isRecv ?event \\<Longrightarrow> ?P;\n   isSnapshot ?event \\<Longrightarrow> ?P;\n   isRecvMarker ?event \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isRecvMarker ev", "by auto"], ["proof (state)\nthis:\n  isSnapshot ev \\<or> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev \\<or> isRecvMarker ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isSnapshot ev \\<or> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "assume \"isSnapshot ev\""], ["proof (state)\nthis:\n  isSnapshot ev\n\ngoal (2 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev", "obtain r where Snapshot: \"ev = Snapshot r\""], ["proof (prove)\nusing this:\n  isSnapshot ev\n\ngoal (1 subgoal):\n 1. (\\<And>r. ev = Snapshot r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isSnapshot_def)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (2 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot r", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (cases \"r = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot r; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case True"], ["proof (state)\nthis:\n  r = p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot r; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  r = p", "have \"msgs c' i = msgs c i @ [Marker]\""], ["proof (prove)\nusing this:\n  r = p\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "using chan Snapshot assms"], ["proof (prove)\nusing this:\n  r = p\n  channel i = Some (p, q)\n  ev = Snapshot r\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot r; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot r; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"msgs d' i = msgs d i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "using chan Snapshot assms True"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n  ev = Snapshot r\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  r = p\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "by simp"], ["proof (state)\nthis:\n  msgs d' i = msgs d i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot r; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i @ [Marker]\n  msgs d' i = msgs d i @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n  msgs d' i = msgs d i @ [Marker]\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n  msgs d' i = msgs d i @ [Marker]\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case False"], ["proof (state)\nthis:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  r \\<noteq> p", "have \"msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "using chan Snapshot assms"], ["proof (prove)\nusing this:\n  r \\<noteq> p\n  channel i = Some (p, q)\n  ev = Snapshot r\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"msgs d' i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "using chan Snapshot assms False"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n  ev = Snapshot r\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "by simp"], ["proof (state)\nthis:\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot r; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i\n  msgs d' i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n  msgs d' i = msgs d i\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "assume \"isRecvMarker ev\""], ["proof (state)\nthis:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isRecvMarker ev", "obtain i' r s where RecvMarker: \"ev = RecvMarker i' r s\""], ["proof (prove)\nusing this:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s.\n        ev = RecvMarker i' r s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecvMarker_def)"], ["proof (state)\nthis:\n  ev = RecvMarker i' r s\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i' r s", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (cases \"has_snapshotted c r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case snap: True"], ["proof (state)\nthis:\n  ps c r \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"Marker # msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "using chan RecvMarker assms snap"], ["proof (prove)\nusing this:\n  i = i'\n  channel i = Some (p, q)\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs c' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  Marker # msgs c' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"Marker # msgs d' i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker # msgs d' i = msgs d i", "using chan RecvMarker assms snap True"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  ps c r \\<noteq> None\n  i = i'\n\ngoal (1 subgoal):\n 1. Marker # msgs d' i = msgs d i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs d' i = msgs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  Marker # msgs c' i = msgs c i\n  Marker # msgs d' i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker # msgs c' i = msgs c i\n  Marker # msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  Marker # msgs c' i = msgs c i\n  Marker # msgs d' i = msgs d i\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "have \"msgs d' i = msgs d i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "using RecvMarker assms(1) assms(4) snap"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  d \\<turnstile> ev \\<mapsto> d'\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "by auto"], ["proof (state)\nthis:\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "also"], ["proof (state)\nthis:\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"... = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "also"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"... = msgs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using False RecvMarker snap assms"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  ev = RecvMarker i' r s\n  ps c r \\<noteq> None\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "finally"], ["proof (chain)\npicking this:\n  msgs d' i = msgs c' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d' i = msgs c' i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using snap"], ["proof (prove)\nusing this:\n  msgs d' i = msgs c' i\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"Marker # msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "using chan RecvMarker assms"], ["proof (prove)\nusing this:\n  i = i'\n  channel i = Some (p, q)\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs c' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  Marker # msgs c' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"Marker # msgs d' i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker # msgs d' i = msgs d i", "using chan RecvMarker assms True"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  i = i'\n\ngoal (1 subgoal):\n 1. Marker # msgs d' i = msgs d i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs d' i = msgs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  Marker # msgs c' i = msgs c i\n  Marker # msgs d' i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker # msgs c' i = msgs c i\n  Marker # msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  Marker # msgs c' i = msgs c i\n  Marker # msgs d' i = msgs d i\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case not_i: False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (cases \"r = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case True"], ["proof (state)\nthis:\n  r = p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  r = p", "have \"msgs c' i = msgs c i @ [Marker]\""], ["proof (prove)\nusing this:\n  r = p\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "using no_snap RecvMarker assms True chan not_i"], ["proof (prove)\nusing this:\n  r = p\n  \\<not> ps c r \\<noteq> None\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  r = p\n  channel i = Some (p, q)\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "by auto"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"msgs d' i = msgs d i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "have \"~ has_snapshotted d r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ps d r \\<noteq> None", "using assms no_snap True"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  \\<not> ps c r \\<noteq> None\n  r = p\n\ngoal (1 subgoal):\n 1. \\<not> ps d r \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  \\<not> ps d r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "then"], ["proof (chain)\npicking this:\n  \\<not> ps d r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps d r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "using no_snap RecvMarker assms True chan not_i"], ["proof (prove)\nusing this:\n  \\<not> ps d r \\<noteq> None\n  \\<not> ps c r \\<noteq> None\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  r = p\n  channel i = Some (p, q)\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i @ [Marker]", "by auto"], ["proof (state)\nthis:\n  msgs d' i = msgs d i @ [Marker]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs d i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i\n 2. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i @ [Marker]\n  msgs d' i = msgs d i @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n  msgs d' i = msgs d i @ [Marker]\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n  msgs d' i = msgs d i @ [Marker]\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "case False"], ["proof (state)\nthis:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  r \\<noteq> p", "have \"msgs c i = msgs c' i\""], ["proof (prove)\nusing this:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using False RecvMarker no_snap chan assms not_i"], ["proof (prove)\nusing this:\n  r \\<noteq> p\n  r \\<noteq> p\n  ev = RecvMarker i' r s\n  \\<not> ps c r \\<noteq> None\n  channel i = Some (p, q)\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by simp"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "have \"msgs d' i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "have \"~ has_snapshotted d r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ps d r \\<noteq> None", "using assms no_snap False"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  \\<not> ps c r \\<noteq> None\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<not> ps d r \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  \\<not> ps d r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "then"], ["proof (chain)\npicking this:\n  \\<not> ps d r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps d r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "using False RecvMarker no_snap chan assms not_i"], ["proof (prove)\nusing this:\n  \\<not> ps d r \\<noteq> None\n  r \\<noteq> p\n  ev = RecvMarker i' r s\n  \\<not> ps c r \\<noteq> None\n  channel i = Some (p, q)\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs d i", "by simp"], ["proof (state)\nthis:\n  msgs d' i = msgs d i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c' i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs c i = msgs c' i\n  msgs d' i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n  msgs d' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n  msgs d' i = msgs d i\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_cs_2:\n  assumes\n    \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\" and\n    \"cs c i = cs d i\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\"\n  shows\n    \"cs c' i = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs c' i = cs d' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs d' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs c' i = cs d' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "using assms(2) assms(3) assms(4) no_cs_change_if_no_channel"], ["proof (prove)\nusing this:\n  channel i = None\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by auto"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs d' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  channel i = Some (p, q)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 4. \\<And>x4.\n       \\<lbrakk>channel i = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "case (Snapshot r)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 4. \\<And>x4.\n       \\<lbrakk>channel i = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "with assms chan"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  channel i = Some (p, q)\n  ev = Snapshot r", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  channel i = Some (p, q)\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (cases \"r = q\", auto)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "case (RecvMarker i' r s)"], ["proof (state)\nthis:\n  ev = RecvMarker i' r s\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i' r s", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (cases \"has_snapshotted c r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "case snap: True"], ["proof (state)\nthis:\n  ps c r \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ps c r \\<noteq> None", "have sdr: \"has_snapshotted d r\""], ["proof (prove)\nusing this:\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. ps d r \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  ps c r \\<noteq> None\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. ps d r \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  ps d r \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ps d r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps d r \\<noteq> None\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ps d r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps d r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"cs c' i = (fst (cs c i), Done)\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. cs c' i = (fst (cs c i), Done)", "using RecvMarker assms(3) next_recv_marker"], ["proof (prove)\nusing this:\n  i = i'\n  ev = RecvMarker i' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  ?c \\<turnstile> RecvMarker ?i ?p ?q \\<mapsto> ?c' =\n  (can_occur (RecvMarker ?i ?p ?q) ?c \\<and>\n   (\\<forall>r. states ?c r = states ?c' r) \\<and>\n   (\\<forall>r. r \\<noteq> ?p \\<longrightarrow> ps ?c r = ps ?c' r) \\<and>\n   Marker # msgs ?c' ?i = msgs ?c ?i \\<and>\n   cs ?c' ?i = (fst (cs ?c ?i), Done) \\<and>\n   (if ps ?c ?p \\<noteq> None\n    then ps ?c ?p = ps ?c' ?p \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<longrightarrow>\n             msgs ?c' i' = msgs ?c i') \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<longrightarrow> cs ?c i' = cs ?c' i')\n    else ps ?c' ?p = Some (states ?c ?p) \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<exists>r. channel i' = Some (?p, r)) \\<longrightarrow>\n             msgs ?c' i' = msgs ?c i' @ [Marker]) \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<exists>r. channel i' = Some (r, ?p)) \\<longrightarrow>\n             cs ?c' i' = (fst (cs ?c i'), Recording)) \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<nexists>r. channel i' = Some (?p, r)) \\<longrightarrow>\n             msgs ?c' i' = msgs ?c i') \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<nexists>r. channel i' = Some (r, ?p)) \\<longrightarrow>\n             cs ?c' i' = cs ?c i')))\n\ngoal (1 subgoal):\n 1. cs c' i = (fst (cs c i), Done)", "by blast"], ["proof (state)\nthis:\n  cs c' i = (fst (cs c i), Done)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps d r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "also"], ["proof (state)\nthis:\n  cs c' i = (fst (cs c i), Done)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps d r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "have \"... = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (cs c i), Done) = cs d' i", "using RecvMarker True assms(2) assms(4)"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n  i = i'\n  cs c i = cs d i\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. (fst (cs c i), Done) = cs d' i", "by auto"], ["proof (state)\nthis:\n  (fst (cs c i), Done) = cs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps d r \\<noteq> None; i = i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "finally"], ["proof (chain)\npicking this:\n  cs c' i = cs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "using True"], ["proof (prove)\nusing this:\n  cs c' i = cs d' i\n  i = i'\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by simp"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "have \"cs c' i = cs c i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. cs c' i = cs c i", "using RecvMarker assms snap"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. cs c' i = cs c i", "by auto"], ["proof (state)\nthis:\n  cs c' i = cs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "also"], ["proof (state)\nthis:\n  cs c' i = cs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "have \"... = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "using RecvMarker assms snap sdr False"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  ps c r \\<noteq> None\n  ps d r \\<noteq> None\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "by auto"], ["proof (state)\nthis:\n  cs c i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps d r \\<noteq> None; i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "finally"], ["proof (chain)\npicking this:\n  cs c' i = cs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by simp"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c r \\<noteq> None", "have nsdr: \"~ has_snapshotted d r\""], ["proof (prove)\nusing this:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> ps d r \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  \\<not> ps c r \\<noteq> None\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. \\<not> ps d r \\<noteq> None", "by blast"], ["proof (state)\nthis:\n  \\<not> ps d r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i = cs d' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs c' i = cs d' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs c' i = cs d' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have \"cs c' i = (fst (cs c i), Done)\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. cs c' i = (fst (cs c i), Done)", "using RecvMarker assms(3) next_recv_marker"], ["proof (prove)\nusing this:\n  i = i'\n  ev = RecvMarker i' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  ?c \\<turnstile> RecvMarker ?i ?p ?q \\<mapsto> ?c' =\n  (can_occur (RecvMarker ?i ?p ?q) ?c \\<and>\n   (\\<forall>r. states ?c r = states ?c' r) \\<and>\n   (\\<forall>r. r \\<noteq> ?p \\<longrightarrow> ps ?c r = ps ?c' r) \\<and>\n   Marker # msgs ?c' ?i = msgs ?c ?i \\<and>\n   cs ?c' ?i = (fst (cs ?c ?i), Done) \\<and>\n   (if ps ?c ?p \\<noteq> None\n    then ps ?c ?p = ps ?c' ?p \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<longrightarrow>\n             msgs ?c' i' = msgs ?c i') \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<longrightarrow> cs ?c i' = cs ?c' i')\n    else ps ?c' ?p = Some (states ?c ?p) \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<exists>r. channel i' = Some (?p, r)) \\<longrightarrow>\n             msgs ?c' i' = msgs ?c i' @ [Marker]) \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<exists>r. channel i' = Some (r, ?p)) \\<longrightarrow>\n             cs ?c' i' = (fst (cs ?c i'), Recording)) \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<nexists>r. channel i' = Some (?p, r)) \\<longrightarrow>\n             msgs ?c' i' = msgs ?c i') \\<and>\n         (\\<forall>i'.\n             i' \\<noteq> ?i \\<and>\n             (\\<nexists>r. channel i' = Some (r, ?p)) \\<longrightarrow>\n             cs ?c' i' = cs ?c i')))\n\ngoal (1 subgoal):\n 1. cs c' i = (fst (cs c i), Done)", "by blast"], ["proof (state)\nthis:\n  cs c' i = (fst (cs c i), Done)\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs c' i = cs d' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "also"], ["proof (state)\nthis:\n  cs c' i = (fst (cs c i), Done)\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs c' i = cs d' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "have \"... = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst (cs c i), Done) = cs d' i", "using RecvMarker True assms(2) assms(4)"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n  i = i'\n  cs c i = cs d i\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. (fst (cs c i), Done) = cs d' i", "by auto"], ["proof (state)\nthis:\n  (fst (cs c i), Done) = cs d' i\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs c' i = cs d' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "finally"], ["proof (chain)\npicking this:\n  cs c' i = cs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "using True"], ["proof (prove)\nusing this:\n  cs c' i = cs d' i\n  i = i'\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by simp"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "case not_i: False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs c' i = cs d' i", "with assms RecvMarker chan no_snap"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  ev = RecvMarker i' r s\n  channel i = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n  i \\<noteq> i'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  cs c i = cs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  ev = RecvMarker i' r s\n  channel i = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (cases \"r = q\", auto)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "case (Trans r u u')"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (metis assms(2) assms(3) assms(4) event.disc(1) regular_event same_cs_implies_same_resulting_cs)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "case (Send i' r s u u' m)"], ["proof (state)\nthis:\n  ev = Send i' r s u u' m\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ev = Send i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (metis assms(2) assms(3) assms(4) event.disc(7) regular_event same_cs_implies_same_resulting_cs)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "case (Recv i' r s u u' m)"], ["proof (state)\nthis:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c' i = cs d' i", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. cs c' i = cs d' i", "by (metis assms(2) assms(3) assms(4) event.disc(13) regular_event same_cs_implies_same_resulting_cs)"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_Snapshot_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "have \"ev = Snapshot ?p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev = Snapshot (occurs_on ev)", "by (metis assms(3) event.collapse(4))"], ["proof (state)\nthis:\n  ev = Snapshot (occurs_on ev)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "obtain u'' u''' where \"ev' = Trans ?q u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev' = Trans (occurs_on ev') u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(1))"], ["proof (state)\nthis:\n  ev' = Trans (occurs_on ev') u'' u'''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "have \"msgs c i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "using Trans_msg assms(4) assms(5)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by blast"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs d' i", "have \"msgs e' i = msgs d i\""], ["proof (prove)\nusing this:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d' p \\<noteq> None)", "using assms(4) assms(5) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d' p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d' p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "moreover"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d' p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"msgs c i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "using \\<open>msgs c i = msgs d' i\\<close>"], ["proof (prove)\nusing this:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "moreover"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"c \\<turnstile> ev \\<mapsto> d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> d", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> d", "by auto"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> d\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "moreover"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> d\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"d' \\<turnstile> ev \\<mapsto> e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d' \\<turnstile> ev \\<mapsto> e'", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. d' \\<turnstile> ev \\<mapsto> e'", "by auto"], ["proof (state)\nthis:\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "moreover"], ["proof (state)\nthis:\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"~ regular_event ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "by auto"], ["proof (state)\nthis:\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d' p \\<noteq> None)\n  msgs c i = msgs d' i\n  c \\<turnstile> ev \\<mapsto> d\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<not> regular_event ev", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d' p \\<noteq> None)\n  msgs c i = msgs d' i\n  c \\<turnstile> ev \\<mapsto> d\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d i", "by (blast intro: same_messages_2[symmetric])"], ["proof (state)\nthis:\n  msgs e' i = msgs d i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs e' i = msgs d i", "have \"msgs d i = msgs e i\""], ["proof (prove)\nusing this:\n  msgs e' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs d i = msgs e i", "using Trans_msg assms(2) assms(4)"], ["proof (prove)\nusing this:\n  msgs e' i = msgs d i\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs e i", "by blast"], ["proof (state)\nthis:\n  msgs d i = msgs e i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs d i = msgs e i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs e i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (simp add: \\<open>msgs e' i = msgs d i\\<close>)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_msgs_Trans_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e' i = msgs e i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "have nr: \"~ regular_event ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "using assms(3) nonregular_event"], ["proof (prove)\nusing this:\n  isRecvMarker ev\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "obtain i' r where RecvMarker: \"ev = RecvMarker i' ?p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r.\n        ev = RecvMarker i' (occurs_on ev) r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(5))"], ["proof (state)\nthis:\n  ev = RecvMarker i' (occurs_on ev) r\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "obtain u'' u''' where Trans: \"ev' = Trans ?q u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev' = Trans (occurs_on ev') u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(1))"], ["proof (state)\nthis:\n  ev' = Trans (occurs_on ev') u'' u'''\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "have \"msgs c i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "using Trans_msg assms(4) assms(5)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by blast"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs d' i", "have \"msgs e' i = msgs d i\""], ["proof (prove)\nusing this:\n  msgs c i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"\\<forall>p. has_snapshotted d' p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(4) assms(5) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "moreover"], ["proof (state)\nthis:\n  \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"~ regular_event ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecvMarker ev\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "by auto"], ["proof (state)\nthis:\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "moreover"], ["proof (state)\nthis:\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "have \"\\<forall>n. msgs d' n = msgs c n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. msgs d' n = msgs c n", "(* why does he need this assumption? *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. msgs d' n = msgs c n", "by (metis Trans assms(5) local.next.simps(3))"], ["proof (state)\nthis:\n  \\<forall>n. msgs d' n = msgs c n\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i \\<Longrightarrow> msgs e' i = msgs d i", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)\n  \\<not> regular_event ev\n  \\<forall>n. msgs d' n = msgs c n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)\n  \\<not> regular_event ev\n  \\<forall>n. msgs d' n = msgs c n\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d i", "using assms(1) assms(6) same_messages_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d' p \\<noteq> None) = (ps c p \\<noteq> None)\n  \\<not> regular_event ev\n  \\<forall>n. msgs d' n = msgs c n\n  c \\<turnstile> ev \\<mapsto> d\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   msgs ?c ?i = msgs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'; \\<not> regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c' ?i = msgs ?d' ?i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d i", "by blast"], ["proof (state)\nthis:\n  msgs e' i = msgs d i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "thm same_messages_2"], ["proof (state)\nthis:\n  msgs e' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "then"], ["proof (chain)\npicking this:\n  msgs e' i = msgs d i", "have \"msgs d i = msgs e i\""], ["proof (prove)\nusing this:\n  msgs e' i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs d i = msgs e i", "using Trans_msg assms(2) assms(4)"], ["proof (prove)\nusing this:\n  msgs e' i = msgs d i\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; isTrans ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs e i", "by blast"], ["proof (state)\nthis:\n  msgs d i = msgs e i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "then"], ["proof (chain)\npicking this:\n  msgs d i = msgs e i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs e i\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs e i", "by (simp add: \\<open>msgs e' i = msgs d i\\<close>)"], ["proof (state)\nthis:\n  msgs e' i = msgs e i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_Trans_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_Snapshot_Trans"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isTrans ev\n  isSnapshot ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSnapshot ?ev; isTrans ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_Send_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_msgs_change_if_no_channel)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "obtain i' r u u' m where Send: \"ev = Send i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Send i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "have Snapshot: \"ev' = Snapshot ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis assms(4) event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i'\"; cases \"p = ?q\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume asm: \"i = i'\" \"p = ?q\""], ["proof (state)\nthis:\n  i = i'\n  p = occurs_on ev'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  p = occurs_on ev'", "have \"?p = p\""], ["proof (prove)\nusing this:\n  i = i'\n  p = occurs_on ev'\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> occurs_on ev = p", "have \"channel i' = Some (p, q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i' = Some (p, q)", "using chan asm"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n  i = i'\n  p = occurs_on ev'\n\ngoal (1 subgoal):\n 1. channel i' = Some (p, q)", "by simp"], ["proof (state)\nthis:\n  channel i' = Some (p, q)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> occurs_on ev = p", "then"], ["proof (chain)\npicking this:\n  channel i' = Some (p, q)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = Some (p, q)\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "using assms can_occur_def Send chan"], ["proof (prove)\nusing this:\n  channel i' = Some (p, q)\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isSnapshot ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev = Send i' (occurs_on ev) r u u' m\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "by (metis (mono_tags, lifting) event.simps(27) happen_implies_can_occur option.inject prod.inject)"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms asm"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isSnapshot ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  i = i'\n  p = occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i'\" \"p \\<noteq> ?q\""], ["proof (state)\nthis:\n  i = i'\n  p \\<noteq> occurs_on ev'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  p \\<noteq> occurs_on ev'", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\nusing this:\n  i = i'\n  p \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(2) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(5) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis Send \\<open>i = i'\\<close> assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume asm: \"i \\<noteq> i'\" \"p = ?q\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  p = occurs_on ev'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  p = occurs_on ev'", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  p = occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Send assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs c i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs c i @ [Marker]", "by (metis (full_types) Snapshot asm(2) assms(2) calculation chan next_snapshot)"], ["proof (state)\nthis:\n  msgs e i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Marker]", "by (metis (full_types) Snapshot asm(2) assms(5) chan next_snapshot)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis Send asm(1) assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  msgs e i = msgs c i @ [Marker]\n  msgs d' i = msgs c i @ [Marker]\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  msgs e i = msgs c i @ [Marker]\n  msgs d' i = msgs c i @ [Marker]\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i \\<noteq> i'\" \"p \\<noteq> ?q\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  p \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  p \\<noteq> occurs_on ev'", "have \"msgs c i = msgs d i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  p \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d i", "by (metis Send assms(1) assms(3) event.sel(8) msgs_unchanged_for_other_is regular_event)"], ["proof (state)\nthis:\n  msgs c i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs d i", "have \"msgs e i = msgs d' i\""], ["proof (prove)\nusing this:\n  msgs c i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(2,5) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs e i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis Send \\<open>i \\<noteq> i'\\<close> assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_Snapshot_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_Send_Snapshot"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSend ?ev; isSnapshot ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_Recv_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_msgs_change_if_no_channel)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "obtain i' r u u' m where Recv: \"ev = Recv i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Recv i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "have Snapshot: \"ev' = Snapshot ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis assms(4) event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i'\"; cases \"p = ?q\")"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i'\" \"p = ?q\""], ["proof (state)\nthis:\n  i = i'\n  p = occurs_on ev'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  p = occurs_on ev'", "have \"Msg m # msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i'\n  p = occurs_on ev'\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "by (metis Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "by (metis (full_types) Snapshot \\<open>p = occurs_on ev'\\<close> assms(2) chan next_snapshot)"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Marker]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Marker]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Marker]", "by (metis (full_types) Snapshot \\<open>p = occurs_on ev'\\<close> assms(5) chan next_snapshot)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv \\<open>i = i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i @ [Marker]\n  msgs d' i = msgs c i @ [Marker]\n  Msg m # msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i @ [Marker]\n  msgs d' i = msgs c i @ [Marker]\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.sel(3) neq_Nil_conv tl_append2)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i'\" \"p \\<noteq> ?q\""], ["proof (state)\nthis:\n  i = i'\n  p \\<noteq> occurs_on ev'\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  p \\<noteq> occurs_on ev'", "have \"Msg m # msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i'\n  p \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "by (metis Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(2) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(5) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv \\<open>i = i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m # msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i \\<noteq> i'\" \"p = ?q\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  p = occurs_on ev'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  p = occurs_on ev'", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  p = occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "by (metis (full_types) Snapshot \\<open>p = occurs_on ev'\\<close> assms(2) chan next_snapshot)"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Marker]", "by (metis (full_types) Snapshot \\<open>p = occurs_on ev'\\<close> assms(5) chan next_snapshot)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis Recv \\<open>i ~= i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; p = occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  msgs e i = msgs d i @ [Marker]\n  msgs d' i = msgs c i @ [Marker]\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  msgs e i = msgs d i @ [Marker]\n  msgs d' i = msgs c i @ [Marker]\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i \\<noteq> i'\" \"p \\<noteq> ?q\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  p \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  p \\<noteq> occurs_on ev'", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  p \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(2) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (metis Pair_inject Snapshot \\<open>p \\<noteq> occurs_on ev'\\<close> assms(5) chan next_snapshot option.inject)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis Recv \\<open>i ~= i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; p \\<noteq> occurs_on ev'\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_Snapshot_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_Recv_Snapshot"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isRecv ?ev; isSnapshot ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_msgs_Recv_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_msgs_change_if_no_channel)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "obtain i' p' r u u' m where Recv: \"ev = Recv i' p' r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' p' r u u' m.\n        ev = Recv i' p' r u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' p' r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "obtain i'' q' s where RecvMarker: \"ev' = RecvMarker i'' q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' q' s.\n        ev' = RecvMarker i'' q' s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i'' q' s\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "have \"i' \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> i''", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "assume \"~ i' \\<noteq> i''\""], ["proof (state)\nthis:\n  \\<not> i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> i' \\<noteq> i''", "have \"channel i' = channel i''\""], ["proof (prove)\nusing this:\n  \\<not> i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. channel i' = channel i''", "by auto"], ["proof (state)\nthis:\n  channel i' = channel i''\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  channel i' = channel i''", "have \"Some (r, p') = Some (s, q')\""], ["proof (prove)\nusing this:\n  channel i' = channel i''\n\ngoal (1 subgoal):\n 1. Some (r, p') = Some (s, q')", "using assms can_occur_def Recv RecvMarker"], ["proof (prove)\nusing this:\n  channel i' = channel i''\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n\ngoal (1 subgoal):\n 1. Some (r, p') = Some (s, q')", "by simp"], ["proof (state)\nthis:\n  Some (r, p') = Some (s, q')\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Some (r, p') = Some (s, q')", "show False"], ["proof (prove)\nusing this:\n  Some (r, p') = Some (s, q')\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  Some (r, p') = Some (s, q')\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. False", "by (metis Recv RecvMarker event.sel(3,5) option.inject prod.inject)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i''", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i' \\<or> i = i''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i''; i = i' \\<or> i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  i = i' \\<or> i = i''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i''; i = i' \\<or> i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i' \\<or> i = i''", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i' \\<or> i = i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (elim disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i'\""], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have pqrp: \"(p, q) = (r, p')\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. (p, q) = (r, p')", "by (metis Recv assms(1) chan distributed_system.can_occur_Recv distributed_system_axioms next_recv option.inject)"], ["proof (state)\nthis:\n  (p, q) = (r, p')\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> msgs e i = msgs e' i\n 2. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  (p, q) = (r, p')", "show ?thesis"], ["proof (prove)\nusing this:\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"has_snapshotted c q'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case snap: True"], ["proof (state)\nthis:\n  ps c q' \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  ps c q' \\<noteq> None", "have \"Msg m # msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  ps c q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "by (metis Recv \\<open>i = i'\\<close> assms(1) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs c i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "using RecvMarker \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(5) msgs_unchanged_if_snapshotted_RecvMarker_for_other_is snap"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  i = i'\n  i' \\<noteq> i''\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; ?ev = RecvMarker ?i ?p ?q;\n   ps ?c ?p \\<noteq> None; ?i' \\<noteq> ?i\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i' = msgs ?c' ?i'\n  ps c q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d' i", "by blast"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs c i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d i = msgs e i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs e i", "using RecvMarker \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms(1) assms(2) snap snapshot_state_unchanged"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  i = i'\n  i' \\<noteq> i''\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  ps c q' \\<noteq> None\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ps ?c ?p \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. msgs d i = msgs e i", "by auto"], ["proof (state)\nthis:\n  msgs d i = msgs e i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs e i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv \\<open>i = i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  Msg m # msgs d i = msgs c i\n  msgs c i = msgs d' i\n  msgs d i = msgs e i\n  Msg m # msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m # msgs d i = msgs c i\n  msgs c i = msgs d' i\n  msgs d i = msgs e i\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c q' \\<noteq> None", "have msgs_d: \"Msg m # msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  \\<not> ps c q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. Msg m # msgs d i = msgs c i", "by (metis Recv \\<open>i = i'\\<close> assms(1) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); \\<not> ps c q' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  Msg m # msgs d i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m # msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"q' = r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  q' = r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  q' = r", "have \"msgs d' i = msgs c i @ [Marker]\""], ["proof (prove)\nusing this:\n  q' = r\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Marker]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q' = r \\<Longrightarrow> msgs d' i = msgs c i @ [Marker]", "have \"channel i = Some (q', q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i = Some (q', q)", "using True chan pqrp"], ["proof (prove)\nusing this:\n  q' = r\n  channel i = Some (p, q)\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. channel i = Some (q', q)", "by blast"], ["proof (state)\nthis:\n  channel i = Some (q', q)\n\ngoal (1 subgoal):\n 1. q' = r \\<Longrightarrow> msgs d' i = msgs c i @ [Marker]", "then"], ["proof (chain)\npicking this:\n  channel i = Some (q', q)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = Some (q', q)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Marker]", "using RecvMarker assms no_snap"], ["proof (prove)\nusing this:\n  channel i = Some (q', q)\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<not> ps c q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i @ [Marker]", "by (simp add: no_snap \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv \\<open>i = i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i @ [Marker]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "have \"ps d q' = ps c q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps d q' = ps c q'", "using assms(1) assms(7) no_state_change_if_no_event RecvMarker"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n  ev' = RecvMarker i'' q' s\n\ngoal (1 subgoal):\n 1. ps d q' = ps c q'", "by auto"], ["proof (state)\nthis:\n  ps d q' = ps c q'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "then"], ["proof (chain)\npicking this:\n  ps d q' = ps c q'", "show ?thesis"], ["proof (prove)\nusing this:\n  ps d q' = ps c q'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "using RecvMarker \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close> assms True chan no_snap pqrp"], ["proof (prove)\nusing this:\n  ps d q' = ps c q'\n  ev' = RecvMarker i'' q' s\n  i = i'\n  i' \\<noteq> i''\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  q' = r\n  channel i = Some (p, q)\n  \\<not> ps c q' \\<noteq> None\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i @ [Marker]", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Marker]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs d i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' = r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d' i = msgs c i @ [Marker]\n  Msg m # msgs e' i = msgs d' i\n  msgs e i = msgs d i @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d' i = msgs c i @ [Marker]\n  Msg m # msgs e' i = msgs d' i\n  msgs e i = msgs d i @ [Marker]\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using msgs_d"], ["proof (prove)\nusing this:\n  msgs d' i = msgs c i @ [Marker]\n  Msg m # msgs e' i = msgs d' i\n  msgs e i = msgs d i @ [Marker]\n  Msg m # msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis append_self_conv2 list.inject list.sel(3) message.distinct(1) tl_append2)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  q' \\<noteq> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  q' \\<noteq> r", "have \"msgs e i = msgs d i\""], ["proof (prove)\nusing this:\n  q' \\<noteq> r\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. q' \\<noteq> r \\<Longrightarrow> msgs e i = msgs d i", "have \"~ has_snapshotted d q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ps d q' \\<noteq> None", "using assms(1) assms(7) no_snap no_state_change_if_no_event RecvMarker"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<not> ps c q' \\<noteq> None\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n  ev' = RecvMarker i'' q' s\n\ngoal (1 subgoal):\n 1. \\<not> ps d q' \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  \\<not> ps d q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. q' \\<noteq> r \\<Longrightarrow> msgs e i = msgs d i", "moreover"], ["proof (state)\nthis:\n  \\<not> ps d q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. q' \\<noteq> r \\<Longrightarrow> msgs e i = msgs d i", "have \"\\<nexists>r. channel i = Some (q', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "using chan False pqrp"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n  q' \\<noteq> r\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "by auto"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. q' \\<noteq> r \\<Longrightarrow> msgs e i = msgs d i", "moreover"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. q' \\<noteq> r \\<Longrightarrow> msgs e i = msgs d i", "have \"i \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> i''", "using \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>"], ["proof (prove)\nusing this:\n  i = i'\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. i \\<noteq> i''", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. q' \\<noteq> r \\<Longrightarrow> msgs e i = msgs d i", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> ps d q' \\<noteq> None\n  \\<nexists>r. channel i = Some (q', r)\n  i \\<noteq> i''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps d q' \\<noteq> None\n  \\<nexists>r. channel i = Some (q', r)\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "using RecvMarker assms"], ["proof (prove)\nusing this:\n  \\<not> ps d q' \\<noteq> None\n  \\<nexists>r. channel i = Some (q', r)\n  i \\<noteq> i''\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "have \"\\<nexists>r. channel i = Some (q', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "using False chan pqrp"], ["proof (prove)\nusing this:\n  q' \\<noteq> r\n  channel i = Some (p, q)\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "by auto"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "moreover"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "have \"i \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> i''", "using \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>"], ["proof (prove)\nusing this:\n  i = i'\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. i \\<noteq> i''", "by simp"], ["proof (state)\nthis:\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "ultimately"], ["proof (chain)\npicking this:\n  \\<nexists>r. channel i = Some (q', r)\n  i \\<noteq> i''", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<nexists>r. channel i = Some (q', r)\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "using RecvMarker assms(5) no_snap"], ["proof (prove)\nusing this:\n  \\<nexists>r. channel i = Some (q', r)\n  i \\<noteq> i''\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<not> ps c q' \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by auto"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Msg m # msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Msg m # msgs e' i = msgs d' i", "by (metis Recv \\<open>i = i'\\<close> assms(6) next_recv)"], ["proof (state)\nthis:\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Msg m # msgs d i = msgs c i; q' \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using msgs_d"], ["proof (prove)\nusing this:\n  msgs e i = msgs d i\n  msgs d' i = msgs c i\n  Msg m # msgs e' i = msgs d' i\n  Msg m # msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis list.inject)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "assume \"i = i''\""], ["proof (state)\nthis:\n  i = i''\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i''", "have \"msgs d i = msgs c i\""], ["proof (prove)\nusing this:\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "using assms"], ["proof (prove)\nusing this:\n  i = i''\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i", "by (metis Recv \\<open>i' \\<noteq> i''\\<close> next_recv)"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "by (metis Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "by (meson assms(2) assms(5) calculation same_messages_2 same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis Recv \\<open>i' \\<noteq> i''\\<close> \\<open>i = i''\\<close> next_recv)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. i = i'' \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i\n  msgs e i = msgs d' i\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i\n  msgs e i = msgs d' i\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume asm: \"~ (i = i' \\<or> i = i'')\""], ["proof (state)\nthis:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  \\<not> (i = i' \\<or> i = i'')", "have \"msgs c i = msgs d i\""], ["proof (prove)\nusing this:\n  \\<not> (i = i' \\<or> i = i'')\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d i", "by (metis Recv assms(1) assms(3) event.distinct_disc(16,18) event.sel(9) msgs_unchanged_for_other_is nonregular_event)"], ["proof (state)\nthis:\n  msgs c i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs d i", "have \"msgs d' i = msgs e i\""], ["proof (prove)\nusing this:\n  msgs c i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs c i = msgs d i \\<Longrightarrow> msgs d' i = msgs e i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d i \\<Longrightarrow> msgs d' i = msgs e i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "by (meson \\<open>msgs c i = msgs d i\\<close> assms(2) assms(5) same_messages_2 same_messages_imply_same_resulting_messages)"], ["proof (state)\nthis:\n  msgs d' i = msgs e i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs e i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i''; \\<not> (i = i' \\<or> i = i'')\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  msgs d' i = msgs e i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d' i = msgs e i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis Recv asm assms(3) assms(6) event.distinct_disc(16,18) event.sel(9) msgs_unchanged_for_other_is nonregular_event)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_RecvMarker_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_msgs_Recv_RecvMarker"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecvMarker ev\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isRecv ?ev; isRecvMarker ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_msgs_Send_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs e i = msgs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_msgs_change_if_no_channel)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "obtain i' p' r u u' m where Send: \"ev = Send i' p' r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' p' r u u' m.\n        ev = Send i' p' r u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' p' r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "obtain i'' q' s where RecvMarker: \"ev' = RecvMarker i'' q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' q' s.\n        ev' = RecvMarker i'' q' s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i'' q' s\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "have \"p' \\<noteq> q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<noteq> q'", "using Send RecvMarker assms"], ["proof (prove)\nusing this:\n  ev = Send i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. p' \\<noteq> q'", "by simp"], ["proof (state)\nthis:\n  p' \\<noteq> q'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs e i = msgs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "proof (cases \"i = i'\"; cases \"i = i''\", goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case 1"], ["proof (state)\nthis:\n  i = i'\n  i = i''\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  i = i''", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\nusing this:\n  i = i'\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Marker # msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker # msgs d' i = msgs c i", "using \\<open>i = i''\\<close> RecvMarker assms"], ["proof (prove)\nusing this:\n  i = i''\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. Marker # msgs d' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs d' i = msgs c i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  Marker # msgs d' i = msgs c i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis \"1\"(1) Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"Marker # msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker # msgs e i = msgs d i", "using \\<open>i = i''\\<close> RecvMarker assms"], ["proof (prove)\nusing this:\n  i = i''\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. Marker # msgs e i = msgs d i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs e i = msgs d i\n\ngoal (4 subgoals):\n 1. \\<lbrakk>i = i'; i = i''\\<rbrakk> \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 4. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs e' i = msgs d' i @ [Msg m]\n  Marker # msgs d' i = msgs c i\n  msgs d i = msgs c i @ [Msg m]\n  Marker # msgs e i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs e' i = msgs d' i @ [Msg m]\n  Marker # msgs d' i = msgs c i\n  msgs d i = msgs c i @ [Msg m]\n  Marker # msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by (metis append_self_conv2 list.inject list.sel(3) message.distinct(1) tl_append2)"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "case 2"], ["proof (state)\nthis:\n  i = i'\n  i \\<noteq> i''\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'\n  i \\<noteq> i''", "have pqpr: \"(p, q) = (p', r)\""], ["proof (prove)\nusing this:\n  i = i'\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. (p, q) = (p', r)", "using chan Send can_occur_def assms"], ["proof (prove)\nusing this:\n  i = i'\n  i \\<noteq> i''\n  channel i = Some (p, q)\n  ev = Send i' p' r u u' m\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. (p, q) = (p', r)", "by simp"], ["proof (state)\nthis:\n  (p, q) = (p', r)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  (p, q) = (p', r)", "have \"msgs d i = msgs c i @ [Msg m]\""], ["proof (prove)\nusing this:\n  (p, q) = (p', r)\n\ngoal (1 subgoal):\n 1. msgs d i = msgs c i @ [Msg m]", "by (metis 2(1) Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d i = msgs c i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i @ [Msg m]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i @ [Msg m]", "by (metis \"2\"(1) Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i @ [Msg m]\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "have \"\\<nexists>r. channel i = Some (q', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "using \\<open>p' \\<noteq> q'\\<close> chan pqpr"], ["proof (prove)\nusing this:\n  p' \\<noteq> q'\n  channel i = Some (p, q)\n  (p, q) = (p', r)\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "by simp"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "with RecvMarker \\<open>i \\<noteq> i''\\<close> \\<open>i = i'\\<close> assms"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i'' q' s\n  i \\<noteq> i''\n  i = i'\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<nexists>r. channel i = Some (q', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  i \\<noteq> i''\n  i = i'\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs c i", "by (cases \"has_snapshotted c q'\", auto)"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "have \"\\<nexists>r. channel i = Some (q', r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "using \\<open>p' \\<noteq> q'\\<close> chan pqpr"], ["proof (prove)\nusing this:\n  p' \\<noteq> q'\n  channel i = Some (p, q)\n  (p, q) = (p', r)\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (q', r)", "by simp"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "with RecvMarker \\<open>i \\<noteq> i''\\<close> \\<open>i = i'\\<close> assms"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i'' q' s\n  i \\<noteq> i''\n  i = i'\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<nexists>r. channel i = Some (q', r)", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  i \\<noteq> i''\n  i = i'\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<nexists>r. channel i = Some (q', r)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d i", "by (cases \"has_snapshotted d q'\", auto)"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs d i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>i = i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 3. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e' i = msgs d' i @ [Msg m]\n  msgs d' i = msgs c i\n  msgs e i = msgs d i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d i = msgs c i @ [Msg m]\n  msgs e' i = msgs d' i @ [Msg m]\n  msgs d' i = msgs c i\n  msgs e i = msgs d i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume 3: \"i \\<noteq> i'\" \"i = i''\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  i = i''\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'\n  i = i''", "have mcd: \"msgs c i = msgs d i\""], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  i = i''\n\ngoal (1 subgoal):\n 1. msgs c i = msgs d i", "by (metis Send assms(1) next_send)"], ["proof (state)\nthis:\n  msgs c i = msgs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs c i = msgs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isSend ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "moreover"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "have \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by auto"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  \\<not> regular_event ev'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "using mcd assms(2,5)"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  \\<not> regular_event ev'\n  msgs c i = msgs d i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. msgs e i = msgs d' i", "by (blast intro: same_messages_2[symmetric])"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs e i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis \"3\"(1) Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; i = i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i\n 2. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs c i = msgs d i\n  msgs e i = msgs d' i\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs d i\n  msgs e i = msgs d' i\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "assume 4: \"i \\<noteq> i'\" \"i \\<noteq> i''\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n  i \\<noteq> i''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have mcd: \"msgs c i = msgs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs d i", "by (metis \"4\"(1) Send assms(1) assms(3) event.distinct_disc(12,14) event.sel(8) msgs_unchanged_for_other_is nonregular_event)"], ["proof (state)\nthis:\n  msgs c i = msgs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs d' i = msgs e i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isSend ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "moreover"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "have \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSend ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by auto"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  \\<not> regular_event ev'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "using mcd assms(2,5) same_messages_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  \\<not> regular_event ev'\n  msgs c i = msgs d i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   msgs ?c ?i = msgs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'; \\<not> regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c' ?i = msgs ?d' ?i\n\ngoal (1 subgoal):\n 1. msgs d' i = msgs e i", "by blast"], ["proof (state)\nthis:\n  msgs d' i = msgs e i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs d' i = msgs e i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "moreover"], ["proof (state)\nthis:\n  msgs d' i = msgs e i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "have \"msgs e' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e' i = msgs d' i", "by (metis \"4\"(1) Send assms(6) next_send)"], ["proof (state)\nthis:\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; i \\<noteq> i''\\<rbrakk>\n    \\<Longrightarrow> msgs e i = msgs e' i", "ultimately"], ["proof (chain)\npicking this:\n  msgs d' i = msgs e i\n  msgs e' i = msgs d' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs d' i = msgs e i\n  msgs e' i = msgs d' i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by simp"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs e i = msgs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_RecvMarker_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"msgs e i = msgs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "using assms swap_msgs_Send_RecvMarker"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecvMarker ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSend ?ev; isRecvMarker ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> msgs ?e ?i = msgs ?e' ?i\n\ngoal (1 subgoal):\n 1. msgs e i = msgs e' i", "by auto"], ["", "lemma swap_cs_Trans_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_cs_change_if_no_channel)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have nr: \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms(4) nonregular_event"], ["proof (prove)\nusing this:\n  isSnapshot ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain u'' u''' where \"ev = Trans ?p u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev = Trans (occurs_on ev) u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(1))"], ["proof (state)\nthis:\n  ev = Trans (occurs_on ev) u'' u'''\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"ev' = Snapshot ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis assms(4) event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis assms(1) assms(3) event.distinct_disc(4) no_cs_change_if_no_event regular_event)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isTrans ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "also"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"... = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using assms(3) assms(6) no_cs_change_if_no_event regular_event"], ["proof (prove)\nusing this:\n  isTrans ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by blast"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "finally"], ["proof (chain)\npicking this:\n  cs e i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_cs_Snapshot_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "using swap_cs_Trans_Snapshot assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isTrans ?ev; isSnapshot ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d';\n   ?d' \\<turnstile> ?ev \\<mapsto> ?e'\\<rbrakk>\n  \\<Longrightarrow> cs ?e ?i = cs ?e' ?i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by auto"], ["", "lemma swap_cs_Send_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_cs_change_if_no_channel)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have nr: \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms(4) nonregular_event"], ["proof (prove)\nusing this:\n  isSnapshot ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i' r u u' m where Send: \"ev = Send i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Send i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have Snapshot: \"ev' = Snapshot ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis assms(4) event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis Send assms(1) next_send)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isSend ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "also"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"... = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using assms(3) assms(6) no_cs_change_if_no_event regular_event"], ["proof (prove)\nusing this:\n  isSend ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by blast"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "finally"], ["proof (chain)\npicking this:\n  cs e i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_cs_Snapshot_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "using swap_cs_Send_Snapshot assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSend ?ev; isSnapshot ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d';\n   ?d' \\<turnstile> ?ev \\<mapsto> ?e'\\<rbrakk>\n  \\<Longrightarrow> cs ?e ?i = cs ?e' ?i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by auto"], ["", "lemma swap_cs_Recv_Snapshot:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isSnapshot ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_cs_change_if_no_channel)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have nr: \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms(4) nonregular_event"], ["proof (prove)\nusing this:\n  isSnapshot ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i' r u u' m where Recv: \"ev = Recv i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Recv i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have Snapshot: \"ev' = Snapshot ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis assms(4) event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"snd (cs c i) = Recording\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  snd (cs c i) = Recording\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  snd (cs c i) = Recording", "have \"cs d i = (fst (cs c i) @ [m], Recording)\""], ["proof (prove)\nusing this:\n  snd (cs c i) = Recording\n\ngoal (1 subgoal):\n 1. cs d i = (fst (cs c i) @ [m], Recording)", "using Recv assms True \\<open>i = i'\\<close> chan"], ["proof (prove)\nusing this:\n  snd (cs c i) = Recording\n  ev = Recv i' (occurs_on ev) r u u' m\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isSnapshot ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  snd (cs c i) = Recording\n  i = i'\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. cs d i = (fst (cs c i) @ [m], Recording)", "by (metis next_recv)"], ["proof (state)\nthis:\n  cs d i = (fst (cs c i) @ [m], Recording)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs d i = (fst (cs c i) @ [m], Recording)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs e i = cs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs d i", "by (metis Snapshot assms(2) calculation fst_conv next_snapshot)"], ["proof (state)\nthis:\n  cs e i = cs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs e i = cs d i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs c i = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "by (metis Snapshot True assms(5) next_snapshot prod.collapse)"], ["proof (state)\nthis:\n  cs c i = cs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs c i = cs d' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs e' i = (fst (cs d' i) @ [m], Recording)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e' i = (fst (cs d' i) @ [m], Recording)", "by (metis (mono_tags, lifting) Recv assms(1) assms(6) calculation(1) calculation(3) next_recv)"], ["proof (state)\nthis:\n  cs e' i = (fst (cs d' i) @ [m], Recording)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i = i'; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "ultimately"], ["proof (chain)\npicking this:\n  cs d i = (fst (cs c i) @ [m], Recording)\n  cs e i = cs d i\n  cs c i = cs d' i\n  cs e' i = (fst (cs d' i) @ [m], Recording)", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d i = (fst (cs c i) @ [m], Recording)\n  cs e i = cs d i\n  cs c i = cs d' i\n  cs e' i = (fst (cs d' i) @ [m], Recording)\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  snd (cs c i) \\<noteq> Recording\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis False Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs e i = cs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d' i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "have \"cs d' i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "by (metis Pair_inject Recv Snapshot True assms(1) assms(5) assms(7) can_occur_Recv distributed_system.happen_implies_can_occur distributed_system.next_snapshot distributed_system_axioms option.inject)"], ["proof (state)\nthis:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using chan \\<open>i = i'\\<close> False Recv assms"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n  channel i = Some (p, q)\n  i = i'\n  snd (cs c i) \\<noteq> Recording\n  ev = Recv i' (occurs_on ev) r u u' m\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isSnapshot ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by (metis next_recv)"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i = i'; snd (cs c i) \\<noteq> Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "ultimately"], ["proof (chain)\npicking this:\n  cs e i = cs d' i\n  cs d' i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs d' i\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis False Recv assms(1) next_recv)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "also"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "have \"... = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by (metis False Recv assms(6) next_recv)"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "finally"], ["proof (chain)\npicking this:\n  cs e i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_cs_Snapshot_Recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSnapshot ev\" and\n    \"isRecv ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "using swap_cs_Recv_Snapshot assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isRecv ?ev; isSnapshot ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d'; ?d' \\<turnstile> ?ev \\<mapsto> ?e';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'\\<rbrakk>\n  \\<Longrightarrow> cs ?e ?i = cs ?e' ?i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isSnapshot ev\n  isRecv ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by auto"], ["", "lemma swap_cs_Trans_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isTrans ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_cs_change_if_no_channel)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have nr: \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms(4) nonregular_event"], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain u'' u''' where \"ev = Trans ?p u'' u'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u'' u'''.\n        ev = Trans (occurs_on ev) u'' u''' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(1))"], ["proof (state)\nthis:\n  ev = Trans (occurs_on ev) u'' u'''\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i' s where \"ev' = RecvMarker i' ?q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' s.\n        ev' = RecvMarker i' (occurs_on ev') s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i' (occurs_on ev') s\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis assms(1) assms(3) event.distinct_disc(4) no_cs_change_if_no_event regular_event)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isTrans ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "also"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"... = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using assms(3) assms(6) no_cs_change_if_no_event regular_event"], ["proof (prove)\nusing this:\n  isTrans ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by blast"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "finally"], ["proof (chain)\npicking this:\n  cs e i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_cs_RecvMarker_Trans:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isTrans ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "using swap_cs_Trans_RecvMarker assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isTrans ?ev; isRecvMarker ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d';\n   ?d' \\<turnstile> ?ev \\<mapsto> ?e'\\<rbrakk>\n  \\<Longrightarrow> cs ?e ?i = cs ?e' ?i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecvMarker ev\n  isTrans ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by auto"], ["", "lemma swap_cs_Send_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isSend ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_cs_change_if_no_channel)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have nr: \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms(4) nonregular_event"], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i' r u u' m where Send: \"ev = Send i' ?p r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' r u u' m.\n        ev = Send i' (occurs_on ev) r u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' (occurs_on ev) r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i'' s where RecvMarker: \"ev' = RecvMarker i'' ?q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' s.\n        ev' = RecvMarker i'' (occurs_on ev') s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i'' (occurs_on ev') s\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by (metis assms(1) assms(3) event.distinct_disc(10,12,14) no_cs_change_if_no_event nonregular_event)"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isSend ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "also"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"... = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using assms(3) assms(6) no_cs_change_if_no_event regular_event"], ["proof (prove)\nusing this:\n  isSend ev\n  d' \\<turnstile> ev \\<mapsto> e'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by blast"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "finally"], ["proof (chain)\npicking this:\n  cs e i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma swap_cs_RecvMarker_Send:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecvMarker ev\" and\n    \"isSend ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "using swap_cs_Send_RecvMarker assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?d;\n   ?d \\<turnstile> ?ev' \\<mapsto> ?e; isSend ?ev; isRecvMarker ?ev';\n   ?c \\<turnstile> ?ev' \\<mapsto> ?d';\n   ?d' \\<turnstile> ?ev \\<mapsto> ?e'\\<rbrakk>\n  \\<Longrightarrow> cs ?e ?i = cs ?e' ?i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecvMarker ev\n  isSend ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by auto"], ["", "lemma swap_cs_Recv_RecvMarker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> d\" and\n    \"d \\<turnstile> ev' \\<mapsto> e\" and\n    \"isRecv ev\" and\n    \"isRecvMarker ev'\" and\n    \"c \\<turnstile> ev' \\<mapsto> d'\" and\n    \"d' \\<turnstile> ev \\<mapsto> e'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"cs e i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs e i = cs e' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by (metis assms(1) assms(2) assms(5) assms(6) no_cs_change_if_no_channel)"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have nr: \"~ regular_event ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "using assms(4) nonregular_event"], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev'", "by blast"], ["proof (state)\nthis:\n  \\<not> regular_event ev'\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i' p' r u u' m where Recv: \"ev = Recv i' p' r u u' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i' p' r u u' m.\n        ev = Recv i' p' r u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(3) event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' p' r u u' m\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "obtain i'' q' s where RecvMarker: \"ev' = RecvMarker i'' q' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'' q' s.\n        ev' = RecvMarker i'' q' s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis assms(4) event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i'' q' s\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "have \"i' \\<noteq> i''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' \\<noteq> i''", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "assume \"~ i' \\<noteq> i''\""], ["proof (state)\nthis:\n  \\<not> i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> i' \\<noteq> i''", "have \"channel i' = channel i''\""], ["proof (prove)\nusing this:\n  \\<not> i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. channel i' = channel i''", "by simp"], ["proof (state)\nthis:\n  channel i' = channel i''\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  channel i' = channel i''", "have \"(r, p') = (s, q')\""], ["proof (prove)\nusing this:\n  channel i' = channel i''\n\ngoal (1 subgoal):\n 1. (r, p') = (s, q')", "using Recv RecvMarker assms can_occur_def"], ["proof (prove)\nusing this:\n  channel i' = channel i''\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. (r, p') = (s, q')", "by simp"], ["proof (state)\nthis:\n  (r, p') = (s, q')\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i'' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (r, p') = (s, q')", "show False"], ["proof (prove)\nusing this:\n  (r, p') = (s, q')\n\ngoal (1 subgoal):\n 1. False", "using Recv RecvMarker assms can_occur_def"], ["proof (prove)\nusing this:\n  (r, p') = (s, q')\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' \\<noteq> i''\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs e i = cs e' i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"i = i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "case True"], ["proof (state)\nthis:\n  i = i'\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  i = i'", "have pqrp: \"(p, q) = (r, p')\""], ["proof (prove)\nusing this:\n  i = i'\n\ngoal (1 subgoal):\n 1. (p, q) = (r, p')", "using Recv assms can_occur_def chan"], ["proof (prove)\nusing this:\n  i = i'\n  ev = Recv i' p' r u u' m\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. (p, q) = (r, p')", "by simp"], ["proof (state)\nthis:\n  (p, q) = (r, p')\n\ngoal (2 subgoals):\n 1. i = i' \\<Longrightarrow> cs e i = cs e' i\n 2. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  (p, q) = (r, p')", "show ?thesis"], ["proof (prove)\nusing this:\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "proof (cases \"snd (cs c i)\")"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "case NotStarted"], ["proof (state)\nthis:\n  snd (cs c i) = NotStarted\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  snd (cs c i) = NotStarted", "have \"cs d i = cs c i\""], ["proof (prove)\nusing this:\n  snd (cs c i) = NotStarted\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "using assms Recv \\<open>i = i'\\<close>"], ["proof (prove)\nusing this:\n  snd (cs c i) = NotStarted\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  ev = Recv i' p' r u u' m\n  i = i'\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by simp"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d' i = cs e i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "with assms(2,5) calculation"], ["proof (chain)\npicking this:\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  cs d i = cs c i\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  cs d i = cs c i\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "by (blast intro: same_cs_2[symmetric])"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "thm same_cs_2"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d' i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "have \"cs d' i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "have \"\\<nexists>r. channel i = Some (r, q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "using Recv RecvMarker assms(7) chan pqrp"], ["proof (prove)\nusing this:\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "by auto"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "with RecvMarker assms chan \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "by (cases \"has_snapshotted c q'\", auto)"], ["proof (state)\nthis:\n  cs d' i = cs c i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using assms Recv \\<open>i = i'\\<close> NotStarted"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  ev = Recv i' p' r u u' m\n  i = i'\n  snd (cs c i) = NotStarted\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 3. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "ultimately"], ["proof (chain)\npicking this:\n  cs d i = cs c i\n  cs d' i = cs e i\n  cs d' i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d i = cs c i\n  cs d' i = cs e i\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "case Done"], ["proof (state)\nthis:\n  snd (cs c i) = Done\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  snd (cs c i) = Done", "have \"cs d i = cs c i\""], ["proof (prove)\nusing this:\n  snd (cs c i) = Done\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "using assms Recv \\<open>i = i'\\<close>"], ["proof (prove)\nusing this:\n  snd (cs c i) = Done\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  ev = Recv i' p' r u u' m\n  i = i'\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by simp"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d' i = cs e i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "have \"\\<forall>p. has_snapshotted c p = has_snapshotted d p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "using assms(2,5) calculation"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps c p \\<noteq> None) = (ps d p \\<noteq> None)\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e i", "by (blast intro: same_cs_2[symmetric])"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs d' i = cs e i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d' i = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "have \"cs d' i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "have \"\\<nexists>r. channel i = Some (r, q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "using Recv RecvMarker assms(7) chan pqrp"], ["proof (prove)\nusing this:\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "by auto"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "with RecvMarker assms chan \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs d' i = cs c i", "by (cases \"has_snapshotted c q'\", auto)"], ["proof (state)\nthis:\n  cs d' i = cs c i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d' i = cs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using assms Recv \\<open>i = i'\\<close> Done"], ["proof (prove)\nusing this:\n  cs d' i = cs c i\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  ev = Recv i' p' r u u' m\n  i = i'\n  snd (cs c i) = Done\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i\n 2. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "ultimately"], ["proof (chain)\npicking this:\n  cs d i = cs c i\n  cs d' i = cs e i\n  cs d' i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d i = cs c i\n  cs d' i = cs e i\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "case Recording"], ["proof (state)\nthis:\n  snd (cs c i) = Recording\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = (fst (cs c i) @ [m], Recording)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = (fst (cs c i) @ [m], Recording)", "using Recording Recv True assms(1)"], ["proof (prove)\nusing this:\n  snd (cs c i) = Recording\n  ev = Recv i' p' r u u' m\n  i = i'\n  c \\<turnstile> ev \\<mapsto> d\n\ngoal (1 subgoal):\n 1. cs d i = (fst (cs c i) @ [m], Recording)", "by auto"], ["proof (state)\nthis:\n  cs d i = (fst (cs c i) @ [m], Recording)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs d i = (fst (cs c i) @ [m], Recording)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs e i = cs d i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e i = cs d i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs e i = cs d i", "have \"\\<nexists>r. channel i = Some (r, q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "using Recv RecvMarker assms(7) chan pqrp"], ["proof (prove)\nusing this:\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "by auto"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs e i = cs d i", "with RecvMarker assms chan \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs e i = cs d i", "by (cases \"has_snapshotted d q'\", auto)"], ["proof (state)\nthis:\n  cs e i = cs d i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs e i = cs d i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs c i = cs d' i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "have \"\\<nexists>r. channel i = Some (r, q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "using Recv RecvMarker assms(7) chan pqrp"], ["proof (prove)\nusing this:\n  ev = Recv i' p' r u u' m\n  ev' = RecvMarker i'' q' s\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  (p, q) = (r, p')\n\ngoal (1 subgoal):\n 1. \\<nexists>r. channel i = Some (r, q')", "by auto"], ["proof (state)\nthis:\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "with RecvMarker assms chan \\<open>i = i'\\<close> \\<open>i' \\<noteq> i''\\<close>"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i'' q' s\n  c \\<turnstile> ev \\<mapsto> d\n  d \\<turnstile> ev' \\<mapsto> e\n  isRecv ev\n  isRecvMarker ev'\n  c \\<turnstile> ev' \\<mapsto> d'\n  d' \\<turnstile> ev \\<mapsto> e'\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (p, q)\n  i = i'\n  i' \\<noteq> i''\n  \\<nexists>r. channel i = Some (r, q')\n\ngoal (1 subgoal):\n 1. cs c i = cs d' i", "by (cases \"has_snapshotted c q'\", auto)"], ["proof (state)\nthis:\n  cs c i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "moreover"], ["proof (state)\nthis:\n  cs c i = cs d' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "have \"cs e' i = (fst (cs d' i) @ [m], Recording)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs e' i = (fst (cs d' i) @ [m], Recording)", "using Recording Recv True assms(6) calculation(3)"], ["proof (prove)\nusing this:\n  snd (cs c i) = Recording\n  ev = Recv i' p' r u u' m\n  i = i'\n  d' \\<turnstile> ev \\<mapsto> e'\n  cs c i = cs d' i\n\ngoal (1 subgoal):\n 1. cs e' i = (fst (cs d' i) @ [m], Recording)", "by auto"], ["proof (state)\nthis:\n  cs e' i = (fst (cs d' i) @ [m], Recording)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(p, q) = (r, p'); snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> cs e i = cs e' i", "ultimately"], ["proof (chain)\npicking this:\n  cs d i = (fst (cs c i) @ [m], Recording)\n  cs e i = cs d i\n  cs c i = cs d' i\n  cs e' i = (fst (cs d' i) @ [m], Recording)", "show ?thesis"], ["proof (prove)\nusing this:\n  cs d i = (fst (cs c i) @ [m], Recording)\n  cs e i = cs d i\n  cs c i = cs d' i\n  cs e' i = (fst (cs d' i) @ [m], Recording)\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "case False"], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "have \"cs d i = cs c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d i = cs c i", "using False Recv assms(1)"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  ev = Recv i' p' r u u' m\n  c \\<turnstile> ev \\<mapsto> d\n\ngoal (1 subgoal):\n 1. cs d i = cs c i", "by auto"], ["proof (state)\nthis:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "then"], ["proof (chain)\npicking this:\n  cs d i = cs c i", "have \"cs e i = cs d' i\""], ["proof (prove)\nusing this:\n  cs d i = cs c i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "have \"\\<forall>p. has_snapshotted d p = has_snapshotted c p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "using assms(1) assms(3) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> d\n  isRecv ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs d i = cs c i \\<Longrightarrow> cs e i = cs d' i", "then"], ["proof (chain)\npicking this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "using \\<open>cs d i = cs c i\\<close> assms(2) assms(5) same_cs_2"], ["proof (prove)\nusing this:\n  \\<forall>p. (ps d p \\<noteq> None) = (ps c p \\<noteq> None)\n  cs d i = cs c i\n  d \\<turnstile> ev' \\<mapsto> e\n  c \\<turnstile> ev' \\<mapsto> d'\n  \\<lbrakk>\\<forall>p. (ps ?c p \\<noteq> None) = (ps ?d p \\<noteq> None);\n   cs ?c ?i = cs ?d ?i; ?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?d \\<turnstile> ?ev \\<mapsto> ?d'\\<rbrakk>\n  \\<Longrightarrow> cs ?c' ?i = cs ?d' ?i\n\ngoal (1 subgoal):\n 1. cs e i = cs d' i", "by blast"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "also"], ["proof (state)\nthis:\n  cs e i = cs d' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "have \"... = cs e' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "using False Recv assms(6)"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n  ev = Recv i' p' r u u' m\n  d' \\<turnstile> ev \\<mapsto> e'\n\ngoal (1 subgoal):\n 1. cs d' i = cs e' i", "by auto"], ["proof (state)\nthis:\n  cs d' i = cs e' i\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow> cs e i = cs e' i", "finally"], ["proof (chain)\npicking this:\n  cs e i = cs e' i", "show ?thesis"], ["proof (prove)\nusing this:\n  cs e i = cs e' i\n\ngoal (1 subgoal):\n 1. cs e i = cs e' i", "by simp"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs e i = cs e' i\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* context distributed_system *)"], ["", "end"], ["", "(* theory Swap *)"]]}