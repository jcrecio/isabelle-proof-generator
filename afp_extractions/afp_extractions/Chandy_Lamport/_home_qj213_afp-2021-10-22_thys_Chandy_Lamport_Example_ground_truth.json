{"file_name": "/home/qj213/afp-2021-10-22/thys/Chandy_Lamport/Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Chandy_Lamport", "problem_names": ["lemma s7_no_marker:\n  shows\n    \"\\<forall>cid. Marker \\<notin> set (msgs s7 cid)\""], "translations": [["", "lemma s7_no_marker:\n  shows\n    \"\\<forall>cid. Marker \\<notin> set (msgs s7 cid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>cid. Marker \\<notin> set (msgs s7 cid)", "by simp"], ["", "interpretation computation chan trans send recv init s7"], ["proof (prove)\ngoal (1 subgoal):\n 1. computation chan Example.trans send recv init s7", "proof"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n 2. finite {i. \\<exists>p q. chan i = Some (p, q)}\n 3. \\<forall>p q.\n       p \\<noteq> q \\<longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q\n 4. 1 < card UNIV\n 5. finite UNIV\n 6. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 7. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 8. \\<forall>p. \\<not> ps init p \\<noteq> None\n 9. \\<forall>i. cs init i = ([], NotStarted)\n 10. \\<exists>t.\n        distributed_system.trace chan Example.trans send recv init t s7\nA total of 12 subgoals...", "have \"distributed_system chan\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system chan", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)", "show \"\\<forall>i. \\<nexists>p. chan i = Some (p, p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system chan\n\ngoal (12 subgoals):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n 2. finite {i. \\<exists>p q. chan i = Some (p, q)}\n 3. \\<forall>p q.\n       p \\<noteq> q \\<longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q\n 4. 1 < card UNIV\n 5. finite UNIV\n 6. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 7. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 8. \\<forall>p. \\<not> ps init p \\<noteq> None\n 9. \\<forall>i. cs init i = ([], NotStarted)\n 10. \\<exists>t.\n        distributed_system.trace chan Example.trans send recv init t s7\nA total of 12 subgoals...", "show \"\\<forall>p q. p \\<noteq> q \\<longrightarrow> (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p q.\n       p \\<noteq> q \\<longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "proof ((rule allI)+, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       p \\<noteq> q \\<Longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "fix p q :: PType"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       p \\<noteq> q \\<Longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "assume \"p \\<noteq> q\""], ["proof (state)\nthis:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       p \\<noteq> q \\<Longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> q", "have \"(p = P \\<and> q = Q) \\<or> (p = Q \\<and> q = P)\""], ["proof (prove)\nusing this:\n  p \\<noteq> q\n\ngoal (1 subgoal):\n 1. p = P \\<and> q = Q \\<or> p = Q \\<and> q = P", "using PType.exhaust"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  \\<lbrakk>?y = P \\<Longrightarrow> ?P; ?y = Q \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. p = P \\<and> q = Q \\<or> p = Q \\<and> q = P", "by auto"], ["proof (state)\nthis:\n  p = P \\<and> q = Q \\<or> p = Q \\<and> q = P\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       p \\<noteq> q \\<Longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "then"], ["proof (chain)\npicking this:\n  p = P \\<and> q = Q \\<or> p = Q \\<and> q = P", "have \"\\<exists>i. chan i = Some (p, q)\""], ["proof (prove)\nusing this:\n  p = P \\<and> q = Q \\<or> p = Q \\<and> q = P\n\ngoal (1 subgoal):\n 1. \\<exists>i. chan i = Some (p, q)", "by (elim disjE) auto"], ["proof (state)\nthis:\n  \\<exists>i. chan i = Some (p, q)\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       p \\<noteq> q \\<Longrightarrow>\n       (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. chan i = Some (p, q)", "show \"(\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q\""], ["proof (prove)\nusing this:\n  \\<exists>i. chan i = Some (p, q)\n\ngoal (1 subgoal):\n 1. (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>p q.\n     p \\<noteq> q \\<longrightarrow>\n     (\\<lambda>p q. \\<exists>i. chan i = Some (p, q))\\<^sup>+\\<^sup>+ p q\n\ngoal (11 subgoals):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n 2. finite {i. \\<exists>p q. chan i = Some (p, q)}\n 3. 1 < card UNIV\n 4. finite UNIV\n 5. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 6. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 7. \\<forall>p. \\<not> ps init p \\<noteq> None\n 8. \\<forall>i. cs init i = ([], NotStarted)\n 9. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 10. \\<forall>t i cid.\n        distributed_system.trace chan Example.trans send recv init t\n         s7 \\<and>\n        Marker\n        \\<in> set (msgs\n                    (distributed_system.s chan Example.trans send recv init\n                      t i)\n                    cid) \\<longrightarrow>\n        (\\<exists>j\\<ge>i.\n            Marker\n            \\<notin> set (msgs\n                           (distributed_system.s chan Example.trans send\n                             recv init t j)\n                           cid))\nA total of 11 subgoals...", "show \"finite {i. \\<exists>p q. chan i = Some (p, q)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {i. \\<exists>p q. chan i = Some (p, q)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite {i. \\<exists>p q. chan i = Some (p, q)}", "have \"{i. \\<exists>p q. chan i = Some (p, q)} = {0,1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. \\<exists>p q. chan i = Some (p, q)} = {0, 1}", "by auto"], ["proof (state)\nthis:\n  {i. \\<exists>p q. chan i = Some (p, q)} = {0, 1}\n\ngoal (1 subgoal):\n 1. finite {i. \\<exists>p q. chan i = Some (p, q)}", "then"], ["proof (chain)\npicking this:\n  {i. \\<exists>p q. chan i = Some (p, q)} = {0, 1}", "show ?thesis"], ["proof (prove)\nusing this:\n  {i. \\<exists>p q. chan i = Some (p, q)} = {0, 1}\n\ngoal (1 subgoal):\n 1. finite {i. \\<exists>p q. chan i = Some (p, q)}", "by simp"], ["proof (state)\nthis:\n  finite {i. \\<exists>p q. chan i = Some (p, q)}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite {i. \\<exists>p q. chan i = Some (p, q)}\n\ngoal (10 subgoals):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n 2. 1 < card UNIV\n 3. finite UNIV\n 4. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 5. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 6. \\<forall>p. \\<not> ps init p \\<noteq> None\n 7. \\<forall>i. cs init i = ([], NotStarted)\n 8. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 9. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 10. \\<forall>t p.\n        distributed_system.trace chan Example.trans send recv init t\n         s7 \\<longrightarrow>\n        (\\<exists>i.\n            ps (distributed_system.s chan Example.trans send recv init t i)\n             p \\<noteq>\n            None \\<and>\n            i \\<le> length t)", "show \"1 < card (UNIV :: PType set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < card UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < card UNIV", "have \"(UNIV :: PType set) = {P, Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = {P, Q}", "using PType.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = P \\<Longrightarrow> ?P; ?y = Q \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. UNIV = {P, Q}", "by blast"], ["proof (state)\nthis:\n  UNIV = {P, Q}\n\ngoal (1 subgoal):\n 1. 1 < card UNIV", "then"], ["proof (chain)\npicking this:\n  UNIV = {P, Q}", "have \"card (UNIV :: PType set) = 2\""], ["proof (prove)\nusing this:\n  UNIV = {P, Q}\n\ngoal (1 subgoal):\n 1. card UNIV = 2", "by (metis One_nat_def PType.distinct(1) Suc_1 card.insert card.empty finite.emptyI finite.insertI insert_absorb insert_not_empty singletonD)"], ["proof (state)\nthis:\n  card UNIV = 2\n\ngoal (1 subgoal):\n 1. 1 < card UNIV", "then"], ["proof (chain)\npicking this:\n  card UNIV = 2", "show ?thesis"], ["proof (prove)\nusing this:\n  card UNIV = 2\n\ngoal (1 subgoal):\n 1. 1 < card UNIV", "by auto"], ["proof (state)\nthis:\n  1 < card UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < card UNIV\n\ngoal (9 subgoals):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n 2. finite UNIV\n 3. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 4. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 5. \\<forall>p. \\<not> ps init p \\<noteq> None\n 6. \\<forall>i. cs init i = ([], NotStarted)\n 7. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 8. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 9. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"finite (UNIV :: PType set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite UNIV", "have \"(UNIV :: PType set) = {P, Q}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. UNIV = {P, Q}", "using PType.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = P \\<Longrightarrow> ?P; ?y = Q \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. UNIV = {P, Q}", "by blast"], ["proof (state)\nthis:\n  UNIV = {P, Q}\n\ngoal (1 subgoal):\n 1. finite UNIV", "then"], ["proof (chain)\npicking this:\n  UNIV = {P, Q}", "show ?thesis"], ["proof (prove)\nusing this:\n  UNIV = {P, Q}\n\ngoal (1 subgoal):\n 1. finite UNIV", "by (metis finite.emptyI finite.insertI)"], ["proof (state)\nthis:\n  finite UNIV\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  finite UNIV\n\ngoal (8 subgoals):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n 2. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 3. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 4. \\<forall>p. \\<not> ps init p \\<noteq> None\n 5. \\<forall>i. cs init i = ([], NotStarted)\n 6. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 7. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 8. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>i. \\<nexists>p. chan i = Some (p, p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. \\<nexists>p. chan i = Some (p, p)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i. \\<nexists>p. chan i = Some (p, p)\n\ngoal (7 subgoals):\n 1. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)\n 2. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 3. \\<forall>p. \\<not> ps init p \\<noteq> None\n 4. \\<forall>i. cs init i = ([], NotStarted)\n 5. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 6. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 7. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>i. (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow> Marker \\<notin> set (msgs init i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n       Marker \\<notin> set (msgs init i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     (\\<exists>p q. chan i = Some (p, q)) \\<longrightarrow>\n     Marker \\<notin> set (msgs init i)\n\ngoal (6 subgoals):\n 1. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n 2. \\<forall>p. \\<not> ps init p \\<noteq> None\n 3. \\<forall>i. cs init i = ([], NotStarted)\n 4. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 5. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 6. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. chan i = None \\<longrightarrow> msgs init i = []\n\ngoal (5 subgoals):\n 1. \\<forall>p. \\<not> ps init p \\<noteq> None\n 2. \\<forall>i. cs init i = ([], NotStarted)\n 3. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 4. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 5. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>p. \\<not> ps init p \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. \\<not> ps init p \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  \\<forall>p. \\<not> ps init p \\<noteq> None\n\ngoal (4 subgoals):\n 1. \\<forall>i. cs init i = ([], NotStarted)\n 2. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 3. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 4. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>i. cs init i = ([], NotStarted)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. cs init i = ([], NotStarted)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. cs init i = ([], NotStarted)\n\ngoal (3 subgoals):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7\n 2. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 3. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<exists>t. distributed_system.trace chan Example.trans send recv init t s7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "let ?t = \"[t0, t1, t2, t3, t4, t5, t6]\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv init t0 s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv init t0 s1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv init t0 s1", "have \"distributed_system.can_occur chan trans send recv t0 init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t0 init", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t0 init", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t0 init\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv init t0 s1", "then"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t0 init", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t0 init\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv init t0 s1", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_snapshot)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv init t0 s1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv init t0 s1\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "moreover"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv init t0 s1\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv s1 t1 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s1 t1 s2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s1 t1 s2", "have \"distributed_system.can_occur chan trans send recv t1 s1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t1 s1", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t1 s1", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t1 s1\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s1 t1 s2", "then"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t1 s1", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t1 s1\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s1 t1 s2", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_send)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s1 t1 s2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s1 t1 s2\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "moreover"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s1 t1 s2\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv s2 t2 s3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s2 t2 s3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s2 t2 s3", "have \"distributed_system.can_occur chan trans send recv t2 s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t2 s2", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t2 s2", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t2 s2\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s2 t2 s3", "moreover"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t2 s2\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s2 t2 s3", "have \"\\<forall>r. r \\<noteq> P \\<longrightarrow> r = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r. r \\<noteq> P \\<longrightarrow> r = Q", "using PType.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = P \\<Longrightarrow> ?P; ?y = Q \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>r. r \\<noteq> P \\<longrightarrow> r = Q", "by auto"], ["proof (state)\nthis:\n  \\<forall>r. r \\<noteq> P \\<longrightarrow> r = Q\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s2 t2 s3", "ultimately"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t2 s2\n  \\<forall>r. r \\<noteq> P \\<longrightarrow> r = Q", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t2 s2\n  \\<forall>r. r \\<noteq> P \\<longrightarrow> r = Q\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s2 t2 s3", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_send)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s2 t2 s3\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s2 t2 s3\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "moreover"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s2 t2 s3\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv s3 t3 s4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s3 t3 s4", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s3 t3 s4", "have \"distributed_system.can_occur chan trans send recv t3 s3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t3 s3", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t3 s3", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t3 s3\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s3 t3 s4", "moreover"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t3 s3\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s3 t3 s4", "have \"\\<forall>p'. p' \\<noteq> P \\<longrightarrow> p' = Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p'. p' \\<noteq> P \\<longrightarrow> p' = Q", "using PType.exhaust"], ["proof (prove)\nusing this:\n  \\<lbrakk>?y = P \\<Longrightarrow> ?P; ?y = Q \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<forall>p'. p' \\<noteq> P \\<longrightarrow> p' = Q", "by auto"], ["proof (state)\nthis:\n  \\<forall>p'. p' \\<noteq> P \\<longrightarrow> p' = Q\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s3 t3 s4", "ultimately"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t3 s3\n  \\<forall>p'. p' \\<noteq> P \\<longrightarrow> p' = Q", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t3 s3\n  \\<forall>p'. p' \\<noteq> P \\<longrightarrow> p' = Q\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s3 t3 s4", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_snapshot)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s3 t3 s4\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s3 t3 s4\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "moreover"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s3 t3 s4\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv s4 t4 s5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s4 t4 s5", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s4 t4 s5", "have \"distributed_system.can_occur chan trans send recv t4 s4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t4 s4", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t4 s4", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t4 s4\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s4 t4 s5", "then"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t4 s4", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t4 s4\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s4 t4 s5", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_def)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s4 t4 s5\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s4 t4 s5\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "moreover"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s4 t4 s5\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv s5 t5 s6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s5 t5 s6", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s5 t5 s6", "have \"distributed_system.can_occur chan trans send recv t5 s5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t5 s5", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t5 s5", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t5 s5\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s5 t5 s6", "then"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t5 s5", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t5 s5\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s5 t5 s6", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_def)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s5 t5 s6\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s5 t5 s6\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "moreover"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s5 t5 s6\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "have \"distributed_system.next chan trans send recv s6 t6 s7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s6 t6 s7", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s6 t6 s7", "have \"distributed_system.can_occur chan trans send recv t6 s6\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t6 s6", "using \\<open>distributed_system chan\\<close> distributed_system.can_occur_def"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.can_occur ?channel ?trans ?send ?recv ?ev ?c \\<equiv>\n  case ?ev of\n  Trans p s s' \\<Rightarrow> states ?c p = s \\<and> ?trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (p, q) \\<and> ?send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> ?recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      ?channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. distributed_system.can_occur chan Example.trans send recv t6 s6", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.can_occur chan Example.trans send recv t6 s6\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s6 t6 s7", "then"], ["proof (chain)\npicking this:\n  distributed_system.can_occur chan Example.trans send recv t6 s6", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.can_occur chan Example.trans send recv t6 s6\n\ngoal (1 subgoal):\n 1. distributed_system.next chan Example.trans send recv s6 t6 s7", "by (simp add: \\<open>distributed_system chan\\<close> distributed_system.next_def)"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s6 t6 s7\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distributed_system.next chan Example.trans send recv s6 t6 s7\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "ultimately"], ["proof (chain)\npicking this:\n  distributed_system.next chan Example.trans send recv init t0 s1\n  distributed_system.next chan Example.trans send recv s1 t1 s2\n  distributed_system.next chan Example.trans send recv s2 t2 s3\n  distributed_system.next chan Example.trans send recv s3 t3 s4\n  distributed_system.next chan Example.trans send recv s4 t4 s5\n  distributed_system.next chan Example.trans send recv s5 t5 s6\n  distributed_system.next chan Example.trans send recv s6 t6 s7", "have \"distributed_system.trace chan trans send recv init ?t s7\""], ["proof (prove)\nusing this:\n  distributed_system.next chan Example.trans send recv init t0 s1\n  distributed_system.next chan Example.trans send recv s1 t1 s2\n  distributed_system.next chan Example.trans send recv s2 t2 s3\n  distributed_system.next chan Example.trans send recv s3 t3 s4\n  distributed_system.next chan Example.trans send recv s4 t4 s5\n  distributed_system.next chan Example.trans send recv s5 t5 s6\n  distributed_system.next chan Example.trans send recv s6 t6 s7\n\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv init\n     [t0, t1, t2, t3, t4, t5, t6] s7", "by (meson \\<open>distributed_system chan\\<close> distributed_system.trace.simps)"], ["proof (state)\nthis:\n  distributed_system.trace chan Example.trans send recv init\n   [t0, t1, t2, t3, t4, t5, t6] s7\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "then"], ["proof (chain)\npicking this:\n  distributed_system.trace chan Example.trans send recv init\n   [t0, t1, t2, t3, t4, t5, t6] s7", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.trace chan Example.trans send recv init\n   [t0, t1, t2, t3, t4, t5, t6] s7\n\ngoal (1 subgoal):\n 1. \\<exists>t.\n       distributed_system.trace chan Example.trans send recv init t s7", "by blast"], ["proof (state)\nthis:\n  \\<exists>t.\n     distributed_system.trace chan Example.trans send recv init t s7\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>t.\n     distributed_system.trace chan Example.trans send recv init t s7\n\ngoal (2 subgoals):\n 1. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))\n 2. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>t i cid. distributed_system.trace chan Example.trans send recv init t s7 \\<and>\n       Marker \\<in> set (msgs (distributed_system.s chan Example.trans send recv init t i) cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i. Marker \\<notin> set (msgs (distributed_system.s chan Example.trans send recv init t j) cid))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<longrightarrow>\n       (\\<exists>j\\<ge>i.\n           Marker\n           \\<notin> set (msgs\n                          (distributed_system.s chan Example.trans send recv\n                            init t j)\n                          cid))", "proof ((rule allI)+, (rule impI)+)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "fix t i cid"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "assume asm: \"distributed_system.trace chan Example.trans send recv init t s7 \\<and>\n                 Marker \\<in> set (msgs (distributed_system.s chan Example.trans send recv init t i) cid)\""], ["proof (state)\nthis:\n  distributed_system.trace chan Example.trans send recv init t s7 \\<and>\n  Marker\n  \\<in> set (msgs\n              (distributed_system.s chan Example.trans send recv init t i)\n              cid)\n\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "have tr_exists: \"distributed_system.trace chan Example.trans send recv init t s7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv init t s7", "using asm"], ["proof (prove)\nusing this:\n  distributed_system.trace chan Example.trans send recv init t s7 \\<and>\n  Marker\n  \\<in> set (msgs\n              (distributed_system.s chan Example.trans send recv init t i)\n              cid)\n\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv init t s7", "by blast"], ["proof (state)\nthis:\n  distributed_system.trace chan Example.trans send recv init t s7\n\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "have marker_in_channel: \"Marker \\<in> set (msgs (distributed_system.s chan Example.trans send recv init t i) cid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker\n    \\<in> set (msgs\n                (distributed_system.s chan Example.trans send recv init t i)\n                cid)", "using asm"], ["proof (prove)\nusing this:\n  distributed_system.trace chan Example.trans send recv init t s7 \\<and>\n  Marker\n  \\<in> set (msgs\n              (distributed_system.s chan Example.trans send recv init t i)\n              cid)\n\ngoal (1 subgoal):\n 1. Marker\n    \\<in> set (msgs\n                (distributed_system.s chan Example.trans send recv init t i)\n                cid)", "by simp"], ["proof (state)\nthis:\n  Marker\n  \\<in> set (msgs\n              (distributed_system.s chan Example.trans send recv init t i)\n              cid)\n\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "have s7_is_fin: \"s7 = (distributed_system.s chan Example.trans send recv init t (length t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s7 = distributed_system.s chan Example.trans send recv init t (length t)", "by (metis (no_types, lifting) \\<open>distributed_system chan\\<close> \\<open>distributed_system.trace chan Example.trans send recv init t s7\\<close> distributed_system.exists_trace_for_any_i distributed_system.trace_and_start_determines_end order_refl take_all)"], ["proof (state)\nthis:\n  s7 = distributed_system.s chan Example.trans send recv init t (length t)\n\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "have \"i < length t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length t", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < length t \\<Longrightarrow> False", "assume \"~ i < length t\""], ["proof (state)\nthis:\n  \\<not> i < length t\n\ngoal (1 subgoal):\n 1. \\<not> i < length t \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> i < length t", "have \"distributed_system.trace chan Example.trans send recv\n                (distributed_system.s chan Example.trans send recv init t (length t))\n                []\n                (distributed_system.s chan Example.trans send recv init t i)\""], ["proof (prove)\nusing this:\n  \\<not> i < length t\n\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t (length t))\n     [] (distributed_system.s chan Example.trans send recv init t i)", "by (metis (no_types, lifting) \\<open>distributed_system chan\\<close> distributed_system.exists_trace_for_any_i distributed_system.trace.simps distributed_system.trace_and_start_determines_end not_less s7_is_fin take_all tr_exists)"], ["proof (state)\nthis:\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t (length t)) []\n   (distributed_system.s chan Example.trans send recv init t i)\n\ngoal (1 subgoal):\n 1. \\<not> i < length t \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t (length t)) []\n   (distributed_system.s chan Example.trans send recv init t i)", "have \"Marker \\<notin> set (msgs (distributed_system.s chan Example.trans send recv init t i) cid)\""], ["proof (prove)\nusing this:\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t (length t)) []\n   (distributed_system.s chan Example.trans send recv init t i)\n\ngoal (1 subgoal):\n 1. Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t (length t))\n     [] (distributed_system.s chan Example.trans send recv init t\n          i) \\<Longrightarrow>\n    Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid)", "have \"distributed_system.s chan Example.trans send recv init t i = s7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.s chan Example.trans send recv init t i = s7", "using \\<open>distributed_system chan\\<close> \\<open>distributed_system.trace chan Example.trans send recv (distributed_system.s chan Example.trans send recv init t (length t)) [] (distributed_system.s chan Example.trans send recv init t i)\\<close> distributed_system.trace.simps s7_is_fin"], ["proof (prove)\nusing this:\n  distributed_system chan\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t (length t)) []\n   (distributed_system.s chan Example.trans send recv init t i)\n  distributed_system ?channel \\<Longrightarrow>\n  distributed_system.trace ?channel ?trans ?send ?recv ?a1.0 ?a2.0 ?a3.0 =\n  ((\\<exists>c. ?a1.0 = c \\<and> ?a2.0 = [] \\<and> ?a3.0 = c) \\<or>\n   (\\<exists>c ev c' t c''.\n       ?a1.0 = c \\<and>\n       ?a2.0 = ev # t \\<and>\n       ?a3.0 = c'' \\<and>\n       distributed_system.next ?channel ?trans ?send ?recv c ev c' \\<and>\n       distributed_system.trace ?channel ?trans ?send ?recv c' t c''))\n  s7 = distributed_system.s chan Example.trans send recv init t (length t)\n\ngoal (1 subgoal):\n 1. distributed_system.s chan Example.trans send recv init t i = s7", "by fastforce"], ["proof (state)\nthis:\n  distributed_system.s chan Example.trans send recv init t i = s7\n\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t (length t))\n     [] (distributed_system.s chan Example.trans send recv init t\n          i) \\<Longrightarrow>\n    Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid)", "then"], ["proof (chain)\npicking this:\n  distributed_system.s chan Example.trans send recv init t i = s7", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.s chan Example.trans send recv init t i = s7\n\ngoal (1 subgoal):\n 1. Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid)", "using s7_no_marker"], ["proof (prove)\nusing this:\n  distributed_system.s chan Example.trans send recv init t i = s7\n  \\<forall>cid. Marker \\<notin> set (msgs s7 cid)\n\ngoal (1 subgoal):\n 1. Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid)", "by simp"], ["proof (state)\nthis:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   i)\n                 cid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   i)\n                 cid)\n\ngoal (1 subgoal):\n 1. \\<not> i < length t \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   i)\n                 cid)", "show False"], ["proof (prove)\nusing this:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   i)\n                 cid)\n\ngoal (1 subgoal):\n 1. False", "using marker_in_channel"], ["proof (prove)\nusing this:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   i)\n                 cid)\n  Marker\n  \\<in> set (msgs\n              (distributed_system.s chan Example.trans send recv init t i)\n              cid)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < length t\n\ngoal (1 subgoal):\n 1. \\<And>t i cid.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<and>\n       Marker\n       \\<in> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     i)\n                   cid) \\<Longrightarrow>\n       \\<exists>j\\<ge>i.\n          Marker\n          \\<notin> set (msgs\n                         (distributed_system.s chan Example.trans send recv\n                           init t j)\n                         cid)", "then"], ["proof (chain)\npicking this:\n  i < length t", "show \"(\\<exists>j\\<ge>i. Marker \\<notin> set (msgs (distributed_system.s chan Example.trans send recv init t j) cid))\""], ["proof (prove)\nusing this:\n  i < length t\n\ngoal (1 subgoal):\n 1. \\<exists>j\\<ge>i.\n       Marker\n       \\<notin> set (msgs\n                      (distributed_system.s chan Example.trans send recv\n                        init t j)\n                      cid)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i < length t \\<Longrightarrow>\n    \\<exists>j\\<ge>i.\n       Marker\n       \\<notin> set (msgs\n                      (distributed_system.s chan Example.trans send recv\n                        init t j)\n                      cid)", "have \"distributed_system.trace chan Example.trans send recv\n            (distributed_system.s chan Example.trans send recv init t i)\n            (take ((length t) - i) (drop i t))\n            (distributed_system.s chan Example.trans send recv init t (length t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t i)\n     (take (length t - i) (drop i t))\n     (distributed_system.s chan Example.trans send recv init t (length t))", "using \\<open>distributed_system chan\\<close> \\<open>i < length t\\<close> distributed_system.exists_trace_for_any_i_j less_imp_le_nat tr_exists"], ["proof (prove)\nusing this:\n  distributed_system chan\n  i < length t\n  \\<lbrakk>distributed_system ?channel;\n   \\<exists>c'.\n      distributed_system.trace ?channel ?trans ?send ?recv ?c ?t c';\n   ?i \\<le> ?j\\<rbrakk>\n  \\<Longrightarrow> distributed_system.trace ?channel ?trans ?send ?recv\n                     (distributed_system.s ?channel ?trans ?send ?recv ?c ?t\n                       ?i)\n                     (take (?j - ?i) (drop ?i ?t))\n                     (distributed_system.s ?channel ?trans ?send ?recv ?c ?t\n                       ?j)\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  distributed_system.trace chan Example.trans send recv init t s7\n\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t i)\n     (take (length t - i) (drop i t))\n     (distributed_system.s chan Example.trans send recv init t (length t))", "by blast"], ["proof (state)\nthis:\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t i)\n   (take (length t - i) (drop i t))\n   (distributed_system.s chan Example.trans send recv init t (length t))\n\ngoal (1 subgoal):\n 1. i < length t \\<Longrightarrow>\n    \\<exists>j\\<ge>i.\n       Marker\n       \\<notin> set (msgs\n                      (distributed_system.s chan Example.trans send recv\n                        init t j)\n                      cid)", "then"], ["proof (chain)\npicking this:\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t i)\n   (take (length t - i) (drop i t))\n   (distributed_system.s chan Example.trans send recv init t (length t))", "have \"Marker \\<notin> set (msgs (distributed_system.s chan Example.trans send recv init t (length t)) cid)\""], ["proof (prove)\nusing this:\n  distributed_system.trace chan Example.trans send recv\n   (distributed_system.s chan Example.trans send recv init t i)\n   (take (length t - i) (drop i t))\n   (distributed_system.s chan Example.trans send recv init t (length t))\n\ngoal (1 subgoal):\n 1. Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     (length t))\n                   cid)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t i)\n     (take (length t - i) (drop i t))\n     (distributed_system.s chan Example.trans send recv init t\n       (length t)) \\<Longrightarrow>\n    Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     (length t))\n                   cid)", "have \"distributed_system.s chan Example.trans send recv init t (length t) = s7\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distributed_system.s chan Example.trans send recv init t (length t) = s7", "by (simp add: s7_is_fin)"], ["proof (state)\nthis:\n  distributed_system.s chan Example.trans send recv init t (length t) = s7\n\ngoal (1 subgoal):\n 1. distributed_system.trace chan Example.trans send recv\n     (distributed_system.s chan Example.trans send recv init t i)\n     (take (length t - i) (drop i t))\n     (distributed_system.s chan Example.trans send recv init t\n       (length t)) \\<Longrightarrow>\n    Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     (length t))\n                   cid)", "then"], ["proof (chain)\npicking this:\n  distributed_system.s chan Example.trans send recv init t (length t) = s7", "show ?thesis"], ["proof (prove)\nusing this:\n  distributed_system.s chan Example.trans send recv init t (length t) = s7\n\ngoal (1 subgoal):\n 1. Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     (length t))\n                   cid)", "using s7_no_marker"], ["proof (prove)\nusing this:\n  distributed_system.s chan Example.trans send recv init t (length t) = s7\n  \\<forall>cid. Marker \\<notin> set (msgs s7 cid)\n\ngoal (1 subgoal):\n 1. Marker\n    \\<notin> set (msgs\n                   (distributed_system.s chan Example.trans send recv init t\n                     (length t))\n                   cid)", "by simp"], ["proof (state)\nthis:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   (length t))\n                 cid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   (length t))\n                 cid)\n\ngoal (1 subgoal):\n 1. i < length t \\<Longrightarrow>\n    \\<exists>j\\<ge>i.\n       Marker\n       \\<notin> set (msgs\n                      (distributed_system.s chan Example.trans send recv\n                        init t j)\n                      cid)", "then"], ["proof (chain)\npicking this:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   (length t))\n                 cid)", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   (length t))\n                 cid)\n\ngoal (1 subgoal):\n 1. \\<exists>j\\<ge>i.\n       Marker\n       \\<notin> set (msgs\n                      (distributed_system.s chan Example.trans send recv\n                        init t j)\n                      cid)", "using \\<open>i < length t\\<close> less_imp_le_nat"], ["proof (prove)\nusing this:\n  Marker\n  \\<notin> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   (length t))\n                 cid)\n  i < length t\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n\ngoal (1 subgoal):\n 1. \\<exists>j\\<ge>i.\n       Marker\n       \\<notin> set (msgs\n                      (distributed_system.s chan Example.trans send recv\n                        init t j)\n                      cid)", "by blast"], ["proof (state)\nthis:\n  \\<exists>j\\<ge>i.\n     Marker\n     \\<notin> set (msgs\n                    (distributed_system.s chan Example.trans send recv init\n                      t j)\n                    cid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>j\\<ge>i.\n     Marker\n     \\<notin> set (msgs\n                    (distributed_system.s chan Example.trans send recv init\n                      t j)\n                    cid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t i cid.\n     distributed_system.trace chan Example.trans send recv init t s7 \\<and>\n     Marker\n     \\<in> set (msgs\n                 (distributed_system.s chan Example.trans send recv init t\n                   i)\n                 cid) \\<longrightarrow>\n     (\\<exists>j\\<ge>i.\n         Marker\n         \\<notin> set (msgs\n                        (distributed_system.s chan Example.trans send recv\n                          init t j)\n                        cid))\n\ngoal (1 subgoal):\n 1. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "show \"\\<forall>t p. distributed_system.trace chan Example.trans send recv init t s7 \\<longrightarrow>\n              (\\<exists>i. ps (distributed_system.s chan Example.trans send recv init t i) p \\<noteq> None \\<and> i \\<le> length t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<longrightarrow>\n       (\\<exists>i.\n           ps (distributed_system.s chan Example.trans send recv init t i)\n            p \\<noteq>\n           None \\<and>\n           i \\<le> length t)", "proof ((rule allI)+, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<Longrightarrow>\n       \\<exists>i.\n          ps (distributed_system.s chan Example.trans send recv init t i)\n           p \\<noteq>\n          None \\<and>\n          i \\<le> length t", "fix t p"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<Longrightarrow>\n       \\<exists>i.\n          ps (distributed_system.s chan Example.trans send recv init t i)\n           p \\<noteq>\n          None \\<and>\n          i \\<le> length t", "assume \"distributed_system.trace chan Example.trans send recv init t s7\""], ["proof (state)\nthis:\n  distributed_system.trace chan Example.trans send recv init t s7\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<Longrightarrow>\n       \\<exists>i.\n          ps (distributed_system.s chan Example.trans send recv init t i)\n           p \\<noteq>\n          None \\<and>\n          i \\<le> length t", "have s7_is_fin: \"s7 = (distributed_system.s chan Example.trans send recv init t (length t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s7 = distributed_system.s chan Example.trans send recv init t (length t)", "by (metis (no_types, lifting) \\<open>distributed_system chan\\<close> \\<open>distributed_system.trace chan Example.trans send recv init t s7\\<close> distributed_system.exists_trace_for_any_i distributed_system.trace_and_start_determines_end order_refl take_all)"], ["proof (state)\nthis:\n  s7 = distributed_system.s chan Example.trans send recv init t (length t)\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<Longrightarrow>\n       \\<exists>i.\n          ps (distributed_system.s chan Example.trans send recv init t i)\n           p \\<noteq>\n          None \\<and>\n          i \\<le> length t", "moreover"], ["proof (state)\nthis:\n  s7 = distributed_system.s chan Example.trans send recv init t (length t)\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<Longrightarrow>\n       \\<exists>i.\n          ps (distributed_system.s chan Example.trans send recv init t i)\n           p \\<noteq>\n          None \\<and>\n          i \\<le> length t", "have \"has_snapshotted s7 p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps s7 p \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  ps s7 p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>t p.\n       distributed_system.trace chan Example.trans send recv init t\n        s7 \\<Longrightarrow>\n       \\<exists>i.\n          ps (distributed_system.s chan Example.trans send recv init t i)\n           p \\<noteq>\n          None \\<and>\n          i \\<le> length t", "ultimately"], ["proof (chain)\npicking this:\n  s7 = distributed_system.s chan Example.trans send recv init t (length t)\n  ps s7 p \\<noteq> None", "show \"(\\<exists>i. ps (distributed_system.s chan Example.trans send recv init t i) p \\<noteq> None \\<and> i \\<le> length t)\""], ["proof (prove)\nusing this:\n  s7 = distributed_system.s chan Example.trans send recv init t (length t)\n  ps s7 p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       ps (distributed_system.s chan Example.trans send recv init t i)\n        p \\<noteq>\n       None \\<and>\n       i \\<le> length t", "by auto"], ["proof (state)\nthis:\n  \\<exists>i.\n     ps (distributed_system.s chan Example.trans send recv init t i)\n      p \\<noteq>\n     None \\<and>\n     i \\<le> length t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t p.\n     distributed_system.trace chan Example.trans send recv init t\n      s7 \\<longrightarrow>\n     (\\<exists>i.\n         ps (distributed_system.s chan Example.trans send recv init t i)\n          p \\<noteq>\n         None \\<and>\n         i \\<le> length t)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}