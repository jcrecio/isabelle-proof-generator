{"file_name": "/home/qj213/afp-2021-10-22/thys/Chandy_Lamport/Distributed_System.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Chandy_Lamport", "problem_names": ["lemma nonregular_event:\n  \"~ regular_event ev = (isSnapshot ev \\<or> isRecvMarker ev)\"", "lemma event_occurs_on_unique:\n  assumes\n    \"p \\<noteq> q\"\n    \"occurs_on ev = p\"\n  shows\n    \"occurs_on ev \\<noteq> q\"", "lemma can_occur_Recv:\n  assumes\n    \"can_occur (Recv i p q s s' m) c\"\n  shows\n    \"states c p = s \\<and> channel i = Some (q, p) \\<and> (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m\"", "lemma state_and_event_determine_next:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"c \\<turnstile> ev \\<mapsto> c''\"\n  shows\n    \"c' = c''\"", "lemma exists_next_if_can_occur:\n  assumes\n    \"can_occur ev c\"\n  shows\n    \"\\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\"", "lemma exists_exactly_one_following_state:\n  \"can_occur ev c \\<Longrightarrow> \\<exists>!c'. c \\<turnstile> ev \\<mapsto> c'\"", "lemma no_state_change_if_no_event:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev \\<noteq> p\"\n  shows\n    \"states c p = states c' p \\<and> process_snapshot c p = process_snapshot c' p\"", "lemma no_msgs_change_if_no_channel:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel i = None\"\n  shows\n    \"msgs c i = msgs c' i\"", "lemma no_cs_change_if_no_channel:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel i = None\"\n  shows\n    \"cs c i = cs c' i\"", "lemma no_msg_change_if_no_event:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"isSend ev \\<longrightarrow> getId ev \\<noteq> i\" and\n    \"isRecv ev \\<longrightarrow> getId ev \\<noteq> i\" and\n    \"regular_event ev\"\n  shows\n    \"msgs c i = msgs c' i\"", "lemma no_cs_change_if_no_event:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"isRecv ev \\<longrightarrow> getId ev \\<noteq> i\" and\n    \"regular_event ev\"\n  shows\n    \"cs c i = cs c' i\"", "lemma happen_implies_can_occur:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"can_occur ev c\"", "lemma snapshot_increases_message_length:\n  assumes\n    \"ev = Snapshot p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel i = Some (q, r)\"\n  shows\n    \"length (msgs c i) \\<le> length (msgs c' i)\"", "lemma recv_marker_changes_head_only_at_i:\n  assumes\n    \"ev = RecvMarker i p q\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"i' \\<noteq> i\"\n  shows\n    \"msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\"", "lemma recv_marker_other_channels_not_shrinking:\n  assumes\n    \"ev = RecvMarker i p q\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"length (msgs c i') \\<le> length (msgs c' i') \\<longleftrightarrow> i \\<noteq> i'\"", "lemma regular_event_cannot_induce_snapshot:\n  assumes\n    \"~ has_snapshotted c p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"regular_event ev \\<longrightarrow> ~ has_snapshotted c' p\"", "lemma regular_event_preserves_process_snapshots:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"regular_event ev \\<Longrightarrow> ps c r = ps c' r\"", "lemma no_state_change_if_nonregular_event:\n  assumes\n    \"~ regular_event ev\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"states c p = states c' p\"", "lemma nonregular_event_induces_snapshot:\n  assumes\n    \"~ has_snapshotted c p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev = p\" and\n    \"~ regular_event ev\"\n  shows\n    \"~ regular_event ev \\<longrightarrow> has_snapshotted c' p\"", "lemma snapshot_state_unchanged:\n  assumes\n    step: \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"has_snapshotted c p\"\n  shows\n    \"ps c p = ps c' p\"", "lemma message_must_be_delivered:\n  assumes\n    valid: \"c \\<turnstile> ev \\<mapsto> c'\" and\n    delivered: \"(msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and> (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\"\n  shows\n    \"(\\<exists>p q.         ev = RecvMarker i p q   \\<and> m = Marker)\n   \\<or> (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\"", "lemma message_must_be_delivered_2:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n    \"m : set (msgs c i)\"\n    \"m \\<notin> set (msgs c' i)\"\n  shows\n    \"(\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or> (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\"", "lemma recv_marker_means_snapshotted_1:\n  assumes\n    \"ev = RecvMarker i p q\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"has_snapshotted c' p\"", "lemma recv_marker_means_snapshotted_2:\n  fixes\n    c c' :: \"('p, 's, 'm) configuration\" and\n    ev :: \"('p, 's, 'm) event\" and\n    i :: channel_id\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"Marker : set (msgs c i)\" and\n    \"Marker \\<notin> set (msgs c' i)\" and\n    \"channel i = Some (q, p)\"\n  shows\n    \"has_snapshotted c' p\"", "lemma event_stays_valid_if_no_occurrence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\" and\n    \"can_occur ev' c\"\n  shows\n    \"can_occur ev' c'\"", "lemma msgs_unchanged_for_other_is:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"regular_event ev\" and\n    \"getId ev = i\" and\n    \"i' \\<noteq> i\"\n  shows\n    \"msgs c i' = msgs c' i'\"", "lemma msgs_unchanged_if_snapshotted_RecvMarker_for_other_is:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"ev = RecvMarker i p q\" and\n    \"has_snapshotted c p\" and\n    \"i' \\<noteq> i\"\n  shows\n    \"msgs c i' = msgs c' i'\"", "lemma event_can_go_back_if_no_sender:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\" and\n    \"can_occur ev' c'\" and\n    \"~ isRecvMarker ev'\" and\n    \"~ isSend ev\"\n  shows\n    \"can_occur ev' c\"", "lemma nonregular_event_can_go_back_if_in_distinct_processes:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"regular_event ev\" and\n    \"~ regular_event ev'\" and\n    \"can_occur ev' c'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"can_occur ev' c\"", "lemma same_state_implies_same_result_state:\n  assumes\n    \"states c p = states d p\"\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\"\n  shows\n    \"states d' p = states c' p\"", "lemma same_snapshot_state_implies_same_result_snapshot_state:\n  assumes\n    \"ps c p = ps d p\" and\n    \"states c p = states d p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\"\n  shows\n    \"ps d' p = ps c' p\"", "lemma same_messages_imply_same_resulting_messages:\n  assumes\n    \"msgs c i = msgs d i\"\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\" and\n    \"regular_event ev\"\n  shows\n    \"msgs c' i = msgs d' i\"", "lemma Trans_msg:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"isTrans ev\"\n  shows\n    \"msgs c i = msgs c' i\"", "lemma new_msg_in_set_implies_occurrence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"m \\<notin> set (msgs c i)\" and\n    \"m \\<in> set (msgs c' i)\" and\n    \"channel i = Some (p, q)\"\n  shows\n    \"occurs_on ev = p\" (is ?P)", "lemma new_Marker_in_set_implies_nonregular_occurence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"Marker \\<notin> set (msgs c i)\" and\n    \"Marker \\<in> set (msgs c' i)\" and\n    \"channel i = Some (p, q)\"\n  shows\n    \"~ regular_event ev\" (is ?P)", "lemma RecvMarker_implies_Marker_in_set:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"ev = RecvMarker cid p q\"\n  shows\n    \"Marker \\<in> set (msgs c cid)\"", "lemma RecvMarker_given_channel:\n  assumes\n    \"isRecvMarker ev\" and\n    \"getId ev = cid\" and\n    \"channel cid = Some (p, q)\" and\n    \"can_occur ev c\"\n  shows\n    \"ev = RecvMarker cid q p\"", "lemma Recv_given_channel:\n  assumes\n    \"isRecv ev\" and\n    \"getId ev = cid\" and\n    \"channel cid = Some (p, q)\" and\n    \"can_occur ev c\"\n  shows\n    \"\\<exists>s s' m. ev = Recv cid q p s s' m\"", "lemma same_cs_if_not_recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"~ isRecv ev\"\n  shows\n     \"fst (cs c cid) = fst (cs c' cid)\"", "lemma done_only_from_recv_marker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel cid = Some (p, q)\" and\n    \"snd (cs c cid) \\<noteq> Done\" and\n    \"snd (cs c' cid) = Done\"\n  shows\n    \"ev = RecvMarker cid q p\"", "lemma cs_not_not_started_stable:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"snd (cs c cid) \\<noteq> NotStarted\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"snd (cs c' cid) \\<noteq> NotStarted\"", "lemma fst_cs_changed_by_recv_recording:\n  assumes\n    step: \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"fst (cs c cid) \\<noteq> fst (cs c' cid)\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"snd (cs c cid) = Recording \\<and> (\\<exists>p q u u' m. ev = Recv cid q p u u' m)\"", "lemma no_marker_and_snapshotted_implies_no_more_markers:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"has_snapshotted c p\" and\n    \"Marker \\<notin> set (msgs c cid)\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"Marker \\<notin> set (msgs c' cid)\"", "lemma same_messages_if_no_occurrence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"~ occurs_on ev = p\" and\n    \"~ occurs_on ev = q\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\""], "translations": [["", "lemma nonregular_event:\n  \"~ regular_event ev = (isSnapshot ev \\<or> isRecvMarker ev)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_event ev \\<noteq> (isSnapshot ev \\<or> isRecvMarker ev)", "by (meson event.distinct_disc event.exhaust_disc regular_event)"], ["", "lemma event_occurs_on_unique:\n  assumes\n    \"p \\<noteq> q\"\n    \"occurs_on ev = p\"\n  shows\n    \"occurs_on ev \\<noteq> q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> q", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> q\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> q", "by (cases ev, auto)"], ["", "subsection \\<open>The distributed system locale\\<close>"], ["", "text \\<open>In order to capture Chandy and Lamport's computation system\nwe introduce two locales. The distributed system locale describes\nglobal truths, such as the mapping from channel IDs to sender and\nreceiver processes, the transition relations for the underlying\ncomputation system and the core assumption that no process has\na channel to itself. While not explicitly mentioned in Chandy's\nand Lamport's work, it makes sense to assume that a channel need\nnot communicate to itself via messages, since it shares memory with\nitself.\\<close>"], ["", "locale distributed_system =\n  fixes\n    channel :: \"channel_id \\<Rightarrow> ('p * 'p) option\" and\n    trans :: \"'p \\<Rightarrow> 's \\<Rightarrow> 's \\<Rightarrow> bool\" and\n    send :: \"channel_id \\<Rightarrow> 'p \\<Rightarrow> 'p \\<Rightarrow> 's \\<Rightarrow> 's \\<Rightarrow> 'm \\<Rightarrow> bool\" and\n    recv :: \"channel_id \\<Rightarrow> 'p \\<Rightarrow> 'p \\<Rightarrow> 's \\<Rightarrow> 's \\<Rightarrow> 'm \\<Rightarrow> bool\"\n  assumes\n    no_self_channel:\n      \"\\<forall>i. \\<nexists>p. channel i = Some (p, p)\"\nbegin"], ["", "subsubsection \\<open>State transitions\\<close>"], ["", "definition can_occur :: \"('p, 's, 'm) event \\<Rightarrow> ('p, 's, 'm) configuration \\<Rightarrow> bool\" where\n\"can_occur ev c \\<equiv> (case ev of\n    Trans p s s'        \\<Rightarrow> states c p = s\n                        \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow> states c p = s\n                        \\<and> channel i = Some (p, q)\n                        \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow> states c p = s\n                        \\<and> channel i = Some (q, p)\n                        \\<and> length (msgs c i) > 0\n                        \\<and> hd (msgs c i) = Msg msg\n                        \\<and> recv i p q s s' msg\n  | Snapshot p          \\<Rightarrow> \\<not> has_snapshotted c p\n  | RecvMarker i p q    \\<Rightarrow> channel i = Some (q, p)\n                        \\<and> length (msgs c i) > 0\n                        \\<and> hd (msgs c i) = Marker)\""], ["", "definition src where\n  \"src i p \\<equiv> (\\<exists>q. channel i = Some (p, q))\""], ["", "definition dest where\n  \"dest i q \\<equiv> (\\<exists>p. channel i = Some (p, q))\""], ["", "lemma can_occur_Recv:\n  assumes\n    \"can_occur (Recv i p q s s' m) c\"\n  shows\n    \"states c p = s \\<and> channel i = Some (q, p) \\<and> (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m", "have \"\\<exists>xs. msgs c i = Msg m # xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs. msgs c i = Msg m # xs", "using assms can_occur_def"], ["proof (prove)\nusing this:\n  can_occur (Recv i p q s s' m) c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<exists>xs. msgs c i = Msg m # xs", "by (metis (mono_tags, lifting) event.case(3) hd_Cons_tl length_greater_0_conv)"], ["proof (state)\nthis:\n  \\<exists>xs. msgs c i = Msg m # xs\n\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m", "then"], ["proof (chain)\npicking this:\n  \\<exists>xs. msgs c i = Msg m # xs", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>xs. msgs c i = Msg m # xs\n\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m", "using assms can_occur_def"], ["proof (prove)\nusing this:\n  \\<exists>xs. msgs c i = Msg m # xs\n  can_occur (Recv i p q s s' m) c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m", "by auto"], ["proof (state)\nthis:\n  states c p = s \\<and>\n  channel i = Some (q, p) \\<and>\n  (\\<exists>xs. msgs c i = Msg m # xs) \\<and> recv i p q s s' m\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation check_snapshot_occur where\n  \"check_snapshot_occur c c' p \\<equiv>\n    (can_occur (Snapshot p) c \\<and>\n    (ps c' p = Some (states c p))\n  \\<and> (\\<forall>p'. states c p' = states c' p')\n  \\<and> (\\<forall>p'. (p' \\<noteq> p) \\<longrightarrow> ps c' p' = ps c p')\n  \\<and> (\\<forall>i. (\\<exists>q. channel i = Some (p, q)) \\<longrightarrow> msgs c' i = msgs c i @ [Marker])\n  \\<and> (\\<forall>i. (\\<exists>q. channel i = Some (q, p)) \\<longrightarrow> channel_snapshot c' i = (fst (channel_snapshot c i), Recording))\n  \\<and> (\\<forall>i. (\\<nexists>q. channel i = Some (p, q)) \\<longrightarrow> msgs c' i = msgs c i)\n  \\<and> (\\<forall>i. (\\<nexists>q. channel i = Some (q, p)) \\<longrightarrow> channel_snapshot c' i = channel_snapshot c i))\""], ["", "abbreviation check_recv_marker_occur where\n  \"check_recv_marker_occur c c' i p q \\<equiv>\n    (can_occur (RecvMarker i p q) c\n  \\<and> (\\<forall>r. states c r = states c' r)\n  \\<and> (\\<forall>r. (r \\<noteq> p) \\<longrightarrow> process_snapshot c r = process_snapshot c' r)\n  \\<and> (Marker # msgs c' i = msgs c i)\n  \\<and> (channel_snapshot c' i = (fst (channel_snapshot c i), Done))\n  \\<and> (if has_snapshotted c p\n        then (process_snapshot c p = process_snapshot c' p)\n           \\<and> (\\<forall>i'. (i' \\<noteq> i) \\<longrightarrow> msgs c' i' = msgs c i')\n           \\<and> (\\<forall>i'. (i' \\<noteq> i) \\<longrightarrow> channel_snapshot c i' = channel_snapshot c' i')\n        else (process_snapshot c' p = Some (states c p))\n           \\<and> (\\<forall>i'. i' \\<noteq> i \\<and> (\\<exists>r. channel i' = Some (p, r))\n             \\<longrightarrow> msgs c' i' = msgs c i' @ [Marker])\n           \\<and> (\\<forall>i'. i' \\<noteq> i \\<and> (\\<exists>r. channel i' = Some (r, p))\n             \\<longrightarrow> channel_snapshot c' i' = (fst (channel_snapshot c i'), Recording))\n           \\<and> (\\<forall>i'. i' \\<noteq> i \\<and> (\\<nexists>r. channel i' = Some (p, r))\n             \\<longrightarrow> msgs c' i' = msgs c i')\n           \\<and> (\\<forall>i'. i' \\<noteq> i \\<and> (\\<nexists>r. channel i' = Some (r, p))\n             \\<longrightarrow> channel_snapshot c' i' = channel_snapshot c i')))\""], ["", "abbreviation check_trans_occur where\n  \"check_trans_occur c c' p s s'\\<equiv>\n    (can_occur (Trans p s s') c\n  \\<and> (states c' p = s')\n  \\<and> (\\<forall>r. (r \\<noteq> p) \\<longrightarrow> states c' r = states c r)\n  \\<and> (\\<forall>i. msgs c' i = msgs c i)\n  \\<and> (no_snapshot_change c c'))\""], ["", "abbreviation check_send_occur where \n  \"check_send_occur c c' i p q s s' msg \\<equiv>\n    (can_occur (Send i p q s s' msg) c\n  \\<and> (states c' p = s')\n  \\<and> (\\<forall>r. (r \\<noteq> p) \\<longrightarrow> states c' r = states c r)\n  \\<and> (msgs c' i = msgs c i @ [Msg msg])\n  \\<and> (\\<forall>i'. i \\<noteq> i' \\<longrightarrow> msgs c' i' = msgs c i')\n  \\<and> (no_snapshot_change c c'))\""], ["", "abbreviation check_recv_occur where\n  \"check_recv_occur c c' i p q s s' msg \\<equiv>\n    (can_occur (Recv i p q s s' msg) c\n  \\<and> (states c p = s \\<and> states c' p = s')\n  \\<and> (\\<forall>r. (r \\<noteq> p) \\<longrightarrow> states c' r = states c r)\n  \\<and> (msgs c i = Msg msg # msgs c' i)\n  \\<and> (\\<forall>i'. i \\<noteq> i' \\<longrightarrow> msgs c' i' = msgs c i')\n  \\<and> (\\<forall>r. process_snapshot c r = process_snapshot c' r)\n  \\<and> (\\<forall>i'. i' \\<noteq> i \\<longrightarrow> channel_snapshot c i' = channel_snapshot c' i')\n  \\<and> (if snd (channel_snapshot c i) = Recording\n     then channel_snapshot c' i = (fst (channel_snapshot c i) @ [msg], Recording)\n     else channel_snapshot c i = channel_snapshot c' i))\""], ["", "text \\<open>The \\emph{next} predicate lets us express configuration transitions\nusing events. The predicate $next(s_1, e, s_2)$ denotes the transition\nof the configuration $s_1$ to $s_2$ via the event $e$. It ensures that\n$e$ can occur in state $s_1$ and the state $s_2$ is correctly constructed\nfrom $s_1$.\\<close>"], ["", "primrec \"next\" ::\n  \"('p, 's, 'm) configuration\n  \\<Rightarrow> ('p, 's, 'm) event\n  \\<Rightarrow> ('p, 's, 'm) configuration\n  \\<Rightarrow> bool\"\n  (\"_ \\<turnstile> _ \\<mapsto> _\" [70, 70, 70]) where\n    next_snapshot: \"c \\<turnstile> Snapshot p \\<mapsto> c' =\n      check_snapshot_occur c c' p\"\n  | next_recv_marker: \"c \\<turnstile> RecvMarker i p q \\<mapsto> c' =\n      check_recv_marker_occur c c' i p q\"\n  | next_trans: \"c \\<turnstile> Trans p s s' \\<mapsto> c' =\n      check_trans_occur c c' p s s'\"\n  | next_send: \"c \\<turnstile> Send i p q s s' msg \\<mapsto> c' =\n      check_send_occur c c' i p q s s' msg\"\n  | next_recv: \"c \\<turnstile> Recv i p q s s' msg \\<mapsto> c' =\n      check_recv_occur c c' i p q s s' msg\""], ["", "text \\<open>Useful lemmas about state transitions\\<close>"], ["", "lemma state_and_event_determine_next:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"c \\<turnstile> ev \\<mapsto> c''\"\n  shows\n    \"c' = c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c' = c''", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "case (Snapshot p)"], ["proof (state)\nthis:\n  ev = Snapshot p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot p", "have \"states c' = states c''\""], ["proof (prove)\nusing this:\n  ev = Snapshot p\n\ngoal (1 subgoal):\n 1. states c' = states c''", "using assms"], ["proof (prove)\nusing this:\n  ev = Snapshot p\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n\ngoal (1 subgoal):\n 1. states c' = states c''", "by auto"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "have \"msgs c' = msgs c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' = msgs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "show \"msgs c' i = msgs c'' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' i = msgs c'' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs c' i = msgs c'' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs c'' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs c' i = msgs c'' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs c'' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c'' i", "using Snapshot assms"], ["proof (prove)\nusing this:\n  channel i = None\n  ev = Snapshot p\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c'' i", "by auto"], ["proof (state)\nthis:\n  msgs c' i = msgs c'' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs c'' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs c'' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs c'' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain r s where \"channel i = Some (r, s)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c' i = msgs c'' i", "with assms Snapshot"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Snapshot p\n  channel i = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Snapshot p\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c'' i", "by (cases \"r = p\", simp_all)"], ["proof (state)\nthis:\n  msgs c' i = msgs c'' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs c'' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "have \"process_snapshot c' = process_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' = ps c''", "by (metis Snapshot assms next_snapshot ext)"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "have \"channel_snapshot c' = channel_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' = cs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs c' x = cs c'' x", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs c' x = cs c'' x", "show \"channel_snapshot c' i = channel_snapshot c'' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' i = cs c'' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs c' i = cs c'' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs c'' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> cs c' i = cs c'' i\n 2. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs c'' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs c' i = cs c'' i", "using assms Snapshot"], ["proof (prove)\nusing this:\n  channel i = None\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Snapshot p\n\ngoal (1 subgoal):\n 1. cs c' i = cs c'' i", "by simp"], ["proof (state)\nthis:\n  cs c' i = cs c'' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs c'' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs c'' i", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs c'' i", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain r s where \"channel i = Some (r, s)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> cs c' i = cs c'' i", "with assms Snapshot"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Snapshot p\n  channel i = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Snapshot p\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. cs c' i = cs c'' i", "by (cases \"s = p\", simp_all)"], ["proof (state)\nthis:\n  cs c' i = cs c'' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i = cs c'' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' = cs c''\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x4. ev = Snapshot x4 \\<Longrightarrow> c' = c''\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "ultimately"], ["proof (chain)\npicking this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''", "show \"c' = c''\""], ["proof (prove)\nusing this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''\n\ngoal (1 subgoal):\n 1. c' = c''", "by simp"], ["proof (state)\nthis:\n  c' = c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "case (RecvMarker i p)"], ["proof (state)\nthis:\n  ev = RecvMarker i p x53_\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i p x53_", "have \"states c' = states c''\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i p x53_\n\ngoal (1 subgoal):\n 1. states c' = states c''", "using assms"], ["proof (prove)\nusing this:\n  ev = RecvMarker i p x53_\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n\ngoal (1 subgoal):\n 1. states c' = states c''", "by auto"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "have \"msgs c' = msgs c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' = msgs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "show \"msgs c' i' = msgs c'' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "proof (cases \"i' = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "case True"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "then"], ["proof (chain)\npicking this:\n  i' = i", "have \"Marker # msgs c' i' = msgs c i'\""], ["proof (prove)\nusing this:\n  i' = i\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i' = msgs c i'", "using assms RecvMarker"], ["proof (prove)\nusing this:\n  i' = i\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i' = msgs c i'", "by simp"], ["proof (state)\nthis:\n  Marker # msgs c' i' = msgs c i'\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "also"], ["proof (state)\nthis:\n  Marker # msgs c' i' = msgs c i'\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "have \"... = Marker # msgs c'' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i' = Marker # msgs c'' i'", "using assms RecvMarker \\<open>i' = i\\<close>"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  i' = i\n\ngoal (1 subgoal):\n 1. msgs c i' = Marker # msgs c'' i'", "by simp"], ["proof (state)\nthis:\n  msgs c i' = Marker # msgs c'' i'\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "finally"], ["proof (chain)\npicking this:\n  Marker # msgs c' i' = Marker # msgs c'' i'", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker # msgs c' i' = Marker # msgs c'' i'\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "by simp"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "case False"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> msgs c' i' = msgs c'' i'", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "proof (cases \"has_snapshotted c p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "case True"], ["proof (state)\nthis:\n  ps c p \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "then"], ["proof (chain)\npicking this:\n  ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "using assms RecvMarker \\<open>i' \\<noteq> i\\<close>"], ["proof (prove)\nusing this:\n  ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "by simp"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "proof (cases \"channel i' = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' = None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "case True"], ["proof (state)\nthis:\n  channel i' = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' = None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "then"], ["proof (chain)\npicking this:\n  channel i' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = None\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "using assms RecvMarker \\<open>i' \\<noteq> i\\<close> no_snap"], ["proof (prove)\nusing this:\n  channel i' = None\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  i' \\<noteq> i\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "by simp"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "case False"], ["proof (state)\nthis:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "then"], ["proof (chain)\npicking this:\n  channel i' \\<noteq> None", "obtain r s where \"channel i' = Some (r, s)\""], ["proof (prove)\nusing this:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i' = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c' i' = msgs c'' i'", "with assms RecvMarker no_snap \\<open>i' \\<noteq> i\\<close>"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  \\<not> ps c p \\<noteq> None\n  i' \\<noteq> i\n  channel i' = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  \\<not> ps c p \\<noteq> None\n  i' \\<noteq> i\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "by (cases \"r = p\"; simp_all)"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "have \"process_snapshot c' = process_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' = ps c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. ps c' x = ps c'' x", "fix r"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. ps c' x = ps c'' x", "show \"ps c' r = ps c'' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' r = ps c'' r", "proof (cases \"r \\<noteq> p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r\n 2. \\<not> r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r", "case True"], ["proof (state)\nthis:\n  r \\<noteq> p\n\ngoal (2 subgoals):\n 1. r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r\n 2. \\<not> r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r", "then"], ["proof (chain)\npicking this:\n  r \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. ps c' r = ps c'' r", "using assms RecvMarker"], ["proof (prove)\nusing this:\n  r \\<noteq> p\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n\ngoal (1 subgoal):\n 1. ps c' r = ps c'' r", "by simp"], ["proof (state)\nthis:\n  ps c' r = ps c'' r\n\ngoal (1 subgoal):\n 1. \\<not> r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r", "case False"], ["proof (state)\nthis:\n  \\<not> r \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<not> r \\<noteq> p \\<Longrightarrow> ps c' r = ps c'' r", "with assms RecvMarker \\<open>~ r \\<noteq> p\\<close>"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  \\<not> r \\<noteq> p\n  \\<not> r \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  \\<not> r \\<noteq> p\n  \\<not> r \\<noteq> p\n\ngoal (1 subgoal):\n 1. ps c' r = ps c'' r", "by (cases \"has_snapshotted c r\", auto)"], ["proof (state)\nthis:\n  ps c' r = ps c'' r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ps c' r = ps c'' r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "have \"channel_snapshot c' = channel_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' = cs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs c' x = cs c'' x", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs c' x = cs c'' x", "show \"cs c' i' = cs c'' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "proof (cases \"i' = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "case True"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  i' = i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' = i\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "using assms RecvMarker"], ["proof (prove)\nusing this:\n  i' = i\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "by simp"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "case False"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "proof (cases \"has_snapshotted c p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "case True"], ["proof (state)\nthis:\n  ps c p \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "using assms RecvMarker \\<open>i' \\<noteq> i\\<close>"], ["proof (prove)\nusing this:\n  ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "by simp"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "proof (cases \"channel i' = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' = None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "case True"], ["proof (state)\nthis:\n  channel i' = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' = None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  channel i' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = None\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "using assms RecvMarker \\<open>i' \\<noteq> i\\<close> no_snap"], ["proof (prove)\nusing this:\n  channel i' = None\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  i' \\<noteq> i\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "by simp"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "case False"], ["proof (state)\nthis:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  channel i' \\<noteq> None", "obtain r s where \"channel i' = Some (r, s)\""], ["proof (prove)\nusing this:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i' = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> cs c' i' = cs c'' i'", "with assms RecvMarker no_snap \\<open>i' \\<noteq> i\\<close>"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  \\<not> ps c p \\<noteq> None\n  i' \\<noteq> i\n  channel i' = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = RecvMarker i p x53_\n  \\<not> ps c p \\<noteq> None\n  i' \\<noteq> i\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "by (cases \"s = p\"; simp_all)"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' = cs c''\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow> c' = c''", "ultimately"], ["proof (chain)\npicking this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''", "show \"c' = c''\""], ["proof (prove)\nusing this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''\n\ngoal (1 subgoal):\n 1. c' = c''", "by simp"], ["proof (state)\nthis:\n  c' = c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "case (Trans p s s')"], ["proof (state)\nthis:\n  ev = Trans p s s'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "then"], ["proof (chain)\npicking this:\n  ev = Trans p s s'", "have \"states c' = states c''\""], ["proof (prove)\nusing this:\n  ev = Trans p s s'\n\ngoal (1 subgoal):\n 1. states c' = states c''", "by (metis (no_types, lifting) assms next_trans ext)"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"msgs c' = msgs c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' = msgs c''", "using assms Trans"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Trans p s s'\n\ngoal (1 subgoal):\n 1. msgs c' = msgs c''", "by auto"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"process_snapshot c' = process_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' = ps c''", "using assms Trans"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Trans p s s'\n\ngoal (1 subgoal):\n 1. ps c' = ps c''", "by auto"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"channel_snapshot c' = channel_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' = cs c''", "using assms Trans"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Trans p s s'\n\ngoal (1 subgoal):\n 1. cs c' = cs c''", "by auto"], ["proof (state)\nthis:\n  cs c' = cs c''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13. ev = Trans x11 x12 x13 \\<Longrightarrow> c' = c''\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "ultimately"], ["proof (chain)\npicking this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''", "show \"c' = c''\""], ["proof (prove)\nusing this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''\n\ngoal (1 subgoal):\n 1. c' = c''", "by simp"], ["proof (state)\nthis:\n  c' = c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "case (Send i p s s' m)"], ["proof (state)\nthis:\n  ev = Send i p s s' m x26_\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "then"], ["proof (chain)\npicking this:\n  ev = Send i p s s' m x26_", "have \"states c' = states c''\""], ["proof (prove)\nusing this:\n  ev = Send i p s s' m x26_\n\ngoal (1 subgoal):\n 1. states c' = states c''", "by (metis (no_types, lifting) assms next_send ext)"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"msgs c' = msgs c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' = msgs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "from assms Send"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Send i p s s' m x26_", "show \"msgs c' i' = msgs c'' i'\""], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Send i p s s' m x26_\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "by (cases \"i' = i\", simp_all)"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"process_snapshot c' = process_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' = ps c''", "using assms Send"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Send i p s s' m x26_\n\ngoal (1 subgoal):\n 1. ps c' = ps c''", "by auto"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"channel_snapshot c' = channel_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' = cs c''", "using assms Send"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Send i p s s' m x26_\n\ngoal (1 subgoal):\n 1. cs c' = cs c''", "by auto"], ["proof (state)\nthis:\n  cs c' = cs c''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> c' = c''\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "ultimately"], ["proof (chain)\npicking this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''", "show \"c' = c''\""], ["proof (prove)\nusing this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''\n\ngoal (1 subgoal):\n 1. c' = c''", "by simp"], ["proof (state)\nthis:\n  c' = c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "case (Recv i p s s' m)"], ["proof (state)\nthis:\n  ev = Recv i p s s' m x36_\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "then"], ["proof (chain)\npicking this:\n  ev = Recv i p s s' m x36_", "have \"states c' = states c''\""], ["proof (prove)\nusing this:\n  ev = Recv i p s s' m x36_\n\ngoal (1 subgoal):\n 1. states c' = states c''", "by (metis (no_types, lifting) assms next_recv ext)"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  states c' = states c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"msgs c' = msgs c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' = msgs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. msgs c' x = msgs c'' x", "from assms Recv"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Recv i p s s' m x36_", "show \"msgs c' i' = msgs c'' i'\""], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Recv i p s s' m x36_\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c'' i'", "by (cases \"i' = i\", simp_all)"], ["proof (state)\nthis:\n  msgs c' i' = msgs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  msgs c' = msgs c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"process_snapshot c' = process_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' = ps c''", "using assms Recv"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Recv i p s s' m x36_\n\ngoal (1 subgoal):\n 1. ps c' = ps c''", "by auto"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "moreover"], ["proof (state)\nthis:\n  ps c' = ps c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "have \"channel_snapshot c' = channel_snapshot c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' = cs c''", "proof (rule ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs c' x = cs c'' x", "fix i'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. cs c' x = cs c'' x", "show \"cs c' i' = cs c'' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "proof (cases \"i' \\<noteq> i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. \\<not> i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "case True"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (2 subgoals):\n 1. i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'\n 2. \\<not> i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "using assms Recv"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Recv i p s s' m x36_\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "by simp"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "case False"], ["proof (state)\nthis:\n  \\<not> i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<not> i' \\<noteq> i \\<Longrightarrow> cs c' i' = cs c'' i'", "with assms Recv"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Recv i p s s' m x36_\n  \\<not> i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  c \\<turnstile> ev \\<mapsto> c''\n  ev = Recv i p s s' m x36_\n  \\<not> i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c' i' = cs c'' i'", "by (cases \"snd (cs c i') = Recording\", auto)"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' i' = cs c'' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c' = cs c''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> c' = c''", "ultimately"], ["proof (chain)\npicking this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''", "show \"c' = c''\""], ["proof (prove)\nusing this:\n  states c' = states c''\n  msgs c' = msgs c''\n  ps c' = ps c''\n  cs c' = cs c''\n\ngoal (1 subgoal):\n 1. c' = c''", "by simp"], ["proof (state)\nthis:\n  c' = c''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exists_next_if_can_occur:\n  assumes\n    \"can_occur ev c\"\n  shows\n    \"\\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case (Snapshot p)"], ["proof (state)\nthis:\n  ev = Snapshot p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = states c,\n              msgs = %i. if (\\<exists>q. channel i = Some (p, q)) then msgs c i @ [Marker] else msgs c i,\n              process_snapshot = %r. if r = p then Some (states c p) else ps c r,\n              channel_snapshot = %i. if (\\<exists>q. channel i = Some (q, p)) then (fst (cs c i), Recording) else cs c i \\<rparr>\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                   msgs =\n                                     \\<lambda>i.\n  if \\<exists>q. channel i = Some (p, q) then msgs c i @ [Marker]\n  else msgs c i,\n                                   process_snapshot =\n                                     \\<lambda>r.\n  if r = p then Some (states c p) else ps c r,\n                                   channel_snapshot =\n                                     \\<lambda>i.\n  if \\<exists>q. channel i = Some (q, p) then (fst (cs c i), Recording)\n  else cs c i\\<rparr>", "using Snapshot assms"], ["proof (prove)\nusing this:\n  ev = Snapshot p\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                   msgs =\n                                     \\<lambda>i.\n  if \\<exists>q. channel i = Some (p, q) then msgs c i @ [Marker]\n  else msgs c i,\n                                   process_snapshot =\n                                     \\<lambda>r.\n  if r = p then Some (states c p) else ps c r,\n                                   channel_snapshot =\n                                     \\<lambda>i.\n  if \\<exists>q. channel i = Some (q, p) then (fst (cs c i), Recording)\n  else cs c i\\<rparr>", "by auto"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i.\nif \\<exists>q. channel i = Some (p, q) then msgs c i @ [Marker]\nelse msgs c i,\n                                 process_snapshot =\n                                   \\<lambda>r.\nif r = p then Some (states c p) else ps c r,\n                                 channel_snapshot =\n                                   \\<lambda>i.\nif \\<exists>q. channel i = Some (q, p) then (fst (cs c i), Recording)\nelse cs c i\\<rparr>\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i.\nif \\<exists>q. channel i = Some (p, q) then msgs c i @ [Marker]\nelse msgs c i,\n                                 process_snapshot =\n                                   \\<lambda>r.\nif r = p then Some (states c p) else ps c r,\n                                 channel_snapshot =\n                                   \\<lambda>i.\nif \\<exists>q. channel i = Some (q, p) then (fst (cs c i), Recording)\nelse cs c i\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i.\nif \\<exists>q. channel i = Some (p, q) then msgs c i @ [Marker]\nelse msgs c i,\n                                 process_snapshot =\n                                   \\<lambda>r.\nif r = p then Some (states c p) else ps c r,\n                                 channel_snapshot =\n                                   \\<lambda>i.\nif \\<exists>q. channel i = Some (q, p) then (fst (cs c i), Recording)\nelse cs c i\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case (RecvMarker i p q)"], ["proof (state)\nthis:\n  ev = RecvMarker i p q\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "proof (cases \"has_snapshotted c p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case True"], ["proof (state)\nthis:\n  ps c p \\<noteq> None\n\ngoal (2 subgoals):\n 1. ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = states c,\n                msgs = %i'. if i = i' then tl (msgs c i') else msgs c i',\n                process_snapshot = ps c,\n                channel_snapshot = %i'. if i = i' then (fst (cs c i'), Done) else cs c i' \\<rparr>\""], ["proof (state)\ngoal (2 subgoals):\n 1. ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"msgs c i = Marker # msgs ?c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i =\n    Marker #\n    msgs\n     \\<lparr>states = states c,\n        msgs = \\<lambda>i'. if i = i' then tl (msgs c i') else msgs c i',\n        process_snapshot = ps c,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n     i", "using assms can_occur_def RecvMarker hd_Cons_tl"], ["proof (prove)\nusing this:\n  can_occur ev c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev = RecvMarker i p q\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs # tl ?xs = ?xs\n\ngoal (1 subgoal):\n 1. msgs c i =\n    Marker #\n    msgs\n     \\<lparr>states = states c,\n        msgs = \\<lambda>i'. if i = i' then tl (msgs c i') else msgs c i',\n        process_snapshot = ps c,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n     i", "by fastforce"], ["proof (state)\nthis:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs = \\<lambda>i'. if i = i' then tl (msgs c i') else msgs c i',\n      process_snapshot = ps c,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n   i\n\ngoal (2 subgoals):\n 1. ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs = \\<lambda>i'. if i = i' then tl (msgs c i') else msgs c i',\n      process_snapshot = ps c,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n   i", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\nusing this:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs = \\<lambda>i'. if i = i' then tl (msgs c i') else msgs c i',\n      process_snapshot = ps c,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n   i\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot =\n                                     \\<lambda>i'.\n  if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>", "using True RecvMarker assms"], ["proof (prove)\nusing this:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs = \\<lambda>i'. if i = i' then tl (msgs c i') else msgs c i',\n      process_snapshot = ps c,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n   i\n  ps c p \\<noteq> None\n  ev = RecvMarker i p q\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot =\n                                     \\<lambda>i'.\n  if i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n\ngoal (2 subgoals):\n 1. ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i'), Done) else cs c i'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case False"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = states c,\n                msgs = %i'. if i' = i\n                                  then tl (msgs c i')\n                                  else if (\\<exists>r. channel i' = Some (p, r))\n                                         then msgs c i' @ [Marker]\n                                         else msgs c i',\n                process_snapshot = %r. if r = p then Some (states c r) else ps c r,\n                channel_snapshot = %i'. if i = i' then (fst (cs c i'), Done)\n                                              else if (\\<exists>r. channel i' = Some (r, p))\n                                                     then (fst (cs c i'), Recording)\n                                                     else cs c i' \\<rparr>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"msgs c i = Marker # msgs ?c i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i =\n    Marker #\n    msgs\n     \\<lparr>states = states c,\n        msgs =\n          \\<lambda>i'.\n             if i' = i then tl (msgs c i')\n             else if \\<exists>r. channel i' = Some (p, r)\n                  then msgs c i' @ [Marker] else msgs c i',\n        process_snapshot =\n          \\<lambda>r. if r = p then Some (states c r) else ps c r,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done)\n             else if \\<exists>r. channel i' = Some (r, p)\n                  then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n     i", "using assms can_occur_def RecvMarker hd_Cons_tl"], ["proof (prove)\nusing this:\n  can_occur ev c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev = RecvMarker i p q\n  ?xs \\<noteq> [] \\<Longrightarrow> hd ?xs # tl ?xs = ?xs\n\ngoal (1 subgoal):\n 1. msgs c i =\n    Marker #\n    msgs\n     \\<lparr>states = states c,\n        msgs =\n          \\<lambda>i'.\n             if i' = i then tl (msgs c i')\n             else if \\<exists>r. channel i' = Some (p, r)\n                  then msgs c i' @ [Marker] else msgs c i',\n        process_snapshot =\n          \\<lambda>r. if r = p then Some (states c r) else ps c r,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done)\n             else if \\<exists>r. channel i' = Some (r, p)\n                  then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n     i", "by fastforce"], ["proof (state)\nthis:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs =\n        \\<lambda>i'.\n           if i' = i then tl (msgs c i')\n           else if \\<exists>r. channel i' = Some (p, r)\n                then msgs c i' @ [Marker] else msgs c i',\n      process_snapshot =\n        \\<lambda>r. if r = p then Some (states c r) else ps c r,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done)\n           else if \\<exists>r. channel i' = Some (r, p)\n                then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   i\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "moreover"], ["proof (state)\nthis:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs =\n        \\<lambda>i'.\n           if i' = i then tl (msgs c i')\n           else if \\<exists>r. channel i' = Some (p, r)\n                then msgs c i' @ [Marker] else msgs c i',\n      process_snapshot =\n        \\<lambda>r. if r = p then Some (states c r) else ps c r,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done)\n           else if \\<exists>r. channel i' = Some (r, p)\n                then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   i\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"ps ?c p = Some (states c p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps \\<lparr>states = states c,\n          msgs =\n            \\<lambda>i'.\n               if i' = i then tl (msgs c i')\n               else if \\<exists>r. channel i' = Some (p, r)\n                    then msgs c i' @ [Marker] else msgs c i',\n          process_snapshot =\n            \\<lambda>r. if r = p then Some (states c r) else ps c r,\n          channel_snapshot =\n            \\<lambda>i'.\n               if i = i' then (fst (cs c i'), Done)\n               else if \\<exists>r. channel i' = Some (r, p)\n                    then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n     p =\n    Some (states c p)", "by simp"], ["proof (state)\nthis:\n  ps \\<lparr>states = states c,\n        msgs =\n          \\<lambda>i'.\n             if i' = i then tl (msgs c i')\n             else if \\<exists>r. channel i' = Some (p, r)\n                  then msgs c i' @ [Marker] else msgs c i',\n        process_snapshot =\n          \\<lambda>r. if r = p then Some (states c r) else ps c r,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done)\n             else if \\<exists>r. channel i' = Some (r, p)\n                  then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   p =\n  Some (states c p)\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "ultimately"], ["proof (chain)\npicking this:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs =\n        \\<lambda>i'.\n           if i' = i then tl (msgs c i')\n           else if \\<exists>r. channel i' = Some (p, r)\n                then msgs c i' @ [Marker] else msgs c i',\n      process_snapshot =\n        \\<lambda>r. if r = p then Some (states c r) else ps c r,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done)\n           else if \\<exists>r. channel i' = Some (r, p)\n                then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   i\n  ps \\<lparr>states = states c,\n        msgs =\n          \\<lambda>i'.\n             if i' = i then tl (msgs c i')\n             else if \\<exists>r. channel i' = Some (p, r)\n                  then msgs c i' @ [Marker] else msgs c i',\n        process_snapshot =\n          \\<lambda>r. if r = p then Some (states c r) else ps c r,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done)\n             else if \\<exists>r. channel i' = Some (r, p)\n                  then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   p =\n  Some (states c p)", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\nusing this:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs =\n        \\<lambda>i'.\n           if i' = i then tl (msgs c i')\n           else if \\<exists>r. channel i' = Some (p, r)\n                then msgs c i' @ [Marker] else msgs c i',\n      process_snapshot =\n        \\<lambda>r. if r = p then Some (states c r) else ps c r,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done)\n           else if \\<exists>r. channel i' = Some (r, p)\n                then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   i\n  ps \\<lparr>states = states c,\n        msgs =\n          \\<lambda>i'.\n             if i' = i then tl (msgs c i')\n             else if \\<exists>r. channel i' = Some (p, r)\n                  then msgs c i' @ [Marker] else msgs c i',\n        process_snapshot =\n          \\<lambda>r. if r = p then Some (states c r) else ps c r,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done)\n             else if \\<exists>r. channel i' = Some (r, p)\n                  then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   p =\n  Some (states c p)\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i' = i then tl (msgs c i')\n  else if \\<exists>r. channel i' = Some (p, r) then msgs c i' @ [Marker]\n       else msgs c i',\n                                   process_snapshot =\n                                     \\<lambda>r.\n  if r = p then Some (states c r) else ps c r,\n                                   channel_snapshot =\n                                     \\<lambda>i'.\n  if i = i' then (fst (cs c i'), Done)\n  else if \\<exists>r. channel i' = Some (r, p)\n       then (fst (cs c i'), Recording) else cs c i'\\<rparr>", "using RecvMarker assms False"], ["proof (prove)\nusing this:\n  msgs c i =\n  Marker #\n  msgs\n   \\<lparr>states = states c,\n      msgs =\n        \\<lambda>i'.\n           if i' = i then tl (msgs c i')\n           else if \\<exists>r. channel i' = Some (p, r)\n                then msgs c i' @ [Marker] else msgs c i',\n      process_snapshot =\n        \\<lambda>r. if r = p then Some (states c r) else ps c r,\n      channel_snapshot =\n        \\<lambda>i'.\n           if i = i' then (fst (cs c i'), Done)\n           else if \\<exists>r. channel i' = Some (r, p)\n                then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   i\n  ps \\<lparr>states = states c,\n        msgs =\n          \\<lambda>i'.\n             if i' = i then tl (msgs c i')\n             else if \\<exists>r. channel i' = Some (p, r)\n                  then msgs c i' @ [Marker] else msgs c i',\n        process_snapshot =\n          \\<lambda>r. if r = p then Some (states c r) else ps c r,\n        channel_snapshot =\n          \\<lambda>i'.\n             if i = i' then (fst (cs c i'), Done)\n             else if \\<exists>r. channel i' = Some (r, p)\n                  then (fst (cs c i'), Recording) else cs c i'\\<rparr>\n   p =\n  Some (states c p)\n  ev = RecvMarker i p q\n  can_occur ev c\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i' = i then tl (msgs c i')\n  else if \\<exists>r. channel i' = Some (p, r) then msgs c i' @ [Marker]\n       else msgs c i',\n                                   process_snapshot =\n                                     \\<lambda>r.\n  if r = p then Some (states c r) else ps c r,\n                                   channel_snapshot =\n                                     \\<lambda>i'.\n  if i = i' then (fst (cs c i'), Done)\n  else if \\<exists>r. channel i' = Some (r, p)\n       then (fst (cs c i'), Recording) else cs c i'\\<rparr>", "by auto"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i'.\nif i' = i then tl (msgs c i')\nelse if \\<exists>r. channel i' = Some (p, r) then msgs c i' @ [Marker]\n     else msgs c i',\n                                 process_snapshot =\n                                   \\<lambda>r.\nif r = p then Some (states c r) else ps c r,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i'), Done)\nelse if \\<exists>r. channel i' = Some (r, p) then (fst (cs c i'), Recording)\n     else cs c i'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None \\<Longrightarrow>\n    \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i'.\nif i' = i then tl (msgs c i')\nelse if \\<exists>r. channel i' = Some (p, r) then msgs c i' @ [Marker]\n     else msgs c i',\n                                 process_snapshot =\n                                   \\<lambda>r.\nif r = p then Some (states c r) else ps c r,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i'), Done)\nelse if \\<exists>r. channel i' = Some (r, p) then (fst (cs c i'), Recording)\n     else cs c i'\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states = states c,\n                                 msgs =\n                                   \\<lambda>i'.\nif i' = i then tl (msgs c i')\nelse if \\<exists>r. channel i' = Some (p, r) then msgs c i' @ [Marker]\n     else msgs c i',\n                                 process_snapshot =\n                                   \\<lambda>r.\nif r = p then Some (states c r) else ps c r,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i'), Done)\nelse if \\<exists>r. channel i' = Some (r, p) then (fst (cs c i'), Recording)\n     else cs c i'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case (Trans p s s')"], ["proof (state)\nthis:\n  ev = Trans p s s'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = %r. if r = p then s' else states c r,\n              msgs = msgs c,\n              process_snapshot = ps c,\n              channel_snapshot = cs c \\<rparr>\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs = msgs c, process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "using Trans assms"], ["proof (prove)\nusing this:\n  ev = Trans p s s'\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs = msgs c, process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "by auto"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs = msgs c, process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs = msgs c, process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs = msgs c, process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case (Send i p q s s' msg)"], ["proof (state)\nthis:\n  ev = Send i p q s s' msg\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = %r. if r = p then s' else states c r,\n              msgs = %i'. if i = i' then msgs c i' @ [Msg msg] else msgs c i',\n              process_snapshot = ps c,\n              channel_snapshot = cs c \\<rparr>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then msgs c i' @ [Msg msg] else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "using Send assms"], ["proof (prove)\nusing this:\n  ev = Send i p q s s' msg\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then msgs c i' @ [Msg msg] else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "by auto"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then msgs c i' @ [Msg msg] else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then msgs c i' @ [Msg msg] else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then msgs c i' @ [Msg msg] else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case (Recv i p q s s' msg)"], ["proof (state)\nthis:\n  ev = Recv i p q s s' msg\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  ev = Recv i p q s s' msg", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i p q s s' msg\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "proof (cases \"snd (cs c i)\")"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case Recording"], ["proof (state)\nthis:\n  snd (cs c i) = Recording\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = %r. if r = p then s' else states c r,\n                msgs = %i'. if i = i' then tl (msgs c i') else msgs c i',\n                process_snapshot = ps c,\n                channel_snapshot = %i'. if i = i'\n                                              then (fst (cs c i') @ [msg], Recording)\n                                              else cs c i'\\<rparr>\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot =\n                                     \\<lambda>i'.\n  if i = i' then (fst (cs c i') @ [msg], Recording) else cs c i'\\<rparr>", "using Recv Recording assms can_occur_Recv"], ["proof (prove)\nusing this:\n  ev = Recv i p q s s' msg\n  snd (cs c i) = Recording\n  can_occur ev c\n  can_occur (Recv ?i ?p ?q ?s ?s' ?m) ?c \\<Longrightarrow>\n  states ?c ?p = ?s \\<and>\n  channel ?i = Some (?q, ?p) \\<and>\n  (\\<exists>xs. msgs ?c ?i = Msg ?m # xs) \\<and> recv ?i ?p ?q ?s ?s' ?m\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot =\n                                     \\<lambda>i'.\n  if i = i' then (fst (cs c i') @ [msg], Recording) else cs c i'\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i') @ [msg], Recording) else cs c i'\\<rparr>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Recording\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 3. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i') @ [msg], Recording) else cs c i'\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot =\n                                   \\<lambda>i'.\nif i = i' then (fst (cs c i') @ [msg], Recording) else cs c i'\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case Done"], ["proof (state)\nthis:\n  snd (cs c i) = Done\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = %r. if r = p then s' else states c r,\n                msgs = %i'. if i = i' then tl (msgs c i') else msgs c i',\n                process_snapshot = ps c,\n                channel_snapshot = cs c \\<rparr>\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "using Done Recv assms can_occur_Recv"], ["proof (prove)\nusing this:\n  snd (cs c i) = Done\n  ev = Recv i p q s s' msg\n  can_occur ev c\n  can_occur (Recv ?i ?p ?q ?s ?s' ?m) ?c \\<Longrightarrow>\n  states ?c ?p = ?s \\<and>\n  channel ?i = Some (?q, ?p) \\<and>\n  (\\<exists>xs. msgs ?c ?i = Msg ?m # xs) \\<and> recv ?i ?p ?q ?s ?s' ?m\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n 2. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = Done\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "case NotStarted"], ["proof (state)\nthis:\n  snd (cs c i) = NotStarted\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "let ?c = \"\\<lparr> states = %r. if r = p then s' else states c r,\n                msgs = %i'. if i = i' then tl (msgs c i') else msgs c i',\n                process_snapshot = ps c,\n                channel_snapshot = cs c \\<rparr>\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "have \"c \\<turnstile> ev \\<mapsto> ?c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "using NotStarted Recv assms can_occur_Recv"], ["proof (prove)\nusing this:\n  snd (cs c i) = NotStarted\n  ev = Recv i p q s s' msg\n  can_occur ev c\n  can_occur (Recv ?i ?p ?q ?s ?s' ?m) ?c \\<Longrightarrow>\n  states ?c ?p = ?s \\<and>\n  channel ?i = Some (?q, ?p) \\<and>\n  (\\<exists>xs. msgs ?c ?i = Msg ?m # xs) \\<and> recv ?i ?p ?q ?s ?s' ?m\n\ngoal (1 subgoal):\n 1. c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n    \\<lambda>r. if r = p then s' else states c r,\n                                   msgs =\n                                     \\<lambda>i'.\n  if i = i' then tl (msgs c i') else msgs c i',\n                                   process_snapshot = ps c,\n                                   channel_snapshot = cs c\\<rparr>", "by fastforce"], ["proof (state)\nthis:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv i p q s s' msg; snd (cs c i) = NotStarted\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "then"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> \\<lparr>states =\n  \\<lambda>r. if r = p then s' else states c r,\n                                 msgs =\n                                   \\<lambda>i'.\nif i = i' then tl (msgs c i') else msgs c i',\n                                 process_snapshot = ps c,\n                                 channel_snapshot = cs c\\<rparr>\n\ngoal (1 subgoal):\n 1. \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c'. c \\<turnstile> ev \\<mapsto> c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma exists_exactly_one_following_state:\n  \"can_occur ev c \\<Longrightarrow> \\<exists>!c'. c \\<turnstile> ev \\<mapsto> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev c \\<Longrightarrow>\n    \\<exists>!c'. c \\<turnstile> ev \\<mapsto> c'", "using exists_next_if_can_occur state_and_event_determine_next"], ["proof (prove)\nusing this:\n  can_occur ?ev ?c \\<Longrightarrow>\n  \\<exists>c'. ?c \\<turnstile> ?ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ?c \\<turnstile> ?ev \\<mapsto> ?c''\\<rbrakk>\n  \\<Longrightarrow> ?c' = ?c''\n\ngoal (1 subgoal):\n 1. can_occur ev c \\<Longrightarrow>\n    \\<exists>!c'. c \\<turnstile> ev \\<mapsto> c'", "by blast"], ["", "lemma no_state_change_if_no_event:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev \\<noteq> p\"\n  shows\n    \"states c p = states c' p \\<and> process_snapshot c p = process_snapshot c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = states c' p \\<and> ps c p = ps c' p", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n\ngoal (1 subgoal):\n 1. states c p = states c' p \\<and> ps c p = ps c' p", "by (cases ev, auto)"], ["", "lemma no_msgs_change_if_no_channel:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel i = None\"\n  shows\n    \"msgs c i = msgs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "case (RecvMarker cid p)"], ["proof (state)\nthis:\n  ev = RecvMarker cid p x53_\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid p x53_", "have \"cid \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = RecvMarker cid p x53_\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "using assms RecvMarker can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid p x53_\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = RecvMarker cid p x53_\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  cid \\<noteq> i\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "with assms RecvMarker"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = RecvMarker cid p x53_\n  cid \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = RecvMarker cid p x53_\n  cid \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by (cases \"has_snapshotted c p\", auto)"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "case (Send cid p s s' m)"], ["proof (state)\nthis:\n  ev = Send cid p s s' m x26_\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Send cid p s s' m x26_", "have \"cid \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = Send cid p s s' m x26_\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "using assms Send can_occur_def"], ["proof (prove)\nusing this:\n  ev = Send cid p s s' m x26_\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Send cid p s s' m x26_\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  cid \\<noteq> i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using assms Send"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Send cid p s s' m x26_\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "case (Recv cid p s s' m)"], ["proof (state)\nthis:\n  ev = Recv cid p s s' m x36_\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Recv cid p s s' m x36_", "have \"cid \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = Recv cid p s s' m x36_\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "using assms Recv can_occur_def"], ["proof (prove)\nusing this:\n  ev = Recv cid p s s' m x36_\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Recv cid p s s' m x36_\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  cid \\<noteq> i\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using assms Recv"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Recv cid p s s' m x36_\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by simp"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i\n 2. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> msgs c i = msgs c' i", "qed simp_all"], ["", "lemma no_cs_change_if_no_channel:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel i = None\"\n  shows\n    \"cs c i = cs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "case (RecvMarker cid p)"], ["proof (state)\nthis:\n  ev = RecvMarker cid p x53_\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid p x53_", "have \"cid \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = RecvMarker cid p x53_\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "using assms RecvMarker can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid p x53_\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = RecvMarker cid p x53_\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  cid \\<noteq> i\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "with assms RecvMarker"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = RecvMarker cid p x53_\n  cid \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = RecvMarker cid p x53_\n  cid \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "by (cases \"has_snapshotted c p\", auto)"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "case (Send cid p s s' m)"], ["proof (state)\nthis:\n  ev = Send cid p s s' m x26_\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Send cid p s s' m x26_", "have \"cid \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = Send cid p s s' m x26_\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "using assms Send can_occur_def"], ["proof (prove)\nusing this:\n  ev = Send cid p s s' m x26_\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Send cid p s s' m x26_\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  cid \\<noteq> i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "using assms Send"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Send cid p s s' m x26_\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "by auto"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "case (Recv cid p s s' m)"], ["proof (state)\nthis:\n  ev = Recv cid p s s' m x36_\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Recv cid p s s' m x36_", "have \"cid \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = Recv cid p s s' m x36_\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "using assms Recv can_occur_def"], ["proof (prove)\nusing this:\n  ev = Recv cid p s s' m x36_\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Recv cid p s s' m x36_\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. cid \\<noteq> i", "by fastforce"], ["proof (state)\nthis:\n  cid \\<noteq> i\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 3. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "using assms Recv"], ["proof (prove)\nusing this:\n  cid \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = None\n  ev = Recv cid p s s' m x36_\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "by simp"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i\n 2. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; channel i = None;\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> cs c i = cs c' i", "qed simp_all"], ["", "lemma no_msg_change_if_no_event:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"isSend ev \\<longrightarrow> getId ev \\<noteq> i\" and\n    \"isRecv ev \\<longrightarrow> getId ev \\<noteq> i\" and\n    \"regular_event ev\"\n  shows\n    \"msgs c i = msgs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs c i = msgs c' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs c i = msgs c' i", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. channel i = None \\<Longrightarrow> msgs c i = msgs c' i\n 2. channel i \\<noteq> None \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using assms no_msgs_change_if_no_channel"], ["proof (prove)\nusing this:\n  channel i = None\n  c \\<turnstile> ev \\<mapsto> c'\n  isSend ev \\<longrightarrow> getId ev \\<noteq> i\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by simp"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c i = msgs c' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c i = msgs c' i", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  isSend ev \\<longrightarrow> getId ev \\<noteq> i\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. channel i \\<noteq> None \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c i = msgs c' i\n 2. isSend ev \\<Longrightarrow> msgs c i = msgs c' i\n 3. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "assume \"isTrans ev\""], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c i = msgs c' i\n 2. isSend ev \\<Longrightarrow> msgs c i = msgs c' i\n 3. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by (metis assms(1) event.collapse(1) next_trans)"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i = msgs c' i\n 2. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i = msgs c' i\n 2. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "assume \"isSend ev\""], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i = msgs c' i\n 2. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  isSend ev", "obtain i' r s u u' m where Send: \"ev = Send i' r s u u' m\""], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s u u' m.\n        ev = Send i' r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isSend_def)"], ["proof (state)\nthis:\n  ev = Send i' r s u u' m\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i = msgs c' i\n 2. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Send i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using Send assms"], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m\n  ev = Send i' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  isSend ev \\<longrightarrow> getId ev \\<noteq> i\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "assume \"isRecv ev\""], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain i' r s u u' m where \"ev = Recv i' r s u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s u u' m.\n        ev = Recv i' r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecv_def)"], ["proof (state)\nthis:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i = msgs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using assms"], ["proof (prove)\nusing this:\n  ev = Recv i' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  isSend ev \\<longrightarrow> getId ev \\<noteq> i\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_cs_change_if_no_event:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"isRecv ev \\<longrightarrow> getId ev \\<noteq> i\" and\n    \"regular_event ev\"\n  shows\n    \"cs c i = cs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> cs c i = cs c' i\n 2. isSend ev \\<Longrightarrow> cs c i = cs c' i\n 3. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "assume \"isTrans ev\""], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> cs c i = cs c' i\n 2. isSend ev \\<Longrightarrow> cs c i = cs c' i\n 3. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "by (metis assms(1) event.collapse(1) next_trans)"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c i = cs c' i\n 2. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c i = cs c' i\n 2. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "assume \"isSend ev\""], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c i = cs c' i\n 2. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  isSend ev", "obtain i' r s u u' m where \"ev = Send i' r s u u' m\""], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s u u' m.\n        ev = Send i' r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isSend_def)"], ["proof (state)\nthis:\n  ev = Send i' r s u u' m\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> cs c i = cs c' i\n 2. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Send i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "using assms"], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "by auto"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "assume \"isRecv ev\""], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain i r s u u' m where \"ev = Recv i r s u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i r s u u' m.\n        ev = Recv i r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecv_def)"], ["proof (state)\nthis:\n  ev = Recv i r s u u' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> cs c i = cs c' i", "then"], ["proof (chain)\npicking this:\n  ev = Recv i r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i r s u u' m\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "using assms"], ["proof (prove)\nusing this:\n  ev = Recv i r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  isRecv ev \\<longrightarrow> getId ev \\<noteq> i\n  regular_event ev\n\ngoal (1 subgoal):\n 1. cs c i = cs c' i", "by auto"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cs c i = cs c' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma happen_implies_can_occur:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"can_occur ev c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. can_occur ev c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev c", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. can_occur ev c", "by (cases ev, auto)"], ["proof (state)\nthis:\n  can_occur ev c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma snapshot_increases_message_length:\n  assumes\n    \"ev = Snapshot p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel i = Some (q, r)\"\n  shows\n    \"length (msgs c i) \\<le> length (msgs c' i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (msgs c i) \\<le> length (msgs c' i)", "using assms"], ["proof (prove)\nusing this:\n  ev = Snapshot p\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = Some (q, r)\n\ngoal (1 subgoal):\n 1. length (msgs c i) \\<le> length (msgs c' i)", "by (cases \"p = q\", auto)"], ["", "lemma recv_marker_changes_head_only_at_i:\n  assumes\n    \"ev = RecvMarker i p q\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"i' \\<noteq> i\"\n  shows\n    \"msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "proof (cases \"channel i' = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel i' = None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n 2. channel i' \\<noteq> None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "case True"], ["proof (state)\nthis:\n  channel i' = None\n\ngoal (2 subgoals):\n 1. channel i' = None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n 2. channel i' \\<noteq> None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  channel i' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = None\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "using assms no_msgs_change_if_no_channel"], ["proof (prove)\nusing this:\n  channel i' = None\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i' \\<noteq> i\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "by presburger"], ["proof (state)\nthis:\n  msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n\ngoal (1 subgoal):\n 1. channel i' \\<noteq> None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel i' \\<noteq> None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "case False"], ["proof (state)\nthis:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i' \\<noteq> None \\<Longrightarrow>\n    msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  channel i' \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "proof (cases \"msgs c i'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' \\<noteq> None; msgs c i' = []\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n 2. \\<And>a list.\n       \\<lbrakk>channel i' \\<noteq> None; msgs c i' = a # list\\<rbrakk>\n       \\<Longrightarrow> msgs c i' = [] \\<or>\n                         hd (msgs c i') = hd (msgs c' i')", "case Nil"], ["proof (state)\nthis:\n  msgs c i' = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' \\<noteq> None; msgs c i' = []\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n 2. \\<And>a list.\n       \\<lbrakk>channel i' \\<noteq> None; msgs c i' = a # list\\<rbrakk>\n       \\<Longrightarrow> msgs c i' = [] \\<or>\n                         hd (msgs c i') = hd (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  msgs c i' = []", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i' = []\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "by simp"], ["proof (state)\nthis:\n  msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>channel i' \\<noteq> None; msgs c i' = a # list\\<rbrakk>\n       \\<Longrightarrow> msgs c i' = [] \\<or>\n                         hd (msgs c i') = hd (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>channel i' \\<noteq> None; msgs c i' = a # list\\<rbrakk>\n       \\<Longrightarrow> msgs c i' = [] \\<or>\n                         hd (msgs c i') = hd (msgs c' i')", "case (Cons m xs)"], ["proof (state)\nthis:\n  msgs c i' = m # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>channel i' \\<noteq> None; msgs c i' = a # list\\<rbrakk>\n       \\<Longrightarrow> msgs c i' = [] \\<or>\n                         hd (msgs c i') = hd (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  msgs c i' = m # xs", "obtain r s where \"channel i' = Some (r, s)\""], ["proof (prove)\nusing this:\n  msgs c i' = m # xs\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i' = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using False"], ["proof (prove)\nusing this:\n  msgs c i' = m # xs\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i' = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>channel i' \\<noteq> None; msgs c i' = a # list\\<rbrakk>\n       \\<Longrightarrow> msgs c i' = [] \\<or>\n                         hd (msgs c i') = hd (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  channel i' = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "proof (cases \"has_snapshotted c p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (r, s); ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n 2. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "case True"], ["proof (state)\nthis:\n  ps c p \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (r, s); ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n 2. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "using assms"], ["proof (prove)\nusing this:\n  ps c p \\<noteq> None\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "by auto"], ["proof (state)\nthis:\n  msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "case False"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "with assms"], ["proof (chain)\npicking this:\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i' \\<noteq> i\n  \\<not> ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i' \\<noteq> i\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')", "by (cases \"r = p\", auto)"], ["proof (state)\nthis:\n  msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i' = [] \\<or> hd (msgs c i') = hd (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma recv_marker_other_channels_not_shrinking:\n  assumes\n    \"ev = RecvMarker i p q\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"length (msgs c i') \\<le> length (msgs c' i') \\<longleftrightarrow> i \\<noteq> i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (length (msgs c i') \\<le> length (msgs c' i')) = (i \\<noteq> i')", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length (msgs c i') \\<le> length (msgs c' i') \\<Longrightarrow>\n    i \\<noteq> i'\n 2. i \\<noteq> i' \\<Longrightarrow>\n    length (msgs c i') \\<le> length (msgs c' i')", "show \"length (msgs c i') \\<le> length (msgs c' i') \\<Longrightarrow> i \\<noteq> i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i') \\<Longrightarrow>\n    i \\<noteq> i'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>length (msgs c i') \\<le> length (msgs c' i');\n     \\<not> i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> False", "assume asm: \"~ i \\<noteq> i'\" \"length (msgs c i') \\<le> length (msgs c' i')\""], ["proof (state)\nthis:\n  \\<not> i \\<noteq> i'\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length (msgs c i') \\<le> length (msgs c' i');\n     \\<not> i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> i \\<noteq> i'\n  length (msgs c i') \\<le> length (msgs c' i')", "have \"msgs c i = Marker # msgs c' i\""], ["proof (prove)\nusing this:\n  \\<not> i \\<noteq> i'\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. msgs c i = Marker # msgs c' i", "using assms"], ["proof (prove)\nusing this:\n  \\<not> i \\<noteq> i'\n  length (msgs c i') \\<le> length (msgs c' i')\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. msgs c i = Marker # msgs c' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = Marker # msgs c' i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length (msgs c i') \\<le> length (msgs c' i');\n     \\<not> i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  msgs c i = Marker # msgs c' i", "have \"length (msgs c i) > length (msgs c' i)\""], ["proof (prove)\nusing this:\n  msgs c i = Marker # msgs c' i\n\ngoal (1 subgoal):\n 1. length (msgs c' i) < length (msgs c i)", "by simp"], ["proof (state)\nthis:\n  length (msgs c' i) < length (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length (msgs c i') \\<le> length (msgs c' i');\n     \\<not> i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length (msgs c' i) < length (msgs c i)", "have \"length (msgs c i') > length (msgs c' i')\""], ["proof (prove)\nusing this:\n  length (msgs c' i) < length (msgs c i)\n\ngoal (1 subgoal):\n 1. length (msgs c' i') < length (msgs c i')", "using asm"], ["proof (prove)\nusing this:\n  length (msgs c' i) < length (msgs c i)\n  \\<not> i \\<noteq> i'\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. length (msgs c' i') < length (msgs c i')", "by simp"], ["proof (state)\nthis:\n  length (msgs c' i') < length (msgs c i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length (msgs c i') \\<le> length (msgs c' i');\n     \\<not> i \\<noteq> i'\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  length (msgs c' i') < length (msgs c i')", "show False"], ["proof (prove)\nusing this:\n  length (msgs c' i') < length (msgs c i')\n\ngoal (1 subgoal):\n 1. False", "using asm"], ["proof (prove)\nusing this:\n  length (msgs c' i') < length (msgs c i')\n  \\<not> i \\<noteq> i'\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i') \\<Longrightarrow>\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow>\n    length (msgs c i') \\<le> length (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow>\n    length (msgs c i') \\<le> length (msgs c' i')", "show \"i \\<noteq> i' \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow>\n    length (msgs c i') \\<le> length (msgs c' i')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow>\n    length (msgs c i') \\<le> length (msgs c' i')", "assume \"i \\<noteq> i'\""], ["proof (state)\nthis:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i \\<noteq> i' \\<Longrightarrow>\n    length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  i \\<noteq> i'", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "proof (cases \"channel i' = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; channel i' = None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>i \\<noteq> i'; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "case True"], ["proof (state)\nthis:\n  channel i' = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> i'; channel i' = None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>i \\<noteq> i'; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  channel i' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = None\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "using assms no_msgs_change_if_no_channel"], ["proof (prove)\nusing this:\n  channel i' = None\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "by presburger"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "case False"], ["proof (state)\nthis:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  channel i' \\<noteq> None", "obtain r s where chan: \"channel i' = Some (r, s)\""], ["proof (prove)\nusing this:\n  channel i' \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i' = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> i'; channel i' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  channel i' = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "proof (cases \"has_snapshotted c p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (r, s); ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "case True"], ["proof (state)\nthis:\n  ps c p \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (r, s); ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "with assms \\<open>i \\<noteq> i'\\<close>"], ["proof (chain)\npicking this:\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i \\<noteq> i'\n  ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i \\<noteq> i'\n  ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "by auto"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (r, s); \\<not> ps c p \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "proof (cases \"p = r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; p = r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; p \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "case True"], ["proof (state)\nthis:\n  p = r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; p = r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; p \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  p = r", "have \"msgs c' i' = msgs c i' @ [Marker]\""], ["proof (prove)\nusing this:\n  p = r\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c i' @ [Marker]", "using \\<open>i \\<noteq> i'\\<close> assms no_snap chan"], ["proof (prove)\nusing this:\n  p = r\n  i \\<noteq> i'\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> ps c p \\<noteq> None\n  channel i' = Some (r, s)\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c i' @ [Marker]", "by auto"], ["proof (state)\nthis:\n  msgs c' i' = msgs c i' @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; p = r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')\n 2. \\<lbrakk>\\<not> ps c p \\<noteq> None; p \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  msgs c' i' = msgs c i' @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i' = msgs c i' @ [Marker]\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "by auto"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; p \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; p \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "case False"], ["proof (state)\nthis:\n  p \\<noteq> r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c p \\<noteq> None; p \\<noteq> r\\<rbrakk>\n    \\<Longrightarrow> length (msgs c i') \\<le> length (msgs c' i')", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> r", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> r\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "using assms \\<open>i \\<noteq> i'\\<close> chan no_snap"], ["proof (prove)\nusing this:\n  p \\<noteq> r\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i \\<noteq> i'\n  channel i' = Some (r, s)\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. length (msgs c i') \\<le> length (msgs c' i')", "by auto"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i \\<noteq> i' \\<Longrightarrow>\n  length (msgs c i') \\<le> length (msgs c' i')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma regular_event_cannot_induce_snapshot:\n  assumes\n    \"~ has_snapshotted c p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"regular_event ev \\<longrightarrow> ~ has_snapshotted c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "case (Trans q s s')"], ["proof (state)\nthis:\n  ev = Trans q s s'\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  ev = Trans q s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans q s s'\n\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "using assms(1) assms(2)"], ["proof (prove)\nusing this:\n  ev = Trans q s s'\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "case (Send q r s s' m)"], ["proof (state)\nthis:\n  ev = Send q r s s' m x26_\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  ev = Send q r s s' m x26_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send q r s s' m x26_\n\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  ev = Send q r s s' m x26_\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n\ngoal (3 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "case (Recv q r s s' m)"], ["proof (state)\nthis:\n  ev = Recv q r s s' m x36_\n\ngoal (3 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 3. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  ev = Recv q r s s' m x36_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv q r s s' m x36_\n\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "using assms"], ["proof (prove)\nusing this:\n  ev = Recv q r s s' m x36_\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None\n 2. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       regular_event ev \\<longrightarrow> \\<not> ps c' p \\<noteq> None", "qed simp_all"], ["", "lemma regular_event_preserves_process_snapshots:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"regular_event ev \\<Longrightarrow> ps c r = ps c' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_event ev \\<Longrightarrow> ps c r = ps c' r", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>regular_event ev; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>regular_event ev; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 4. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "case (Trans p s s')"], ["proof (state)\nthis:\n  ev = Trans p s s'\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>regular_event ev; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>regular_event ev; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 4. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "then"], ["proof (chain)\npicking this:\n  ev = Trans p s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans p s s'\n\ngoal (1 subgoal):\n 1. ps c r = ps c' r", "using assms"], ["proof (prove)\nusing this:\n  ev = Trans p s s'\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. ps c r = ps c' r", "by auto"], ["proof (state)\nthis:\n  ps c r = ps c' r\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>regular_event ev; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>regular_event ev; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "case (Send p q s s' m)"], ["proof (state)\nthis:\n  ev = Send p q s s' m x26_\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>regular_event ev; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "then"], ["proof (chain)\npicking this:\n  ev = Send p q s s' m x26_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send p q s s' m x26_\n\ngoal (1 subgoal):\n 1. ps c r = ps c' r", "using assms"], ["proof (prove)\nusing this:\n  ev = Send p q s s' m x26_\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. ps c r = ps c' r", "by auto"], ["proof (state)\nthis:\n  ps c r = ps c' r\n\ngoal (3 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "case (Recv p q s s' m)"], ["proof (state)\nthis:\n  ev = Recv p q s s' m x36_\n\ngoal (3 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>regular_event ev; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "then"], ["proof (chain)\npicking this:\n  ev = Recv p q s s' m x36_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv p q s s' m x36_\n\ngoal (1 subgoal):\n 1. ps c r = ps c' r", "using assms"], ["proof (prove)\nusing this:\n  ev = Recv p q s s' m x36_\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. ps c r = ps c' r", "by auto"], ["proof (state)\nthis:\n  ps c r = ps c' r\n\ngoal (2 subgoals):\n 1. \\<And>x4.\n       \\<lbrakk>regular_event ev; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>regular_event ev; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps c r = ps c' r", "qed simp_all"], ["", "lemma no_state_change_if_nonregular_event:\n  assumes\n    \"~ regular_event ev\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"states c p = states c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = states c' p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. states c p = states c' p", "have \"isSnapshot ev \\<or> isRecvMarker ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isRecvMarker ev", "using nonregular_event assms"], ["proof (prove)\nusing this:\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n  \\<not> regular_event ev\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isRecvMarker ev", "by auto"], ["proof (state)\nthis:\n  isSnapshot ev \\<or> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev \\<or> isRecvMarker ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isSnapshot ev \\<or> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> states c p = states c' p\n 2. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "case 1"], ["proof (state)\nthis:\n  isSnapshot ev\n\ngoal (2 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> states c p = states c' p\n 2. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev", "obtain q where \"ev = Snapshot q\""], ["proof (prove)\nusing this:\n  isSnapshot ev\n\ngoal (1 subgoal):\n 1. (\\<And>q. ev = Snapshot q \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isSnapshot_def)"], ["proof (state)\nthis:\n  ev = Snapshot q\n\ngoal (2 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> states c p = states c' p\n 2. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot q", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Snapshot q\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "using assms(2)"], ["proof (prove)\nusing this:\n  ev = Snapshot q\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "by auto"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "case 2"], ["proof (state)\nthis:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "then"], ["proof (chain)\npicking this:\n  isRecvMarker ev", "obtain i q r where \"ev = RecvMarker i q r\""], ["proof (prove)\nusing this:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. (\\<And>i q r.\n        ev = RecvMarker i q r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecvMarker_def)"], ["proof (state)\nthis:\n  ev = RecvMarker i q r\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> states c p = states c' p", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i q r", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "using assms(2)"], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "by auto"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonregular_event_induces_snapshot:\n  assumes\n    \"~ has_snapshotted c p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev = p\" and\n    \"~ regular_event ev\"\n  shows\n    \"~ regular_event ev \\<longrightarrow> has_snapshotted c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "case (Snapshot q)"], ["proof (state)\nthis:\n  ev = Snapshot q\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot q", "have \"q = p\""], ["proof (prove)\nusing this:\n  ev = Snapshot q\n\ngoal (1 subgoal):\n 1. q = p", "using assms"], ["proof (prove)\nusing this:\n  ev = Snapshot q\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev = p\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. q = p", "by auto"], ["proof (state)\nthis:\n  q = p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  q = p", "show ?thesis"], ["proof (prove)\nusing this:\n  q = p\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "using Snapshot assms(2)"], ["proof (prove)\nusing this:\n  q = p\n  ev = Snapshot q\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "case (RecvMarker i q r)"], ["proof (state)\nthis:\n  ev = RecvMarker i q r\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i q r", "have \"q = p\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n\ngoal (1 subgoal):\n 1. q = p", "using assms"], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev = p\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. q = p", "by auto"], ["proof (state)\nthis:\n  q = p\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  q = p", "show ?thesis"], ["proof (prove)\nusing this:\n  q = p\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "using RecvMarker assms"], ["proof (prove)\nusing this:\n  q = p\n  ev = RecvMarker i q r\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev = p\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       \\<not> regular_event ev \\<longrightarrow> ps c' p \\<noteq> None", "qed (simp_all add: assms)"], ["", "lemma snapshot_state_unchanged:\n  assumes\n    step: \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"has_snapshotted c p\"\n  shows\n    \"ps c p = ps c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "proof (cases \"occurs_on ev = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. occurs_on ev = p \\<Longrightarrow> ps c p = ps c' p\n 2. occurs_on ev \\<noteq> p \\<Longrightarrow> ps c p = ps c' p", "case False"], ["proof (state)\nthis:\n  occurs_on ev \\<noteq> p\n\ngoal (2 subgoals):\n 1. occurs_on ev = p \\<Longrightarrow> ps c p = ps c' p\n 2. occurs_on ev \\<noteq> p \\<Longrightarrow> ps c p = ps c' p", "then"], ["proof (chain)\npicking this:\n  occurs_on ev \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> p\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "using local.step no_state_change_if_no_event"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> p\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps c p = ps c' p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> ps c p = ps c' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> ps c p = ps c' p", "case True"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> ps c p = ps c' p", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "proof (cases \"regular_event ev\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>occurs_on ev = p; regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p\n 2. \\<lbrakk>occurs_on ev = p; \\<not> regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p", "case True"], ["proof (state)\nthis:\n  regular_event ev\n\ngoal (2 subgoals):\n 1. \\<lbrakk>occurs_on ev = p; regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p\n 2. \\<lbrakk>occurs_on ev = p; \\<not> regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p", "then"], ["proof (chain)\npicking this:\n  regular_event ev", "show ?thesis"], ["proof (prove)\nusing this:\n  regular_event ev\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "using local.step regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  regular_event ev\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps c p = ps c' p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>occurs_on ev = p; \\<not> regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>occurs_on ev = p; \\<not> regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p", "case False"], ["proof (state)\nthis:\n  \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>occurs_on ev = p; \\<not> regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p", "have \"isRecvMarker ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isRecvMarker ev", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "have \"isSnapshot ev \\<or> isRecvMarker ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isRecvMarker ev", "using False nonregular_event"], ["proof (prove)\nusing this:\n  \\<not> regular_event ev\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isRecvMarker ev", "by blast"], ["proof (state)\nthis:\n  isSnapshot ev \\<or> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  isSnapshot ev \\<or> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "assume \"~ isRecvMarker ev\""], ["proof (state)\nthis:\n  \\<not> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  isSnapshot ev \\<or> isRecvMarker ev\n  \\<not> isRecvMarker ev", "have \"isSnapshot ev\""], ["proof (prove)\nusing this:\n  isSnapshot ev \\<or> isRecvMarker ev\n  \\<not> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. isSnapshot ev", "by simp"], ["proof (state)\nthis:\n  isSnapshot ev\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev", "have \"ev = Snapshot p\""], ["proof (prove)\nusing this:\n  isSnapshot ev\n\ngoal (1 subgoal):\n 1. ev = Snapshot p", "by (metis True event.collapse(4))"], ["proof (state)\nthis:\n  ev = Snapshot p\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot p", "have \"can_occur ev c\""], ["proof (prove)\nusing this:\n  ev = Snapshot p\n\ngoal (1 subgoal):\n 1. can_occur ev c", "using happen_implies_can_occur local.step"], ["proof (prove)\nusing this:\n  ev = Snapshot p\n  ?c \\<turnstile> ?ev \\<mapsto> ?c' \\<Longrightarrow> can_occur ?ev ?c\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. can_occur ev c", "by blast"], ["proof (state)\nthis:\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  can_occur ev c", "have \"~ has_snapshotted c p\""], ["proof (prove)\nusing this:\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None", "unfolding can_occur_def"], ["proof (prove)\nusing this:\n  case ev of Trans p s s' \\<Rightarrow> states c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs c i) \\<and>\n      hd (msgs c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs c i) \\<and> hd (msgs c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None", "by (simp add: \\<open>ev = Snapshot p\\<close>)"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> isRecvMarker ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>occurs_on ev = p; \\<not> regular_event ev\\<rbrakk>\n    \\<Longrightarrow> ps c p = ps c' p", "then"], ["proof (chain)\npicking this:\n  isRecvMarker ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "(* z3 sledgehammer fails for Isabelle2019 *)"], ["proof (prove)\nusing this:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> ps c p = ps c' p", "have \"\\<exists>n pa. c \\<turnstile> RecvMarker n p pa \\<mapsto> c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n pa. c \\<turnstile> RecvMarker n p pa \\<mapsto> c'", "by (metis True \\<open>isRecvMarker ev\\<close> event.collapse(5) local.step)"], ["proof (state)\nthis:\n  \\<exists>n pa. c \\<turnstile> RecvMarker n p pa \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. isRecvMarker ev \\<Longrightarrow> ps c p = ps c' p", "then"], ["proof (chain)\npicking this:\n  \\<exists>n pa. c \\<turnstile> RecvMarker n p pa \\<mapsto> c'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>n pa. c \\<turnstile> RecvMarker n p pa \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "using assms(2)"], ["proof (prove)\nusing this:\n  \\<exists>n pa. c \\<turnstile> RecvMarker n p pa \\<mapsto> c'\n  ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. ps c p = ps c' p", "by force"], ["proof (state)\nthis:\n  ps c p = ps c' p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ps c p = ps c' p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ps c p = ps c' p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma message_must_be_delivered:\n  assumes\n    valid: \"c \\<turnstile> ev \\<mapsto> c'\" and\n    delivered: \"(msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and> (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\"\n  shows\n    \"(\\<exists>p q.         ev = RecvMarker i p q   \\<and> m = Marker)\n   \\<or> (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Snapshot p)"], ["proof (state)\nthis:\n  ev = Snapshot p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot p", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Snapshot p\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "proof (cases \"msgs c i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot p; msgs c i = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>a list.\n       \\<lbrakk>ev = Snapshot p; msgs c i = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case Nil"], ["proof (state)\nthis:\n  msgs c i = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot p; msgs c i = []\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>a list.\n       \\<lbrakk>ev = Snapshot p; msgs c i = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  msgs c i = []", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = []\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using delivered"], ["proof (prove)\nusing this:\n  msgs c i = []\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>ev = Snapshot p; msgs c i = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>ev = Snapshot p; msgs c i = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Cons m xs)"], ["proof (state)\nthis:\n  msgs c i = m # xs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>ev = Snapshot p; msgs c i = a # list\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "with assms Snapshot"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n  ev = Snapshot p\n  msgs c i = m # xs", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n  ev = Snapshot p\n  msgs c i = m # xs\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "proof (cases \"channel i = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "case True"], ["proof (state)\nthis:\n  channel i = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i = None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  channel i = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = None\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using assms Snapshot"], ["proof (prove)\nusing this:\n  channel i = None\n  c \\<turnstile> ev \\<mapsto> c'\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n  ev = Snapshot p\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by auto"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "case False"], ["proof (state)\nthis:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  channel i \\<noteq> None", "obtain r s where chan: \"channel i = Some (r, s)\""], ["proof (prove)\nusing this:\n  channel i \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        channel i = Some (r, s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n     (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n     (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m);\n     ev = Snapshot p; msgs c i = m # xs; channel i \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  channel i = Some (r, s)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "proof (cases \"r = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i = Some (r, s); r = p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "case True"], ["proof (state)\nthis:\n  r = p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i = Some (r, s); r = p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  r = p", "have \"msgs c' i = msgs c i @ [Marker]\""], ["proof (prove)\nusing this:\n  r = p\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "using assms(1) Snapshot chan"], ["proof (prove)\nusing this:\n  r = p\n  c \\<turnstile> ev \\<mapsto> c'\n  ev = Snapshot p\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "by auto"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i = Some (r, s); r = p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using delivered"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by auto"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "case False"], ["proof (state)\nthis:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  r \\<noteq> p", "have \"msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "using assms Snapshot chan"], ["proof (prove)\nusing this:\n  r \\<noteq> p\n  c \\<turnstile> ev \\<mapsto> c'\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n  ev = Snapshot p\n  channel i = Some (r, s)\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (r, s); r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (\\<exists>p q.\n                          ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                      (\\<exists>p q s s' m'.\n                          ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using delivered Cons"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n  msgs c i = m # xs\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (RecvMarker i' p q)"], ["proof (state)\nthis:\n  ev = RecvMarker i' p q\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i' p q", "have \"i' = i\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i' p q\n\ngoal (1 subgoal):\n 1. i' = i", "by (metis assms(1) delivered le_0_eq length_greater_0_conv list.size(3) recv_marker_changes_head_only_at_i recv_marker_other_channels_not_shrinking)"], ["proof (state)\nthis:\n  i' = i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "moreover"], ["proof (state)\nthis:\n  i' = i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "have \"Marker = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker = m", "using \\<open>i' = i\\<close> RecvMarker assms(1) can_occur_def delivered"], ["proof (prove)\nusing this:\n  i' = i\n  ev = RecvMarker i' p q\n  c \\<turnstile> ev \\<mapsto> c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n\ngoal (1 subgoal):\n 1. Marker = m", "by auto"], ["proof (state)\nthis:\n  Marker = m\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "moreover"], ["proof (state)\nthis:\n  Marker = m\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "have \"channel i = Some (q, p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i = Some (q, p)", "using RecvMarker assms(1) calculation(1) can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' p q\n  c \\<turnstile> ev \\<mapsto> c'\n  i' = i\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. channel i = Some (q, p)", "by auto"], ["proof (state)\nthis:\n  channel i = Some (q, p)\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "ultimately"], ["proof (chain)\npicking this:\n  i' = i\n  Marker = m\n  channel i = Some (q, p)", "show ?thesis"], ["proof (prove)\nusing this:\n  i' = i\n  Marker = m\n  channel i = Some (q, p)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using RecvMarker"], ["proof (prove)\nusing this:\n  i' = i\n  Marker = m\n  channel i = Some (q, p)\n  ev = RecvMarker i' p q\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Trans p' s s')"], ["proof (state)\nthis:\n  ev = Trans p' s s'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = Trans p' s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans p' s s'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using valid delivered"], ["proof (prove)\nusing this:\n  ev = Trans p' s s'\n  c \\<turnstile> ev \\<mapsto> c'\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by auto"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Send p' q' s s' m')"], ["proof (state)\nthis:\n  ev = Send p' q' s s' m' x26_\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = Send p' q' s s' m' x26_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send p' q' s s' m' x26_\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by (metis (no_types, lifting) delivered distributed_system.next.simps(4) distributed_system_axioms hd_append2 snoc_eq_iff_butlast valid)"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Recv i' p q s s' m')"], ["proof (state)\nthis:\n  ev = Recv i' p q s s' m'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' p q s s' m'", "have \"i = i'\""], ["proof (prove)\nusing this:\n  ev = Recv i' p q s s' m'\n\ngoal (1 subgoal):\n 1. i = i'", "using assms(1) delivered"], ["proof (prove)\nusing this:\n  ev = Recv i' p q s s' m'\n  c \\<turnstile> ev \\<mapsto> c'\n  (msgs c i \\<noteq> [] \\<and> hd (msgs c i) = m) \\<and>\n  (msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> m)\n\ngoal (1 subgoal):\n 1. i = i'", "by auto"], ["proof (state)\nthis:\n  i = i'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "also"], ["proof (state)\nthis:\n  i = i'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "have \"m = Msg m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Msg m'", "by (metis (no_types, lifting) Recv delivered list.sel(1) next_recv valid)"], ["proof (state)\nthis:\n  m = Msg m'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n       (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "ultimately"], ["proof (chain)\npicking this:\n  i = i'\n  m = Msg m'", "show ?thesis"], ["proof (prove)\nusing this:\n  i = i'\n  m = Msg m'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using Recv"], ["proof (prove)\nusing this:\n  i = i'\n  m = Msg m'\n  ev = Recv i' p q s s' m'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by auto"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma message_must_be_delivered_2:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n    \"m : set (msgs c i)\"\n    \"m \\<notin> set (msgs c' i)\"\n  shows\n    \"(\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or> (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "have uneq_sets: \"set (msgs c i) \\<noteq> set (msgs c' i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (msgs c i) \\<noteq> set (msgs c' i)", "using assms(2) assms(3)"], ["proof (prove)\nusing this:\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. set (msgs c i) \\<noteq> set (msgs c' i)", "by blast"], ["proof (state)\nthis:\n  set (msgs c i) \\<noteq> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  set (msgs c i) \\<noteq> set (msgs c' i)", "obtain p q where chan: \"channel i = Some (p, q)\""], ["proof (prove)\nusing this:\n  set (msgs c i) \\<noteq> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms no_msgs_change_if_no_channel"], ["proof (prove)\nusing this:\n  set (msgs c i) \\<noteq> set (msgs c' i)\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel i = Some (p, q) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  channel i = Some (p, q)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x4.\n       \\<lbrakk>channel i = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Snapshot p')"], ["proof (state)\nthis:\n  ev = Snapshot p'\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x4.\n       \\<lbrakk>channel i = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "with Snapshot assms chan"], ["proof (chain)\npicking this:\n  ev = Snapshot p'\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = Snapshot p'", "have \"set (msgs c' i) = set (msgs c i)\""], ["proof (prove)\nusing this:\n  ev = Snapshot p'\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = Snapshot p'\n\ngoal (1 subgoal):\n 1. set (msgs c' i) = set (msgs c i)", "by (cases \"p' = p\", auto)"], ["proof (state)\nthis:\n  set (msgs c' i) = set (msgs c i)\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x4.\n       \\<lbrakk>channel i = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  set (msgs c' i) = set (msgs c i)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (msgs c' i) = set (msgs c i)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using uneq_sets"], ["proof (prove)\nusing this:\n  set (msgs c' i) = set (msgs c i)\n  set (msgs c i) \\<noteq> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Trans p' s s')"], ["proof (state)\nthis:\n  ev = Trans p' s s'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel i = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = Trans p' s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans p' s s'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using uneq_sets assms"], ["proof (prove)\nusing this:\n  ev = Trans p' s s'\n  set (msgs c i) \\<noteq> set (msgs c' i)\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Send i' p' q' s s' m)"], ["proof (state)\nthis:\n  ev = Send i' p' q' s s' m\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 3. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  ev = Send i' p' q' s s' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send i' p' q' s s' m\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by (metis (no_types, lifting) UnCI assms(1) assms(2) assms(3) local.next.simps(4) set_append)"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (RecvMarker i' p' q')"], ["proof (state)\nthis:\n  ev = RecvMarker i' p' q'\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "have \"i' = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' = i", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> False", "assume \"~ i' = i\""], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using assms chan RecvMarker"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = RecvMarker i' p' q'\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"has_snapshotted c p'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  ps c p' \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ps c p' \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  ps c p' \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "using assms chan RecvMarker \\<open>~ i' = i\\<close>"], ["proof (prove)\nusing this:\n  ps c p' \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = RecvMarker i' p' q'\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> ps c p' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<turnstile> ev \\<mapsto> c'; m \\<in> set (msgs c i);\n     m \\<notin> set (msgs c' i); channel i = Some (p, q);\n     ev = RecvMarker i' p' q'; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p' \\<noteq> None", "show False"], ["proof (prove)\nusing this:\n  \\<not> ps c p' \\<noteq> None\n\ngoal (1 subgoal):\n 1. False", "using assms chan RecvMarker \\<open>~ i' = i\\<close>"], ["proof (prove)\nusing this:\n  \\<not> ps c p' \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = RecvMarker i' p' q'\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. False", "by (cases \"p' = p\", simp_all)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "moreover"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "have \"m = Marker\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = Marker", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. m = Marker", "have \"msgs c i' = Marker # msgs c' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i' = Marker # msgs c' i'", "using assms chan RecvMarker"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = RecvMarker i' p' q'\n\ngoal (1 subgoal):\n 1. msgs c i' = Marker # msgs c' i'", "by auto"], ["proof (state)\nthis:\n  msgs c i' = Marker # msgs c' i'\n\ngoal (1 subgoal):\n 1. m = Marker", "then"], ["proof (chain)\npicking this:\n  msgs c i' = Marker # msgs c' i'", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i' = Marker # msgs c' i'\n\ngoal (1 subgoal):\n 1. m = Marker", "using assms \\<open>i' = i\\<close>"], ["proof (prove)\nusing this:\n  msgs c i' = Marker # msgs c' i'\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n  i' = i\n\ngoal (1 subgoal):\n 1. m = Marker", "by simp"], ["proof (state)\nthis:\n  m = Marker\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  m = Marker\n\ngoal (2 subgoals):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')\n 2. \\<And>x51 x52 x53.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "ultimately"], ["proof (chain)\npicking this:\n  i' = i\n  m = Marker", "show ?thesis"], ["proof (prove)\nusing this:\n  i' = i\n  m = Marker\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using RecvMarker"], ["proof (prove)\nusing this:\n  i' = i\n  m = Marker\n  ev = RecvMarker i' p' q'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "case (Recv i' p' q' s s' m')"], ["proof (state)\nthis:\n  ev = Recv i' p' q' s s' m'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "have \"i' = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' = i", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> False", "assume \"~ i' = i\""], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show False"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. False", "using Recv assms(1) uneq_sets"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n  ev = Recv i' p' q' s s' m'\n  c \\<turnstile> ev \\<mapsto> c'\n  set (msgs c i) \\<noteq> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' = i\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  i' = i", "have \"i' = i \\<and> m = Msg m'\""], ["proof (prove)\nusing this:\n  i' = i\n\ngoal (1 subgoal):\n 1. i' = i \\<and> m = Msg m'", "using Recv assms"], ["proof (prove)\nusing this:\n  i' = i\n  ev = Recv i' p' q' s s' m'\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<in> set (msgs c i)\n  m \\<notin> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. i' = i \\<and> m = Msg m'", "by auto"], ["proof (state)\nthis:\n  i' = i \\<and> m = Msg m'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel i = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>p q.\n                             ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n                         (\\<exists>p q s s' m'.\n                             ev = Recv i p q s s' m' \\<and> m = Msg m')", "then"], ["proof (chain)\npicking this:\n  i' = i \\<and> m = Msg m'", "show ?thesis"], ["proof (prove)\nusing this:\n  i' = i \\<and> m = Msg m'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "using Recv"], ["proof (prove)\nusing this:\n  i' = i \\<and> m = Msg m'\n  ev = Recv i' p' q' s s' m'\n\ngoal (1 subgoal):\n 1. (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n    (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')", "by simp"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<exists>p q. ev = RecvMarker i p q \\<and> m = Marker) \\<or>\n  (\\<exists>p q s s' m'. ev = Recv i p q s s' m' \\<and> m = Msg m')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma recv_marker_means_snapshotted_1:\n  assumes\n    \"ev = RecvMarker i p q\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\"\n  shows\n    \"has_snapshotted c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "using assms snapshot_state_unchanged"], ["proof (prove)\nusing this:\n  ev = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ps ?c ?p \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "by (cases \"has_snapshotted c p\", auto)"], ["", "lemma recv_marker_means_snapshotted_2:\n  fixes\n    c c' :: \"('p, 's, 'm) configuration\" and\n    ev :: \"('p, 's, 'm) event\" and\n    i :: channel_id\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"Marker : set (msgs c i)\" and\n    \"Marker \\<notin> set (msgs c' i)\" and\n    \"channel i = Some (q, p)\"\n  shows\n    \"has_snapshotted c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "have \"\\<exists>p q. ev = RecvMarker i p q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p q. ev = RecvMarker i p q", "using assms message_must_be_delivered_2"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  Marker \\<in> set (msgs c i)\n  Marker \\<notin> set (msgs c' i)\n  channel i = Some (q, p)\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; ?m \\<in> set (msgs ?c ?i);\n   ?m \\<notin> set (msgs ?c' ?i)\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>p q.\n                        ?ev = RecvMarker ?i p q \\<and> ?m = Marker) \\<or>\n                    (\\<exists>p q s s' m'.\n                        ?ev = Recv ?i p q s s' m' \\<and> ?m = Msg m')\n\ngoal (1 subgoal):\n 1. \\<exists>p q. ev = RecvMarker i p q", "by blast"], ["proof (state)\nthis:\n  \\<exists>p q. ev = RecvMarker i p q\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  \\<exists>p q. ev = RecvMarker i p q", "obtain r s where RecvMarker: \"ev = RecvMarker i r s\""], ["proof (prove)\nusing this:\n  \\<exists>p q. ev = RecvMarker i p q\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        ev = RecvMarker i r s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ev = RecvMarker i r s\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i r s", "have \"r = p\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i r s\n\ngoal (1 subgoal):\n 1. r = p", "using assms(1) assms(4) can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker i r s\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = Some (q, p)\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. r = p", "by auto"], ["proof (state)\nthis:\n  r = p\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "then"], ["proof (chain)\npicking this:\n  r = p", "show ?thesis"], ["proof (prove)\nusing this:\n  r = p\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "using recv_marker_means_snapshotted_1 assms RecvMarker"], ["proof (prove)\nusing this:\n  r = p\n  \\<lbrakk>?ev = RecvMarker ?i ?p ?q;\n   ?c \\<turnstile> ?ev \\<mapsto> ?c'\\<rbrakk>\n  \\<Longrightarrow> ps ?c' ?p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  Marker \\<in> set (msgs c i)\n  Marker \\<notin> set (msgs c' i)\n  channel i = Some (q, p)\n  ev = RecvMarker i r s\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "by blast"], ["proof (state)\nthis:\n  ps c' p \\<noteq> None\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma event_stays_valid_if_no_occurrence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\" and\n    \"can_occur ev' c\"\n  shows\n    \"can_occur ev' c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c'", "proof (cases ev')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "case (Trans p s s')"], ["proof (state)\nthis:\n  ev' = Trans p s s'\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "have \"states c p = states c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = states c' p", "using Trans assms(1) assms(2) no_state_change_if_no_event"], ["proof (prove)\nusing this:\n  ev' = Trans p s s'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "by auto"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "moreover"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "have \"states c p = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = s", "using can_occur_def assms Trans"], ["proof (prove)\nusing this:\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  ev' = Trans p s s'\n\ngoal (1 subgoal):\n 1. states c p = s", "by simp"], ["proof (state)\nthis:\n  states c p = s\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "ultimately"], ["proof (chain)\npicking this:\n  states c p = states c' p\n  states c p = s", "have \"states c' p = s\""], ["proof (prove)\nusing this:\n  states c p = states c' p\n  states c p = s\n\ngoal (1 subgoal):\n 1. states c' p = s", "by simp"], ["proof (state)\nthis:\n  states c' p = s\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "moreover"], ["proof (state)\nthis:\n  states c' p = s\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "have \"trans p s s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans p s s'", "using Trans assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = Trans p s s'\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. trans p s s'", "by auto"], ["proof (state)\nthis:\n  trans p s s'\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "ultimately"], ["proof (chain)\npicking this:\n  states c' p = s\n  trans p s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  states c' p = s\n  trans p s s'\n\ngoal (1 subgoal):\n 1. can_occur ev' c'", "by (simp add: Trans can_occur_def)"], ["proof (state)\nthis:\n  can_occur ev' c'\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "case (Recv i p q s s' m)"], ["proof (state)\nthis:\n  ev' = Recv i p q s s' m\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "then"], ["proof (chain)\npicking this:\n  ev' = Recv i p q s s' m", "have \"hd (msgs c i) = Msg m\""], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. hd (msgs c i) = Msg m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ev' = Recv i p q s s' m \\<Longrightarrow> hd (msgs c i) = Msg m", "from Recv"], ["proof (chain)\npicking this:\n  ev' = Recv i p q s s' m", "have \"length (msgs c i) > 0\""], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i)", "using assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i)", "by auto"], ["proof (state)\nthis:\n  0 < length (msgs c i)\n\ngoal (1 subgoal):\n 1. ev' = Recv i p q s s' m \\<Longrightarrow> hd (msgs c i) = Msg m", "then"], ["proof (chain)\npicking this:\n  0 < length (msgs c i)", "obtain m' xs where mcqp: \"msgs c i = m' # xs\""], ["proof (prove)\nusing this:\n  0 < length (msgs c i)\n\ngoal (1 subgoal):\n 1. (\\<And>m' xs.\n        msgs c i = m' # xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.size(3) nat_less_le neq_Nil_conv)"], ["proof (state)\nthis:\n  msgs c i = m' # xs\n\ngoal (1 subgoal):\n 1. ev' = Recv i p q s s' m \\<Longrightarrow> hd (msgs c i) = Msg m", "then"], ["proof (chain)\npicking this:\n  msgs c i = m' # xs", "have \"Msg m = m'\""], ["proof (prove)\nusing this:\n  msgs c i = m' # xs\n\ngoal (1 subgoal):\n 1. Msg m = m'", "proof (cases m', auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "case Marker"], ["proof (state)\nthis:\n  m' = Marker\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  m' = Marker", "have \"msgs c i = Marker # xs\""], ["proof (prove)\nusing this:\n  m' = Marker\n\ngoal (1 subgoal):\n 1. msgs c i = Marker # xs", "by (simp add:mcqp)"], ["proof (state)\nthis:\n  msgs c i = Marker # xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  msgs c i = Marker # xs", "have \"~ can_occur ev' c\""], ["proof (prove)\nusing this:\n  msgs c i = Marker # xs\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c", "using Recv can_occur_def"], ["proof (prove)\nusing this:\n  msgs c i = Marker # xs\n  ev' = Recv i p q s s' m\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c", "by simp"], ["proof (state)\nthis:\n  \\<not> can_occur ev' c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  \\<not> can_occur ev' c", "show False"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c\n\ngoal (1 subgoal):\n 1. False", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "case (Msg msg)"], ["proof (state)\nthis:\n  m' = Msg msg\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  m' = Msg msg", "have \"msgs c i = Msg msg # xs\""], ["proof (prove)\nusing this:\n  m' = Msg msg\n\ngoal (1 subgoal):\n 1. msgs c i = Msg msg # xs", "by (simp add: mcqp)"], ["proof (state)\nthis:\n  msgs c i = Msg msg # xs\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  msgs c i = Msg msg # xs", "show \"m = msg\""], ["proof (prove)\nusing this:\n  msgs c i = Msg msg # xs\n\ngoal (1 subgoal):\n 1. m = msg", "using Recv can_occur_def assms(3)"], ["proof (prove)\nusing this:\n  msgs c i = Msg msg # xs\n  ev' = Recv i p q s s' m\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. m = msg", "by simp"], ["proof (state)\nthis:\n  m = msg\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Msg m = m'\n\ngoal (1 subgoal):\n 1. ev' = Recv i p q s s' m \\<Longrightarrow> hd (msgs c i) = Msg m", "then"], ["proof (chain)\npicking this:\n  Msg m = m'", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m = m'\n\ngoal (1 subgoal):\n 1. hd (msgs c i) = Msg m", "by (simp add: mcqp)"], ["proof (state)\nthis:\n  hd (msgs c i) = Msg m\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (msgs c i) = Msg m\n\ngoal (4 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "assume asm: \"~ can_occur ev' c'\""], ["proof (state)\nthis:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> can_occur ev' c'", "have \"msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m\""], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m", "using Recv assms can_occur_def no_state_change_if_no_event distributed_system_axioms list.case_eq_if"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n  ev' = Recv i p q s s' m\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n  distributed_system channel\n  (case ?list of [] \\<Rightarrow> ?f1.0 | x # xa \\<Rightarrow> ?f2.0 x xa) =\n  (if ?list = [] then ?f1.0 else ?f2.0 (hd ?list) (tl ?list))\n\ngoal (1 subgoal):\n 1. msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m", "by fastforce"], ["proof (state)\nthis:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m", "obtain i' p' q' s'' s''' m' where RMoR: \"ev = RecvMarker i' p' q' \\<or> ev = Recv i p' q' s'' s''' m'\""], ["proof (prove)\nusing this:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m\n\ngoal (1 subgoal):\n 1. (\\<And>i' p' q' s'' s''' m'.\n        ev = RecvMarker i' p' q' \\<or>\n        ev = Recv i p' q' s'' s''' m' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis Recv \\<open>hd (msgs c i) = Msg m\\<close> assms(1) assms(3) can_occur_Recv list.discI message_must_be_delivered)"], ["proof (state)\nthis:\n  ev = RecvMarker i' p' q' \\<or> ev = Recv i p' q' s'' s''' m'\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i' p' q' \\<or> ev = Recv i p' q' s'' s''' m'", "have \"occurs_on ev = p\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i' p' q' \\<or> ev = Recv i p' q' s'' s''' m'\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ev = RecvMarker i' p' q' \\<or>\n    ev = Recv i p' q' s'' s''' m' \\<Longrightarrow>\n    occurs_on ev = p", "have f1: \"states c p = s \\<and> channel i = Some (q, p) \\<and> recv i p q s s' m \\<and> 0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    recv i p q s s' m \\<and>\n    0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m", "using Recv assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. states c p = s \\<and>\n    channel i = Some (q, p) \\<and>\n    recv i p q s s' m \\<and>\n    0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m", "by force"], ["proof (state)\nthis:\n  states c p = s \\<and>\n  channel i = Some (q, p) \\<and>\n  recv i p q s s' m \\<and>\n  0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m\n\ngoal (1 subgoal):\n 1. ev = RecvMarker i' p' q' \\<or>\n    ev = Recv i p' q' s'' s''' m' \\<Longrightarrow>\n    occurs_on ev = p", "have f2: \"RecvMarker i' p' q' = ev \\<or> states c p' = s'' \\<and> channel i = Some (q', p') \\<and> recv i p' q' s'' s''' m' \\<and> 0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RecvMarker i' p' q' = ev \\<or>\n    states c p' = s'' \\<and>\n    channel i = Some (q', p') \\<and>\n    recv i p' q' s'' s''' m' \\<and>\n    0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m'", "using RMoR assms(1) can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' p' q' \\<or> ev = Recv i p' q' s'' s''' m'\n  c \\<turnstile> ev \\<mapsto> c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. RecvMarker i' p' q' = ev \\<or>\n    states c p' = s'' \\<and>\n    channel i = Some (q', p') \\<and>\n    recv i p' q' s'' s''' m' \\<and>\n    0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m'", "by force"], ["proof (state)\nthis:\n  RecvMarker i' p' q' = ev \\<or>\n  states c p' = s'' \\<and>\n  channel i = Some (q', p') \\<and>\n  recv i p' q' s'' s''' m' \\<and>\n  0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m'\n\ngoal (1 subgoal):\n 1. ev = RecvMarker i' p' q' \\<or>\n    ev = Recv i p' q' s'' s''' m' \\<Longrightarrow>\n    occurs_on ev = p", "have \"\\<forall>e n c. \\<exists>p pa s sa m. \\<forall>ca cb. (\\<not> c \\<turnstile> e \\<mapsto> ca \\<or> msgs ca n \\<noteq> [] \\<or> hd (msgs c n) = Marker \\<or> msgs c n = [] \\<or> Recv n p pa s sa m = e) \\<and> (\\<not> c \\<turnstile> e \\<mapsto> cb \\<or> hd (msgs c n) = Marker \\<or> hd (msgs cb n) = hd (msgs c n) \\<or> msgs c n = [] \\<or> Recv n p pa s sa m = e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>e n c.\n       \\<exists>p pa s sa m.\n          \\<forall>ca cb.\n             (\\<not> c \\<turnstile> e \\<mapsto> ca \\<or>\n              msgs ca n \\<noteq> [] \\<or>\n              hd (msgs c n) = Marker \\<or>\n              msgs c n = [] \\<or> Recv n p pa s sa m = e) \\<and>\n             (\\<not> c \\<turnstile> e \\<mapsto> cb \\<or>\n              hd (msgs c n) = Marker \\<or>\n              hd (msgs cb n) = hd (msgs c n) \\<or>\n              msgs c n = [] \\<or> Recv n p pa s sa m = e)", "by (metis (no_types) message_must_be_delivered)"], ["proof (state)\nthis:\n  \\<forall>e n c.\n     \\<exists>p pa s sa m.\n        \\<forall>ca cb.\n           (\\<not> c \\<turnstile> e \\<mapsto> ca \\<or>\n            msgs ca n \\<noteq> [] \\<or>\n            hd (msgs c n) = Marker \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e) \\<and>\n           (\\<not> c \\<turnstile> e \\<mapsto> cb \\<or>\n            hd (msgs c n) = Marker \\<or>\n            hd (msgs cb n) = hd (msgs c n) \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e)\n\ngoal (1 subgoal):\n 1. ev = RecvMarker i' p' q' \\<or>\n    ev = Recv i p' q' s'' s''' m' \\<Longrightarrow>\n    occurs_on ev = p", "then"], ["proof (chain)\npicking this:\n  \\<forall>e n c.\n     \\<exists>p pa s sa m.\n        \\<forall>ca cb.\n           (\\<not> c \\<turnstile> e \\<mapsto> ca \\<or>\n            msgs ca n \\<noteq> [] \\<or>\n            hd (msgs c n) = Marker \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e) \\<and>\n           (\\<not> c \\<turnstile> e \\<mapsto> cb \\<or>\n            hd (msgs c n) = Marker \\<or>\n            hd (msgs cb n) = hd (msgs c n) \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>e n c.\n     \\<exists>p pa s sa m.\n        \\<forall>ca cb.\n           (\\<not> c \\<turnstile> e \\<mapsto> ca \\<or>\n            msgs ca n \\<noteq> [] \\<or>\n            hd (msgs c n) = Marker \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e) \\<and>\n           (\\<not> c \\<turnstile> e \\<mapsto> cb \\<or>\n            hd (msgs c n) = Marker \\<or>\n            hd (msgs cb n) = hd (msgs c n) \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e)\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "using f2 f1"], ["proof (prove)\nusing this:\n  \\<forall>e n c.\n     \\<exists>p pa s sa m.\n        \\<forall>ca cb.\n           (\\<not> c \\<turnstile> e \\<mapsto> ca \\<or>\n            msgs ca n \\<noteq> [] \\<or>\n            hd (msgs c n) = Marker \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e) \\<and>\n           (\\<not> c \\<turnstile> e \\<mapsto> cb \\<or>\n            hd (msgs c n) = Marker \\<or>\n            hd (msgs cb n) = hd (msgs c n) \\<or>\n            msgs c n = [] \\<or> Recv n p pa s sa m = e)\n  RecvMarker i' p' q' = ev \\<or>\n  states c p' = s'' \\<and>\n  channel i = Some (q', p') \\<and>\n  recv i p' q' s'' s''' m' \\<and>\n  0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m'\n  states c p = s \\<and>\n  channel i = Some (q, p) \\<and>\n  recv i p q s s' m \\<and>\n  0 < length (msgs c i) \\<and> hd (msgs c i) = Msg m\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "by (metis RMoR \\<open>msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Msg m\\<close> assms(1) event.disc(13,15) event.sel(3,5) length_greater_0_conv message.distinct(1) option.inject prod.inject)"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show False"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. False", "using assms Recv"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  can_occur ev' c'\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "case (Send i p q s s' m)"], ["proof (state)\nthis:\n  ev' = Send i p q s s' m\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "then"], ["proof (chain)\npicking this:\n  ev' = Send i p q s s' m", "have \"states c p = states c' p\""], ["proof (prove)\nusing this:\n  ev' = Send i p q s s' m\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "using assms no_state_change_if_no_event"], ["proof (prove)\nusing this:\n  ev' = Send i p q s s' m\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "by auto"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal (3 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 3. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "then"], ["proof (chain)\npicking this:\n  states c p = states c' p", "show \"can_occur ev' c'\""], ["proof (prove)\nusing this:\n  states c p = states c' p\n\ngoal (1 subgoal):\n 1. can_occur ev' c'", "using assms assms(3) can_occur_def Send"], ["proof (prove)\nusing this:\n  states c p = states c' p\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev' = Send i p q s s' m\n\ngoal (1 subgoal):\n 1. can_occur ev' c'", "by auto"], ["proof (state)\nthis:\n  can_occur ev' c'\n\ngoal (2 subgoals):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "case (RecvMarker i p q)"], ["proof (state)\nthis:\n  ev' = RecvMarker i p q\n\ngoal (2 subgoals):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "then"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i p q", "have msgs_ci: \"hd (msgs c i) = Marker \\<and> length (msgs c i) > 0\""], ["proof (prove)\nusing this:\n  ev' = RecvMarker i p q\n\ngoal (1 subgoal):\n 1. hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ev' = RecvMarker i p q \\<Longrightarrow>\n    hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)", "from RecvMarker"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i p q", "have \"length (msgs c i) > 0\""], ["proof (prove)\nusing this:\n  ev' = RecvMarker i p q\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i)", "using assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i p q\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i)", "by auto"], ["proof (state)\nthis:\n  0 < length (msgs c i)\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i p q \\<Longrightarrow>\n    hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)", "then"], ["proof (chain)\npicking this:\n  0 < length (msgs c i)", "obtain m' xs where mci: \"msgs c i = m' # xs\""], ["proof (prove)\nusing this:\n  0 < length (msgs c i)\n\ngoal (1 subgoal):\n 1. (\\<And>m' xs.\n        msgs c i = m' # xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.size(3) nat_less_le neq_Nil_conv)"], ["proof (state)\nthis:\n  msgs c i = m' # xs\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i p q \\<Longrightarrow>\n    hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c i = m' # xs", "have m_mark: \"Marker = m'\""], ["proof (prove)\nusing this:\n  msgs c i = m' # xs\n\ngoal (1 subgoal):\n 1. Marker = m'", "proof (cases m', auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> False", "case (Msg msg)"], ["proof (state)\nthis:\n  m' = Msg msg\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  m' = Msg msg", "have \"msgs c i = Msg msg # xs\""], ["proof (prove)\nusing this:\n  m' = Msg msg\n\ngoal (1 subgoal):\n 1. msgs c i = Msg msg # xs", "by (simp add:mci)"], ["proof (state)\nthis:\n  msgs c i = Msg msg # xs\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  msgs c i = Msg msg # xs", "have \"~ can_occur ev' c\""], ["proof (prove)\nusing this:\n  msgs c i = Msg msg # xs\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c", "using RecvMarker can_occur_def"], ["proof (prove)\nusing this:\n  msgs c i = Msg msg # xs\n  ev' = RecvMarker i p q\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c", "by simp"], ["proof (state)\nthis:\n  \\<not> can_occur ev' c\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> can_occur ev' c", "show False"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c\n\ngoal (1 subgoal):\n 1. False", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Marker = m'\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i p q \\<Longrightarrow>\n    hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)", "then"], ["proof (chain)\npicking this:\n  Marker = m'", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker = m'\n\ngoal (1 subgoal):\n 1. hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)", "by (simp add: mci)"], ["proof (state)\nthis:\n  hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)\n\ngoal (2 subgoals):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'\n 2. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "assume asm: \"~ can_occur ev' c'\""], ["proof (state)\nthis:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> can_occur ev' c'", "have \"msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker\""], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker", "using RecvMarker assms(3) can_occur_def list.case_eq_if"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n  ev' = RecvMarker i p q\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  (case ?list of [] \\<Rightarrow> ?f1.0 | x # xa \\<Rightarrow> ?f2.0 x xa) =\n  (if ?list = [] then ?f1.0 else ?f2.0 (hd ?list) (tl ?list))\n\ngoal (1 subgoal):\n 1. msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker", "by fastforce"], ["proof (state)\nthis:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker", "have \"\\<exists>p q. ev = RecvMarker i p q \\<and> Marker = Marker\""], ["proof (prove)\nusing this:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker\n\ngoal (1 subgoal):\n 1. \\<exists>p q. ev = RecvMarker i p q \\<and> Marker = Marker", "using message_must_be_delivered msgs_ci assms"], ["proof (prove)\nusing this:\n  msgs c' i = [] \\<or> hd (msgs c' i) \\<noteq> Marker\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   (msgs ?c ?i \\<noteq> [] \\<and> hd (msgs ?c ?i) = ?m) \\<and>\n   (msgs ?c' ?i = [] \\<or> hd (msgs ?c' ?i) \\<noteq> ?m)\\<rbrakk>\n  \\<Longrightarrow> (\\<exists>p q.\n                        ?ev = RecvMarker ?i p q \\<and> ?m = Marker) \\<or>\n                    (\\<exists>p q s s' m'.\n                        ?ev = Recv ?i p q s s' m' \\<and> ?m = Msg m')\n  hd (msgs c i) = Marker \\<and> 0 < length (msgs c i)\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. \\<exists>p q. ev = RecvMarker i p q \\<and> Marker = Marker", "by blast"], ["proof (state)\nthis:\n  \\<exists>p q. ev = RecvMarker i p q \\<and> Marker = Marker\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<exists>p q. ev = RecvMarker i p q \\<and> Marker = Marker", "obtain r s where RecvMarker_ev: \"ev = RecvMarker i r s\""], ["proof (prove)\nusing this:\n  \\<exists>p q. ev = RecvMarker i p q \\<and> Marker = Marker\n\ngoal (1 subgoal):\n 1. (\\<And>r s.\n        ev = RecvMarker i r s \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ev = RecvMarker i r s\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i r s", "have \"p = r \\<and> q = s\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i r s\n\ngoal (1 subgoal):\n 1. p = r \\<and> q = s", "using RecvMarker assms(1) assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker i r s\n  ev' = RecvMarker i p q\n  c \\<turnstile> ev \\<mapsto> c'\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. p = r \\<and> q = s", "by auto"], ["proof (state)\nthis:\n  p = r \\<and> q = s\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  p = r \\<and> q = s", "have \"occurs_on ev = p\""], ["proof (prove)\nusing this:\n  p = r \\<and> q = s\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "using assms RecvMarker_ev"], ["proof (prove)\nusing this:\n  p = r \\<and> q = s\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  ev = RecvMarker i r s\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "by auto"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show False"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. False", "using RecvMarker"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  ev' = RecvMarker i p q\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  can_occur ev' c'\n\ngoal (1 subgoal):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'", "case (Snapshot p)"], ["proof (state)\nthis:\n  ev' = Snapshot p\n\ngoal (1 subgoal):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'", "then"], ["proof (chain)\npicking this:\n  ev' = Snapshot p", "have \"~ has_snapshotted c p\""], ["proof (prove)\nusing this:\n  ev' = Snapshot p\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None", "using assms assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = Snapshot p\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c\n  can_occur ev' c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "assume asm: \"~ can_occur ev' c'\""], ["proof (state)\nthis:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> can_occur ev' c'", "have \"has_snapshotted c' p\""], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "using can_occur_def Snapshot"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev' = Snapshot p\n\ngoal (1 subgoal):\n 1. ps c' p \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  ps c' p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ps c' p \\<noteq> None", "have \"occurs_on ev = p\""], ["proof (prove)\nusing this:\n  ps c' p \\<noteq> None\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "using \\<open>\\<not> has_snapshotted c p\\<close> assms(1) no_state_change_if_no_event"], ["proof (prove)\nusing this:\n  ps c' p \\<noteq> None\n  \\<not> ps c p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "by fastforce"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show False"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. False", "using assms(2) Snapshot"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n  occurs_on ev \\<noteq> occurs_on ev'\n  ev' = Snapshot p\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  can_occur ev' c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msgs_unchanged_for_other_is:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"regular_event ev\" and\n    \"getId ev = i\" and\n    \"i' \\<noteq> i\"\n  shows\n    \"msgs c i' = msgs c' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  getId ev = i\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "then"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 3. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "case 1"], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 3. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "obtain p s s' where \"ev = Trans p s s'\""], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. (\\<And>p s s'.\n        ev = Trans p s s' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isTrans_def)"], ["proof (state)\nthis:\n  ev = Trans p s s'\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 3. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "then"], ["proof (chain)\npicking this:\n  ev = Trans p s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans p s s'\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "using assms"], ["proof (prove)\nusing this:\n  ev = Trans p s s'\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  getId ev = i\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "by simp"], ["proof (state)\nthis:\n  msgs c i' = msgs c' i'\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "case 2"], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "then"], ["proof (chain)\npicking this:\n  isSend ev", "obtain i' p q s s' m where \"ev = Send i' p q s s' m\""], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' p q s s' m.\n        ev = Send i' p q s s' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isSend_def)"], ["proof (state)\nthis:\n  ev = Send i' p q s s' m\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c i' = msgs c' i'\n 2. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "then"], ["proof (chain)\npicking this:\n  ev = Send i' p q s s' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send i' p q s s' m\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "using assms"], ["proof (prove)\nusing this:\n  ev = Send i' p q s s' m\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  getId ev = i\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "by simp"], ["proof (state)\nthis:\n  msgs c i' = msgs c' i'\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "case 3"], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain i' p q s s' m where \"ev = Recv i' p q s s' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' p q s s' m.\n        ev = Recv i' p q s s' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecv_def)"], ["proof (state)\nthis:\n  ev = Recv i' p q s s' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c i' = msgs c' i'", "with assms"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  getId ev = i\n  i' \\<noteq> i\n  ev = Recv i' p q s s' m", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  getId ev = i\n  i' \\<noteq> i\n  ev = Recv i' p q s s' m\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "by auto"], ["proof (state)\nthis:\n  msgs c i' = msgs c' i'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i' = msgs c' i'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msgs_unchanged_if_snapshotted_RecvMarker_for_other_is:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"ev = RecvMarker i p q\" and\n    \"has_snapshotted c p\" and\n    \"i' \\<noteq> i\"\n  shows\n    \"msgs c i' = msgs c' i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  ev = RecvMarker i p q\n  ps c p \\<noteq> None\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "by auto"], ["", "lemma event_can_go_back_if_no_sender:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\" and\n    \"can_occur ev' c'\" and\n    \"~ isRecvMarker ev'\" and\n    \"~ isSend ev\"\n  shows\n    \"can_occur ev' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c", "proof (cases ev')"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "case (Snapshot p)"], ["proof (state)\nthis:\n  ev' = Snapshot p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  ev' = Snapshot p", "have \"~ has_snapshotted c' p\""], ["proof (prove)\nusing this:\n  ev' = Snapshot p\n\ngoal (1 subgoal):\n 1. \\<not> ps c' p \\<noteq> None", "using assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = Snapshot p\n  can_occur ev' c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<not> ps c' p \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  \\<not> ps c' p \\<noteq> None\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c' p \\<noteq> None", "have \"~ has_snapshotted c p\""], ["proof (prove)\nusing this:\n  \\<not> ps c' p \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None", "using assms(1) snapshot_state_unchanged"], ["proof (prove)\nusing this:\n  \\<not> ps c' p \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   ps ?c ?p \\<noteq> None\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. \\<not> ps c p \\<noteq> None", "by force"], ["proof (state)\nthis:\n  \\<not> ps c p \\<noteq> None\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x4. ev' = Snapshot x4 \\<Longrightarrow> can_occur ev' c\n 5. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using can_occur_def Snapshot"], ["proof (prove)\nusing this:\n  \\<not> ps c p \\<noteq> None\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev' = Snapshot p\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by simp"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "case (RecvMarker i p q)"], ["proof (state)\nthis:\n  ev' = RecvMarker i p q\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c\n 4. \\<And>x51 x52 x53.\n       ev' = RecvMarker x51 x52 x53 \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i p q", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i p q\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using assms(4)"], ["proof (prove)\nusing this:\n  ev' = RecvMarker i p q\n  \\<not> isRecvMarker ev'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by auto"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "case (Trans p s s')"], ["proof (state)\nthis:\n  ev' = Trans p s s'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev' = Trans x11 x12 x13 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  ev' = Trans p s s'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = Trans p s s'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using assms(1) assms(2) can_occur_def no_state_change_if_no_event assms(3)"], ["proof (prove)\nusing this:\n  ev' = Trans p s s'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n  can_occur ev' c'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by auto"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "case (Send p q s s' m)"], ["proof (state)\nthis:\n  ev' = Send p q s s' m x26_\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev' = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow> can_occur ev' c\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  ev' = Send p q s s' m x26_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev' = Send p q s s' m x26_\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using assms(1) assms(2) can_occur_def no_state_change_if_no_event assms(3)"], ["proof (prove)\nusing this:\n  ev' = Send p q s s' m x26_\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n  can_occur ev' c'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by auto"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "case (Recv i p q s s' m)"], ["proof (state)\nthis:\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "have \"msgs c' i \\<noteq> Nil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' i \\<noteq> []", "using Recv can_occur_def assms"], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n\ngoal (1 subgoal):\n 1. msgs c' i \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  msgs c' i \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "moreover"], ["proof (state)\nthis:\n  msgs c' i \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "have \"hd (msgs c' i) = Msg m \\<and> length (msgs c' i) > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)", "from Recv"], ["proof (chain)\npicking this:\n  ev' = Recv i p q s s' m", "have \"length (msgs c' i) > 0\""], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c' i)", "using assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n  can_occur ev' c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c' i)", "by auto"], ["proof (state)\nthis:\n  0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  0 < length (msgs c' i)", "obtain m' xs where mcqp: \"msgs c' i = m' # xs\""], ["proof (prove)\nusing this:\n  0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. (\\<And>m' xs.\n        msgs c' i = m' # xs \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis list.size(3) nat_less_le neq_Nil_conv)"], ["proof (state)\nthis:\n  msgs c' i = m' # xs\n\ngoal (1 subgoal):\n 1. hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = m' # xs", "have \"Msg m = m'\""], ["proof (prove)\nusing this:\n  msgs c' i = m' # xs\n\ngoal (1 subgoal):\n 1. Msg m = m'", "proof (cases m', auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c' i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "case Marker"], ["proof (state)\nthis:\n  m' = Marker\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c' i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  m' = Marker", "have \"msgs c' i = Marker # xs\""], ["proof (prove)\nusing this:\n  m' = Marker\n\ngoal (1 subgoal):\n 1. msgs c' i = Marker # xs", "by (simp add:mcqp)"], ["proof (state)\nthis:\n  msgs c' i = Marker # xs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c' i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  msgs c' i = Marker # xs", "have \"~ can_occur ev' c'\""], ["proof (prove)\nusing this:\n  msgs c' i = Marker # xs\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c'", "using Recv can_occur_def"], ["proof (prove)\nusing this:\n  msgs c' i = Marker # xs\n  ev' = Recv i p q s s' m\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. \\<not> can_occur ev' c'", "by simp"], ["proof (state)\nthis:\n  \\<not> can_occur ev' c'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>m' = Marker; msgs c' i = Marker # xs\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  \\<not> can_occur ev' c'", "show False"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n\ngoal (1 subgoal):\n 1. False", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<not> can_occur ev' c'\n  can_occur ev' c'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "case (Msg msg)"], ["proof (state)\nthis:\n  m' = Msg msg\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  m' = Msg msg", "have \"msgs c' i = Msg msg # xs\""], ["proof (prove)\nusing this:\n  m' = Msg msg\n\ngoal (1 subgoal):\n 1. msgs c' i = Msg msg # xs", "by (simp add: mcqp)"], ["proof (state)\nthis:\n  msgs c' i = Msg msg # xs\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>m' = Msg x2; msgs c' i = Msg x2 # xs\\<rbrakk>\n       \\<Longrightarrow> m = x2", "then"], ["proof (chain)\npicking this:\n  msgs c' i = Msg msg # xs", "show \"m = msg\""], ["proof (prove)\nusing this:\n  msgs c' i = Msg msg # xs\n\ngoal (1 subgoal):\n 1. m = msg", "using Recv can_occur_def assms(3)"], ["proof (prove)\nusing this:\n  msgs c' i = Msg msg # xs\n  ev' = Recv i p q s s' m\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  can_occur ev' c'\n\ngoal (1 subgoal):\n 1. m = msg", "by simp"], ["proof (state)\nthis:\n  m = msg\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Msg m = m'\n\ngoal (1 subgoal):\n 1. hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  Msg m = m'", "show ?thesis"], ["proof (prove)\nusing this:\n  Msg m = m'\n\ngoal (1 subgoal):\n 1. hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)", "by (simp add: mcqp)"], ["proof (state)\nthis:\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "moreover"], ["proof (state)\nthis:\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "have \"msgs c i \\<noteq> Nil \\<and> hd (msgs c' i) = hd (msgs c i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "case (Snapshot p')"], ["proof (state)\nthis:\n  ev = Snapshot p'\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot p'", "have \"p' \\<noteq> p\""], ["proof (prove)\nusing this:\n  ev = Snapshot p'\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "using assms Recv"], ["proof (prove)\nusing this:\n  ev = Snapshot p'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "by simp"], ["proof (state)\nthis:\n  p' \\<noteq> p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "have chan: \"channel i = Some (q, p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i = Some (q, p)", "by (metis Recv assms(3) distributed_system.can_occur_Recv distributed_system_axioms)"], ["proof (state)\nthis:\n  channel i = Some (q, p)\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "with Snapshot assms"], ["proof (chain)\npicking this:\n  ev = Snapshot p'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n  channel i = Some (q, p)", "have \"length (msgs c i) > 0 \\<and> hd (msgs c i) = hd (msgs c' i)\""], ["proof (prove)\nusing this:\n  ev = Snapshot p'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n  channel i = Some (q, p)\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)", "proof (cases \"q = p'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q = p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)\n 2. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "case True"], ["proof (state)\nthis:\n  q = p'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q = p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)\n 2. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  q = p'", "have \"msgs c' i = msgs c i @ [Marker]\""], ["proof (prove)\nusing this:\n  q = p'\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "using Snapshot chan assms"], ["proof (prove)\nusing this:\n  q = p'\n  ev = Snapshot p'\n  channel i = Some (q, p)\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q = p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)\n 2. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)", "by (metis append_self_conv2 calculation(2) hd_append2 length_greater_0_conv list.sel(1) message.simps(3))"], ["proof (state)\nthis:\n  0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "case False"], ["proof (state)\nthis:\n  q \\<noteq> p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  q \\<noteq> p'", "have \"msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  q \\<noteq> p'\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "using Snapshot chan assms"], ["proof (prove)\nusing this:\n  q \\<noteq> p'\n  ev = Snapshot p'\n  channel i = Some (q, p)\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Snapshot p'; c \\<turnstile> ev \\<mapsto> c';\n     occurs_on ev \\<noteq> occurs_on ev'; can_occur ev' c';\n     \\<not> isRecvMarker ev'; \\<not> isSend ev; channel i = Some (q, p);\n     q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> 0 < length (msgs c i) \\<and>\n                      hd (msgs c i) = hd (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)", "using calculation"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n  msgs c' i \\<noteq> []\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)", "by simp"], ["proof (state)\nthis:\n  0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < length (msgs c i) \\<and> hd (msgs c i) = hd (msgs c' i)\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by simp"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "case (RecvMarker i' p' q')"], ["proof (state)\nthis:\n  ev = RecvMarker i' p' q'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i' p' q'", "have \"i' \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i' p' q'\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "using Recv assms(1) assms(2) assms(3) can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' p' q'\n  ev' = Recv i p q s s' m\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "by force"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "proof (cases \"has_snapshotted c p'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "case True"], ["proof (state)\nthis:\n  ps c p' \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ps c p' \\<noteq> None", "have \"msgs c i = msgs c' i\""], ["proof (prove)\nusing this:\n  ps c p' \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using \\<open>i' \\<noteq> i\\<close> RecvMarker assms"], ["proof (prove)\nusing this:\n  ps c p' \\<noteq> None\n  i' \\<noteq> i\n  ev = RecvMarker i' p' q'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by simp"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i' \\<noteq> i; ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)\n 2. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs c' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "using calculation"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n  msgs c' i \\<noteq> []\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by simp"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c p' \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c p' \\<noteq> None", "have chan: \"channel i = Some (q, p)\""], ["proof (prove)\nusing this:\n  \\<not> ps c p' \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel i = Some (q, p)", "by (metis Recv assms(3) distributed_system.can_occur_Recv distributed_system_axioms)"], ["proof (state)\nthis:\n  channel i = Some (q, p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i' \\<noteq> i; \\<not> ps c p' \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  channel i = Some (q, p)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i = Some (q, p)\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "proof (cases \"q = p'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i = Some (q, p); q = p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)\n 2. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "case True"], ["proof (state)\nthis:\n  q = p'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i = Some (q, p); q = p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)\n 2. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  q = p'", "have \"msgs c' i = msgs c i @ [Marker]\""], ["proof (prove)\nusing this:\n  q = p'\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "using no_snap RecvMarker \\<open>i' \\<noteq> i\\<close> assms(1) chan"], ["proof (prove)\nusing this:\n  q = p'\n  \\<not> ps c p' \\<noteq> None\n  ev = RecvMarker i' p' q'\n  i' \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n  channel i = Some (q, p)\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i @ [Marker]", "by auto"], ["proof (state)\nthis:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i = Some (q, p); q = p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)\n 2. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i @ [Marker]", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i @ [Marker]\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by (metis append_self_conv2 calculation(2) hd_append2 list.sel(1) message.simps(3))"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "case False"], ["proof (state)\nthis:\n  q \\<noteq> p'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  q \\<noteq> p'", "have \"msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  q \\<noteq> p'\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "using RecvMarker no_snap False chan assms \\<open>i' \\<noteq> i\\<close>"], ["proof (prove)\nusing this:\n  q \\<noteq> p'\n  ev = RecvMarker i' p' q'\n  \\<not> ps c p' \\<noteq> None\n  q \\<noteq> p'\n  channel i = Some (q, p)\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i = Some (q, p); q \\<noteq> p'\\<rbrakk>\n    \\<Longrightarrow> msgs c i \\<noteq> [] \\<and>\n                      hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "using calculation"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n  msgs c' i \\<noteq> []\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by simp"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "case (Trans p' s'' s''')"], ["proof (state)\nthis:\n  ev = Trans p' s'' s'''\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Trans p' s'' s'''", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans p' s'' s'''\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "using assms(1) \\<open>msgs c' i \\<noteq> Nil\\<close>"], ["proof (prove)\nusing this:\n  ev = Trans p' s'' s'''\n  c \\<turnstile> ev \\<mapsto> c'\n  msgs c' i \\<noteq> []\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by auto"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "case (Send i' p' q' s'' s''' m'')"], ["proof (state)\nthis:\n  ev = Send i' p' q' s'' s''' m''\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "have \"p' \\<noteq> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "using Recv Send assms(2)"], ["proof (prove)\nusing this:\n  ev' = Recv i p q s s' m\n  ev = Send i' p' q' s'' s''' m''\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p", "by auto"], ["proof (state)\nthis:\n  p' \\<noteq> p\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  p' \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "using Recv Send assms(1) assms(5) calculation(1)"], ["proof (prove)\nusing this:\n  p' \\<noteq> p\n  ev' = Recv i p q s s' m\n  ev = Send i' p' q' s'' s''' m''\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isSend ev\n  msgs c' i \\<noteq> []\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by auto"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "case (Recv i' p' q' s'' s''' m'')"], ["proof (state)\nthis:\n  ev = Recv i' p' q' s'' s''' m''\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' p' q' s'' s''' m''", "have \"i' \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = Recv i' p' q' s'' s''' m''\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "using assms \\<open>ev' = Recv i p q s s' m\\<close>"], ["proof (prove)\nusing this:\n  ev = Recv i' p' q' s'' s''' m''\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "by (metis distributed_system.can_occur_Recv distributed_system_axioms event.sel(3) next_recv option.inject prod.inject)"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "have \"msgs c i = msgs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using msgs_unchanged_for_other_is Recv \\<open>i' \\<noteq> i\\<close> assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev;\n   getId ?ev = ?i; ?i' \\<noteq> ?i\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i' = msgs ?c' ?i'\n  ev = Recv i' p' q' s'' s''' m''\n  i' \\<noteq> i\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by auto"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs c' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "using \\<open>msgs c' i \\<noteq> Nil\\<close>"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n  msgs c' i \\<noteq> []\n\ngoal (1 subgoal):\n 1. msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)", "by simp"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "moreover"], ["proof (state)\nthis:\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "have \"states c p = states c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states c p = states c' p", "using no_state_change_if_no_event assms Recv"], ["proof (prove)\nusing this:\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  can_occur ev' c'\n  \\<not> isRecvMarker ev'\n  \\<not> isSend ev\n  ev' = Recv i p q s s' m\n\ngoal (1 subgoal):\n 1. states c p = states c' p", "by simp"], ["proof (state)\nthis:\n  states c p = states c' p\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev' = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow> can_occur ev' c", "ultimately"], ["proof (chain)\npicking this:\n  msgs c' i \\<noteq> []\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n  states c p = states c' p", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i \\<noteq> []\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n  states c p = states c' p\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using Recv assms(3) can_occur_def list.case_eq_if"], ["proof (prove)\nusing this:\n  msgs c' i \\<noteq> []\n  hd (msgs c' i) = Msg m \\<and> 0 < length (msgs c' i)\n  msgs c i \\<noteq> [] \\<and> hd (msgs c' i) = hd (msgs c i)\n  states c p = states c' p\n  ev' = Recv i p q s s' m\n  can_occur ev' c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  (case ?list of [] \\<Rightarrow> ?f1.0 | x # xa \\<Rightarrow> ?f2.0 x xa) =\n  (if ?list = [] then ?f1.0 else ?f2.0 (hd ?list) (tl ?list))\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by fastforce"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonregular_event_can_go_back_if_in_distinct_processes:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"regular_event ev\" and\n    \"~ regular_event ev'\" and\n    \"can_occur ev' c'\" and\n    \"occurs_on ev \\<noteq> occurs_on ev'\"\n  shows\n    \"can_occur ev' c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. can_occur ev' c", "let ?p = \"occurs_on ev\""], ["proof (state)\ngoal (1 subgoal):\n 1. can_occur ev' c", "let ?q = \"occurs_on ev'\""], ["proof (state)\ngoal (1 subgoal):\n 1. can_occur ev' c", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<not> regular_event ev'\n  can_occur ev' c'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "moreover"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "have \"isSnapshot ev' \\<or> isRecvMarker ev'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isSnapshot ev' \\<or> isRecvMarker ev'", "using assms nonregular_event"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<not> regular_event ev'\n  can_occur ev' c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  regular_event ?ev \\<noteq> (isSnapshot ?ev \\<or> isRecvMarker ?ev)\n\ngoal (1 subgoal):\n 1. isSnapshot ev' \\<or> isRecvMarker ev'", "by auto"], ["proof (state)\nthis:\n  isSnapshot ev' \\<or> isRecvMarker ev'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "ultimately"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n  isSnapshot ev' \\<or> isRecvMarker ev'", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n  isSnapshot ev' \\<or> isRecvMarker ev'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<lbrakk>isTrans ev; isSnapshot ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 6. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "case 1"], ["proof (state)\nthis:\n  isTrans ev\n  isSnapshot ev'\n\ngoal (6 subgoals):\n 1. \\<lbrakk>isTrans ev; isSnapshot ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 6. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  isTrans ev\n  isSnapshot ev'", "show ?case"], ["proof (prove)\nusing this:\n  isTrans ev\n  isSnapshot ev'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using assms(1) assms(4) assms(5) event_can_go_back_if_no_sender"], ["proof (prove)\nusing this:\n  isTrans ev\n  isSnapshot ev'\n  c \\<turnstile> ev \\<mapsto> c'\n  can_occur ev' c'\n  occurs_on ev \\<noteq> occurs_on ev'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> occurs_on ?ev'; can_occur ?ev' ?c';\n   \\<not> isRecvMarker ?ev'; \\<not> isSend ?ev\\<rbrakk>\n  \\<Longrightarrow> can_occur ?ev' ?c\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by blast"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "case 2"], ["proof (state)\nthis:\n  isTrans ev\n  isRecvMarker ev'\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  isTrans ev\n  isRecvMarker ev'", "obtain s s' where Trans: \"ev = Trans ?p s s'\""], ["proof (prove)\nusing this:\n  isTrans ev\n  isRecvMarker ev'\n\ngoal (1 subgoal):\n 1. (\\<And>s s'.\n        ev = Trans (occurs_on ev) s s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(1))"], ["proof (state)\nthis:\n  ev = Trans (occurs_on ev) s s'\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "obtain i r where RecvMarker: \"ev' = RecvMarker i ?q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i r.\n        ev' = RecvMarker i (occurs_on ev') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using 2"], ["proof (prove)\nusing this:\n  isTrans ev\n  isRecvMarker ev'\n\ngoal (1 subgoal):\n 1. (\\<And>i r.\n        ev' = RecvMarker i (occurs_on ev') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i (occurs_on ev') r\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "have \"msgs c i = msgs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using \"2\"(1) assms(1) assms(2) no_msg_change_if_no_event"], ["proof (prove)\nusing this:\n  isTrans ev\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isSend ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by blast"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "moreover"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "have \"can_occur ev' c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev' c'", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<not> regular_event ev'\n  can_occur ev' c'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. can_occur ev' c'", "by simp"], ["proof (state)\nthis:\n  can_occur ev' c'\n\ngoal (5 subgoals):\n 1. \\<lbrakk>isTrans ev; isRecvMarker ev'\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 5. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "ultimately"], ["proof (chain)\npicking this:\n  msgs c i = msgs c' i\n  can_occur ev' c'", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n  can_occur ev' c'\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "using can_occur_def RecvMarker"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n  can_occur ev' c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev' = RecvMarker i (occurs_on ev') r\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by (metis (mono_tags, lifting) \"2\"(2) event.case_eq_if event.distinct_disc(13) event.distinct_disc(17) event.distinct_disc(19) event.distinct_disc(7) event.sel(10))"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (4 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "case 3"], ["proof (state)\nthis:\n  isSnapshot ev'\n  isSend ev\n\ngoal (4 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev'\n  isSend ev", "have \"ev' = Snapshot ?q\""], ["proof (prove)\nusing this:\n  isSnapshot ev'\n  isSend ev\n\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (4 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "have \"~ has_snapshotted c' ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ps c' (occurs_on ev') \\<noteq> None", "by (metis (mono_tags, lifting) \"3\"(1) assms(4) can_occur_def event.case_eq_if event.distinct_disc(11) event.distinct_disc(16) event.distinct_disc(6))"], ["proof (state)\nthis:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None\n\ngoal (4 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None", "have \"~ has_snapshotted c ?q\""], ["proof (prove)\nusing this:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> ps c (occurs_on ev') \\<noteq> None", "using assms(1) assms(2) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<not> ps c (occurs_on ev') \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n\ngoal (4 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 4. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "unfolding can_occur_def"], ["proof (prove)\nusing this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n\ngoal (1 subgoal):\n 1. case ev' of\n    Trans p s s' \\<Rightarrow> states c p = s \\<and> trans p s s'\n    | Send i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (p, q) \\<and> send i p q s s' msg\n    | Recv i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and>\n        hd (msgs c i) = Msg msg \\<and> recv i p q s s' msg\n    | Snapshot p \\<Rightarrow> \\<not> ps c p \\<noteq> None\n    | RecvMarker i p q \\<Rightarrow>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and> hd (msgs c i) = Marker", "using \\<open>ev' = Snapshot ?q\\<close>"], ["proof (prove)\nusing this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n  ev' = Snapshot (occurs_on ev')\n\ngoal (1 subgoal):\n 1. case ev' of\n    Trans p s s' \\<Rightarrow> states c p = s \\<and> trans p s s'\n    | Send i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (p, q) \\<and> send i p q s s' msg\n    | Recv i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and>\n        hd (msgs c i) = Msg msg \\<and> recv i p q s s' msg\n    | Snapshot p \\<Rightarrow> \\<not> ps c p \\<noteq> None\n    | RecvMarker i p q \\<Rightarrow>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and> hd (msgs c i) = Marker", "by (metis (mono_tags, lifting) event.simps(29))"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (3 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "case 4"], ["proof (state)\nthis:\n  isSnapshot ev'\n  isRecv ev\n\ngoal (3 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev'\n  isRecv ev", "have \"ev' = Snapshot ?q\""], ["proof (prove)\nusing this:\n  isSnapshot ev'\n  isRecv ev\n\ngoal (1 subgoal):\n 1. ev' = Snapshot (occurs_on ev')", "by (metis event.collapse(4))"], ["proof (state)\nthis:\n  ev' = Snapshot (occurs_on ev')\n\ngoal (3 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "have \"~ has_snapshotted c' ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ps c' (occurs_on ev') \\<noteq> None", "by (metis (mono_tags, lifting) \\<open>ev' = Snapshot (occurs_on ev')\\<close> assms(4) can_occur_def event.simps(29))"], ["proof (state)\nthis:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None\n\ngoal (3 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None", "have \"~ has_snapshotted c ?q\""], ["proof (prove)\nusing this:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<not> ps c (occurs_on ev') \\<noteq> None", "using assms(1) assms(2) regular_event_preserves_process_snapshots"], ["proof (prove)\nusing this:\n  \\<not> ps c' (occurs_on ev') \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> ps ?c ?r = ps ?c' ?r\n\ngoal (1 subgoal):\n 1. \\<not> ps c (occurs_on ev') \\<noteq> None", "by auto"], ["proof (state)\nthis:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n\ngoal (3 subgoals):\n 1. \\<lbrakk>isSnapshot ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 3. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None", "show ?case"], ["proof (prove)\nusing this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "unfolding can_occur_def"], ["proof (prove)\nusing this:\n  \\<not> ps c (occurs_on ev') \\<noteq> None\n\ngoal (1 subgoal):\n 1. case ev' of\n    Trans p s s' \\<Rightarrow> states c p = s \\<and> trans p s s'\n    | Send i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (p, q) \\<and> send i p q s s' msg\n    | Recv i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and>\n        hd (msgs c i) = Msg msg \\<and> recv i p q s s' msg\n    | Snapshot p \\<Rightarrow> \\<not> ps c p \\<noteq> None\n    | RecvMarker i p q \\<Rightarrow>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and> hd (msgs c i) = Marker", "by (metis (mono_tags, lifting) \\<open>ev' = Snapshot (occurs_on ev')\\<close> event.simps(29))"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "case 5"], ["proof (state)\nthis:\n  isRecvMarker ev'\n  isSend ev\n\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  isRecvMarker ev'\n  isSend ev", "obtain i s u u' m where \"ev = Send i ?p s u u' m\""], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i s u u' m.\n        ev = Send i (occurs_on ev) s u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i (occurs_on ev) s u u' m\n\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "from 5"], ["proof (chain)\npicking this:\n  isRecvMarker ev'\n  isSend ev", "obtain i' r where \"ev' = RecvMarker i' ?q r\""], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r.\n        ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i' (occurs_on ev') r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i' (occurs_on ev') r", "have pre: \"hd (msgs c' i') = Marker \\<and> length (msgs c' i') > 0\""], ["proof (prove)\nusing this:\n  ev' = RecvMarker i' (occurs_on ev') r\n\ngoal (1 subgoal):\n 1. hd (msgs c' i') = Marker \\<and> 0 < length (msgs c' i')", "by (metis (mono_tags, lifting) assms(4) can_occur_def event.simps(30))"], ["proof (state)\nthis:\n  hd (msgs c' i') = Marker \\<and> 0 < length (msgs c' i')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "have \"hd (msgs c i') = Marker \\<and> length (msgs c i') > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "proof (cases \"i' = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n 2. i' \\<noteq> i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "case False"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n 2. i' \\<noteq> i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "have \"msgs c i' = msgs c' i'\""], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i' = msgs c' i'", "by (metis \\<open>ev = Send i (occurs_on ev) s u u' m\\<close> assms(1) assms(2) event.sel(8) msgs_unchanged_for_other_is)"], ["proof (state)\nthis:\n  msgs c i' = msgs c' i'\n\ngoal (2 subgoals):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n 2. i' \\<noteq> i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "then"], ["proof (chain)\npicking this:\n  msgs c i' = msgs c' i'", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i' = msgs c' i'\n\ngoal (1 subgoal):\n 1. hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "using pre"], ["proof (prove)\nusing this:\n  msgs c i' = msgs c' i'\n  hd (msgs c' i') = Marker \\<and> 0 < length (msgs c' i')\n\ngoal (1 subgoal):\n 1. hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "by auto"], ["proof (state)\nthis:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n\ngoal (1 subgoal):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "case True"], ["proof (state)\nthis:\n  i' = i\n\ngoal (1 subgoal):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "then"], ["proof (chain)\npicking this:\n  i' = i", "have \"msgs c' i' = msgs c i' @ [Msg m]\""], ["proof (prove)\nusing this:\n  i' = i\n\ngoal (1 subgoal):\n 1. msgs c' i' = msgs c i' @ [Msg m]", "by (metis \\<open>ev = Send i (occurs_on ev) s u u' m\\<close> assms(1) next_send)"], ["proof (state)\nthis:\n  msgs c' i' = msgs c i' @ [Msg m]\n\ngoal (1 subgoal):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "then"], ["proof (chain)\npicking this:\n  msgs c' i' = msgs c i' @ [Msg m]", "have \"length (msgs c' i') > 1\""], ["proof (prove)\nusing this:\n  msgs c' i' = msgs c i' @ [Msg m]\n\ngoal (1 subgoal):\n 1. 1 < length (msgs c' i')", "using pre"], ["proof (prove)\nusing this:\n  msgs c' i' = msgs c i' @ [Msg m]\n  hd (msgs c' i') = Marker \\<and> 0 < length (msgs c' i')\n\ngoal (1 subgoal):\n 1. 1 < length (msgs c' i')", "by fastforce"], ["proof (state)\nthis:\n  1 < length (msgs c' i')\n\ngoal (1 subgoal):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "then"], ["proof (chain)\npicking this:\n  1 < length (msgs c' i')", "have \"length (msgs c i') > 0\""], ["proof (prove)\nusing this:\n  1 < length (msgs c' i')\n\ngoal (1 subgoal):\n 1. 0 < length (msgs c i')", "by (simp add: \\<open>msgs c' i' = msgs c i' @ [Msg m]\\<close>)"], ["proof (state)\nthis:\n  0 < length (msgs c i')\n\ngoal (1 subgoal):\n 1. i' = i \\<Longrightarrow>\n    hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "then"], ["proof (chain)\npicking this:\n  0 < length (msgs c i')", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < length (msgs c i')\n\ngoal (1 subgoal):\n 1. hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "using \\<open>msgs c' i' = msgs c i' @ [Msg m]\\<close> pre"], ["proof (prove)\nusing this:\n  0 < length (msgs c i')\n  msgs c' i' = msgs c i' @ [Msg m]\n  hd (msgs c' i') = Marker \\<and> 0 < length (msgs c' i')\n\ngoal (1 subgoal):\n 1. hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "by auto"], ["proof (state)\nthis:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n\ngoal (2 subgoals):\n 1. \\<lbrakk>isRecvMarker ev'; isSend ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c\n 2. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')", "show ?case"], ["proof (prove)\nusing this:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "unfolding can_occur_def"], ["proof (prove)\nusing this:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n\ngoal (1 subgoal):\n 1. case ev' of\n    Trans p s s' \\<Rightarrow> states c p = s \\<and> trans p s s'\n    | Send i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (p, q) \\<and> send i p q s s' msg\n    | Recv i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and>\n        hd (msgs c i) = Msg msg \\<and> recv i p q s s' msg\n    | Snapshot p \\<Rightarrow> \\<not> ps c p \\<noteq> None\n    | RecvMarker i p q \\<Rightarrow>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and> hd (msgs c i) = Marker", "using \\<open>ev' = RecvMarker i' ?q r\\<close>"], ["proof (prove)\nusing this:\n  hd (msgs c i') = Marker \\<and> 0 < length (msgs c i')\n  ev' = RecvMarker i' (occurs_on ev') r\n\ngoal (1 subgoal):\n 1. case ev' of\n    Trans p s s' \\<Rightarrow> states c p = s \\<and> trans p s s'\n    | Send i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (p, q) \\<and> send i p q s s' msg\n    | Recv i p q s s' msg \\<Rightarrow>\n        states c p = s \\<and>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and>\n        hd (msgs c i) = Msg msg \\<and> recv i p q s s' msg\n    | Snapshot p \\<Rightarrow> \\<not> ps c p \\<noteq> None\n    | RecvMarker i p q \\<Rightarrow>\n        channel i = Some (q, p) \\<and>\n        0 < length (msgs c i) \\<and> hd (msgs c i) = Marker", "by (metis (mono_tags, lifting) assms(4) can_occur_def event.simps(30))"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "case 6"], ["proof (state)\nthis:\n  isRecvMarker ev'\n  isRecv ev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  isRecvMarker ev'\n  isRecv ev", "obtain i s u u' m where \"ev = Recv i ?p s u u' m\""], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i s u u' m.\n        ev = Recv i (occurs_on ev) s u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i (occurs_on ev) s u u' m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "from 6"], ["proof (chain)\npicking this:\n  isRecvMarker ev'\n  isRecv ev", "obtain i' r where \"ev' = RecvMarker i' ?q r\""], ["proof (prove)\nusing this:\n  isRecvMarker ev'\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r.\n        ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(5))"], ["proof (state)\nthis:\n  ev' = RecvMarker i' (occurs_on ev') r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  ev' = RecvMarker i' (occurs_on ev') r", "have \"i' \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev' = RecvMarker i' (occurs_on ev') r\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow> i' \\<noteq> i", "have \"?p \\<noteq> ?q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> occurs_on ev'", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  regular_event ev\n  \\<not> regular_event ev'\n  can_occur ev' c'\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> occurs_on ev'", "by simp"], ["proof (state)\nthis:\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow> i' \\<noteq> i", "moreover"], ["proof (state)\nthis:\n  occurs_on ev \\<noteq> occurs_on ev'\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow> i' \\<noteq> i", "have \"channel i = Some (s, ?p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i = Some (s, occurs_on ev)", "by (metis \\<open>ev = Recv i (occurs_on ev) s u u' m\\<close> assms(1) distributed_system.can_occur_Recv distributed_system_axioms happen_implies_can_occur)"], ["proof (state)\nthis:\n  channel i = Some (s, occurs_on ev)\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow> i' \\<noteq> i", "moreover"], ["proof (state)\nthis:\n  channel i = Some (s, occurs_on ev)\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow> i' \\<noteq> i", "have \"channel i' = Some (r, ?q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i' = Some (r, occurs_on ev')", "by (metis (mono_tags, lifting) \\<open>ev' = RecvMarker i' (occurs_on ev') r\\<close> assms(4) can_occur_def event.case_eq_if event.disc(5,10,15,20) event.sel(5,10,13))"], ["proof (state)\nthis:\n  channel i' = Some (r, occurs_on ev')\n\ngoal (1 subgoal):\n 1. ev' = RecvMarker i' (occurs_on ev') r \\<Longrightarrow> i' \\<noteq> i", "ultimately"], ["proof (chain)\npicking this:\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (s, occurs_on ev)\n  channel i' = Some (r, occurs_on ev')", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> occurs_on ev'\n  channel i = Some (s, occurs_on ev)\n  channel i' = Some (r, occurs_on ev')\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>isRecvMarker ev'; isRecv ev\\<rbrakk>\n    \\<Longrightarrow> can_occur ev' c", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?case"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. can_occur ev' c", "by (metis (mono_tags, lifting) \"6\"(1) \\<open>ev = Recv i (occurs_on ev) s u u' m\\<close> \\<open>ev' = RecvMarker i' (occurs_on ev') r\\<close> assms(1) assms(4) can_occur_def event.case_eq_if event.distinct_disc(13) event.distinct_disc(17) event.distinct_disc(7) event.sel(10) next_recv)"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  can_occur ev' c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_state_implies_same_result_state:\n  assumes\n    \"states c p = states d p\"\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\"\n  shows\n    \"states d' p = states c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. states d' p = states c' p", "proof (cases \"occurs_on ev = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. occurs_on ev = p \\<Longrightarrow> states d' p = states c' p\n 2. occurs_on ev \\<noteq> p \\<Longrightarrow> states d' p = states c' p", "case False"], ["proof (state)\nthis:\n  occurs_on ev \\<noteq> p\n\ngoal (2 subgoals):\n 1. occurs_on ev = p \\<Longrightarrow> states d' p = states c' p\n 2. occurs_on ev \\<noteq> p \\<Longrightarrow> states d' p = states c' p", "then"], ["proof (chain)\npicking this:\n  occurs_on ev \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> p\n\ngoal (1 subgoal):\n 1. states d' p = states c' p", "by (metis assms(1-3) distributed_system.no_state_change_if_no_event distributed_system_axioms)"], ["proof (state)\nthis:\n  states d' p = states c' p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> states d' p = states c' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> states d' p = states c' p", "case True"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> states d' p = states c' p", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. states d' p = states c' p", "using assms"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n  states c p = states d p\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. states d' p = states c' p", "by (cases ev, auto)"], ["proof (state)\nthis:\n  states d' p = states c' p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_snapshot_state_implies_same_result_snapshot_state:\n  assumes\n    \"ps c p = ps d p\" and\n    \"states c p = states d p\" and\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\"\n  shows\n    \"ps d' p = ps c' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "proof (cases \"occurs_on ev = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. occurs_on ev = p \\<Longrightarrow> ps d' p = ps c' p\n 2. occurs_on ev \\<noteq> p \\<Longrightarrow> ps d' p = ps c' p", "case False"], ["proof (state)\nthis:\n  occurs_on ev \\<noteq> p\n\ngoal (2 subgoals):\n 1. occurs_on ev = p \\<Longrightarrow> ps d' p = ps c' p\n 2. occurs_on ev \\<noteq> p \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  occurs_on ev \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> p\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "using assms no_state_change_if_no_event"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> p\n  ps c p = ps d p\n  states c p = states d p\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   occurs_on ?ev \\<noteq> ?p\\<rbrakk>\n  \\<Longrightarrow> states ?c ?p = states ?c' ?p \\<and> ps ?c ?p = ps ?c' ?p\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> ps d' p = ps c' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> ps d' p = ps c' p", "case True"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  occurs_on ev = p", "show ?thesis"], ["proof (prove)\nusing this:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x4.\n       \\<lbrakk>occurs_on ev = p; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "case (Snapshot q)"], ["proof (state)\nthis:\n  ev = Snapshot q\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x4.\n       \\<lbrakk>occurs_on ev = p; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot q", "have \"p = q\""], ["proof (prove)\nusing this:\n  ev = Snapshot q\n\ngoal (1 subgoal):\n 1. p = q", "using True"], ["proof (prove)\nusing this:\n  ev = Snapshot q\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. p = q", "by auto"], ["proof (state)\nthis:\n  p = q\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x4.\n       \\<lbrakk>occurs_on ev = p; ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "using Snapshot assms(2) assms(3) assms(4)"], ["proof (prove)\nusing this:\n  p = q\n  ev = Snapshot q\n  states c p = states d p\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "case (RecvMarker i q r)"], ["proof (state)\nthis:\n  ev = RecvMarker i q r\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i q r", "have \"p = q\""], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n\ngoal (1 subgoal):\n 1. p = q", "using True"], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. p = q", "by auto"], ["proof (state)\nthis:\n  p = q\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>occurs_on ev = p; ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> ps d' p = ps c' p", "have f1: \"\\<And>c ca. \\<not> c \\<turnstile> ev \\<mapsto> ca \\<or> ps c p = None \\<or> ps c p = ps ca p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ca.\n       \\<not> c \\<turnstile> ev \\<mapsto> ca \\<or>\n       ps c p = None \\<or> ps c p = ps ca p", "using RecvMarker \\<open>p = q\\<close>"], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n  p = q\n\ngoal (1 subgoal):\n 1. \\<And>c ca.\n       \\<not> c \\<turnstile> ev \\<mapsto> ca \\<or>\n       ps c p = None \\<or> ps c p = ps ca p", "by force"], ["proof (state)\nthis:\n  \\<not> ?c5 \\<turnstile> ev \\<mapsto> ?ca5 \\<or>\n  ps ?c5 p = None \\<or> ps ?c5 p = ps ?ca5 p\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> ps d' p = ps c' p", "have \"\\<And>c ca. ps c p \\<noteq> None \\<or> \\<not> c \\<turnstile> ev \\<mapsto> ca \\<or> ps ca p = Some (states c p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c ca.\n       ps c p \\<noteq> None \\<or>\n       \\<not> c \\<turnstile> ev \\<mapsto> ca \\<or>\n       ps ca p = Some (states c p)", "using RecvMarker \\<open>p = q\\<close>"], ["proof (prove)\nusing this:\n  ev = RecvMarker i q r\n  p = q\n\ngoal (1 subgoal):\n 1. \\<And>c ca.\n       ps c p \\<noteq> None \\<or>\n       \\<not> c \\<turnstile> ev \\<mapsto> ca \\<or>\n       ps ca p = Some (states c p)", "by force"], ["proof (state)\nthis:\n  ps ?c5 p \\<noteq> None \\<or>\n  \\<not> ?c5 \\<turnstile> ev \\<mapsto> ?ca5 \\<or>\n  ps ?ca5 p = Some (states ?c5 p)\n\ngoal (1 subgoal):\n 1. p = q \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  ps ?c5 p \\<noteq> None \\<or>\n  \\<not> ?c5 \\<turnstile> ev \\<mapsto> ?ca5 \\<or>\n  ps ?ca5 p = Some (states ?c5 p)", "show ?thesis"], ["proof (prove)\nusing this:\n  ps ?c5 p \\<noteq> None \\<or>\n  \\<not> ?c5 \\<turnstile> ev \\<mapsto> ?ca5 \\<or>\n  ps ?ca5 p = Some (states ?c5 p)\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "using f1"], ["proof (prove)\nusing this:\n  ps ?c5 p \\<noteq> None \\<or>\n  \\<not> ?c5 \\<turnstile> ev \\<mapsto> ?ca5 \\<or>\n  ps ?ca5 p = Some (states ?c5 p)\n  \\<not> ?c5 \\<turnstile> ev \\<mapsto> ?ca5 \\<or>\n  ps ?c5 p = None \\<or> ps ?c5 p = ps ?ca5 p\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "by (metis (no_types) assms(1) assms(2) assms(3) assms(4))"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "case (Trans q s s')"], ["proof (state)\nthis:\n  ev = Trans q s s'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  ev = Trans q s s'", "have \"p = q\""], ["proof (prove)\nusing this:\n  ev = Trans q s s'\n\ngoal (1 subgoal):\n 1. p = q", "using True"], ["proof (prove)\nusing this:\n  ev = Trans q s s'\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. p = q", "by auto"], ["proof (state)\nthis:\n  p = q\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>occurs_on ev = p; ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "using Trans assms(1) assms(3) assms(4)"], ["proof (prove)\nusing this:\n  p = q\n  ev = Trans q s s'\n  ps c p = ps d p\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "case (Send i q r u u' m)"], ["proof (state)\nthis:\n  ev = Send i q r u u' m\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  ev = Send i q r u u' m", "have \"p = q\""], ["proof (prove)\nusing this:\n  ev = Send i q r u u' m\n\ngoal (1 subgoal):\n 1. p = q", "using True"], ["proof (prove)\nusing this:\n  ev = Send i q r u u' m\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. p = q", "by auto"], ["proof (state)\nthis:\n  p = q\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>occurs_on ev = p; ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "using Send assms(1) assms(3) assms(4)"], ["proof (prove)\nusing this:\n  p = q\n  ev = Send i q r u u' m\n  ps c p = ps d p\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "case (Recv i q r u u' m)"], ["proof (state)\nthis:\n  ev = Recv i q r u u' m\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  ev = Recv i q r u u' m", "have \"p = q\""], ["proof (prove)\nusing this:\n  ev = Recv i q r u u' m\n\ngoal (1 subgoal):\n 1. p = q", "using True"], ["proof (prove)\nusing this:\n  ev = Recv i q r u u' m\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. p = q", "by auto"], ["proof (state)\nthis:\n  p = q\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>occurs_on ev = p; ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> ps d' p = ps c' p", "then"], ["proof (chain)\npicking this:\n  p = q", "show ?thesis"], ["proof (prove)\nusing this:\n  p = q\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "using Recv assms(1) assms(3) assms(4)"], ["proof (prove)\nusing this:\n  p = q\n  ev = Recv i q r u u' m\n  ps c p = ps d p\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n\ngoal (1 subgoal):\n 1. ps d' p = ps c' p", "by auto"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ps d' p = ps c' p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_messages_imply_same_resulting_messages:\n  assumes\n    \"msgs c i = msgs d i\"\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"d \\<turnstile> ev \\<mapsto> d'\" and\n    \"regular_event ev\"\n  shows\n    \"msgs c' i = msgs d' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using assms"], ["proof (prove)\nusing this:\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "proof (elim disjE)"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isSend ev \\<Longrightarrow> msgs c' i = msgs d' i\n 3. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "assume \"isTrans ev\""], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isSend ev \\<Longrightarrow> msgs c' i = msgs d' i\n 3. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "show ?thesis"], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by (metis assms(1) assms(2) assms(3) isTrans_def next_trans)"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "assume \"isSend ev\""], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isSend ev", "obtain i' r s u u' m where \"ev = Send i' r s u u' m\""], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s u u' m.\n        ev = Send i' r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' r s u u' m\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> msgs c' i = msgs d' i\n 2. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "with assms"], ["proof (chain)\npicking this:\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Send i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Send i' r s u u' m\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by (cases \"i = i'\", auto)"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "assume \"isRecv ev\""], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain i' r s u u' m where Recv: \"ev = Recv i' r s u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r s u u' m.\n        ev = Recv i' r s u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> msgs c' i = msgs d' i", "with assms"], ["proof (chain)\npicking this:\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Recv i' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs d i\n  c \\<turnstile> ev \\<mapsto> c'\n  d \\<turnstile> ev \\<mapsto> d'\n  regular_event ev\n  ev = Recv i' r s u u' m\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs d' i", "by (cases \"i = i'\", auto)"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c' i = msgs d' i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Trans_msg:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"isTrans ev\"\n  shows\n    \"msgs c i = msgs c' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using assms(1) assms(2) no_msg_change_if_no_event regular_event"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  isTrans ev\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c';\n   isSend ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   isRecv ?ev \\<longrightarrow> getId ?ev \\<noteq> ?i;\n   regular_event ?ev\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i = msgs ?c' ?i\n  regular_event ?ev \\<equiv> isTrans ?ev \\<or> isSend ?ev \\<or> isRecv ?ev\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by blast"], ["", "lemma new_msg_in_set_implies_occurrence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"m \\<notin> set (msgs c i)\" and\n    \"m \\<in> set (msgs c' i)\" and\n    \"channel i = Some (p, q)\"\n  shows\n    \"occurs_on ev = p\" (is ?P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. occurs_on ev = p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> p \\<Longrightarrow> False", "assume \"~ ?P\""], ["proof (state)\nthis:\n  occurs_on ev \\<noteq> p\n\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> p \\<Longrightarrow> False", "have \"set (msgs c' i) \\<subseteq> set (msgs c i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "case (Snapshot r)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot r", "have \"msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "using \\<open>~ ?P\\<close> assms"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n  occurs_on ev \\<noteq> p\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by auto"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "case (RecvMarker i' r s)"], ["proof (state)\nthis:\n  ev = RecvMarker i' r s\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker i' r s", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "proof (cases \"has_snapshotted c r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "case True"], ["proof (state)\nthis:\n  ps c r \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker i' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "proof (cases \"i' = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i' = i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>ps c r \\<noteq> None; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "case True"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i' = i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>ps c r \\<noteq> None; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  i' = i", "have \"Marker # msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  i' = i\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "using RecvMarker True assms"], ["proof (prove)\nusing this:\n  i' = i\n  ev = RecvMarker i' r s\n  i' = i\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs c' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ps c r \\<noteq> None; i' = i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>ps c r \\<noteq> None; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  Marker # msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker # msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by (metis set_subset_Cons)"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "case False"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ps c r \\<noteq> None; i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "using RecvMarker True assms"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n  ev = RecvMarker i' r s\n  ps c r \\<noteq> None\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by simp"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "have chan: \"channel i' = Some (s, r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. channel i' = Some (s, r)", "using RecvMarker assms(1) can_occur_def"], ["proof (prove)\nusing this:\n  ev = RecvMarker i' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. channel i' = Some (s, r)", "by auto"], ["proof (state)\nthis:\n  channel i' = Some (s, r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker i' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  channel i' = Some (s, r)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel i' = Some (s, r)\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "proof (cases \"i' = i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (s, r); i' = i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "case True"], ["proof (state)\nthis:\n  i' = i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (s, r); i' = i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  i' = i", "have \"Marker # msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  i' = i\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "using RecvMarker assms"], ["proof (prove)\nusing this:\n  i' = i\n  ev = RecvMarker i' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. Marker # msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  Marker # msgs c' i = msgs c i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>channel i' = Some (s, r); i' = i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  Marker # msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  Marker # msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by (metis set_subset_Cons)"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "case False"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "have \"msgs c' i = msgs c i\""], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "using \\<open>~ ?P\\<close> RecvMarker assms no_snap"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n  occurs_on ev \\<noteq> p\n  ev = RecvMarker i' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. msgs c' i = msgs c i", "by simp"], ["proof (state)\nthis:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>channel i' = Some (s, r); i' \\<noteq> i\\<rbrakk>\n    \\<Longrightarrow> set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c' i = msgs c i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c' i = msgs c i\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by simp"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "case (Trans r u u')"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "using assms \\<open>~ ?P\\<close>"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n  occurs_on ev \\<noteq> p\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by simp"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "case (Send i' r s u u' m')"], ["proof (state)\nthis:\n  ev = Send i' r s u u' m'\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Send i' r s u u' m'", "have \"i' \\<noteq> i\""], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m'\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "using \\<open>~ ?P\\<close> can_occur_def assms"], ["proof (prove)\nusing this:\n  ev = Send i' r s u u' m'\n  occurs_on ev \\<noteq> p\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. i' \\<noteq> i", "by auto"], ["proof (state)\nthis:\n  i' \\<noteq> i\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  i' \\<noteq> i", "have \"msgs c i = msgs c' i\""], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "using \\<open>~ ?P\\<close> assms Send"], ["proof (prove)\nusing this:\n  i' \\<noteq> i\n  occurs_on ev \\<noteq> p\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n  ev = Send i' r s u u' m'\n\ngoal (1 subgoal):\n 1. msgs c i = msgs c' i", "by simp"], ["proof (state)\nthis:\n  msgs c i = msgs c' i\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  msgs c i = msgs c' i", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c i = msgs c' i\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by simp"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "case (Recv i' r s u u' m')"], ["proof (state)\nthis:\n  ev = Recv i' r s u u' m'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       set (msgs c' i) \\<subseteq> set (msgs c i)", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' r s u u' m'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i' r s u u' m'\n\ngoal (1 subgoal):\n 1. set (msgs c' i) \\<subseteq> set (msgs c i)", "by (metis (no_types, lifting) assms(1) eq_iff local.next.simps(5) set_subset_Cons)"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> p \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> p \\<Longrightarrow> False", "have \"~ set (msgs c' i) \\<subseteq> set (msgs c i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> set (msgs c' i) \\<subseteq> set (msgs c i)", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  m \\<notin> set (msgs c i)\n  m \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. \\<not> set (msgs c' i) \\<subseteq> set (msgs c i)", "by blast"], ["proof (state)\nthis:\n  \\<not> set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. occurs_on ev \\<noteq> p \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n  \\<not> set (msgs c' i) \\<subseteq> set (msgs c i)", "show False"], ["proof (prove)\nusing this:\n  set (msgs c' i) \\<subseteq> set (msgs c i)\n  \\<not> set (msgs c' i) \\<subseteq> set (msgs c i)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma new_Marker_in_set_implies_nonregular_occurence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"Marker \\<notin> set (msgs c i)\" and\n    \"Marker \\<in> set (msgs c' i)\" and\n    \"channel i = Some (p, q)\"\n  shows\n    \"~ regular_event ev\" (is ?P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> regular_event ev", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<not> regular_event ev \\<Longrightarrow> False", "have \"occurs_on ev = p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. occurs_on ev = p", "using assms new_msg_in_set_implies_occurrence"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  Marker \\<notin> set (msgs c i)\n  Marker \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; ?m \\<notin> set (msgs ?c ?i);\n   ?m \\<in> set (msgs ?c' ?i); channel ?i = Some (?p, ?q)\\<rbrakk>\n  \\<Longrightarrow> occurs_on ?ev = ?p\n\ngoal (1 subgoal):\n 1. occurs_on ev = p", "by blast"], ["proof (state)\nthis:\n  occurs_on ev = p\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> regular_event ev \\<Longrightarrow> False", "assume \"~ ?P\""], ["proof (state)\nthis:\n  \\<not> \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> regular_event ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<not> regular_event ev", "have \"isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\nusing this:\n  \\<not> \\<not> regular_event ev\n\ngoal (1 subgoal):\n 1. isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by simp"], ["proof (state)\nthis:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> regular_event ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev", "have \"Marker \\<notin> set (msgs c' i)\""], ["proof (prove)\nusing this:\n  isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' i)", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 3. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "case 1"], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 3. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "obtain r u u' where \"ev = Trans r u u'\""], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. (\\<And>r u u'.\n        ev = Trans r u u' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(1))"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 3. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' i)", "using assms(1) assms(2)"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n  c \\<turnstile> ev \\<mapsto> c'\n  Marker \\<notin> set (msgs c i)\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' i)", "by auto"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' i)\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "case 2"], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  isSend ev", "obtain i' r q u u' m where \"ev = Send i' r q u u' m\""], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r q u u' m.\n        ev = Send i' r q u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(2))"], ["proof (state)\nthis:\n  ev = Send i' r q u u' m\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)\n 2. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  ev = Send i' r q u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send i' r q u u' m\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' i)", "by (metis (no_types, lifting) Un_iff assms(1) assms(2) empty_iff empty_set insert_iff list.set(2) message.distinct(1) next_send set_append)"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "case 3"], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain i' r q u u' m where \"ev = Recv i' r q u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>i' r q u u' m.\n        ev = Recv i' r q u u' m \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis event.collapse(3))"], ["proof (state)\nthis:\n  ev = Recv i' r q u u' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> Marker \\<notin> set (msgs c' i)", "then"], ["proof (chain)\npicking this:\n  ev = Recv i' r q u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv i' r q u u' m\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' i)", "by (metis assms(1) assms(2) list.set_intros(2) next_recv)"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> regular_event ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Marker \\<notin> set (msgs c' i)", "show False"], ["proof (prove)\nusing this:\n  Marker \\<notin> set (msgs c' i)\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  Marker \\<notin> set (msgs c' i)\n  c \\<turnstile> ev \\<mapsto> c'\n  Marker \\<notin> set (msgs c i)\n  Marker \\<in> set (msgs c' i)\n  channel i = Some (p, q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma RecvMarker_implies_Marker_in_set:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"ev = RecvMarker cid p q\"\n  shows\n    \"Marker \\<in> set (msgs c cid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker \\<in> set (msgs c cid)", "by (metis (mono_tags, lifting) assms(1) assms(2) can_occur_def distributed_system.happen_implies_can_occur distributed_system_axioms event.simps(30) list.set_sel(1) list.size(3) nat_less_le)"], ["", "lemma RecvMarker_given_channel:\n  assumes\n    \"isRecvMarker ev\" and\n    \"getId ev = cid\" and\n    \"channel cid = Some (p, q)\" and\n    \"can_occur ev c\"\n  shows\n    \"ev = RecvMarker cid q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev = RecvMarker cid q p", "by (metis (mono_tags, lifting) assms(1) assms(2) assms(3) assms(4) can_occur_def event.case_eq_if event.collapse(5) event.distinct_disc(8,14,18,20) option.inject prod.inject)"], ["", "lemma Recv_given_channel:\n  assumes\n    \"isRecv ev\" and\n    \"getId ev = cid\" and\n    \"channel cid = Some (p, q)\" and\n    \"can_occur ev c\"\n  shows\n    \"\\<exists>s s' m. ev = Recv cid q p s s' m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s s' m. ev = Recv cid q p s s' m", "by (metis assms(1) assms(2) assms(3) assms(4) distributed_system.can_occur_Recv distributed_system_axioms event.collapse(3) option.inject prod.inject)"], ["", "lemma same_cs_if_not_recv:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"~ isRecv ev\"\n  shows\n     \"fst (cs c cid) = fst (cs c' cid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "proof (cases \"channel cid = None\")"], ["proof (state)\ngoal (2 subgoals):\n 1. channel cid = None \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. channel cid \\<noteq> None \\<Longrightarrow>\n    fst (cs c cid) = fst (cs c' cid)", "case True"], ["proof (state)\nthis:\n  channel cid = None\n\ngoal (2 subgoals):\n 1. channel cid = None \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. channel cid \\<noteq> None \\<Longrightarrow>\n    fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  channel cid = None", "show ?thesis"], ["proof (prove)\nusing this:\n  channel cid = None\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "using assms(1) no_cs_change_if_no_channel"], ["proof (prove)\nusing this:\n  channel cid = None\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; channel ?i = None\\<rbrakk>\n  \\<Longrightarrow> cs ?c ?i = cs ?c' ?i\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by auto"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. channel cid \\<noteq> None \\<Longrightarrow>\n    fst (cs c cid) = fst (cs c' cid)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. channel cid \\<noteq> None \\<Longrightarrow>\n    fst (cs c cid) = fst (cs c' cid)", "case False"], ["proof (state)\nthis:\n  channel cid \\<noteq> None\n\ngoal (1 subgoal):\n 1. channel cid \\<noteq> None \\<Longrightarrow>\n    fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  channel cid \\<noteq> None", "obtain p q where chan: \"channel cid = Some (p, q)\""], ["proof (prove)\nusing this:\n  channel cid \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        channel cid = Some (p, q) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. channel cid \\<noteq> None \\<Longrightarrow>\n    fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  channel cid = Some (p, q)", "show ?thesis"], ["proof (prove)\nusing this:\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 4. \\<And>x4.\n       \\<lbrakk>channel cid = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case (Snapshot r)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 4. \\<And>x4.\n       \\<lbrakk>channel cid = Some (p, q); ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "with Snapshot assms chan"], ["proof (chain)\npicking this:\n  ev = Snapshot r\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  channel cid = Some (p, q)\n  ev = Snapshot r", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  channel cid = Some (p, q)\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by (cases \"r = q\", auto)"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case (RecvMarker cid' r s)"], ["proof (state)\nthis:\n  ev = RecvMarker cid' r s\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' r s", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' r s\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "proof (cases \"has_snapshotted c r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case True"], ["proof (state)\nthis:\n  ps c r \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "with assms RecvMarker chan"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  ev = RecvMarker cid' r s\n  channel cid = Some (p, q)\n  ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  ev = RecvMarker cid' r s\n  channel cid = Some (p, q)\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by (cases \"cid' = cid\", auto)"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "proof (cases \"cid' = cid\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' = cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' \\<noteq> cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case True"], ["proof (state)\nthis:\n  cid' = cid\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' = cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' \\<noteq> cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  cid' = cid", "show ?thesis"], ["proof (prove)\nusing this:\n  cid' = cid\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "using RecvMarker assms chan"], ["proof (prove)\nusing this:\n  cid' = cid\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by auto"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' \\<noteq> cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' \\<noteq> cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case False"], ["proof (state)\nthis:\n  cid' \\<noteq> cid\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid' \\<noteq> cid\\<rbrakk>\n    \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "with assms RecvMarker chan no_snap"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  ev = RecvMarker cid' r s\n  channel cid = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n  cid' \\<noteq> cid", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n  ev = RecvMarker cid' r s\n  channel cid = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n  cid' \\<noteq> cid\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by (cases \"r = q\", auto)"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case (Trans r u u')"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>channel cid = Some (p, q); ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "using assms"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by auto"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "case (Send r s u u')"], ["proof (state)\nthis:\n  ev = Send r s u u' x25_ x26_\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "then"], ["proof (chain)\npicking this:\n  ev = Send r s u u' x25_ x26_", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send r s u u' x25_ x26_\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "using assms"], ["proof (prove)\nusing this:\n  ev = Send r s u u' x25_ x26_\n  c \\<turnstile> ev \\<mapsto> c'\n  \\<not> isRecv ev\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by auto"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> fst (cs c cid) = fst (cs c' cid)", "qed (metis assms(2) isRecv_def)"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma done_only_from_recv_marker:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"channel cid = Some (p, q)\" and\n    \"snd (cs c cid) \\<noteq> Done\" and\n    \"snd (cs c' cid) = Done\"\n  shows\n    \"ev = RecvMarker cid q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev = RecvMarker cid q p", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. ev \\<noteq> RecvMarker cid q p \\<Longrightarrow> False", "assume \"~ ev = RecvMarker cid q p\""], ["proof (state)\nthis:\n  ev \\<noteq> RecvMarker cid q p\n\ngoal (1 subgoal):\n 1. ev \\<noteq> RecvMarker cid q p \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ev \\<noteq> RecvMarker cid q p", "show False"], ["proof (prove)\nusing this:\n  ev \\<noteq> RecvMarker cid q p\n\ngoal (1 subgoal):\n 1. False", "proof (cases \"isRecvMarker ev\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "case True"], ["proof (state)\nthis:\n  isRecvMarker ev\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  isRecvMarker ev", "obtain cid' s r where RecvMarker: \"ev = RecvMarker cid' s r\""], ["proof (prove)\nusing this:\n  isRecvMarker ev\n\ngoal (1 subgoal):\n 1. (\\<And>cid' s r.\n        ev = RecvMarker cid' s r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecvMarker_def)"], ["proof (state)\nthis:\n  ev = RecvMarker cid' s r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "have \"cid \\<noteq> cid'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cid \\<noteq> cid'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "assume \"~ cid \\<noteq> cid'\""], ["proof (state)\nthis:\n  \\<not> cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> cid \\<noteq> cid'", "show False"], ["proof (prove)\nusing this:\n  \\<not> cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. False", "using \\<open>ev = RecvMarker cid' s r\\<close> \\<open>ev \\<noteq> RecvMarker cid q p\\<close> assms(1) assms(2) can_occur_def"], ["proof (prove)\nusing this:\n  \\<not> cid \\<noteq> cid'\n  ev = RecvMarker cid' s r\n  ev \\<noteq> RecvMarker cid q p\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> cid'", "have \"snd (cs c' cid) \\<noteq> Done\""], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "proof (cases \"has_snapshotted c s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>cid \\<noteq> cid'; ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. \\<lbrakk>cid \\<noteq> cid'; \\<not> ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case True"], ["proof (state)\nthis:\n  ps c s \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>cid \\<noteq> cid'; ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. \\<lbrakk>cid \\<noteq> cid'; \\<not> ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  ps c s \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ps c s \\<noteq> None\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "using RecvMarker assms \\<open>cid \\<noteq> cid'\\<close>"], ["proof (prove)\nusing this:\n  ps c s \\<noteq> None\n  ev = RecvMarker cid' s r\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by simp"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. \\<lbrakk>cid \\<noteq> cid'; \\<not> ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>cid \\<noteq> cid'; \\<not> ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case False"], ["proof (state)\nthis:\n  \\<not> ps c s \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>cid \\<noteq> cid'; \\<not> ps c s \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "with RecvMarker assms \\<open>cid \\<noteq> cid'\\<close>"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' s r\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n  cid \\<noteq> cid'\n  \\<not> ps c s \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' s r\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n  cid \\<noteq> cid'\n  \\<not> ps c s \\<noteq> None\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by (cases \"s = q\", auto)"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  snd (cs c' cid) \\<noteq> Done", "show False"], ["proof (prove)\nusing this:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  snd (cs c' cid) \\<noteq> Done\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "case False"], ["proof (state)\nthis:\n  \\<not> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> isRecvMarker ev", "have \"isSnapshot ev \\<or> isTrans ev \\<or> isSend ev \\<or> isRecv ev\""], ["proof (prove)\nusing this:\n  \\<not> isRecvMarker ev\n\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isTrans ev \\<or> isSend ev \\<or> isRecv ev", "using event.exhaust_disc"], ["proof (prove)\nusing this:\n  \\<not> isRecvMarker ev\n  \\<lbrakk>isTrans ?event \\<Longrightarrow> ?P;\n   isSend ?event \\<Longrightarrow> ?P; isRecv ?event \\<Longrightarrow> ?P;\n   isSnapshot ?event \\<Longrightarrow> ?P;\n   isRecvMarker ?event \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. isSnapshot ev \\<or> isTrans ev \\<or> isSend ev \\<or> isRecv ev", "by blast"], ["proof (state)\nthis:\n  isSnapshot ev \\<or> isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev \\<or> isTrans ev \\<or> isSend ev \\<or> isRecv ev", "have \"snd (cs c' cid) \\<noteq> Done\""], ["proof (prove)\nusing this:\n  isSnapshot ev \\<or> isTrans ev \\<or> isSend ev \\<or> isRecv ev\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (4 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 4. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case 1"], ["proof (state)\nthis:\n  isSnapshot ev\n\ngoal (4 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 4. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  isSnapshot ev", "obtain r where Snapshot: \"ev = Snapshot r\""], ["proof (prove)\nusing this:\n  isSnapshot ev\n\ngoal (1 subgoal):\n 1. (\\<And>r. ev = Snapshot r \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isSnapshot_def)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (4 subgoals):\n 1. isSnapshot ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 4. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "with assms"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n  ev = Snapshot r", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by (cases \"q = r\", auto)"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case 2"], ["proof (state)\nthis:\n  isTrans ev\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  isTrans ev", "obtain r u u' where \"ev = Trans r u u'\""], ["proof (prove)\nusing this:\n  isTrans ev\n\ngoal (1 subgoal):\n 1. (\\<And>r u u'.\n        ev = Trans r u u' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson isTrans_def)"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. isTrans ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 3. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?case"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "using assms"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case 3"], ["proof (state)\nthis:\n  isSend ev\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  isSend ev", "obtain cid' r s u u' m where \"ev = Send cid' r s u u' m\""], ["proof (prove)\nusing this:\n  isSend ev\n\ngoal (1 subgoal):\n 1. (\\<And>cid' r s u u' m.\n        ev = Send cid' r s u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson isSend_def)"], ["proof (state)\nthis:\n  ev = Send cid' r s u u' m\n\ngoal (2 subgoals):\n 1. isSend ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  ev = Send cid' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Send cid' r s u u' m\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "using assms"], ["proof (prove)\nusing this:\n  ev = Send cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case 4"], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain cid' r s u u' m where Recv: \"ev = Recv cid' r s u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>cid' r s u u' m.\n        ev = Recv cid' r s u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecv_def)"], ["proof (state)\nthis:\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. isRecv ev \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "using Recv assms"], ["proof (prove)\nusing this:\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "proof (cases \"cid = cid'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid = cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "case True"], ["proof (state)\nthis:\n  cid = cid'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid = cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  cid = cid'", "have \"snd (cs c cid) = NotStarted \\<or> snd (cs c cid) = Recording\""], ["proof (prove)\nusing this:\n  cid = cid'\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = NotStarted \\<or> snd (cs c cid) = Recording", "using assms(3) recording_state.exhaust"], ["proof (prove)\nusing this:\n  cid = cid'\n  snd (cs c cid) \\<noteq> Done\n  \\<lbrakk>?y = NotStarted \\<Longrightarrow> ?P;\n   ?y = Recording \\<Longrightarrow> ?P;\n   ?y = Done \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = NotStarted \\<or> snd (cs c cid) = Recording", "by blast"], ["proof (state)\nthis:\n  snd (cs c cid) = NotStarted \\<or> snd (cs c cid) = Recording\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid = cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done\n 2. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  snd (cs c cid) = NotStarted \\<or> snd (cs c cid) = Recording", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (cs c cid) = NotStarted \\<or> snd (cs c cid) = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. snd (cs c cid) = NotStarted \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done\n 2. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "case 1"], ["proof (state)\nthis:\n  snd (cs c cid) = NotStarted\n\ngoal (2 subgoals):\n 1. snd (cs c cid) = NotStarted \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done\n 2. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  snd (cs c cid) = NotStarted", "have \"snd (cs c' cid') = NotStarted\""], ["proof (prove)\nusing this:\n  snd (cs c cid) = NotStarted\n\ngoal (1 subgoal):\n 1. snd (cs c' cid') = NotStarted", "using True Recv assms(1)"], ["proof (prove)\nusing this:\n  snd (cs c cid) = NotStarted\n  cid = cid'\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid') = NotStarted", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid') = NotStarted\n\ngoal (2 subgoals):\n 1. snd (cs c cid) = NotStarted \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done\n 2. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  snd (cs c' cid') = NotStarted", "show ?case"], ["proof (prove)\nusing this:\n  snd (cs c' cid') = NotStarted\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "using True"], ["proof (prove)\nusing this:\n  snd (cs c' cid') = NotStarted\n  cid = cid'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "case 2"], ["proof (state)\nthis:\n  snd (cs c cid) = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  snd (cs c cid) = Recording", "have \"snd (cs c' cid') = Recording\""], ["proof (prove)\nusing this:\n  snd (cs c cid) = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c' cid') = Recording", "using True Recv assms(1)"], ["proof (prove)\nusing this:\n  snd (cs c cid) = Recording\n  cid = cid'\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid') = Recording", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid') = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> Done", "then"], ["proof (chain)\npicking this:\n  snd (cs c' cid') = Recording", "show ?case"], ["proof (prove)\nusing this:\n  snd (cs c' cid') = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "using True"], ["proof (prove)\nusing this:\n  snd (cs c' cid') = Recording\n  cid = cid'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> Done", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = Recv cid' r s u u' m; c \\<turnstile> ev \\<mapsto> c';\n     channel cid = Some (p, q); snd (cs c cid) \\<noteq> Done;\n     snd (cs c' cid) = Done; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> Done", "qed auto"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev \\<noteq> RecvMarker cid q p; \\<not> isRecvMarker ev\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  snd (cs c' cid) \\<noteq> Done", "show False"], ["proof (prove)\nusing this:\n  snd (cs c' cid) \\<noteq> Done\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  snd (cs c' cid) \\<noteq> Done\n  c \\<turnstile> ev \\<mapsto> c'\n  channel cid = Some (p, q)\n  snd (cs c cid) \\<noteq> Done\n  snd (cs c' cid) = Done\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cs_not_not_started_stable:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"snd (cs c cid) \\<noteq> NotStarted\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"snd (cs c' cid) \\<noteq> NotStarted\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "using assms"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case (Snapshot r)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 4. \\<And>x4.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Snapshot x4\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 5. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot r", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "by (metis assms(1) assms(2) next_snapshot recording_state.simps(2) sndI)"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case (RecvMarker cid' r s)"], ["proof (state)\nthis:\n  ev = RecvMarker cid' r s\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 4. \\<And>x51 x52 x53.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = RecvMarker x51 x52 x53\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' r s", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' r s\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "proof (cases \"has_snapshotted c r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case True"], ["proof (state)\nthis:\n  ps c r \\<noteq> None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "with RecvMarker assms"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n  ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n  ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "by (cases \"cid = cid'\", auto)"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case no_snap: False"], ["proof (state)\nthis:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ev = RecvMarker cid' r s; \\<not> ps c r \\<noteq> None\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  \\<not> ps c r \\<noteq> None", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> ps c r \\<noteq> None\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "proof (cases \"cid = cid'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid = cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case True"], ["proof (state)\nthis:\n  cid = cid'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid = cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  cid = cid'", "show ?thesis"], ["proof (prove)\nusing this:\n  cid = cid'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "using RecvMarker assms"], ["proof (prove)\nusing this:\n  cid = cid'\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "by auto"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case False"], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> ps c r \\<noteq> None; cid \\<noteq> cid'\\<rbrakk>\n    \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "with RecvMarker assms no_snap"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n  cid \\<noteq> cid'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n  \\<not> ps c r \\<noteq> None\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "by (cases \"s = p\", auto)"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "case (Recv cid' r s u u' m)"], ["proof (state)\nthis:\n  ev = Recv cid' r s u u' m\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  ev = Recv cid' r s u u' m", "have \"snd (cs c cid) = Recording \\<or> snd (cs c cid) = Done\""], ["proof (prove)\nusing this:\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<or> snd (cs c cid) = Done", "using assms(2) recording_state.exhaust"], ["proof (prove)\nusing this:\n  ev = Recv cid' r s u u' m\n  snd (cs c cid) \\<noteq> NotStarted\n  \\<lbrakk>?y = NotStarted \\<Longrightarrow> ?P;\n   ?y = Recording \\<Longrightarrow> ?P;\n   ?y = Done \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<or> snd (cs c cid) = Done", "by blast"], ["proof (state)\nthis:\n  snd (cs c cid) = Recording \\<or> snd (cs c cid) = Done\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Recv x31 x32 x33 x34 x35 x36\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  snd (cs c cid) = Recording \\<or> snd (cs c cid) = Done", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (cs c cid) = Recording \\<or> snd (cs c cid) = Done\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "proof (elim disjE, goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted\n 2. snd (cs c cid) = Done \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted", "case 1"], ["proof (state)\nthis:\n  snd (cs c cid) = Recording\n\ngoal (2 subgoals):\n 1. snd (cs c cid) = Recording \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted\n 2. snd (cs c cid) = Done \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted", "then"], ["proof (chain)\npicking this:\n  snd (cs c cid) = Recording", "show ?thesis"], ["proof (prove)\nusing this:\n  snd (cs c cid) = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "by (metis (no_types, lifting) Recv assms(1) eq_snd_iff next_recv recording_state.distinct(1))"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Done \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (cs c cid) = Done \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted", "case 2"], ["proof (state)\nthis:\n  snd (cs c cid) = Done\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Done \\<Longrightarrow>\n    snd (cs c' cid) \\<noteq> NotStarted", "with Recv assms"], ["proof (chain)\npicking this:\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n  snd (cs c cid) = Done", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  snd (cs c cid) \\<noteq> NotStarted\n  channel cid = Some (p, q)\n  snd (cs c cid) = Done\n\ngoal (1 subgoal):\n 1. snd (cs c' cid) \\<noteq> NotStarted", "by (cases \"cid = cid'\", auto)"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c' cid) \\<noteq> NotStarted\n\ngoal (2 subgoals):\n 1. \\<And>x11 x12 x13.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Trans x11 x12 x13\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       \\<lbrakk>c \\<turnstile> ev \\<mapsto> c';\n        snd (cs c cid) \\<noteq> NotStarted; channel cid = Some (p, q);\n        ev = Send x21 x22 x23 x24 x25 x26\\<rbrakk>\n       \\<Longrightarrow> snd (cs c' cid) \\<noteq> NotStarted", "qed auto"], ["", "lemma fst_cs_changed_by_recv_recording:\n  assumes\n    step: \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"fst (cs c cid) \\<noteq> fst (cs c' cid)\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"snd (cs c cid) = Recording \\<and> (\\<exists>p q u u' m. ev = Recv cid q p u u' m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "have oc_on: \"occurs_on ev = q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. occurs_on ev = q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. occurs_on ev = q", "obtain nn :: \"('p, 's, 'm) event \\<Rightarrow> nat\" and aa :: \"('p, 's, 'm) event \\<Rightarrow> 'p\" and aaa :: \"('p, 's, 'm) event \\<Rightarrow> 'p\" and bb :: \"('p, 's, 'm) event \\<Rightarrow> 's\" and bba :: \"('p, 's, 'm) event \\<Rightarrow> 's\" and cc :: \"('p, 's, 'm) event \\<Rightarrow> 'm\" where\n      f1: \"\\<forall>e. (\\<not> isRecv e \\<or> e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and> (isRecv e \\<or> (\\<forall>n a aa b ba c. e \\<noteq> Recv n a aa b ba c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn aa aaa bb bba cc.\n        \\<forall>e.\n           (\\<not> isRecv e \\<or>\n            e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and>\n           (isRecv e \\<or>\n            (\\<forall>n a aa b ba c.\n                e \\<noteq> Recv n a aa b ba c)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using isRecv_def"], ["proof (prove)\nusing this:\n  isRecv ?event =\n  (\\<exists>x31 x32 x33 x34 x35 x36. ?event = Recv x31 x32 x33 x34 x35 x36)\n\ngoal (1 subgoal):\n 1. (\\<And>nn aa aaa bb bba cc.\n        \\<forall>e.\n           (\\<not> isRecv e \\<or>\n            e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and>\n           (isRecv e \\<or>\n            (\\<forall>n a aa b ba c.\n                e \\<noteq> Recv n a aa b ba c)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>e.\n     (\\<not> isRecv e \\<or>\n      e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and>\n     (isRecv e \\<or>\n      (\\<forall>n a aa b ba c. e \\<noteq> Recv n a aa b ba c))\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "then"], ["proof (chain)\npicking this:\n  \\<forall>e.\n     (\\<not> isRecv e \\<or>\n      e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and>\n     (isRecv e \\<or>\n      (\\<forall>n a aa b ba c. e \\<noteq> Recv n a aa b ba c))", "have f2: \"c \\<turnstile> Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev) \\<mapsto> c'\""], ["proof (prove)\nusing this:\n  \\<forall>e.\n     (\\<not> isRecv e \\<or>\n      e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and>\n     (isRecv e \\<or>\n      (\\<forall>n a aa b ba c. e \\<noteq> Recv n a aa b ba c))\n\ngoal (1 subgoal):\n 1. c \\<turnstile> Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev)\n                    (cc ev) \\<mapsto> c'", "by (metis (no_types) assms(2) local.step same_cs_if_not_recv)"], ["proof (state)\nthis:\n  c \\<turnstile> Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev)\n                  (cc ev) \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "have f3: \"\\<forall>x0 x1 x7 x8. (x0 \\<noteq> x7 \\<longrightarrow> cs (x8::('p, 's, 'm) configuration) x0 = cs (x1::('p, 's, _) configuration) x0) = (x0 = x7 \\<or> cs x8 x0 = cs x1 x0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x0 x1 x7 x8.\n       (x0 \\<noteq> x7 \\<longrightarrow> cs x8 x0 = cs x1 x0) =\n       (x0 = x7 \\<or> cs x8 x0 = cs x1 x0)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x0 x1 x7 x8.\n     (x0 \\<noteq> x7 \\<longrightarrow> cs x8 x0 = cs x1 x0) =\n     (x0 = x7 \\<or> cs x8 x0 = cs x1 x0)\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "have f4: \"\\<forall>x0 x1 x7 x8. (x7 \\<noteq> x0 \\<longrightarrow> msgs (x1::('p, 's, 'm) configuration) x0 = msgs (x8::('p, 's, _) configuration) x0) = (x7 = x0 \\<or> msgs x1 x0 = msgs x8 x0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x0 x1 x7 x8.\n       (x7 \\<noteq> x0 \\<longrightarrow> msgs x1 x0 = msgs x8 x0) =\n       (x7 = x0 \\<or> msgs x1 x0 = msgs x8 x0)", "by auto"], ["proof (state)\nthis:\n  \\<forall>x0 x1 x7 x8.\n     (x7 \\<noteq> x0 \\<longrightarrow> msgs x1 x0 = msgs x8 x0) =\n     (x7 = x0 \\<or> msgs x1 x0 = msgs x8 x0)\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "have \"\\<forall>x0 x1 x6 x8. (x0 \\<noteq> x6 \\<longrightarrow> states (x1::('p, 's, 'm) configuration) x0 = states (x8::(_, _, 'm) configuration) x0) = (x0 = x6 \\<or> states x1 x0 = states x8 x0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x0 x1 x6 x8.\n       (x0 \\<noteq> x6 \\<longrightarrow> states x1 x0 = states x8 x0) =\n       (x0 = x6 \\<or> states x1 x0 = states x8 x0)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x0 x1 x6 x8.\n     (x0 \\<noteq> x6 \\<longrightarrow> states x1 x0 = states x8 x0) =\n     (x0 = x6 \\<or> states x1 x0 = states x8 x0)\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1 x6 x8.\n     (x0 \\<noteq> x6 \\<longrightarrow> states x1 x0 = states x8 x0) =\n     (x0 = x6 \\<or> states x1 x0 = states x8 x0)", "have \"can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev)) c \\<and> states c (aa ev) = bb ev \\<and> states c' (aa ev) = bba ev \\<and> (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and> msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and> (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and> (\\<forall>a. ps c a = ps c' a) \\<and> (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and> (if snd (cs c (nn ev)) = Recording then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording) else cs c (nn ev) = cs c' (nn ev))\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x6 x8.\n     (x0 \\<noteq> x6 \\<longrightarrow> states x1 x0 = states x8 x0) =\n     (x0 = x6 \\<or> states x1 x0 = states x8 x0)\n\ngoal (1 subgoal):\n 1. can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev))\n     c \\<and>\n    states c (aa ev) = bb ev \\<and>\n    states c' (aa ev) = bba ev \\<and>\n    (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and>\n    msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and>\n    (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and>\n    (\\<forall>a. ps c a = ps c' a) \\<and>\n    (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and>\n    (if snd (cs c (nn ev)) = Recording\n     then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording)\n     else cs c (nn ev) = cs c' (nn ev))", "using f4 f3 f2"], ["proof (prove)\nusing this:\n  \\<forall>x0 x1 x6 x8.\n     (x0 \\<noteq> x6 \\<longrightarrow> states x1 x0 = states x8 x0) =\n     (x0 = x6 \\<or> states x1 x0 = states x8 x0)\n  \\<forall>x0 x1 x7 x8.\n     (x7 \\<noteq> x0 \\<longrightarrow> msgs x1 x0 = msgs x8 x0) =\n     (x7 = x0 \\<or> msgs x1 x0 = msgs x8 x0)\n  \\<forall>x0 x1 x7 x8.\n     (x0 \\<noteq> x7 \\<longrightarrow> cs x8 x0 = cs x1 x0) =\n     (x0 = x7 \\<or> cs x8 x0 = cs x1 x0)\n  c \\<turnstile> Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev)\n                  (cc ev) \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev))\n     c \\<and>\n    states c (aa ev) = bb ev \\<and>\n    states c' (aa ev) = bba ev \\<and>\n    (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and>\n    msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and>\n    (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and>\n    (\\<forall>a. ps c a = ps c' a) \\<and>\n    (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and>\n    (if snd (cs c (nn ev)) = Recording\n     then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording)\n     else cs c (nn ev) = cs c' (nn ev))", "by force"], ["proof (state)\nthis:\n  can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev))\n   c \\<and>\n  states c (aa ev) = bb ev \\<and>\n  states c' (aa ev) = bba ev \\<and>\n  (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and>\n  msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and>\n  (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and>\n  (\\<forall>a. ps c a = ps c' a) \\<and>\n  (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and>\n  (if snd (cs c (nn ev)) = Recording\n   then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording)\n   else cs c (nn ev) = cs c' (nn ev))\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "then"], ["proof (chain)\npicking this:\n  can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev))\n   c \\<and>\n  states c (aa ev) = bb ev \\<and>\n  states c' (aa ev) = bba ev \\<and>\n  (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and>\n  msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and>\n  (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and>\n  (\\<forall>a. ps c a = ps c' a) \\<and>\n  (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and>\n  (if snd (cs c (nn ev)) = Recording\n   then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording)\n   else cs c (nn ev) = cs c' (nn ev))", "show ?thesis"], ["proof (prove)\nusing this:\n  can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev))\n   c \\<and>\n  states c (aa ev) = bb ev \\<and>\n  states c' (aa ev) = bba ev \\<and>\n  (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and>\n  msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and>\n  (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and>\n  (\\<forall>a. ps c a = ps c' a) \\<and>\n  (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and>\n  (if snd (cs c (nn ev)) = Recording\n   then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording)\n   else cs c (nn ev) = cs c' (nn ev))\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "using f1"], ["proof (prove)\nusing this:\n  can_occur (Recv (nn ev) (aa ev) (aaa ev) (bb ev) (bba ev) (cc ev))\n   c \\<and>\n  states c (aa ev) = bb ev \\<and>\n  states c' (aa ev) = bba ev \\<and>\n  (\\<forall>a. a = aa ev \\<or> states c' a = states c a) \\<and>\n  msgs c (nn ev) = Msg (cc ev) # msgs c' (nn ev) \\<and>\n  (\\<forall>n. nn ev = n \\<or> msgs c' n = msgs c n) \\<and>\n  (\\<forall>a. ps c a = ps c' a) \\<and>\n  (\\<forall>n. n = nn ev \\<or> cs c n = cs c' n) \\<and>\n  (if snd (cs c (nn ev)) = Recording\n   then cs c' (nn ev) = (fst (cs c (nn ev)) @ [cc ev], Recording)\n   else cs c (nn ev) = cs c' (nn ev))\n  \\<forall>e.\n     (\\<not> isRecv e \\<or>\n      e = Recv (nn e) (aa e) (aaa e) (bb e) (bba e) (cc e)) \\<and>\n     (isRecv e \\<or>\n      (\\<forall>n a aa b ba c. e \\<noteq> Recv n a aa b ba c))\n\ngoal (1 subgoal):\n 1. occurs_on ev = q", "by (metis (no_types) Pair_inject assms(2) assms(3) can_occur_Recv event.sel(3) local.step option.sel same_cs_if_not_recv)"], ["proof (state)\nthis:\n  occurs_on ev = q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  occurs_on ev = q\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "have \"isRecv ev\" (is ?P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. isRecv ev", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> isRecv ev \\<Longrightarrow> False", "assume \"~ ?P\""], ["proof (state)\nthis:\n  \\<not> isRecv ev\n\ngoal (1 subgoal):\n 1. \\<not> isRecv ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> isRecv ev", "have \"fst (cs c cid) = fst (cs c' cid)\""], ["proof (prove)\nusing this:\n  \\<not> isRecv ev\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by (metis local.step same_cs_if_not_recv)"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. \\<not> isRecv ev \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst (cs c cid) = fst (cs c' cid)", "show False"], ["proof (prove)\nusing this:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  fst (cs c cid) = fst (cs c' cid)\n  c \\<turnstile> ev \\<mapsto> c'\n  fst (cs c cid) \\<noteq> fst (cs c' cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "then"], ["proof (chain)\npicking this:\n  isRecv ev", "obtain cid' r s u u' m where Recv: \"ev = Recv cid' r s u u' m\""], ["proof (prove)\nusing this:\n  isRecv ev\n\ngoal (1 subgoal):\n 1. (\\<And>cid' r s u u' m.\n        ev = Recv cid' r s u u' m \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson isRecv_def)"], ["proof (state)\nthis:\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "have \"cid = cid'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cid = cid'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. cid \\<noteq> cid' \\<Longrightarrow> False", "assume \"~ cid = cid'\""], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. cid \\<noteq> cid' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> cid'", "have \"fst (cs c cid) = fst (cs c' cid)\""], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "using Recv step"], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by auto"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. cid \\<noteq> cid' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst (cs c cid) = fst (cs c' cid)", "show False"], ["proof (prove)\nusing this:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  fst (cs c cid) = fst (cs c' cid)\n  c \\<turnstile> ev \\<mapsto> c'\n  fst (cs c cid) \\<noteq> fst (cs c' cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cid = cid'\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "moreover"], ["proof (state)\nthis:\n  cid = cid'\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "have \"snd (cs c cid) = Recording\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (cs c cid) \\<noteq> Recording \\<Longrightarrow> False", "assume \"~ snd (cs c cid) = Recording\""], ["proof (state)\nthis:\n  snd (cs c cid) \\<noteq> Recording\n\ngoal (1 subgoal):\n 1. snd (cs c cid) \\<noteq> Recording \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  snd (cs c cid) \\<noteq> Recording", "have \"fst (cs c cid) = fst (cs c' cid)\""], ["proof (prove)\nusing this:\n  snd (cs c cid) \\<noteq> Recording\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "using Recv step \\<open>cid = cid'\\<close>"], ["proof (prove)\nusing this:\n  snd (cs c cid) \\<noteq> Recording\n  ev = Recv cid' r s u u' m\n  c \\<turnstile> ev \\<mapsto> c'\n  cid = cid'\n\ngoal (1 subgoal):\n 1. fst (cs c cid) = fst (cs c' cid)", "by auto"], ["proof (state)\nthis:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. snd (cs c cid) \\<noteq> Recording \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  fst (cs c cid) = fst (cs c' cid)", "show False"], ["proof (prove)\nusing this:\n  fst (cs c cid) = fst (cs c' cid)\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  fst (cs c cid) = fst (cs c' cid)\n  c \\<turnstile> ev \\<mapsto> c'\n  fst (cs c cid) \\<noteq> fst (cs c' cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  snd (cs c cid) = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "ultimately"], ["proof (chain)\npicking this:\n  cid = cid'\n  snd (cs c cid) = Recording", "show ?thesis"], ["proof (prove)\nusing this:\n  cid = cid'\n  snd (cs c cid) = Recording\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "using Recv"], ["proof (prove)\nusing this:\n  cid = cid'\n  snd (cs c cid) = Recording\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. snd (cs c cid) = Recording \\<and>\n    (\\<exists>p q u u' m. ev = Recv cid q p u u' m)", "by simp"], ["proof (state)\nthis:\n  snd (cs c cid) = Recording \\<and>\n  (\\<exists>p q u u' m. ev = Recv cid q p u u' m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma no_marker_and_snapshotted_implies_no_more_markers:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"has_snapshotted c p\" and\n    \"Marker \\<notin> set (msgs c cid)\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"Marker \\<notin> set (msgs c' cid)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow> Marker \\<notin> set (msgs c' cid)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "case (Snapshot r)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow> Marker \\<notin> set (msgs c' cid)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot r", "have \"r \\<noteq> p\""], ["proof (prove)\nusing this:\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. r \\<noteq> p", "using assms(1) assms(2) can_occur_def"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n\ngoal (1 subgoal):\n 1. r \\<noteq> p", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> p\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow> Marker \\<notin> set (msgs c' cid)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "then"], ["proof (chain)\npicking this:\n  r \\<noteq> p", "have \"msgs c cid = msgs c' cid\""], ["proof (prove)\nusing this:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid", "using assms Snapshot"], ["proof (prove)\nusing this:\n  r \\<noteq> p\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid", "by simp"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow> Marker \\<notin> set (msgs c' cid)\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "then"], ["proof (chain)\npicking this:\n  msgs c cid = msgs c' cid", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c cid = msgs c' cid\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "using assms"], ["proof (prove)\nusing this:\n  msgs c cid = msgs c' cid\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "by simp"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' cid)\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "case (RecvMarker cid' r s)"], ["proof (state)\nthis:\n  ev = RecvMarker cid' r s\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "have \"cid \\<noteq> cid'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cid \\<noteq> cid'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "assume \"~ cid \\<noteq> cid'\""], ["proof (state)\nthis:\n  \\<not> cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "have \"can_occur ev c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. can_occur ev c", "using happen_implies_can_occur assms"], ["proof (prove)\nusing this:\n  ?c \\<turnstile> ?ev \\<mapsto> ?c' \\<Longrightarrow> can_occur ?ev ?c\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. can_occur ev c", "by blast"], ["proof (state)\nthis:\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> cid \\<noteq> cid'\n  can_occur ev c", "have \"Marker : set (msgs c cid)\""], ["proof (prove)\nusing this:\n  \\<not> cid \\<noteq> cid'\n  can_occur ev c\n\ngoal (1 subgoal):\n 1. Marker \\<in> set (msgs c cid)", "using can_occur_def RecvMarker"], ["proof (prove)\nusing this:\n  \\<not> cid \\<noteq> cid'\n  can_occur ev c\n  can_occur ?ev ?c \\<equiv>\n  case ?ev of Trans p s s' \\<Rightarrow> states ?c p = s \\<and> trans p s s'\n  | Send i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (p, q) \\<and> send i p q s s' msg\n  | Recv i p q s s' msg \\<Rightarrow>\n      states ?c p = s \\<and>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and>\n      hd (msgs ?c i) = Msg msg \\<and> recv i p q s s' msg\n  | Snapshot p \\<Rightarrow> \\<not> ps ?c p \\<noteq> None\n  | RecvMarker i p q \\<Rightarrow>\n      channel i = Some (q, p) \\<and>\n      0 < length (msgs ?c i) \\<and> hd (msgs ?c i) = Marker\n  ev = RecvMarker cid' r s\n\ngoal (1 subgoal):\n 1. Marker \\<in> set (msgs c cid)", "by (metis (mono_tags, lifting) assms(1) event.simps(30) hd_in_set list.size(3) recv_marker_other_channels_not_shrinking zero_order(1))"], ["proof (state)\nthis:\n  Marker \\<in> set (msgs c cid)\n\ngoal (1 subgoal):\n 1. \\<not> cid \\<noteq> cid' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  Marker \\<in> set (msgs c cid)", "show False"], ["proof (prove)\nusing this:\n  Marker \\<in> set (msgs c cid)\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  Marker \\<in> set (msgs c cid)\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> cid'", "have \"msgs c cid = msgs c' cid\""], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid", "proof (cases \"r = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>cid \\<noteq> cid'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid\n 2. \\<lbrakk>cid \\<noteq> cid'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid", "case True"], ["proof (state)\nthis:\n  r = p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>cid \\<noteq> cid'; r = p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid\n 2. \\<lbrakk>cid \\<noteq> cid'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid", "then"], ["proof (chain)\npicking this:\n  r = p", "show ?thesis"], ["proof (prove)\nusing this:\n  r = p\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid", "using RecvMarker \\<open>cid \\<noteq> cid'\\<close> assms(1) assms(2) msgs_unchanged_if_snapshotted_RecvMarker_for_other_is"], ["proof (prove)\nusing this:\n  r = p\n  ev = RecvMarker cid' r s\n  cid \\<noteq> cid'\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  \\<lbrakk>?c \\<turnstile> ?ev \\<mapsto> ?c'; ?ev = RecvMarker ?i ?p ?q;\n   ps ?c ?p \\<noteq> None; ?i' \\<noteq> ?i\\<rbrakk>\n  \\<Longrightarrow> msgs ?c ?i' = msgs ?c' ?i'\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid", "by blast"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid\n\ngoal (1 subgoal):\n 1. \\<lbrakk>cid \\<noteq> cid'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>cid \\<noteq> cid'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid", "case False"], ["proof (state)\nthis:\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>cid \\<noteq> cid'; r \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> msgs c cid = msgs c' cid", "with RecvMarker \\<open>cid \\<noteq> cid'\\<close> step assms"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' r s\n  cid \\<noteq> cid'\n  ?x \\<in> ccpo_class.iterates ?f \\<Longrightarrow>\n  ?f ?x \\<in> ccpo_class.iterates ?f\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  r \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' r s\n  cid \\<noteq> cid'\n  ?x \\<in> ccpo_class.iterates ?f \\<Longrightarrow>\n  ?f ?x \\<in> ccpo_class.iterates ?f\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  r \\<noteq> p\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid", "by (cases \"has_snapshotted c r\", auto)"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "then"], ["proof (chain)\npicking this:\n  msgs c cid = msgs c' cid", "show ?thesis"], ["proof (prove)\nusing this:\n  msgs c cid = msgs c' cid\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "using assms"], ["proof (prove)\nusing this:\n  msgs c cid = msgs c' cid\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "by simp"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' cid)\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "case (Trans r u u')"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "using assms"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "by auto"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' cid)\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "case (Send cid' r s u u' m)"], ["proof (state)\nthis:\n  ev = Send cid' r s u u' m\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "with assms Send"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  ev = Send cid' r s u u' m\n  ev = Send cid' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  ev = Send cid' r s u u' m\n  ev = Send cid' r s u u' m\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "by (cases \"cid = cid'\", auto)"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' cid)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "case (Recv cid' r s u u' m)"], ["proof (state)\nthis:\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       Marker \\<notin> set (msgs c' cid)", "with assms Recv"], ["proof (chain)\npicking this:\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  ev = Recv cid' r s u u' m\n  ev = Recv cid' r s u u' m", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<turnstile> ev \\<mapsto> c'\n  ps c p \\<noteq> None\n  Marker \\<notin> set (msgs c cid)\n  channel cid = Some (p, q)\n  ev = Recv cid' r s u u' m\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. Marker \\<notin> set (msgs c' cid)", "by (cases \"cid = cid'\", auto)"], ["proof (state)\nthis:\n  Marker \\<notin> set (msgs c' cid)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma same_messages_if_no_occurrence:\n  assumes\n    \"c \\<turnstile> ev \\<mapsto> c'\" and\n    \"~ occurs_on ev = p\" and\n    \"~ occurs_on ev = q\" and\n    \"channel cid = Some (p, q)\"\n  shows\n    \"msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "proof (cases ev)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "case (Snapshot r)"], ["proof (state)\nthis:\n  ev = Snapshot r\n\ngoal (5 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x4.\n       ev = Snapshot x4 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 5. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "then"], ["proof (chain)\npicking this:\n  ev = Snapshot r", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "using assms"], ["proof (prove)\nusing this:\n  ev = Snapshot r\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n  occurs_on ev \\<noteq> q\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "by auto"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "case (RecvMarker cid' r s)"], ["proof (state)\nthis:\n  ev = RecvMarker cid' r s\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "have \"cid \\<noteq> cid'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cid \\<noteq> cid'", "by (metis RecvMarker_given_channel assms(1) assms(3) assms(4) RecvMarker event.sel(5,10) happen_implies_can_occur isRecvMarker_def)"], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "have \"\\<nexists>a. channel cid = Some (r, q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>a. channel cid = Some (r, q)", "using assms(2) assms(4) RecvMarker"], ["proof (prove)\nusing this:\n  occurs_on ev \\<noteq> p\n  channel cid = Some (p, q)\n  ev = RecvMarker cid' r s\n\ngoal (1 subgoal):\n 1. \\<nexists>a. channel cid = Some (r, q)", "by auto"], ["proof (state)\nthis:\n  \\<nexists>a. channel cid = Some (r, q)\n\ngoal (4 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 4. \\<And>x51 x52 x53.\n       ev = RecvMarker x51 x52 x53 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "with RecvMarker assms \\<open>cid \\<noteq> cid'\\<close>"], ["proof (chain)\npicking this:\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n  occurs_on ev \\<noteq> q\n  channel cid = Some (p, q)\n  cid \\<noteq> cid'\n  \\<nexists>a. channel cid = Some (r, q)", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = RecvMarker cid' r s\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n  occurs_on ev \\<noteq> q\n  channel cid = Some (p, q)\n  cid \\<noteq> cid'\n  \\<nexists>a. channel cid = Some (r, q)\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "by (cases \"has_snapshotted c r\", auto)"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "case (Trans r u u')"], ["proof (state)\nthis:\n  ev = Trans r u u'\n\ngoal (3 subgoals):\n 1. \\<And>x11 x12 x13.\n       ev = Trans x11 x12 x13 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 3. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "then"], ["proof (chain)\npicking this:\n  ev = Trans r u u'", "show ?thesis"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "using assms"], ["proof (prove)\nusing this:\n  ev = Trans r u u'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n  occurs_on ev \\<noteq> q\n  channel cid = Some (p, q)\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "by auto"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "case (Send cid' r s u u' m)"], ["proof (state)\nthis:\n  ev = Send cid' r s u u' m\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "then"], ["proof (chain)\npicking this:\n  ev = Send cid' r s u u' m", "have \"cid \\<noteq> cid'\""], ["proof (prove)\nusing this:\n  ev = Send cid' r s u u' m\n\ngoal (1 subgoal):\n 1. cid \\<noteq> cid'", "by (metis (mono_tags, lifting) Pair_inject assms(1) assms(2) assms(4) can_occur_def event.sel(2) event.simps(27) happen_implies_can_occur option.inject)"], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (2 subgoals):\n 1. \\<And>x21 x22 x23 x24 x25 x26.\n       ev = Send x21 x22 x23 x24 x25 x26 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n 2. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> cid'", "show ?thesis"], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "using assms Send"], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n  occurs_on ev \\<noteq> q\n  channel cid = Some (p, q)\n  ev = Send cid' r s u u' m\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "by simp"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "case (Recv cid' r s u u' m)"], ["proof (state)\nthis:\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "then"], ["proof (chain)\npicking this:\n  ev = Recv cid' r s u u' m", "have \"cid \\<noteq> cid'\""], ["proof (prove)\nusing this:\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. cid \\<noteq> cid'", "by (metis assms(1) assms(3) assms(4) distributed_system.can_occur_Recv distributed_system.happen_implies_can_occur distributed_system_axioms event.sel(3) option.inject prod.inject)"], ["proof (state)\nthis:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32 x33 x34 x35 x36.\n       ev = Recv x31 x32 x33 x34 x35 x36 \\<Longrightarrow>\n       msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "then"], ["proof (chain)\npicking this:\n  cid \\<noteq> cid'", "show ?thesis"], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "using assms Recv"], ["proof (prove)\nusing this:\n  cid \\<noteq> cid'\n  c \\<turnstile> ev \\<mapsto> c'\n  occurs_on ev \\<noteq> p\n  occurs_on ev \\<noteq> q\n  channel cid = Some (p, q)\n  ev = Recv cid' r s u u' m\n\ngoal (1 subgoal):\n 1. msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid", "by simp"], ["proof (state)\nthis:\n  msgs c cid = msgs c' cid \\<and> cs c cid = cs c' cid\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* locale distributed_system *)"], ["", "end"], ["", "(* theory Distributed_System *)"]]}