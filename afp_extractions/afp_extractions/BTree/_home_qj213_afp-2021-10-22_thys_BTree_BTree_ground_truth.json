{"file_name": "/home/qj213/afp-2021-10-22/thys/BTree/BTree.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BTree", "problem_names": ["lemma separators_split:\n  \"set (separators (l@(a,b)#r)) = set (separators l) \\<union> set (separators r) \\<union> {b}\"", "lemma subtrees_split:\n  \"set (subtrees (l@(a,b)#r)) = set (subtrees l) \\<union> set (subtrees r) \\<union> {a}\"", "lemma finite_set_ins_swap:\n  assumes \"finite A\"\n  shows \"max a (Max (Set.insert b A)) = max b (Max (Set.insert a A))\"", "lemma finite_set_in_idem:\n  assumes \"finite A\"\n  shows \"max a (Max (Set.insert a A)) = Max (Set.insert a A)\"", "lemma height_Leaf: \"height t = 0 \\<longleftrightarrow> t = Leaf\"", "lemma height_btree_order:\n  \"height (Node (ls@[a]) t) = height (Node (a#ls) t)\"", "lemma height_btree_sub: \n  \"height (Node ((sub,x)#ls) t) = max (height (Node ls t)) (Suc (height sub))\"", "lemma height_btree_last: \n  \"height (Node ((sub,x)#ts) t) = max (height (Node ts sub)) (Suc (height t))\"", "lemma set_btree_inorder: \"set (inorder t) = set_btree t\"", "lemma child_subset: \"p \\<in> set t \\<Longrightarrow> set_btree (fst p) \\<subseteq> set_btree (Node t n)\"", "lemma some_child_sub: \n  assumes \"(sub,sep) \\<in> set t\"\n  shows \"sub \\<in> set (subtrees t)\"\n    and \"sep \\<in> set (separators t)\"", "lemma bal_all_subtrees_equal: \"bal (Node ts t) \\<Longrightarrow> (\\<forall>s1 \\<in> set (subtrees ts). \\<forall>s2 \\<in> set (subtrees ts). height s1 = height s2)\"", "lemma fold_max_set: \"\\<forall>x \\<in> set t. x = f \\<Longrightarrow> fold max t f = f\"", "lemma height_bal_tree: \"bal (Node ts t) \\<Longrightarrow> height (Node ts t) = Suc (height t)\"", "lemma bal_split_last: \n  assumes \"bal (Node (ls@(sub,sep)#rs) t)\"\n  shows \"bal (Node (ls@rs) t)\"\n    and \"height (Node (ls@(sub,sep)#rs) t) = height (Node (ls@rs) t)\"", "lemma bal_split_right: \n  assumes \"bal (Node (ls@rs) t)\"\n  shows \"bal (Node rs t)\"\n    and \"height (Node rs t) = height (Node (ls@rs) t)\"", "lemma bal_split_left:\n  assumes \"bal (Node (ls@(a,b)#rs) t)\"\n  shows \"bal (Node ls a)\"\n    and \"height (Node ls a) = height (Node (ls@(a,b)#rs) t)\"", "lemma bal_substitute: \"\\<lbrakk>bal (Node (ls@(a,b)#rs) t); height t = height c; bal c\\<rbrakk> \\<Longrightarrow> bal (Node (ls@(c,b)#rs) t)\"", "lemma bal_substitute_subtree: \"\\<lbrakk>bal (Node (ls@(a,b)#rs) t); height a = height c; bal c\\<rbrakk> \\<Longrightarrow> bal (Node (ls@(c,b)#rs) t)\"", "lemma bal_substitute_separator: \"bal (Node (ls@(a,b)#rs) t) \\<Longrightarrow> bal (Node (ls@(a,c)#rs) t)\"", "lemma order_impl_root_order: \"\\<lbrakk>k > 0; order k t\\<rbrakk> \\<Longrightarrow> root_order k t\"", "lemma sorted_inorder_list_separators: \"sorted_less (inorder_list ts) \\<Longrightarrow> sorted_less (separators ts)\"", "lemma sorted_inorder_list_subtrees:\n  \"sorted_less (inorder_list ts) \\<Longrightarrow> \\<forall> sub \\<in> set (subtrees ts). sorted_less (inorder sub)\"", "lemma sorted_inorder_list_induct_subtree:\n  \"sorted_less (inorder_list (ls@(sub,sep)#rs)) \\<Longrightarrow> sorted_less (inorder sub)\"", "lemma sorted_inorder_induct_last: \"sorted_less (inorder (Node ts t)) \\<Longrightarrow> sorted_less (inorder t)\""], "translations": [["", "lemma separators_split:\n  \"set (separators (l@(a,b)#r)) = set (separators l) \\<union> set (separators r) \\<union> {b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (separators (l @ (a, b) # r)) =\n    set (separators l) \\<union> set (separators r) \\<union> {b}", "by simp"], ["", "lemma subtrees_split:\n  \"set (subtrees (l@(a,b)#r)) = set (subtrees l) \\<union> set (subtrees r) \\<union> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (subtrees (l @ (a, b) # r)) =\n    set (subtrees l) \\<union> set (subtrees r) \\<union> {a}", "by simp"], ["", "(* height and set lemmas *)"], ["", "lemma finite_set_ins_swap:\n  assumes \"finite A\"\n  shows \"max a (Max (Set.insert b A)) = max b (Max (Set.insert a A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max a (Max (insert b A)) = max b (Max (insert a A))", "using Max_insert assms max.commute max.left_commute"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max (insert ?x ?A) = max ?x (Max ?A)\n  finite A\n  max ?a ?b = max ?b ?a\n  max ?b (max ?a ?c) = max ?a (max ?b ?c)\n\ngoal (1 subgoal):\n 1. max a (Max (insert b A)) = max b (Max (insert a A))", "by fastforce"], ["", "lemma finite_set_in_idem:\n  assumes \"finite A\"\n  shows \"max a (Max (Set.insert a A)) = Max (Set.insert a A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max a (Max (insert a A)) = Max (insert a A)", "using Max_insert assms max.commute max.left_commute"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite ?A; ?A \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> Max (insert ?x ?A) = max ?x (Max ?A)\n  finite A\n  max ?a ?b = max ?b ?a\n  max ?b (max ?a ?c) = max ?a (max ?b ?c)\n\ngoal (1 subgoal):\n 1. max a (Max (insert a A)) = Max (insert a A)", "by fastforce"], ["", "lemma height_Leaf: \"height t = 0 \\<longleftrightarrow> t = Leaf\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (height t = 0) = (t = Leaf)", "by (induction t) (auto)"], ["", "lemma height_btree_order:\n  \"height (Node (ls@[a]) t) = height (Node (a#ls) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (Node (ls @ [a]) t) = height (Node (a # ls) t)", "by simp"], ["", "lemma height_btree_sub: \n  \"height (Node ((sub,x)#ls) t) = max (height (Node ls t)) (Suc (height sub))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (Node ((sub, x) # ls) t) =\n    max (height (Node ls t)) (Suc (height sub))", "by simp"], ["", "lemma height_btree_last: \n  \"height (Node ((sub,x)#ts) t) = max (height (Node ts sub)) (Suc (height t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (Node ((sub, x) # ts) t) =\n    max (height (Node ts sub)) (Suc (height t))", "by (induction ts) auto"], ["", "lemma set_btree_inorder: \"set (inorder t) = set_btree t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (inorder t) = set_btree t", "apply(induction t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (inorder Leaf) = set_btree Leaf\n 2. \\<And>x1 t.\n       \\<lbrakk>\\<And>x1a x1aa.\n                   \\<lbrakk>x1a \\<in> set x1;\n                    x1aa \\<in> Basic_BNFs.fsts x1a\\<rbrakk>\n                   \\<Longrightarrow> set (inorder x1aa) = set_btree x1aa;\n        set (inorder t) = set_btree t\\<rbrakk>\n       \\<Longrightarrow> set (inorder (Node x1 t)) = set_btree (Node x1 t)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma child_subset: \"p \\<in> set t \\<Longrightarrow> set_btree (fst p) \\<subseteq> set_btree (Node t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> set t \\<Longrightarrow>\n    set_btree (fst p) \\<subseteq> set_btree (Node t n)", "apply(induction p arbitrary: t n)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b t n.\n       (a, b) \\<in> set t \\<Longrightarrow>\n       set_btree (fst (a, b)) \\<subseteq> set_btree (Node t n)", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma some_child_sub: \n  assumes \"(sub,sep) \\<in> set t\"\n  shows \"sub \\<in> set (subtrees t)\"\n    and \"sep \\<in> set (separators t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub \\<in> set (subtrees t) &&& sep \\<in> set (separators t)", "using assms"], ["proof (prove)\nusing this:\n  (sub, sep) \\<in> set t\n\ngoal (1 subgoal):\n 1. sub \\<in> set (subtrees t) &&& sep \\<in> set (separators t)", "by force+"], ["", "(* balancedness lemmas *)"], ["", "lemma bal_all_subtrees_equal: \"bal (Node ts t) \\<Longrightarrow> (\\<forall>s1 \\<in> set (subtrees ts). \\<forall>s2 \\<in> set (subtrees ts). height s1 = height s2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (Node ts t) \\<Longrightarrow>\n    \\<forall>s1\\<in>set (subtrees ts).\n       \\<forall>s2\\<in>set (subtrees ts). height s1 = height s2", "by (metis BTree.bal.simps(2))"], ["", "lemma fold_max_set: \"\\<forall>x \\<in> set t. x = f \\<Longrightarrow> fold max t f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set t. x = f \\<Longrightarrow> fold max t f = f", "apply(induction t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>set []. x = f \\<Longrightarrow> fold max [] f = f\n 2. \\<And>a t.\n       \\<lbrakk>\\<forall>x\\<in>set t. x = f \\<Longrightarrow>\n                fold max t f = f;\n        \\<forall>x\\<in>set (a # t). x = f\\<rbrakk>\n       \\<Longrightarrow> fold max (a # t) f = f", "apply(auto simp add: max_def_raw)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma height_bal_tree: \"bal (Node ts t) \\<Longrightarrow> height (Node ts t) = Suc (height t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (Node ts t) \\<Longrightarrow> height (Node ts t) = Suc (height t)", "by (induction ts) auto"], ["", "lemma bal_split_last: \n  assumes \"bal (Node (ls@(sub,sep)#rs) t)\"\n  shows \"bal (Node (ls@rs) t)\"\n    and \"height (Node (ls@(sub,sep)#rs) t) = height (Node (ls@rs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (Node (ls @ rs) t) &&&\n    height (Node (ls @ (sub, sep) # rs) t) = height (Node (ls @ rs) t)", "using assms"], ["proof (prove)\nusing this:\n  bal (Node (ls @ (sub, sep) # rs) t)\n\ngoal (1 subgoal):\n 1. bal (Node (ls @ rs) t) &&&\n    height (Node (ls @ (sub, sep) # rs) t) = height (Node (ls @ rs) t)", "by auto"], ["", "lemma bal_split_right: \n  assumes \"bal (Node (ls@rs) t)\"\n  shows \"bal (Node rs t)\"\n    and \"height (Node rs t) = height (Node (ls@rs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (Node rs t) &&& height (Node rs t) = height (Node (ls @ rs) t)", "using assms"], ["proof (prove)\nusing this:\n  bal (Node (ls @ rs) t)\n\ngoal (1 subgoal):\n 1. bal (Node rs t) &&& height (Node rs t) = height (Node (ls @ rs) t)", "by (auto simp add: image_constant_conv)"], ["", "lemma bal_split_left:\n  assumes \"bal (Node (ls@(a,b)#rs) t)\"\n  shows \"bal (Node ls a)\"\n    and \"height (Node ls a) = height (Node (ls@(a,b)#rs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (Node ls a) &&&\n    height (Node ls a) = height (Node (ls @ (a, b) # rs) t)", "using assms"], ["proof (prove)\nusing this:\n  bal (Node (ls @ (a, b) # rs) t)\n\ngoal (1 subgoal):\n 1. bal (Node ls a) &&&\n    height (Node ls a) = height (Node (ls @ (a, b) # rs) t)", "by (auto simp add: image_constant_conv)"], ["", "lemma bal_substitute: \"\\<lbrakk>bal (Node (ls@(a,b)#rs) t); height t = height c; bal c\\<rbrakk> \\<Longrightarrow> bal (Node (ls@(c,b)#rs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bal (Node (ls @ (a, b) # rs) t); height t = height c;\n     bal c\\<rbrakk>\n    \\<Longrightarrow> bal (Node (ls @ (c, b) # rs) t)", "unfolding bal.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<forall>sub\\<in>set (subtrees (ls @ (a, b) # rs)).\n                 height sub = height t) \\<and>\n             Ball (set (subtrees (ls @ (a, b) # rs))) bal \\<and> bal t;\n     height t = height c; bal c\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>sub\\<in>set (subtrees (ls @ (c, b) # rs)).\n                          height sub = height t) \\<and>\n                      Ball (set (subtrees (ls @ (c, b) # rs))) bal \\<and>\n                      bal t", "by auto"], ["", "lemma bal_substitute_subtree: \"\\<lbrakk>bal (Node (ls@(a,b)#rs) t); height a = height c; bal c\\<rbrakk> \\<Longrightarrow> bal (Node (ls@(c,b)#rs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>bal (Node (ls @ (a, b) # rs) t); height a = height c;\n     bal c\\<rbrakk>\n    \\<Longrightarrow> bal (Node (ls @ (c, b) # rs) t)", "using bal_substitute"], ["proof (prove)\nusing this:\n  \\<lbrakk>bal (Node (?ls @ (?a, ?b) # ?rs) ?t); height ?t = height ?c;\n   bal ?c\\<rbrakk>\n  \\<Longrightarrow> bal (Node (?ls @ (?c, ?b) # ?rs) ?t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>bal (Node (ls @ (a, b) # rs) t); height a = height c;\n     bal c\\<rbrakk>\n    \\<Longrightarrow> bal (Node (ls @ (c, b) # rs) t)", "by auto"], ["", "lemma bal_substitute_separator: \"bal (Node (ls@(a,b)#rs) t) \\<Longrightarrow> bal (Node (ls@(a,c)#rs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (Node (ls @ (a, b) # rs) t) \\<Longrightarrow>\n    bal (Node (ls @ (a, c) # rs) t)", "unfolding bal.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>sub\\<in>set (subtrees (ls @ (a, b) # rs)).\n        height sub = height t) \\<and>\n    Ball (set (subtrees (ls @ (a, b) # rs))) bal \\<and>\n    bal t \\<Longrightarrow>\n    (\\<forall>sub\\<in>set (subtrees (ls @ (a, c) # rs)).\n        height sub = height t) \\<and>\n    Ball (set (subtrees (ls @ (a, c) # rs))) bal \\<and> bal t", "by auto"], ["", "(* order lemmas *)"], ["", "lemma order_impl_root_order: \"\\<lbrakk>k > 0; order k t\\<rbrakk> \\<Longrightarrow> root_order k t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; order k t\\<rbrakk> \\<Longrightarrow> root_order k t", "apply(cases t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; order k t; t = Leaf\\<rbrakk>\n    \\<Longrightarrow> root_order k t\n 2. \\<And>x21 x22.\n       \\<lbrakk>0 < k; order k t; t = Node x21 x22\\<rbrakk>\n       \\<Longrightarrow> root_order k t", "apply(auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* sorted inorder implies that some sublists are sorted. This can be followed directly *)"], ["", "lemma sorted_inorder_list_separators: \"sorted_less (inorder_list ts) \\<Longrightarrow> sorted_less (separators ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder_list ts) \\<Longrightarrow>\n    sorted_less (separators ts)", "apply(induction ts)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sorted_less (inorder_list []) \\<Longrightarrow>\n    sorted_less (separators [])\n 2. \\<And>a ts.\n       \\<lbrakk>sorted_less (inorder_list ts) \\<Longrightarrow>\n                sorted_less (separators ts);\n        sorted_less (inorder_list (a # ts))\\<rbrakk>\n       \\<Longrightarrow> sorted_less (separators (a # ts))", "apply (auto simp add: sorted_lems)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary sorted_inorder_separators: \"sorted_less (inorder (Node ts t)) \\<Longrightarrow> sorted_less (separators ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder (Node ts t)) \\<Longrightarrow>\n    sorted_less (separators ts)", "using sorted_inorder_list_separators sorted_wrt_append"], ["proof (prove)\nusing this:\n  sorted_less (inorder_list ?ts) \\<Longrightarrow>\n  sorted_less (separators ?ts)\n  sorted_wrt ?P (?xs @ ?ys) =\n  (sorted_wrt ?P ?xs \\<and>\n   sorted_wrt ?P ?ys \\<and>\n   (\\<forall>x\\<in>set ?xs. \\<forall>y\\<in>set ?ys. ?P x y))\n\ngoal (1 subgoal):\n 1. sorted_less (inorder (Node ts t)) \\<Longrightarrow>\n    sorted_less (separators ts)", "by auto"], ["", "lemma sorted_inorder_list_subtrees:\n  \"sorted_less (inorder_list ts) \\<Longrightarrow> \\<forall> sub \\<in> set (subtrees ts). sorted_less (inorder sub)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder_list ts) \\<Longrightarrow>\n    \\<forall>sub\\<in>set (subtrees ts). sorted_less (inorder sub)", "apply(induction ts)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sorted_less (inorder_list []) \\<Longrightarrow>\n    \\<forall>sub\\<in>set (subtrees []). sorted_less (inorder sub)\n 2. \\<And>a ts.\n       \\<lbrakk>sorted_less (inorder_list ts) \\<Longrightarrow>\n                \\<forall>sub\\<in>set (subtrees ts).\n                   sorted_less (inorder sub);\n        sorted_less (inorder_list (a # ts))\\<rbrakk>\n       \\<Longrightarrow> \\<forall>sub\\<in>set (subtrees (a # ts)).\n                            sorted_less (inorder sub)", "apply (auto simp add: sorted_lems)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "corollary sorted_inorder_subtrees: \"sorted_less (inorder (Node ts t)) \\<Longrightarrow> \\<forall> sub \\<in> set (subtrees ts). sorted_less (inorder sub)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder (Node ts t)) \\<Longrightarrow>\n    \\<forall>sub\\<in>set (subtrees ts). sorted_less (inorder sub)", "using sorted_inorder_list_subtrees sorted_wrt_append"], ["proof (prove)\nusing this:\n  sorted_less (inorder_list ?ts) \\<Longrightarrow>\n  \\<forall>sub\\<in>set (subtrees ?ts). sorted_less (inorder sub)\n  sorted_wrt ?P (?xs @ ?ys) =\n  (sorted_wrt ?P ?xs \\<and>\n   sorted_wrt ?P ?ys \\<and>\n   (\\<forall>x\\<in>set ?xs. \\<forall>y\\<in>set ?ys. ?P x y))\n\ngoal (1 subgoal):\n 1. sorted_less (inorder (Node ts t)) \\<Longrightarrow>\n    \\<forall>sub\\<in>set (subtrees ts). sorted_less (inorder sub)", "by auto"], ["", "lemma sorted_inorder_list_induct_subtree:\n  \"sorted_less (inorder_list (ls@(sub,sep)#rs)) \\<Longrightarrow> sorted_less (inorder sub)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder_list (ls @ (sub, sep) # rs)) \\<Longrightarrow>\n    sorted_less (inorder sub)", "by (simp add: sorted_wrt_append)"], ["", "corollary sorted_inorder_induct_subtree:\n  \"sorted_less (inorder (Node (ls@(sub,sep)#rs) t)) \\<Longrightarrow> sorted_less (inorder sub)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder (Node (ls @ (sub, sep) # rs) t)) \\<Longrightarrow>\n    sorted_less (inorder sub)", "by (simp add: sorted_wrt_append)"], ["", "lemma sorted_inorder_induct_last: \"sorted_less (inorder (Node ts t)) \\<Longrightarrow> sorted_less (inorder t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sorted_less (inorder (Node ts t)) \\<Longrightarrow>\n    sorted_less (inorder t)", "by (simp add: sorted_wrt_append)"], ["", "end"]]}