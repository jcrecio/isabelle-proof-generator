{"file_name": "/home/qj213/afp-2021-10-22/thys/BTree/BTree_Height.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BTree", "problem_names": ["lemma sum_list_replicate: \"sum_list (replicate n c) = n*c\"", "lemma nodes_height_upper_bound: \n  \"\\<lbrakk>order k t; bal t\\<rbrakk> \\<Longrightarrow> nodes t * (2*k) \\<le> bound (2*k) (height t)\"", "lemma compow_comp_id: \"c > 0 \\<Longrightarrow> f \\<circ> f = f \\<Longrightarrow> (f ^^ c) = f\"", "lemma compow_id_point: \"f x = x \\<Longrightarrow> (f ^^ c) x = x\"", "lemma height_full_node: \"height (full_node k a h) = h\"", "lemma bal_full_node: \"bal (full_node k a h)\"", "lemma order_full_node: \"order k (full_node k a h)\"", "lemma full_btrees_sharp: \"nodes (full_node k a h) * (2*k) = bound (2*k) h\"", "lemma upper_bound_sharp_node:\n  \"t = full_node k a h \\<Longrightarrow> height t = h \\<and> order k t \\<and> bal t \\<and> bound (2*k) h = nodes t * (2*k)\"", "lemma nodes_height_lower_bound: \n  \"\\<lbrakk>order k t; bal t\\<rbrakk> \\<Longrightarrow> bound k (height t) \\<le> nodes t * k\"", "lemma height_slim_node: \"height (slim_node k a h) = h\"", "lemma bal_slim_node: \"bal (slim_node k a h)\"", "lemma order_slim_node: \"order k (slim_node k a h)\"", "lemma slim_nodes_sharp: \"nodes (slim_node k a h) * k = bound k h\"", "lemma lower_bound_sharp_node:\n  \"t = slim_node k a h \\<Longrightarrow> height t = h \\<and> order k t \\<and> bal t \\<and> bound k h = nodes t * k\"", "lemma nodes_root_height_lower_bound:\n  assumes \"root_order k t\"\n    and \"bal t\"\n  shows \"2*((k+1)^(height t - 1) - 1) + (of_bool (t \\<noteq> Leaf))*k  \\<le> nodes t * k\"", "lemma nodes_root_height_upper_bound: \n  assumes \"root_order k t\"\n    and \"bal t\"\n  shows \"nodes t * (2*k) \\<le> (2*k+1)^(height t) - 1\"", "lemma root_order_imp_divmuleq: \"root_order k t \\<Longrightarrow> (nodes t * k) div k = nodes t\"", "lemma nodes_root_height_lower_bound_simp:\n  assumes \"root_order k t\"\n    and \"bal t\"\n    and \"k > 0\"\n  shows \"(2*((k+1)^(height t - 1) - 1)) div k + (of_bool (t \\<noteq> Leaf)) \\<le> nodes t\"", "lemma nodes_root_height_upper_bound_simp:\n  assumes \"root_order k t\"\n    and \"bal t\"\n  shows \"nodes t \\<le> ((2*k+1)^(height t) - 1) div (2*k)\"", "lemma lower_bound_sharp:\n  \"k > 0 \\<Longrightarrow> t = slim_tree k a h \\<Longrightarrow> height t = h \\<and> root_order k t \\<and> bal t \\<and> nodes t * k = 2*((k+1)^(height t - 1) - 1) + (of_bool (t \\<noteq> Leaf))*k\"", "lemma upper_bound_sharp:\n  \"k > 0 \\<Longrightarrow> t = full_tree k a h \\<Longrightarrow> height t = h \\<and> root_order k t \\<and> bal t \\<and> ((2*k+1)^(height t) - 1) = nodes t * (2*k)\""], "translations": [["", "lemma sum_list_replicate: \"sum_list (replicate n c) = n*c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate n c) = n * c", "apply(induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sum_list (replicate 0 c) = 0 * c\n 2. \\<And>n.\n       sum_list (replicate n c) = n * c \\<Longrightarrow>\n       sum_list (replicate (Suc n) c) = Suc n * c", "apply(auto simp add: ring_class.ring_distribs(2))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "abbreviation \"bound k h \\<equiv> ((k+1)^h - 1)\""], ["", "lemma nodes_height_upper_bound: \n  \"\\<lbrakk>order k t; bal t\\<rbrakk> \\<Longrightarrow> nodes t * (2*k) \\<le> bound (2*k) (height t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order k t; bal t\\<rbrakk>\n    \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "proof(induction t rule: nodes.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "case (2 ts t)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> nodes ?x * (2 * k) \\<le> bound (2 * k) (height ?x)\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n  order k (Node ts t)\n  bal (Node ts t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "let ?sub_height = \"((2 * k + 1) ^ height t - 1)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"sum_list (map nodes (subtrees ts)) * (2*k) =\n        sum_list (map (\\<lambda>t. nodes t * (2 * k)) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map nodes (subtrees ts)) * (2 * k) =\n    (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))", "using sum_list_mult_const"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>?xs. ?f x * ?c) = sum_list (map ?f ?xs) * ?c\n\ngoal (1 subgoal):\n 1. sum_list (map nodes (subtrees ts)) * (2 * k) =\n    (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))", "by metis"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k) =\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k) =\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> \\<le> sum_list (map (\\<lambda>x.?sub_height) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n    \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> nodes ?x * (2 * k) \\<le> bound (2 * k) (height ?x)\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n  order k (Node ts t)\n  bal (Node ts t)\n\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n    \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))", "using sum_list_mono[of \"subtrees ts\" \"\\<lambda>t. nodes t * (2 * k)\" \"\\<lambda>x. bound (2 * k) (height t)\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> nodes ?x * (2 * k) \\<le> bound (2 * k) (height ?x)\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n  order k (Node ts t)\n  bal (Node ts t)\n  (\\<And>x.\n      x \\<in> set (subtrees ts) \\<Longrightarrow>\n      nodes x * (2 * k) \\<le> bound (2 * k) (height t)) \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>subtrees ts. nodes x * (2 * k))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))\n\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n    \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))", "by (metis bal.simps(2) order.simps(2))"], ["proof (state)\nthis:\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> = sum_list (replicate (length ts) ?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n    sum_list (replicate (length ts) (bound (2 * k) (height t)))", "using map_replicate_const[of ?sub_height \"subtrees ts\"] length_map"], ["proof (prove)\nusing this:\n  map (\\<lambda>x. bound (2 * k) (height t)) (subtrees ts) =\n  replicate (length (subtrees ts)) (bound (2 * k) (height t))\n  length (map ?f ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n    sum_list (replicate (length ts) (bound (2 * k) (height t)))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n  sum_list (replicate (length ts) (bound (2 * k) (height t)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n  sum_list (replicate (length ts) (bound (2 * k) (height t)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> = (length ts)*(?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n    length ts * bound (2 * k) (height t)", "using sum_list_replicate"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n ?c) = ?n * ?c\n\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n    length ts * bound (2 * k) (height t)", "by simp"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n  length ts * bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n  length ts * bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> \\<le> (2*k)*(?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts * bound (2 * k) (height t)\n    \\<le> 2 * k * bound (2 * k) (height t)", "using \"2.prems\"(1)"], ["proof (prove)\nusing this:\n  order k (Node ts t)\n\ngoal (1 subgoal):\n 1. length ts * bound (2 * k) (height t)\n    \\<le> 2 * k * bound (2 * k) (height t)", "by simp"], ["proof (state)\nthis:\n  length ts * bound (2 * k) (height t)\n  \\<le> 2 * k * bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "finally"], ["proof (chain)\npicking this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> 2 * k * bound (2 * k) (height t)", "have \"sum_list (map nodes (subtrees ts))*(2*k) \\<le> ?sub_height*(2*k)\""], ["proof (prove)\nusing this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> 2 * k * bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. sum_list (map nodes (subtrees ts)) * (2 * k)\n    \\<le> bound (2 * k) (height t) * (2 * k)", "by simp"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "moreover"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"(nodes t)*(2*k) \\<le> ?sub_height\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> nodes ?x * (2 * k) \\<le> bound (2 * k) (height ?x)\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n  order k (Node ts t)\n  bal (Node ts t)\n\ngoal (1 subgoal):\n 1. nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "by simp"], ["proof (state)\nthis:\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "ultimately"], ["proof (chain)\npicking this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"(nodes (Node ts t))*(2*k) \\<le> \n         2*k\n        + ?sub_height * (2*k)\n        + ?sub_height\""], ["proof (prove)\nusing this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. nodes (Node ts t) * (2 * k)\n    \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n          bound (2 * k) (height t)", "unfolding nodes.simps add_mult_distrib"], ["proof (prove)\nusing this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. 1 * (2 * k) + sum_list (map nodes (subtrees ts)) * (2 * k) +\n    nodes t * (2 * k)\n    \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n          bound (2 * k) (height t)", "by linarith"], ["proof (state)\nthis:\n  nodes (Node ts t) * (2 * k)\n  \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n        bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  nodes (Node ts t) * (2 * k)\n  \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n        bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> =  2*k + (2*k)*((2 * k + 1) ^ height t) - 2*k + (2 * k + 1) ^ height t - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * k + bound (2 * k) (height t) * (2 * k) + bound (2 * k) (height t) =\n    2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k +\n    (2 * k + 1) ^ height t -\n    1", "by (simp add: diff_mult_distrib2 mult.assoc mult.commute)"], ["proof (state)\nthis:\n  2 * k + bound (2 * k) (height t) * (2 * k) + bound (2 * k) (height t) =\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  2 * k + bound (2 * k) (height t) * (2 * k) + bound (2 * k) (height t) =\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> = (2*k)*((2 * k + 1) ^ height t) + (2 * k + 1) ^ height t - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k +\n    (2 * k + 1) ^ height t -\n    1 =\n    2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1", "by simp"], ["proof (state)\nthis:\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1 =\n  2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "also"], ["proof (state)\nthis:\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1 =\n  2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "have \"\\<dots> = (2*k+1)^(Suc(height t)) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1 =\n    bound (2 * k) (Suc (height t))", "by simp"], ["proof (state)\nthis:\n  2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1 =\n  bound (2 * k) (Suc (height t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> nodes x * (2 * k)\n                                     \\<le> bound (2 * k) (height x);\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> nodes t * (2 * k) \\<le> bound (2 * k) (height t);\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> nodes (Node ts t) * (2 * k)\n                         \\<le> bound (2 * k) (height (Node ts t))", "finally"], ["proof (chain)\npicking this:\n  nodes (Node ts t) * (2 * k) \\<le> bound (2 * k) (Suc (height t))", "show ?case"], ["proof (prove)\nusing this:\n  nodes (Node ts t) * (2 * k) \\<le> bound (2 * k) (Suc (height t))\n\ngoal (1 subgoal):\n 1. nodes (Node ts t) * (2 * k) \\<le> bound (2 * k) (height (Node ts t))", "by (metis \"2.prems\"(2) height_bal_tree)"], ["proof (state)\nthis:\n  nodes (Node ts t) * (2 * k) \\<le> bound (2 * k) (height (Node ts t))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> nodes Leaf * (2 * k) \\<le> bound (2 * k) (height Leaf)", "qed simp"], ["", "text \"To verify our lower bound is sharp, we compare it to the height of artificially constructed\nfull trees.\""], ["", "fun full_node::\"nat \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a btree\" where\n  \"full_node k c 0 = Leaf\"|\n  \"full_node k c (Suc n) = (Node (replicate (2*k) ((full_node k c n),c)) (full_node k c n))\""], ["", "value \"let k = (2::nat) in map (\\<lambda>x. nodes x * 2*k) (map (full_node k (1::nat)) [0,1,2,3,4])\""], ["", "value \"let k = (2::nat) in map (\\<lambda>x. ((2*k+(1::nat))^(x)-1)) [0,1,2,3,4]\""], ["", "lemma compow_comp_id: \"c > 0 \\<Longrightarrow> f \\<circ> f = f \\<Longrightarrow> (f ^^ c) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < c; f \\<circ> f = f\\<rbrakk> \\<Longrightarrow> f ^^ c = f", "apply(induction c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < 0; f \\<circ> f = f\\<rbrakk> \\<Longrightarrow> f ^^ 0 = f\n 2. \\<And>c.\n       \\<lbrakk>\\<lbrakk>0 < c; f \\<circ> f = f\\<rbrakk>\n                \\<Longrightarrow> f ^^ c = f;\n        0 < Suc c; f \\<circ> f = f\\<rbrakk>\n       \\<Longrightarrow> f ^^ Suc c = f", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>0 < c \\<Longrightarrow> f ^^ c = f; f \\<circ> f = f\\<rbrakk>\n       \\<Longrightarrow> f \\<circ> f ^^ c = f", "by fastforce"], ["", "(* required only for the fold definition of height *)"], ["", "lemma compow_id_point: \"f x = x \\<Longrightarrow> (f ^^ c) x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = x \\<Longrightarrow> (f ^^ c) x = x", "apply(induction c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. f x = x \\<Longrightarrow> (f ^^ 0) x = x\n 2. \\<And>c.\n       \\<lbrakk>f x = x \\<Longrightarrow> (f ^^ c) x = x; f x = x\\<rbrakk>\n       \\<Longrightarrow> (f ^^ Suc c) x = x", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma height_full_node: \"height (full_node k a h) = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (full_node k a h) = h", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. height (full_node k c 0) = 0\n 2. \\<And>k c n.\n       \\<lbrakk>height (full_node k c n) = n;\n        height (full_node k c n) = n\\<rbrakk>\n       \\<Longrightarrow> height (full_node k c (Suc n)) = Suc n", "apply (auto simp add: set_replicate_conv_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bal_full_node: \"bal (full_node k a h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (full_node k a h)", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. bal (full_node k c 0)\n 2. \\<And>k c n.\n       \\<lbrakk>bal (full_node k c n); bal (full_node k c n)\\<rbrakk>\n       \\<Longrightarrow> bal (full_node k c (Suc n))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma order_full_node: \"order k (full_node k a h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order k (full_node k a h)", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. order k (full_node k c 0)\n 2. \\<And>k c n.\n       \\<lbrakk>order k (full_node k c n);\n        order k (full_node k c n)\\<rbrakk>\n       \\<Longrightarrow> order k (full_node k c (Suc n))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma full_btrees_sharp: \"nodes (full_node k a h) * (2*k) = bound (2*k) h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (full_node k a h) * (2 * k) = bound (2 * k) h", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. nodes (full_node k c 0) * (2 * k) = bound (2 * k) 0\n 2. \\<And>k c n.\n       \\<lbrakk>nodes (full_node k c n) * (2 * k) = bound (2 * k) n;\n        nodes (full_node k c n) * (2 * k) = bound (2 * k) n\\<rbrakk>\n       \\<Longrightarrow> nodes (full_node k c (Suc n)) * (2 * k) =\n                         bound (2 * k) (Suc n)", "apply (auto simp add: height_full_node algebra_simps sum_list_replicate)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma upper_bound_sharp_node:\n  \"t = full_node k a h \\<Longrightarrow> height t = h \\<and> order k t \\<and> bal t \\<and> bound (2*k) h = nodes t * (2*k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = full_node k a h \\<Longrightarrow>\n    height t = h \\<and>\n    order k t \\<and> bal t \\<and> bound (2 * k) h = nodes t * (2 * k)", "by (simp add: bal_full_node height_full_node order_full_node full_btrees_sharp)"], ["", "(* maximum number of nodes *)"], ["", "subsection \"Maximum height for a given number of nodes\""], ["", "lemma nodes_height_lower_bound: \n  \"\\<lbrakk>order k t; bal t\\<rbrakk> \\<Longrightarrow> bound k (height t) \\<le> nodes t * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>order k t; bal t\\<rbrakk>\n    \\<Longrightarrow> bound k (height t) \\<le> nodes t * k", "proof(induction t rule: nodes.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "case (2 ts t)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> bound k (height ?x) \\<le> nodes ?x * k\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> bound k (height t) \\<le> nodes t * k\n  order k (Node ts t)\n  bal (Node ts t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "let ?sub_height = \"((k + 1) ^ height t - 1)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"k*(?sub_height) \\<le> (length ts)*(?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * bound k (height t) \\<le> length ts * bound k (height t)", "using \"2.prems\"(1)"], ["proof (prove)\nusing this:\n  order k (Node ts t)\n\ngoal (1 subgoal):\n 1. k * bound k (height t) \\<le> length ts * bound k (height t)", "by simp"], ["proof (state)\nthis:\n  k * bound k (height t) \\<le> length ts * bound k (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  k * bound k (height t) \\<le> length ts * bound k (height t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"\\<dots> = sum_list (replicate (length ts) ?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts * bound k (height t) =\n    sum_list (replicate (length ts) (bound k (height t)))", "using sum_list_replicate"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n ?c) = ?n * ?c\n\ngoal (1 subgoal):\n 1. length ts * bound k (height t) =\n    sum_list (replicate (length ts) (bound k (height t)))", "by simp"], ["proof (state)\nthis:\n  length ts * bound k (height t) =\n  sum_list (replicate (length ts) (bound k (height t)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  length ts * bound k (height t) =\n  sum_list (replicate (length ts) (bound k (height t)))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"\\<dots> = sum_list (map (\\<lambda>x.?sub_height) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound k (height t))) =\n    (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))", "using map_replicate_const[of ?sub_height \"subtrees ts\"] length_map"], ["proof (prove)\nusing this:\n  map (\\<lambda>x. bound k (height t)) (subtrees ts) =\n  replicate (length (subtrees ts)) (bound k (height t))\n  length (map ?f ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound k (height t))) =\n    (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))", "by simp"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound k (height t))) =\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound k (height t))) =\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"\\<dots> \\<le> sum_list (map (\\<lambda>t. nodes t * k) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n    \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> bound k (height ?x) \\<le> nodes ?x * k\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> bound k (height t) \\<le> nodes t * k\n  order k (Node ts t)\n  bal (Node ts t)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n    \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)", "using sum_list_mono[of \"subtrees ts\" \"\\<lambda>x. bound k (height t)\" \"\\<lambda>t. nodes t * k\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> bound k (height ?x) \\<le> nodes ?x * k\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> bound k (height t) \\<le> nodes t * k\n  order k (Node ts t)\n  bal (Node ts t)\n  (\\<And>x.\n      x \\<in> set (subtrees ts) \\<Longrightarrow>\n      bound k (height t) \\<le> nodes x * k) \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. nodes x * k)\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n    \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)", "by (metis bal.simps(2) order.simps(2))"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n  \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n  \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"\\<dots> = sum_list (map nodes (subtrees ts)) * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k) =\n    sum_list (map nodes (subtrees ts)) * k", "using sum_list_mult_const[of nodes k \"subtrees ts\"]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>subtrees ts. nodes x * k) =\n  sum_list (map nodes (subtrees ts)) * k\n\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k) =\n    sum_list (map nodes (subtrees ts)) * k", "by auto"], ["proof (state)\nthis:\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k) =\n  sum_list (map nodes (subtrees ts)) * k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "finally"], ["proof (chain)\npicking this:\n  k * bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k", "have \"sum_list (map nodes (subtrees ts))*k \\<ge> ?sub_height*k\""], ["proof (prove)\nusing this:\n  k * bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n\ngoal (1 subgoal):\n 1. bound k (height t) * k \\<le> sum_list (map nodes (subtrees ts)) * k", "by simp"], ["proof (state)\nthis:\n  bound k (height t) * k \\<le> sum_list (map nodes (subtrees ts)) * k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "moreover"], ["proof (state)\nthis:\n  bound k (height t) * k \\<le> sum_list (map nodes (subtrees ts)) * k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"(nodes t)*k \\<ge> ?sub_height\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> nodes t * k", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> set (subtrees ts); order k ?x; bal ?x\\<rbrakk>\n  \\<Longrightarrow> bound k (height ?x) \\<le> nodes ?x * k\n  \\<lbrakk>order k t; bal t\\<rbrakk>\n  \\<Longrightarrow> bound k (height t) \\<le> nodes t * k\n  order k (Node ts t)\n  bal (Node ts t)\n\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> nodes t * k", "by simp"], ["proof (state)\nthis:\n  bound k (height t) \\<le> nodes t * k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "ultimately"], ["proof (chain)\npicking this:\n  bound k (height t) * k \\<le> sum_list (map nodes (subtrees ts)) * k\n  bound k (height t) \\<le> nodes t * k", "have \"(nodes (Node ts t))*k \\<ge> \n        k\n        + ?sub_height * k\n        + ?sub_height\""], ["proof (prove)\nusing this:\n  bound k (height t) * k \\<le> sum_list (map nodes (subtrees ts)) * k\n  bound k (height t) \\<le> nodes t * k\n\ngoal (1 subgoal):\n 1. k + bound k (height t) * k + bound k (height t)\n    \\<le> nodes (Node ts t) * k", "unfolding nodes.simps add_mult_distrib"], ["proof (prove)\nusing this:\n  bound k (height t) * k \\<le> sum_list (map nodes (subtrees ts)) * k\n  bound k (height t) \\<le> nodes t * k\n\ngoal (1 subgoal):\n 1. k + bound k (height t) * k + bound k (height t)\n    \\<le> 1 * k + sum_list (map nodes (subtrees ts)) * k + nodes t * k", "by linarith"], ["proof (state)\nthis:\n  k + bound k (height t) * k + bound k (height t)\n  \\<le> nodes (Node ts t) * k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  k + bound k (height t) * k + bound k (height t)\n  \\<le> nodes (Node ts t) * k\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have\n    \"k + ?sub_height * k + ?sub_height = \n     k + k*((k + 1) ^ height t) - k + (k + 1) ^ height t - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k + bound k (height t) * k + bound k (height t) =\n    k + k * (k + 1) ^ height t - k + (k + 1) ^ height t - 1", "by (simp add: diff_mult_distrib2 mult.assoc mult.commute)"], ["proof (state)\nthis:\n  k + bound k (height t) * k + bound k (height t) =\n  k + k * (k + 1) ^ height t - k + (k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  k + bound k (height t) * k + bound k (height t) =\n  k + k * (k + 1) ^ height t - k + (k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"\\<dots> = k*((k + 1) ^ height t) + (k + 1) ^ height t - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k + k * (k + 1) ^ height t - k + (k + 1) ^ height t - 1 =\n    k * (k + 1) ^ height t + (k + 1) ^ height t - 1", "by simp"], ["proof (state)\nthis:\n  k + k * (k + 1) ^ height t - k + (k + 1) ^ height t - 1 =\n  k * (k + 1) ^ height t + (k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "also"], ["proof (state)\nthis:\n  k + k * (k + 1) ^ height t - k + (k + 1) ^ height t - 1 =\n  k * (k + 1) ^ height t + (k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "have \"\\<dots> = (k+1)^(Suc(height t)) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k * (k + 1) ^ height t + (k + 1) ^ height t - 1 =\n    bound k (Suc (height t))", "by simp"], ["proof (state)\nthis:\n  k * (k + 1) ^ height t + (k + 1) ^ height t - 1 = bound k (Suc (height t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k\n 2. \\<And>ts t.\n       \\<lbrakk>\\<And>x.\n                   \\<lbrakk>x \\<in> set (subtrees ts); order k x;\n                    bal x\\<rbrakk>\n                   \\<Longrightarrow> bound k (height x) \\<le> nodes x * k;\n        \\<lbrakk>order k t; bal t\\<rbrakk>\n        \\<Longrightarrow> bound k (height t) \\<le> nodes t * k;\n        order k (Node ts t); bal (Node ts t)\\<rbrakk>\n       \\<Longrightarrow> bound k (height (Node ts t))\n                         \\<le> nodes (Node ts t) * k", "finally"], ["proof (chain)\npicking this:\n  bound k (Suc (height t)) \\<le> nodes (Node ts t) * k", "show ?case"], ["proof (prove)\nusing this:\n  bound k (Suc (height t)) \\<le> nodes (Node ts t) * k\n\ngoal (1 subgoal):\n 1. bound k (height (Node ts t)) \\<le> nodes (Node ts t) * k", "by (metis \"2.prems\"(2) height_bal_tree)"], ["proof (state)\nthis:\n  bound k (height (Node ts t)) \\<le> nodes (Node ts t) * k\n\ngoal (1 subgoal):\n 1. \\<lbrakk>order k Leaf; bal Leaf\\<rbrakk>\n    \\<Longrightarrow> bound k (height Leaf) \\<le> nodes Leaf * k", "qed simp"], ["", "text \"To verify our upper bound is sharp, we compare it to the height of artificially constructed\nminimally filled (=slim) trees.\""], ["", "fun slim_node::\"nat \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a btree\" where\n  \"slim_node k c 0 = Leaf\"|\n  \"slim_node k c (Suc n) = (Node (replicate k ((slim_node k c n),c)) (slim_node k c n))\""], ["", "value \"let k = (2::nat) in map (\\<lambda>x. nodes x * k) (map (slim_node k (1::nat)) [0,1,2,3,4])\""], ["", "value \"let k = (2::nat) in map (\\<lambda>x. ((k+1::nat)^(x)-1)) [0,1,2,3,4]\""], ["", "lemma height_slim_node: \"height (slim_node k a h) = h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. height (slim_node k a h) = h", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. height (slim_node k c 0) = 0\n 2. \\<And>k c n.\n       \\<lbrakk>height (slim_node k c n) = n;\n        height (slim_node k c n) = n\\<rbrakk>\n       \\<Longrightarrow> height (slim_node k c (Suc n)) = Suc n", "apply (auto simp add: set_replicate_conv_if)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma bal_slim_node: \"bal (slim_node k a h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal (slim_node k a h)", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. bal (slim_node k c 0)\n 2. \\<And>k c n.\n       \\<lbrakk>bal (slim_node k c n); bal (slim_node k c n)\\<rbrakk>\n       \\<Longrightarrow> bal (slim_node k c (Suc n))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma order_slim_node: \"order k (slim_node k a h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. order k (slim_node k a h)", "apply(induction k a h rule: full_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. order k (slim_node k c 0)\n 2. \\<And>k c n.\n       \\<lbrakk>order k (slim_node k c n);\n        order k (slim_node k c n)\\<rbrakk>\n       \\<Longrightarrow> order k (slim_node k c (Suc n))", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma slim_nodes_sharp: \"nodes (slim_node k a h) * k = bound k h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes (slim_node k a h) * k = bound k h", "apply(induction k a h rule: slim_node.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>k c. nodes (slim_node k c 0) * k = bound k 0\n 2. \\<And>k c n.\n       \\<lbrakk>nodes (slim_node k c n) * k = bound k n;\n        nodes (slim_node k c n) * k = bound k n\\<rbrakk>\n       \\<Longrightarrow> nodes (slim_node k c (Suc n)) * k = bound k (Suc n)", "apply (auto simp add: height_slim_node algebra_simps sum_list_replicate compow_id_point)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lower_bound_sharp_node:\n  \"t = slim_node k a h \\<Longrightarrow> height t = h \\<and> order k t \\<and> bal t \\<and> bound k h = nodes t * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = slim_node k a h \\<Longrightarrow>\n    height t = h \\<and>\n    order k t \\<and> bal t \\<and> bound k h = nodes t * k", "by (simp add: bal_slim_node height_slim_node order_slim_node slim_nodes_sharp)"], ["", "(* TODO results for root_order/bal *)"], ["", "text \"Since BTrees have special roots, we need to show the overall nodes seperately\""], ["", "lemma nodes_root_height_lower_bound:\n  assumes \"root_order k t\"\n    and \"bal t\"\n  shows \"2*((k+1)^(height t - 1) - 1) + (of_bool (t \\<noteq> Leaf))*k  \\<le> nodes t * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "case (Node ts t)"], ["proof (state)\nthis:\n  t = Node ts t\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "let ?sub_height = \"((k + 1) ^ height t - 1)\""], ["proof (state)\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "from Node"], ["proof (chain)\npicking this:\n  t = Node ts t", "have \"?sub_height \\<le> length ts * ?sub_height\""], ["proof (prove)\nusing this:\n  t = Node ts t\n\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> length ts * bound k (height t)", "using assms"], ["proof (prove)\nusing this:\n  t = Node ts t\n  root_order k t\n  bal t\n\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> length ts * bound k (height t)", "by (simp add: Suc_leI)"], ["proof (state)\nthis:\n  bound k (height t) \\<le> length ts * bound k (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "also"], ["proof (state)\nthis:\n  bound k (height t) \\<le> length ts * bound k (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "have \"\\<dots> = sum_list (replicate (length ts) ?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts * bound k (height t) =\n    sum_list (replicate (length ts) (bound k (height t)))", "using sum_list_replicate"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n ?c) = ?n * ?c\n\ngoal (1 subgoal):\n 1. length ts * bound k (height t) =\n    sum_list (replicate (length ts) (bound k (height t)))", "by simp"], ["proof (state)\nthis:\n  length ts * bound k (height t) =\n  sum_list (replicate (length ts) (bound k (height t)))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "also"], ["proof (state)\nthis:\n  length ts * bound k (height t) =\n  sum_list (replicate (length ts) (bound k (height t)))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "have \"\\<dots> = sum_list (map (\\<lambda>x. ?sub_height) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound k (height t))) =\n    (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))", "using map_replicate_const[of ?sub_height \"subtrees ts\"] length_map"], ["proof (prove)\nusing this:\n  map (\\<lambda>x. bound k (height t)) (subtrees ts) =\n  replicate (length (subtrees ts)) (bound k (height t))\n  length (map ?f ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound k (height t))) =\n    (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))", "by simp"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound k (height t))) =\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "also"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound k (height t))) =\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "have \"\\<dots> \\<le> sum_list (map (\\<lambda>t. nodes t * k) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n    \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)", "using Node\n      sum_list_mono[of \"subtrees ts\" \"\\<lambda>x. (k+1)^(height t) - 1\" \"\\<lambda>x. nodes x * k\"]\n      nodes_height_lower_bound assms"], ["proof (prove)\nusing this:\n  t = Node ts t\n  (\\<And>x.\n      x \\<in> set (subtrees ts) \\<Longrightarrow>\n      bound k (height t) \\<le> nodes x * k) \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. nodes x * k)\n  \\<lbrakk>order ?k ?t; bal ?t\\<rbrakk>\n  \\<Longrightarrow> bound ?k (height ?t) \\<le> nodes ?t * ?k\n  root_order k t\n  bal t\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n    \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)", "by fastforce"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n  \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound k (height t))\n  \\<le> (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "have \"\\<dots> = sum_list (map nodes (subtrees ts)) * k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k) =\n    sum_list (map nodes (subtrees ts)) * k", "using sum_list_mult_const[of nodes k \"subtrees ts\"]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>subtrees ts. nodes x * k) =\n  sum_list (map nodes (subtrees ts)) * k\n\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k) =\n    sum_list (map nodes (subtrees ts)) * k", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * k) =\n  sum_list (map nodes (subtrees ts)) * k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "finally"], ["proof (chain)\npicking this:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k", "have \"sum_list (map nodes (subtrees ts))*k \\<ge> ?sub_height\""], ["proof (prove)\nusing this:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k", "by simp"], ["proof (state)\nthis:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "moreover"], ["proof (state)\nthis:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "have \"(nodes t)*k \\<ge> ?sub_height\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> nodes t * k", "using Node assms nodes_height_lower_bound"], ["proof (prove)\nusing this:\n  t = Node ts t\n  root_order k t\n  bal t\n  \\<lbrakk>order ?k ?t; bal ?t\\<rbrakk>\n  \\<Longrightarrow> bound ?k (height ?t) \\<le> nodes ?t * ?k\n\ngoal (1 subgoal):\n 1. bound k (height t) \\<le> nodes t * k", "by auto"], ["proof (state)\nthis:\n  bound k (height t) \\<le> nodes t * k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "ultimately"], ["proof (chain)\npicking this:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n  bound k (height t) \\<le> nodes t * k", "have \"(nodes (Node ts t))*k \\<ge> \n        ?sub_height\n        + ?sub_height + k\""], ["proof (prove)\nusing this:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n  bound k (height t) \\<le> nodes t * k\n\ngoal (1 subgoal):\n 1. bound k (height t) + bound k (height t) + k \\<le> nodes (Node ts t) * k", "unfolding nodes.simps add_mult_distrib"], ["proof (prove)\nusing this:\n  bound k (height t) \\<le> sum_list (map nodes (subtrees ts)) * k\n  bound k (height t) \\<le> nodes t * k\n\ngoal (1 subgoal):\n 1. bound k (height t) + bound k (height t) + k\n    \\<le> 1 * k + sum_list (map nodes (subtrees ts)) * k + nodes t * k", "by linarith"], ["proof (state)\nthis:\n  bound k (height t) + bound k (height t) + k \\<le> nodes (Node ts t) * k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n       \\<le> nodes t * k", "then"], ["proof (chain)\npicking this:\n  bound k (height t) + bound k (height t) + k \\<le> nodes (Node ts t) * k", "show ?thesis"], ["proof (prove)\nusing this:\n  bound k (height t) + bound k (height t) + k \\<le> nodes (Node ts t) * k\n\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k", "using Node assms(2) height_bal_tree"], ["proof (prove)\nusing this:\n  bound k (height t) + bound k (height t) + k \\<le> nodes (Node ts t) * k\n  t = Node ts t\n  bal t\n  bal (Node ?ts ?t) \\<Longrightarrow> height (Node ?ts ?t) = Suc (height ?t)\n\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k", "by fastforce"], ["proof (state)\nthis:\n  2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n  \\<le> nodes t * k\n\ngoal (1 subgoal):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n    \\<le> nodes t * k", "qed simp"], ["", "lemma nodes_root_height_upper_bound: \n  assumes \"root_order k t\"\n    and \"bal t\"\n  shows \"nodes t * (2*k) \\<le> (2*k+1)^(height t) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "proof(cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "case (Node ts t)"], ["proof (state)\nthis:\n  t = Node ts t\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "let ?sub_height = \"((2 * k + 1) ^ height t - 1)\""], ["proof (state)\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"sum_list (map nodes (subtrees ts)) * (2*k) =\n        sum_list (map (\\<lambda>t. nodes t * (2 * k)) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map nodes (subtrees ts)) * (2 * k) =\n    (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))", "using sum_list_mult_const"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>?xs. ?f x * ?c) = sum_list (map ?f ?xs) * ?c\n\ngoal (1 subgoal):\n 1. sum_list (map nodes (subtrees ts)) * (2 * k) =\n    (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))", "by metis"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k) =\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k) =\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> \\<le> sum_list (map (\\<lambda>x.?sub_height) (subtrees ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n    \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))", "using Node\n      sum_list_mono[of \"subtrees ts\" \"\\<lambda>x. nodes x * (2*k)\"  \"\\<lambda>x. (2*k+1)^(height t) - 1\"]\n      nodes_height_upper_bound assms"], ["proof (prove)\nusing this:\n  t = Node ts t\n  (\\<And>x.\n      x \\<in> set (subtrees ts) \\<Longrightarrow>\n      nodes x * (2 * k) \\<le> bound (2 * k) (height t)) \\<Longrightarrow>\n  (\\<Sum>x\\<leftarrow>subtrees ts. nodes x * (2 * k))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))\n  \\<lbrakk>order ?k ?t; bal ?t\\<rbrakk>\n  \\<Longrightarrow> nodes ?t * (2 * ?k) \\<le> bound (2 * ?k) (height ?t)\n  root_order k t\n  bal t\n\ngoal (1 subgoal):\n 1. (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n    \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))", "by fastforce"], ["proof (state)\nthis:\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  (\\<Sum>t\\<leftarrow>subtrees ts. nodes t * (2 * k))\n  \\<le> (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> = sum_list (replicate (length ts) ?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n    sum_list (replicate (length ts) (bound (2 * k) (height t)))", "using map_replicate_const[of ?sub_height \"subtrees ts\"] length_map"], ["proof (prove)\nusing this:\n  map (\\<lambda>x. bound (2 * k) (height t)) (subtrees ts) =\n  replicate (length (subtrees ts)) (bound (2 * k) (height t))\n  length (map ?f ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n    sum_list (replicate (length ts) (bound (2 * k) (height t)))", "by simp"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n  sum_list (replicate (length ts) (bound (2 * k) (height t)))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  (\\<Sum>x\\<leftarrow>subtrees ts. bound (2 * k) (height t)) =\n  sum_list (replicate (length ts) (bound (2 * k) (height t)))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> = (length ts)*(?sub_height)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n    length ts * bound (2 * k) (height t)", "using sum_list_replicate"], ["proof (prove)\nusing this:\n  sum_list (replicate ?n ?c) = ?n * ?c\n\ngoal (1 subgoal):\n 1. sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n    length ts * bound (2 * k) (height t)", "by simp"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n  length ts * bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  sum_list (replicate (length ts) (bound (2 * k) (height t))) =\n  length ts * bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> \\<le> (2*k)*?sub_height\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ts * bound (2 * k) (height t)\n    \\<le> 2 * k * bound (2 * k) (height t)", "using assms Node"], ["proof (prove)\nusing this:\n  root_order k t\n  bal t\n  t = Node ts t\n\ngoal (1 subgoal):\n 1. length ts * bound (2 * k) (height t)\n    \\<le> 2 * k * bound (2 * k) (height t)", "by simp"], ["proof (state)\nthis:\n  length ts * bound (2 * k) (height t)\n  \\<le> 2 * k * bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "finally"], ["proof (chain)\npicking this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> 2 * k * bound (2 * k) (height t)", "have \"sum_list (map nodes (subtrees ts))*(2*k) \\<le> ?sub_height*(2*k)\""], ["proof (prove)\nusing this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> 2 * k * bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. sum_list (map nodes (subtrees ts)) * (2 * k)\n    \\<le> bound (2 * k) (height t) * (2 * k)", "by simp"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "moreover"], ["proof (state)\nthis:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"(nodes t)*(2*k) \\<le> ?sub_height\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "using Node assms nodes_height_upper_bound"], ["proof (prove)\nusing this:\n  t = Node ts t\n  root_order k t\n  bal t\n  \\<lbrakk>order ?k ?t; bal ?t\\<rbrakk>\n  \\<Longrightarrow> nodes ?t * (2 * ?k) \\<le> bound (2 * ?k) (height ?t)\n\ngoal (1 subgoal):\n 1. nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "by auto"], ["proof (state)\nthis:\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "ultimately"], ["proof (chain)\npicking this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"(nodes (Node ts t))*(2*k) \\<le> \n         2*k\n        + ?sub_height * (2*k)\n        + ?sub_height\""], ["proof (prove)\nusing this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. nodes (Node ts t) * (2 * k)\n    \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n          bound (2 * k) (height t)", "unfolding nodes.simps add_mult_distrib"], ["proof (prove)\nusing this:\n  sum_list (map nodes (subtrees ts)) * (2 * k)\n  \\<le> bound (2 * k) (height t) * (2 * k)\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. 1 * (2 * k) + sum_list (map nodes (subtrees ts)) * (2 * k) +\n    nodes t * (2 * k)\n    \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n          bound (2 * k) (height t)", "by linarith"], ["proof (state)\nthis:\n  nodes (Node ts t) * (2 * k)\n  \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n        bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  nodes (Node ts t) * (2 * k)\n  \\<le> 2 * k + bound (2 * k) (height t) * (2 * k) +\n        bound (2 * k) (height t)\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> =  2*k + (2*k)*((2 * k + 1) ^ height t) - 2*k + (2 * k + 1) ^ height t - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * k + bound (2 * k) (height t) * (2 * k) + bound (2 * k) (height t) =\n    2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k +\n    (2 * k + 1) ^ height t -\n    1", "by (simp add: diff_mult_distrib2 mult.assoc mult.commute)"], ["proof (state)\nthis:\n  2 * k + bound (2 * k) (height t) * (2 * k) + bound (2 * k) (height t) =\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  2 * k + bound (2 * k) (height t) * (2 * k) + bound (2 * k) (height t) =\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> = (2*k)*((2 * k + 1) ^ height t) + (2 * k + 1) ^ height t - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k +\n    (2 * k + 1) ^ height t -\n    1 =\n    2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1", "by simp"], ["proof (state)\nthis:\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1 =\n  2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "also"], ["proof (state)\nthis:\n  2 * k + 2 * k * (2 * k + 1) ^ height t - 2 * k + (2 * k + 1) ^ height t -\n  1 =\n  2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "have \"\\<dots> = (2*k+1)^(Suc(height t)) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1 =\n    bound (2 * k) (Suc (height t))", "by simp"], ["proof (state)\nthis:\n  2 * k * (2 * k + 1) ^ height t + (2 * k + 1) ^ height t - 1 =\n  bound (2 * k) (Suc (height t))\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "finally"], ["proof (chain)\npicking this:\n  nodes (Node ts t) * (2 * k) \\<le> bound (2 * k) (Suc (height t))", "show ?thesis"], ["proof (prove)\nusing this:\n  nodes (Node ts t) * (2 * k) \\<le> bound (2 * k) (Suc (height t))\n\ngoal (1 subgoal):\n 1. nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "by (metis Node assms(2) height_bal_tree)"], ["proof (state)\nthis:\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. t = Leaf \\<Longrightarrow>\n    nodes t * (2 * k) \\<le> bound (2 * k) (height t)", "qed simp"], ["", "lemma root_order_imp_divmuleq: \"root_order k t \\<Longrightarrow> (nodes t * k) div k = nodes t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. root_order k t \\<Longrightarrow> nodes t * k div k = nodes t", "using root_order.elims(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>root_order ?x ?xa;\n   \\<And>k. \\<lbrakk>?x = k; ?xa = Leaf\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>k ts t.\n      \\<lbrakk>?x = k; ?xa = Node ts t;\n       0 < length ts \\<and>\n       length ts \\<le> 2 * k \\<and>\n       Ball (set (subtrees ts)) (order k) \\<and> order k t\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. root_order k t \\<Longrightarrow> nodes t * k div k = nodes t", "by fastforce"], ["", "lemma nodes_root_height_lower_bound_simp:\n  assumes \"root_order k t\"\n    and \"bal t\"\n    and \"k > 0\"\n  shows \"(2*((k+1)^(height t - 1) - 1)) div k + (of_bool (t \\<noteq> Leaf)) \\<le> nodes t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "case Node"], ["proof (state)\nthis:\n  t = Node x21_ x22_\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "have \"(2*((k+1)^(height t - 1) - 1)) div k + (of_bool (t \\<noteq> Leaf)) = \n(2*((k+1)^(height t - 1) - 1) + (of_bool (t \\<noteq> Leaf))*k) div k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) =\n    (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k", "using Node assms"], ["proof (prove)\nusing this:\n  t = Node x21_ x22_\n  root_order k t\n  bal t\n  0 < k\n\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) =\n    (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k", "using div_plus_div_distrib_dvd_left[of k k \"(2 * Suc k ^ (height t - Suc 0) - Suc (Suc 0))\"]"], ["proof (prove)\nusing this:\n  t = Node x21_ x22_\n  root_order k t\n  bal t\n  0 < k\n  k dvd k \\<Longrightarrow>\n  (k + (2 * Suc k ^ (height t - Suc 0) - Suc (Suc 0))) div k =\n  k div k + (2 * Suc k ^ (height t - Suc 0) - Suc (Suc 0)) div k\n\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) =\n    (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k", "by (auto simp add: algebra_simps simp del: height_btree.simps)"], ["proof (state)\nthis:\n  2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) =\n  (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "also"], ["proof (state)\nthis:\n  2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) =\n  (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "have \"\\<dots> \\<le> (nodes t * k) div k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k\n    \\<le> nodes t * k div k", "using nodes_root_height_lower_bound[OF assms(1,2)] div_le_mono"], ["proof (prove)\nusing this:\n  2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k\n  \\<le> nodes t * k\n  ?m \\<le> ?n \\<Longrightarrow> ?m div ?k \\<le> ?n div ?k\n\ngoal (1 subgoal):\n 1. (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k\n    \\<le> nodes t * k div k", "by blast"], ["proof (state)\nthis:\n  (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k\n  \\<le> nodes t * k div k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "also"], ["proof (state)\nthis:\n  (2 * bound k (height t - 1) + of_bool (t \\<noteq> Leaf) * k) div k\n  \\<le> nodes t * k div k\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "have \"\\<dots> = nodes t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t * k div k = nodes t", "using root_order_imp_divmuleq[OF assms(1)]"], ["proof (prove)\nusing this:\n  nodes t * k div k = nodes t\n\ngoal (1 subgoal):\n 1. nodes t * k div k = nodes t", "by simp"], ["proof (state)\nthis:\n  nodes t * k div k = nodes t\n\ngoal (2 subgoals):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t\n 2. \\<And>x21 x22.\n       t = Node x21 x22 \\<Longrightarrow>\n       2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n       \\<le> nodes t", "finally"], ["proof (chain)\npicking this:\n  2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) \\<le> nodes t", "show ?thesis"], ["proof (prove)\nusing this:\n  2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) \\<le> nodes t\n\ngoal (1 subgoal):\n 1. 2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t", "."], ["proof (state)\nthis:\n  2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf) \\<le> nodes t\n\ngoal (1 subgoal):\n 1. t = Leaf \\<Longrightarrow>\n    2 * bound k (height t - 1) div k + of_bool (t \\<noteq> Leaf)\n    \\<le> nodes t", "qed simp"], ["", "lemma nodes_root_height_upper_bound_simp:\n  assumes \"root_order k t\"\n    and \"bal t\"\n  shows \"nodes t \\<le> ((2*k+1)^(height t) - 1) div (2*k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "have \"nodes t = (nodes t * (2*k)) div (2*k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t = nodes t * (2 * k) div (2 * k)", "using root_order_imp_divmuleq[OF assms(1)]"], ["proof (prove)\nusing this:\n  nodes t * k div k = nodes t\n\ngoal (1 subgoal):\n 1. nodes t = nodes t * (2 * k) div (2 * k)", "by simp"], ["proof (state)\nthis:\n  nodes t = nodes t * (2 * k) div (2 * k)\n\ngoal (1 subgoal):\n 1. nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "also"], ["proof (state)\nthis:\n  nodes t = nodes t * (2 * k) div (2 * k)\n\ngoal (1 subgoal):\n 1. nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "have \"\\<dots> \\<le> ((2*k+1)^(height t) - 1) div (2*k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nodes t * (2 * k) div (2 * k) \\<le> bound (2 * k) (height t) div (2 * k)", "using div_le_mono nodes_root_height_upper_bound[OF assms]"], ["proof (prove)\nusing this:\n  ?m \\<le> ?n \\<Longrightarrow> ?m div ?k \\<le> ?n div ?k\n  nodes t * (2 * k) \\<le> bound (2 * k) (height t)\n\ngoal (1 subgoal):\n 1. nodes t * (2 * k) div (2 * k) \\<le> bound (2 * k) (height t) div (2 * k)", "by blast"], ["proof (state)\nthis:\n  nodes t * (2 * k) div (2 * k) \\<le> bound (2 * k) (height t) div (2 * k)\n\ngoal (1 subgoal):\n 1. nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "finally"], ["proof (chain)\npicking this:\n  nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "show ?thesis"], ["proof (prove)\nusing this:\n  nodes t \\<le> bound (2 * k) (height t) div (2 * k)\n\ngoal (1 subgoal):\n 1. nodes t \\<le> bound (2 * k) (height t) div (2 * k)", "."], ["proof (state)\nthis:\n  nodes t \\<le> bound (2 * k) (height t) div (2 * k)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"full_tree = full_node\""], ["", "fun slim_tree where\n  \"slim_tree k c 0 = Leaf\" |\n  \"slim_tree k c (Suc h) = Node [(slim_node k c h, c)] (slim_node k c h)\""], ["", "lemma lower_bound_sharp:\n  \"k > 0 \\<Longrightarrow> t = slim_tree k a h \\<Longrightarrow> height t = h \\<and> root_order k t \\<and> bal t \\<and> nodes t * k = 2*((k+1)^(height t - 1) - 1) + (of_bool (t \\<noteq> Leaf))*k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t = slim_tree k a h\\<rbrakk>\n    \\<Longrightarrow> height t = h \\<and>\n                      root_order k t \\<and>\n                      bal t \\<and>\n                      nodes t * k =\n                      2 * bound k (height t - 1) +\n                      of_bool (t \\<noteq> Leaf) * k", "apply (cases h)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; t = slim_tree k a h; h = 0\\<rbrakk>\n    \\<Longrightarrow> height t = h \\<and>\n                      root_order k t \\<and>\n                      bal t \\<and>\n                      nodes t * k =\n                      2 * bound k (height t - 1) +\n                      of_bool (t \\<noteq> Leaf) * k\n 2. \\<And>nat.\n       \\<lbrakk>0 < k; t = slim_tree k a h; h = Suc nat\\<rbrakk>\n       \\<Longrightarrow> height t = h \\<and>\n                         root_order k t \\<and>\n                         bal t \\<and>\n                         nodes t * k =\n                         2 * bound k (height t - 1) +\n                         of_bool (t \\<noteq> Leaf) * k", "using slim_nodes_sharp[of k a]"], ["proof (prove)\nusing this:\n  nodes (slim_node k a ?h) * k = bound k ?h\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < k; t = slim_tree k a h; h = 0\\<rbrakk>\n    \\<Longrightarrow> height t = h \\<and>\n                      root_order k t \\<and>\n                      bal t \\<and>\n                      nodes t * k =\n                      2 * bound k (height t - 1) +\n                      of_bool (t \\<noteq> Leaf) * k\n 2. \\<And>nat.\n       \\<lbrakk>0 < k; t = slim_tree k a h; h = Suc nat\\<rbrakk>\n       \\<Longrightarrow> height t = h \\<and>\n                         root_order k t \\<and>\n                         bal t \\<and>\n                         nodes t * k =\n                         2 * bound k (height t - 1) +\n                         of_bool (t \\<noteq> Leaf) * k", "apply (auto simp add: algebra_simps bal_slim_node height_slim_node order_slim_node)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma upper_bound_sharp:\n  \"k > 0 \\<Longrightarrow> t = full_tree k a h \\<Longrightarrow> height t = h \\<and> root_order k t \\<and> bal t \\<and> ((2*k+1)^(height t) - 1) = nodes t * (2*k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t = full_tree k a h\\<rbrakk>\n    \\<Longrightarrow> height t = h \\<and>\n                      root_order k t \\<and>\n                      bal t \\<and>\n                      bound (2 * k) (height t) = nodes t * (2 * k)", "unfolding full_tree_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t = full_node k a h\\<rbrakk>\n    \\<Longrightarrow> height t = h \\<and>\n                      root_order k t \\<and>\n                      bal t \\<and>\n                      bound (2 * k) (height t) = nodes t * (2 * k)", "using order_impl_root_order[of k t]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < k; order k t\\<rbrakk> \\<Longrightarrow> root_order k t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < k; t = full_node k a h\\<rbrakk>\n    \\<Longrightarrow> height t = h \\<and>\n                      root_order k t \\<and>\n                      bal t \\<and>\n                      bound (2 * k) (height t) = nodes t * (2 * k)", "by (simp add: bal_full_node height_full_node order_full_node full_btrees_sharp)"], ["", "end"]]}