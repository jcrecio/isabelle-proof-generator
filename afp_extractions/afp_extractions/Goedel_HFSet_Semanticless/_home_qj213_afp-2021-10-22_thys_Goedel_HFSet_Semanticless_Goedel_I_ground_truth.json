{"file_name": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless/Goedel_I.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless", "problem_names": ["lemma\n  shows SeqWRP_fresh_iff [simp]: \"a \\<sharp> SeqWRP s k y \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y\" (is ?thesis1)\n    and SeqWRP_sf [iff]:         \"Sigma_fm (SeqWRP s k y)\"  (is ?thsf)\n    and SeqWRP_imp_OrdP:         \"{SeqWRP s k t} \\<turnstile> OrdP k\" (is ?thOrd)\n    and SeqWRP_LstSeqP:          \"{SeqWRP s k t} \\<turnstile> LstSeqP s k t\" (is ?thlstseq)", "lemma SeqWRP_subst [simp]:\n      \"(SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)\"", "lemma SeqWRP_cong:\n  assumes \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\" and  \"H \\<turnstile> y EQ y'\"\n  shows \"H \\<turnstile> SeqWRP s k y IFF SeqWRP s' k' y'\"", "lemma\n  shows WRP_fresh_iff [simp]: \"a \\<sharp> WRP x y \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> y\" (is ?thesis1)\n    and sigma_fm_WRP [simp]:  \"Sigma_fm (WRP x y)\"  (is ?thsf)", "lemma WRP_subst [simp]: \"(WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)\"", "lemma WRP_cong: \"H \\<turnstile> t EQ t' \\<Longrightarrow> H \\<turnstile> u EQ u' \\<Longrightarrow> H \\<turnstile> WRP t u IFF WRP t' u'\"", "lemma ground_WRP [simp]: \"ground_fm (WRP x y) \\<longleftrightarrow> ground x \\<and> ground y\"", "lemma SeqWRP_Zero: \"{} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)\"", "lemma WRP_Zero: \"{} \\<turnstile> WRP Zero Zero\"", "lemma SeqWRP_HPair_Zero_Zero: \"{SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s\"", "lemma SeqWRP_Succ:\n  assumes \"atom s \\<sharp> (s1,k1,y)\"\n  shows \"{SeqWRP s1 k1 y} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))\"", "lemma WRP_Succ: \"{OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)\"", "lemma WRP: \"{} \\<turnstile> WRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>\"", "lemma prove_WRP:  \"{} \\<turnstile> WRP \\<guillemotleft>Var x\\<guillemotright> \\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>\"", "lemma SeqWRP_Zero_E:\n  assumes \"insert (y EQ Zero) H \\<turnstile> A\"  \"H \\<turnstile> k EQ Zero\"\n  shows \"insert (SeqWRP s k y) H \\<turnstile> A\"", "lemma SeqWRP_SUCC_lemma:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\"\n  shows \"{SeqWRP s (SUCC k) y} \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\"", "lemma SeqWRP_SUCC_E:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\" and k': \"H \\<turnstile> k' EQ (SUCC k)\"\n  shows \"insert (SeqWRP s k' y) H  \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\"", "lemma SeqWRP_unique: \"{OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y\"", "theorem WRP_unique: \"{OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y\"", "lemma\n shows SeqHRP_fresh_iff [simp]:\n      \"a \\<sharp> SeqHRP x x' s k \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n  and SeqHRP_sf [iff]:  \"Sigma_fm (SeqHRP x x' s k)\"  (is ?thsf)\n  and SeqHRP_imp_OrdP: \"{ SeqHRP x y s k } \\<turnstile> OrdP k\"  (is ?thord)\n  and SeqHRP_imp_LstSeqP: \"{ SeqHRP x y s k } \\<turnstile> LstSeqP s k (HPair x y)\"  (is ?thlstseq)", "lemma SeqHRP_subst [simp]:\n      \"(SeqHRP x x' s k)(i::=t) = SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)\"", "lemma SeqHRP_cong:\n  assumes \"H \\<turnstile> x EQ x'\" and \"H \\<turnstile> y EQ y'\" \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\"\n  shows \"H \\<turnstile> SeqHRP x y s k IFF SeqHRP x' y' s' k'\"", "lemma\n shows HRP_fresh_iff [simp]: \"a \\<sharp> HRP x x' \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x'\"  (is ?thesis1)\n   and HRP_sf [iff]:         \"Sigma_fm (HRP x x')\"  (is ?thsf)", "lemma HRP_subst [simp]: \"(HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')\"", "lemma SeqHRP_lemma:\n  assumes \"atom m \\<sharp> (x,x',s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (x,x',s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (x,x',s,k,sm',sn,sn')\" \"atom sm' \\<sharp> (x,x',s,k,sn,sn')\"\n          \"atom sn \\<sharp> (x,x',s,k,sn')\" \"atom sn' \\<sharp> (x,x',s,k)\"\n    shows \"{ SeqHRP x x' s k }\n         \\<turnstile> (OrdP x AND WRP x x') OR\n             Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqHRP (Var sm) (Var sm') s (Var m) AND\n                       SeqHRP (Var sn) (Var sn') s (Var n) AND\n                       x EQ HPair (Var sm) (Var sn) AND\n                       x' EQ Q_HPair (Var sm') (Var sn')))))))\"", "lemma SeqHRP_unique: \"{SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y\"", "theorem HRP_unique: \"{HRP x y, HRP x y'} \\<turnstile> y' EQ y\"", "lemma HRP_ORD_OF: \"{} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>\"", "lemma SeqHRP_HPair:\n  assumes \"atom s \\<sharp> (k,s1,s2,k1,k2,x,y,x',y')\" \"atom k \\<sharp> (s1,s2,k1,k2,x,y,x',y')\"\n  shows \"{SeqHRP x x' s1 k1,\n            SeqHRP y y' s2 k2}\n           \\<turnstile> Ex s (Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))\"", "lemma HRP_HPair: \"{HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')\"", "lemma HRP_HPair_quot: \"{HRP x \\<guillemotleft>x\\<guillemotright>, HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile> HRP (HPair x y) \\<guillemotleft>HPair x y\\<guillemotright>\"", "lemma prove_HRP_coding_tm: fixes t::tm shows \"coding_tm t \\<Longrightarrow> {} \\<turnstile> HRP t \\<guillemotleft>t\\<guillemotright>\"", "lemmas prove_HRP = prove_HRP_coding_tm[OF quot_fm_coding]", "lemma KRP_fresh_iff [simp]: \"a \\<sharp> KRP v x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\"", "lemma KRP_subst [simp]: \"(KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')\"", "lemma prove_SubstFormP: \"{} \\<turnstile> SubstFormP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\"", "lemma prove_KRP: \"{} \\<turnstile> KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\"", "lemma KRP_unique: \"{KRP v x y, KRP v x y'} \\<turnstile> y' EQ y\"", "lemma KRP_subst_fm: \"{KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)} \\<turnstile> Var j EQ \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>\""], "translations": [["", "lemma\n  shows SeqWRP_fresh_iff [simp]: \"a \\<sharp> SeqWRP s k y \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y\" (is ?thesis1)\n    and SeqWRP_sf [iff]:         \"Sigma_fm (SeqWRP s k y)\"  (is ?thsf)\n    and SeqWRP_imp_OrdP:         \"{SeqWRP s k t} \\<turnstile> OrdP k\" (is ?thOrd)\n    and SeqWRP_LstSeqP:          \"{SeqWRP s k t} \\<turnstile> LstSeqP s k t\" (is ?thlstseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqWRP s k y =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y) &&&\n     Sigma_fm (SeqWRP s k y)) &&&\n    {SeqWRP s k t} \\<turnstile> OrdP k &&&\n    {SeqWRP s k t} \\<turnstile> LstSeqP s k t", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqWRP s k y =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y)\n 2. Sigma_fm (SeqWRP s k y)\n 3. {SeqWRP s k t} \\<turnstile> OrdP k\n 4. {SeqWRP s k t} \\<turnstile> LstSeqP s k t", "obtain l::name and sl::name where \"atom l \\<sharp> (s,k,sl)\" \"atom sl \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqWRP s k y =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y)\n 2. Sigma_fm (SeqWRP s k y)\n 3. {SeqWRP s k t} \\<turnstile> OrdP k\n 4. {SeqWRP s k t} \\<turnstile> LstSeqP s k t", "thus ?thesis1 ?thsf ?thOrd ?thlstseq"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqWRP s k y =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y) &&&\n     Sigma_fm (SeqWRP s k y)) &&&\n    {SeqWRP s k t} \\<turnstile> OrdP k &&&\n    {SeqWRP s k t} \\<turnstile> LstSeqP s k t", "by (auto intro: LstSeqP_OrdP[THEN cut1])"], ["proof (state)\nthis:\n  a \\<sharp> SeqWRP s k y =\n  (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> y)\n  Sigma_fm (SeqWRP s k y)\n  {SeqWRP s k t} \\<turnstile> OrdP k\n  {SeqWRP s k t} \\<turnstile> LstSeqP s k t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_subst [simp]:\n      \"(SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "obtain l::name and sl::name\n    where \"atom l \\<sharp> (s,k,sl,t,i)\" \"atom sl \\<sharp> (s,k,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl, t, i);\n         atom sl \\<sharp> (s, k, t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl, t, i)\n  atom sl \\<sharp> (s, k, t, i)\n\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl, t, i)\n  atom sl \\<sharp> (s, k, t, i)\n\ngoal (1 subgoal):\n 1. (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)", "by (auto simp: SeqWRP.simps [where l=l and sl=sl])"], ["proof (state)\nthis:\n  (SeqWRP s k y)(i::=t) = SeqWRP (subst i t s) (subst i t k) (subst i t y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_cong:\n  assumes \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\" and  \"H \\<turnstile> y EQ y'\"\n  shows \"H \\<turnstile> SeqWRP s k y IFF SeqWRP s' k' y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> SeqWRP s k y IFF SeqWRP s' k' y'", "by (rule P3_cong [OF _ assms], auto)"], ["", "declare SeqWRP.simps [simp del]"], ["", "subsection\\<open>Predicate form of W\\<close>"], ["", "nominal_function WRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (x,y)\\<rbrakk> \\<Longrightarrow>\n    WRP x y = Ex s (SeqWRP (Var s) x y)\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt WRP_graph_aux\n 2. \\<And>x y. WRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s xa y.\n           \\<lbrakk>atom s \\<sharp> (xa, y); x = (xa, y)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s x y sa xa ya.\n       \\<lbrakk>atom s \\<sharp> (x, y); atom sa \\<sharp> (xa, ya);\n        (x, y) = (xa, ya)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex s (SeqWRP (Var s) x y) =\n                         SyntaxN.Ex sa (SeqWRP (Var sa) xa ya)", "by (auto simp: eqvt_def WRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All WRP_dom", "by lexicographic_order"], ["", "lemma\n  shows WRP_fresh_iff [simp]: \"a \\<sharp> WRP x y \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> y\" (is ?thesis1)\n    and sigma_fm_WRP [simp]:  \"Sigma_fm (WRP x y)\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y) &&&\n    Sigma_fm (WRP x y)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y)\n 2. Sigma_fm (WRP x y)", "obtain s::name where \"atom s \\<sharp> (x,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        atom s \\<sharp> (x, y) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y)\n\ngoal (2 subgoals):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y)\n 2. Sigma_fm (WRP x y)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y) &&&\n    Sigma_fm (WRP x y)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> WRP x y = (a \\<sharp> x \\<and> a \\<sharp> y)\n  Sigma_fm (WRP x y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WRP_subst [simp]: \"(WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "obtain s::name where \"atom s \\<sharp> (x,y,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s.\n        atom s \\<sharp> (x, y, t, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y, t, i)\n\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y, t, i)\n\ngoal (1 subgoal):\n 1. (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)", "by (auto simp: WRP.simps [of s])"], ["proof (state)\nthis:\n  (WRP x y)(i::=t) = WRP (subst i t x) (subst i t y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WRP_cong: \"H \\<turnstile> t EQ t' \\<Longrightarrow> H \\<turnstile> u EQ u' \\<Longrightarrow> H \\<turnstile> WRP t u IFF WRP t' u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile> WRP t u IFF WRP t' u'", "by (rule P2_cong) auto"], ["", "declare WRP.simps [simp del]"], ["", "lemma ground_WRP [simp]: \"ground_fm (WRP x y) \\<longleftrightarrow> ground x \\<and> ground y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_fm (WRP x y) = (ground x \\<and> ground y)", "by (auto simp: ground_aux_def ground_fm_aux_def supp_conv_fresh)"], ["", "lemma SeqWRP_Zero: \"{} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)", "obtain l sl :: name where \"atom l \\<sharp> (s, sl)\" \"atom sl \\<sharp> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, sl); atom sl \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)", "then"], ["proof (chain)\npicking this:\n  atom l \\<sharp> (s, sl)\n  atom sl \\<sharp> s", "show ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)", "apply (subst SeqWRP.simps[of l _ _ sl]; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      SyntaxN.Ex s\n                       (LstSeqP (Var s) Zero Zero AND\n                        HPair Zero Zero IN Var s AND\n                        All2 l Zero\n                         (SyntaxN.Ex sl\n                           (HPair (Var l) (Var sl) IN Var s AND\n                            HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                            Var s)))", "apply (rule Ex_I[where x=\"(Eats Zero (HPair Zero Zero))\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      LstSeqP (Eats Zero (HPair Zero Zero)) Zero Zero AND\n                      HPair Zero Zero IN Eats Zero (HPair Zero Zero) AND\n                      All2 l Zero\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats Zero (HPair Zero Zero) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats Zero (HPair Zero Zero)))", "apply (auto intro!: Mem_Eats_I2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) Zero Zero)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WRP_Zero: \"{} \\<turnstile> WRP Zero Zero\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile> WRP Zero Zero", "by (subst WRP.simps[of undefined]) (auto simp: SeqWRP_Zero)"], ["", "lemma SeqWRP_HPair_Zero_Zero: \"{SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s", "let ?vs = \"(s,k,y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s", "obtain l::name and sl::name\n    where \"atom l \\<sharp> (?vs,sl)\" \"atom sl \\<sharp> (?vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> ((s, k, y), sl);\n         atom sl \\<sharp> (s, k, y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> ((s, k, y), sl)\n  atom sl \\<sharp> (s, k, y)\n\ngoal (1 subgoal):\n 1. {SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s", "then"], ["proof (chain)\npicking this:\n  atom l \\<sharp> ((s, k, y), sl)\n  atom sl \\<sharp> (s, k, y)", "show ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> ((s, k, y), sl)\n  atom sl \\<sharp> (s, k, y)\n\ngoal (1 subgoal):\n 1. {SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s", "by (subst SeqWRP.simps[of l _ _ sl]) auto"], ["proof (state)\nthis:\n  {SeqWRP s k y} \\<turnstile> HPair Zero Zero IN s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_Succ:\n  assumes \"atom s \\<sharp> (s1,k1,y)\"\n  shows \"{SeqWRP s1 k1 y} \\<turnstile> SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "let ?vs = \"(s,s1,k1,y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "obtain l::name and sl::name and l1::name and sl1::name\n    where atoms:\n      \"atom l \\<sharp> (?vs,sl1,l1,sl)\"\n      \"atom sl \\<sharp> (?vs,sl1,l1)\"\n      \"atom l1 \\<sharp> (?vs,sl1)\"\n      \"atom sl1 \\<sharp> (?vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl1 l1 sl.\n        \\<lbrakk>atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n         atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n         atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n         atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl)\n  atom sl \\<sharp> ((s, s1, k1, y), sl1, l1)\n  atom l1 \\<sharp> ((s, s1, k1, y), sl1)\n  atom sl1 \\<sharp> (s, s1, k1, y)\n\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "let ?hyp = \"{RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "using assms atoms"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (s1, k1, y)\n  atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl)\n  atom sl \\<sharp> ((s, s1, k1, y), sl1, l1)\n  atom l1 \\<sharp> ((s, s1, k1, y), sl1)\n  atom sl1 \\<sharp> (s, s1, k1, y)\n\ngoal (1 subgoal):\n 1. {SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))", "apply (auto simp: SeqWRP.simps [of l \"Var s\" _ sl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex s\n                       (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                        HPair Zero Zero IN Var s AND\n                        All2 l (SUCC k1)\n                         (SyntaxN.Ex sl\n                           (HPair (Var l) (Var sl) IN Var s AND\n                            HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                            Var s)))", "apply (rule cut_same [where A=\"OrdP k1\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s1 k1 y} \\<turnstile> OrdP k1\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex s\n                       (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                        HPair Zero Zero IN Var s AND\n                        All2 l (SUCC k1)\n                         (SyntaxN.Ex sl\n                           (HPair (Var l) (Var sl) IN Var s AND\n                            HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                            Var s)))", "apply (rule SeqWRP_imp_OrdP)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex s\n                       (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                        HPair Zero Zero IN Var s AND\n                        All2 l (SUCC k1)\n                         (SyntaxN.Ex sl\n                           (HPair (Var l) (Var sl) IN Var s AND\n                            HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                            Var s)))", "apply (rule cut_same [OF exists_RestrictedP [of s s1 \"SUCC k1\"]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> atom s \\<sharp> (s1, SUCC k1)\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex s (RestrictedP s1 (SUCC k1) (Var s)),\n                       OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex s\n                       (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                        HPair Zero Zero IN Var s AND\n                        All2 l (SUCC k1)\n                         (SyntaxN.Ex sl\n                           (HPair (Var l) (Var sl) IN Var s AND\n                            HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                            Var s)))", "apply (rule AssumeH Ex_EH Conj_EH | simp)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex s\n                       (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                        HPair Zero Zero IN Var s AND\n                        All2 l (SUCC k1)\n                         (SyntaxN.Ex sl\n                           (HPair (Var l) (Var sl) IN Var s AND\n                            HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                            Var s)))\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       s \\<sharp> SyntaxN.Ex s\n                                   (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                                    HPair Zero Zero IN Var s AND\n                                    All2 l (SUCC k1)\n                                     (SyntaxN.Ex sl\n (HPair (Var l) (Var sl) IN Var s AND\n  HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN Var s)))\n 3. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1, SeqWRP s1 k1 y}.\n                         atom s \\<sharp> C", "apply (rule Ex_I [where x=\"Eats (Var s) (HPair (SUCC k1)  (Q_Succ y))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                       HPair Zero Zero IN Var s AND\n                       All2 l (SUCC k1)\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN Var s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                           Var s)))(s::=Eats (Var s)\n   (HPair (SUCC k1) (Q_Succ y)))\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       s \\<sharp> SyntaxN.Ex s\n                                   (LstSeqP (Var s) (SUCC k1) (Q_Succ y) AND\n                                    HPair Zero Zero IN Var s AND\n                                    All2 l (SUCC k1)\n                                     (SyntaxN.Ex sl\n (HPair (Var l) (Var sl) IN Var s AND\n  HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN Var s)))\n 3. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1, SeqWRP s1 k1 y}.\n                         atom s \\<sharp> C", "apply (simp_all (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      LstSeqP (Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))\n                       (SUCC k1) (Q_Succ y) AND\n                      HPair Zero Zero IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                      All2 l (SUCC k1)\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "apply (rule Conj_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      LstSeqP (Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))\n                       (SUCC k1) (Q_Succ y)\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair Zero Zero IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                      All2 l (SUCC k1)\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "apply (blast intro: RestrictedP_LstSeqP_Eats[THEN cut2] SeqWRP_LstSeqP[THEN cut1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair Zero Zero IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                      All2 l (SUCC k1)\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "apply (rule Conj_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair Zero Zero IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      All2 l (SUCC k1)\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "apply (rule Mem_Eats_I1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair Zero Zero IN Var s\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      All2 l (SUCC k1)\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "apply (blast intro: RestrictedP_Mem[THEN cut3] SeqWRP_HPair_Zero_Zero[THEN cut1] Zero_In_SUCC[THEN cut1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      All2 l (SUCC k1)\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "proof (rule All2_SUCC_I, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      All2 l k1\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair k1 (Var sl) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                        HPair (SUCC k1) (Q_Succ (Var sl)) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))", "show \"?hyp \\<turnstile>  SyntaxN.Ex sl\n     (HPair k1 (Var sl) IN Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n      HPair (SUCC k1) (Q_Succ (Var sl)) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))\"\n      \\<comment> \\<open>verifying the final values\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex sl\n     (HPair k1 (Var sl) IN Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n      HPair (SUCC k1) (Q_Succ (Var sl)) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))", "apply (rule Ex_I [where x=\"y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n    (HPair k1 (Var sl) IN Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n     HPair (SUCC k1) (Q_Succ (Var sl)) IN\n     Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))(sl::=y)", "using assms atoms"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (s1, k1, y)\n  atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl)\n  atom sl \\<sharp> ((s, s1, k1, y), sl1, l1)\n  atom l1 \\<sharp> ((s, s1, k1, y), sl1)\n  atom sl1 \\<sharp> (s, s1, k1, y)\n\ngoal (1 subgoal):\n 1. {RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n    (HPair k1 (Var sl) IN Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n     HPair (SUCC k1) (Q_Succ (Var sl)) IN\n     Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))(sl::=y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair k1 y IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                      HPair (SUCC k1) (Q_Succ y) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))", "apply (rule Conj_I[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair (SUCC k1) (Q_Succ y) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair k1 y IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))", "apply (rule Mem_Eats_I2, rule Refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair k1 y IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))", "apply (rule Mem_Eats_I1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair k1 y IN Var s", "apply (rule RestrictedP_Mem[THEN cut3])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      RestrictedP ?s16 ?k16 (Var s)\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair k1 y IN ?s16\n 3. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      k1 IN ?k16", "apply (rule AssumeH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      HPair k1 y IN s1\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      k1 IN SUCC k1", "apply (simp add: LstSeqP_imp_Mem SeqWRP_LstSeqP thin1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      k1 IN SUCC k1", "apply (rule Mem_SUCC_Refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n  SyntaxN.Ex sl\n   (HPair k1 (Var sl) IN Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n    HPair (SUCC k1) (Q_Succ (Var sl)) IN\n    Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      All2 l k1\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                       SeqWRP s1 k1 y} \\<turnstile>\n                      All2 l k1\n                       (SyntaxN.Ex sl\n                         (HPair (Var l) (Var sl) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                          HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                          Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "show \"?hyp \\<turnstile> All2 l k1\n     (SyntaxN.Ex sl\n       (HPair (Var l) (Var sl) IN\n        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n        HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n        Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))\"\n      \\<comment> \\<open>verifying the sequence buildup\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n    All2 l k1\n     (SyntaxN.Ex sl\n       (HPair (Var l) (Var sl) IN\n        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n        HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n        Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))", "apply (rule All_I Imp_I)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. {Var l IN k1, RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n     SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex sl\n     (HPair (Var l) (Var sl) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n      HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))\n 2. \\<forall>C\\<in>{RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                    SeqWRP s1 k1 y}.\n       atom l \\<sharp> C", "using assms atoms"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (s1, k1, y)\n  atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl)\n  atom sl \\<sharp> ((s, s1, k1, y), sl1, l1)\n  atom l1 \\<sharp> ((s, s1, k1, y), sl1)\n  atom sl1 \\<sharp> (s, s1, k1, y)\n\ngoal (2 subgoals):\n 1. {Var l IN k1, RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n     SeqWRP s1 k1 y} \\<turnstile>\n    SyntaxN.Ex sl\n     (HPair (Var l) (Var sl) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n      HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))\n 2. \\<forall>C\\<in>{RestrictedP s1 (SUCC k1) (Var s), OrdP k1,\n                    SeqWRP s1 k1 y}.\n       atom l \\<sharp> C", "apply simp_all\n        \\<comment> \\<open>... the sequence buildup via s1\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {Var l IN k1, RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                        HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))", "apply (simp add: SeqWRP.simps [of l s1 _ sl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {Var l IN k1, RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1,\n                       LstSeqP s1 k1 y AND\n                       HPair Zero Zero IN s1 AND\n                       All2 l k1\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s1 AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                           s1))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                        HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))", "apply (rule AssumeH Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair Zero Zero IN s1,\n                       All2 l k1\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s1 AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s1)),\n                       LstSeqP s1 k1 y, Var l IN k1,\n                       RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                        HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))", "apply (rule All2_E [THEN rotate2], auto del: Disj_EH)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (Var sl) IN s1,\n                       HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s1,\n                       HPair Zero Zero IN s1, LstSeqP s1 k1 y, Var l IN k1,\n                       RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                        HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                        Eats (Var s) (HPair (SUCC k1) (Q_Succ y)))", "apply (rule Ex_I [where x=\"Var sl\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (Var sl) IN s1,\n                       HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s1,\n                       HPair Zero Zero IN s1, LstSeqP s1 k1 y, Var l IN k1,\n                       RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1} \\<turnstile>\n                      HPair (Var l) (Var sl) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n                      HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))", "apply (rule Conj_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (Var sl) IN s1,\n                       HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s1,\n                       HPair Zero Zero IN s1, LstSeqP s1 k1 y, Var l IN k1,\n                       RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1} \\<turnstile>\n                      HPair (Var l) (Var sl) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))\n 2. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (Var sl) IN s1,\n                       HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s1,\n                       HPair Zero Zero IN s1, LstSeqP s1 k1 y, Var l IN k1,\n                       RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1} \\<turnstile>\n                      HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))", "apply (blast intro: Mem_Eats_I1 [OF RestrictedP_Mem [THEN cut3]] Mem_SUCC_I1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (s1, k1, y);\n     atom l \\<sharp> ((s, s1, k1, y), sl1, l1, sl);\n     atom sl \\<sharp> ((s, s1, k1, y), sl1, l1);\n     atom l1 \\<sharp> ((s, s1, k1, y), sl1);\n     atom sl1 \\<sharp> (s, s1, k1, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (Var sl) IN s1,\n                       HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s1,\n                       HPair Zero Zero IN s1, LstSeqP s1 k1 y, Var l IN k1,\n                       RestrictedP s1 (SUCC k1) (Var s),\n                       OrdP k1} \\<turnstile>\n                      HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))", "apply (blast intro: Mem_Eats_I1 [OF RestrictedP_Mem [THEN cut3]] OrdP_IN_SUCC)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {RestrictedP s1 (SUCC k1) (Var s), OrdP k1, SeqWRP s1 k1 y} \\<turnstile>\n  All2 l k1\n   (SyntaxN.Ex sl\n     (HPair (Var l) (Var sl) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y)) AND\n      HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n      Eats (Var s) (HPair (SUCC k1) (Q_Succ y))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {SeqWRP s1 k1 y} \\<turnstile>\n  SyntaxN.Ex s (SeqWRP (Var s) (SUCC k1) (Q_Succ y))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma WRP_Succ: \"{OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)", "obtain s t :: name where \"atom s \\<sharp> (i, y)\" \"atom t \\<sharp> (s,i, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s t.\n        \\<lbrakk>atom s \\<sharp> (i, y); atom t \\<sharp> (s, i, y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (i, y)\n  atom t \\<sharp> (s, i, y)\n\ngoal (1 subgoal):\n 1. {OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)", "then"], ["proof (chain)\npicking this:\n  atom s \\<sharp> (i, y)\n  atom t \\<sharp> (s, i, y)", "show ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (i, y)\n  atom t \\<sharp> (s, i, y)\n\ngoal (1 subgoal):\n 1. {OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)", "by (subst WRP.simps[of s], simp, subst WRP.simps[of t], simp) (force intro: SeqWRP_Succ[THEN cut1])"], ["proof (state)\nthis:\n  {OrdP i, WRP i y} \\<turnstile> WRP (SUCC i) (Q_Succ y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma WRP: \"{} \\<turnstile> WRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile> WRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>", "by (induct i)\n    (auto simp: WRP_Zero quot_Succ intro!: WRP_Succ[THEN cut2])"], ["", "lemma prove_WRP:  \"{} \\<turnstile> WRP \\<guillemotleft>Var x\\<guillemotright> \\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    WRP \\<guillemotleft>Var x\\<guillemotright>\n     \\<guillemotleft>\\<guillemotleft>Var x\\<guillemotright>\\<guillemotright>", "unfolding quot_Var quot_Succ"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    WRP (SUCC (ORD_OF (nat_of_name x)))\n     (Q_Succ \\<guillemotleft>ORD_OF (nat_of_name x)\\<guillemotright>)", "by (rule WRP_Succ[THEN cut2]) (auto simp: WRP)"], ["", "subsection\\<open>Proving that these relations are functions\\<close>"], ["", "lemma SeqWRP_Zero_E:\n  assumes \"insert (y EQ Zero) H \\<turnstile> A\"  \"H \\<turnstile> k EQ Zero\"\n  shows \"insert (SeqWRP s k y) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "obtain l::name and sl::name\n    where \"atom l \\<sharp> (s,k,sl)\" \"atom sl \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl)\n  atom sl \\<sharp> s\n\ngoal (1 subgoal):\n 1. insert (SeqWRP s k y) H \\<turnstile> A", "apply (auto simp: SeqWRP.simps [where s=s and l=l and sl=sl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (HPair Zero Zero IN s)\n                       (insert\n                         (All2 l k\n                           (SyntaxN.Ex sl\n                             (HPair (Var l) (Var sl) IN s AND\n                              HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)))\n                         (insert (LstSeqP s k y) H)) \\<turnstile>\n                      A", "apply (rule cut_same [where A = \"LstSeqP s Zero y\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (HPair Zero Zero IN s)\n                       (insert\n                         (All2 l k\n                           (SyntaxN.Ex sl\n                             (HPair (Var l) (Var sl) IN s AND\n                              HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)))\n                         (insert (LstSeqP s k y) H)) \\<turnstile>\n                      LstSeqP s Zero y\n 2. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (LstSeqP s Zero y)\n                       (insert (HPair Zero Zero IN s)\n                         (insert\n                           (All2 l k\n                             (SyntaxN.Ex sl\n                               (HPair (Var l) (Var sl) IN s AND\n                                HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                s)))\n                           (insert (LstSeqP s k y) H))) \\<turnstile>\n                      A", "apply (blast intro: thin1 assms  LstSeqP_cong [OF Refl _ Refl, THEN Iff_MP_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (LstSeqP s Zero y)\n                       (insert (HPair Zero Zero IN s)\n                         (insert\n                           (All2 l k\n                             (SyntaxN.Ex sl\n                               (HPair (Var l) (Var sl) IN s AND\n                                HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                s)))\n                           (insert (LstSeqP s k y) H))) \\<turnstile>\n                      A", "apply (rule cut_same [where A = \"y EQ Zero\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (LstSeqP s Zero y)\n                       (insert (HPair Zero Zero IN s)\n                         (insert\n                           (All2 l k\n                             (SyntaxN.Ex sl\n                               (HPair (Var l) (Var sl) IN s AND\n                                HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                s)))\n                           (insert (LstSeqP s k y) H))) \\<turnstile>\n                      y EQ Zero\n 2. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (y EQ Zero)\n                       (insert (LstSeqP s Zero y)\n                         (insert (HPair Zero Zero IN s)\n                           (insert\n                             (All2 l k\n                               (SyntaxN.Ex sl\n                                 (HPair (Var l) (Var sl) IN s AND\n                                  HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                  s)))\n                             (insert (LstSeqP s k y) H)))) \\<turnstile>\n                      A", "apply (blast intro: LstSeqP_EQ)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, sl); atom sl \\<sharp> s\\<rbrakk>\n    \\<Longrightarrow> insert (y EQ Zero)\n                       (insert (LstSeqP s Zero y)\n                         (insert (HPair Zero Zero IN s)\n                           (insert\n                             (All2 l k\n                               (SyntaxN.Ex sl\n                                 (HPair (Var l) (Var sl) IN s AND\n                                  HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                                  s)))\n                             (insert (LstSeqP s k y) H)))) \\<turnstile>\n                      A", "apply (metis rotate2 assms(1) thin1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  insert (SeqWRP s k y) H \\<turnstile> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_SUCC_lemma:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\"\n  shows \"{SeqWRP s (SUCC k) y} \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "obtain l::name and sl::name\n    where atoms: \"atom l \\<sharp> (s,k,y,y',sl)\" \"atom sl \\<sharp> (s,k,y,y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl.\n        \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n         atom sl \\<sharp> (s, k, y, y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, y, y', sl)\n  atom sl \\<sharp> (s, k, y, y')\n\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, y, y', sl)\n  atom sl \\<sharp> (s, k, y, y')\n\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "using y'"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, y, y', sl)\n  atom sl \\<sharp> (s, k, y, y')\n  atom y' \\<sharp> (s, k, y)\n\ngoal (1 subgoal):\n 1. {SeqWRP s (SUCC k) y} \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "apply (auto simp: SeqWRP.simps [where s=s and l=l and sl=sl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair Zero Zero IN s,\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      SyntaxN.Ex y'\n                       ((LstSeqP s k (Var y') AND\n                         HPair Zero Zero IN s AND\n                         All2 l k\n                          (SyntaxN.Ex sl\n                            (HPair (Var l) (Var sl) IN s AND\n                             HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                             s))) AND\n                        y EQ Q_Succ (Var y'))", "apply (rule All2_SUCC_E' [where t=k, THEN rotate2], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      SyntaxN.Ex y'\n                       ((LstSeqP s k (Var y') AND\n                         HPair Zero Zero IN s AND\n                         All2 l k\n                          (SyntaxN.Ex sl\n                            (HPair (Var l) (Var sl) IN s AND\n                             HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN\n                             s))) AND\n                        y EQ Q_Succ (Var y'))", "apply (rule Ex_I [where x = \"Var sl\"], auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      LstSeqP s k (Var sl)\n 2. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      y EQ Q_Succ (Var sl)", "apply (blast intro: LstSeqP_SUCC) \\<comment> \\<open>showing @{term\"SeqWRP s k (Var sl)\"}\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, y, y', sl);\n     atom sl \\<sharp> (s, k, y, y'); atom y' \\<sharp> (s, k, y)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (Var sl) IN s,\n                       HPair (SUCC k) (Q_Succ (Var sl)) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (HPair (Var l) (Var sl) IN s AND\n                           HPair (SUCC (Var l)) (Q_Succ (Var sl)) IN s)),\n                       HPair Zero Zero IN s,\n                       LstSeqP s (SUCC k) y} \\<turnstile>\n                      y EQ Q_Succ (Var sl)", "apply (blast intro: ContraProve LstSeqP_EQ)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqWRP s (SUCC k) y} \\<turnstile>\n  SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqWRP_SUCC_E:\n  assumes y': \"atom y' \\<sharp> (s,k,y)\" and k': \"H \\<turnstile> k' EQ (SUCC k)\"\n  shows \"insert (SeqWRP s k' y) H  \\<turnstile> Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (SeqWRP s k' y) H \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "using SeqWRP_cong [OF Refl k' Refl] cut1 [OF SeqWRP_SUCC_lemma [of y' s k y]]"], ["proof (prove)\nusing this:\n  H \\<turnstile> SeqWRP ?s k' ?y IFF SeqWRP ?s (SUCC k) ?y\n  \\<lbrakk>atom y' \\<sharp> (s, k, y);\n   ?H \\<turnstile> SeqWRP s (SUCC k) y\\<rbrakk>\n  \\<Longrightarrow> ?H \\<turnstile>\n                    SyntaxN.Ex y'\n                     (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))\n\ngoal (1 subgoal):\n 1. insert (SeqWRP s k' y) H \\<turnstile>\n    SyntaxN.Ex y' (SeqWRP s k (Var y') AND y EQ Q_Succ (Var y'))", "by (metis Assume Iff_MP_left Iff_sym y')"], ["", "lemma SeqWRP_unique: \"{OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "obtain i::name and j::name and j'::name and k::name and sl::name and sl'::name and l::name and pi::name\n    where  i: \"atom i \\<sharp> (s,s',y,y')\" and j: \"atom j \\<sharp> (s,s',i,x,y,y')\" and j': \"atom j' \\<sharp> (s,s',i,j,x,y,y')\"\n      and atoms: \"atom k \\<sharp> (s,s',i,j,j')\" \"atom sl \\<sharp> (s,s',i,j,j',k)\" \"atom sl' \\<sharp> (s,s',i,j,j',k,sl)\"\n                 \"atom pi \\<sharp> (s,s',i,j,j',k,sl,sl')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j j' k sl sl' pi.\n        \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n         atom j \\<sharp> (s, s', i, x, y, y');\n         atom j' \\<sharp> (s, s', i, j, x, y, y');\n         atom k \\<sharp> (s, s', i, j, j');\n         atom sl \\<sharp> (s, s', i, j, j', k);\n         atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n         atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', i, j, j')\n  atom sl \\<sharp> (s, s', i, j, j', k)\n  atom sl' \\<sharp> (s, s', i, j, j', k, sl)\n  atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "have \"{OrdP (Var i)} \\<turnstile> All j (All j' (SeqWRP s (Var i) (Var j) IMP (SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SeqWRP s (Var i) (Var j) IMP\n        SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))", "apply (rule OrdIndH [where j=k])"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom\n     k \\<sharp> (i, SyntaxN.All j\n                     (SyntaxN.All j'\n                       (SeqWRP s (Var i) (Var j) IMP\n                        SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))\n 2. {} \\<turnstile>\n    SyntaxN.All i\n     (OrdP (Var i) IMP\n      All2 k (Var i)\n       ((SyntaxN.All j\n          (SyntaxN.All j'\n            (SeqWRP s (Var i) (Var j) IMP\n             SeqWRP s' (Var i) (Var j') IMP\n             Var j' EQ Var j)))(i::=Var k)) IMP\n      SyntaxN.All j\n       (SyntaxN.All j'\n         (SeqWRP s (Var i) (Var j) IMP\n          SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))", "using i j j' atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', i, j, j')\n  atom sl \\<sharp> (s, s', i, j, j', k)\n  atom sl' \\<sharp> (s, s', i, j, j', k, sl)\n  atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\n\ngoal (2 subgoals):\n 1. atom\n     k \\<sharp> (i, SyntaxN.All j\n                     (SyntaxN.All j'\n                       (SeqWRP s (Var i) (Var j) IMP\n                        SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))\n 2. {} \\<turnstile>\n    SyntaxN.All i\n     (OrdP (Var i) IMP\n      All2 k (Var i)\n       ((SyntaxN.All j\n          (SyntaxN.All j'\n            (SeqWRP s (Var i) (Var j) IMP\n             SeqWRP s' (Var i) (Var j') IMP\n             Var j' EQ Var j)))(i::=Var k)) IMP\n      SyntaxN.All j\n       (SyntaxN.All j'\n         (SeqWRP s (Var i) (Var j) IMP\n          SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j), OrdP (Var i)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule rotate4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i), Neg (Var j' EQ Var j),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule OrdP_cases_E [where k=pi], simp_all)\n    \\<comment> \\<open>Zero case\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule SeqWRP_Zero_E [THEN rotate3])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var i EQ Zero\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var i EQ Zero\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero, Neg (Var j' EQ Var j),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule SeqWRP_Zero_E [THEN rotate4])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Zero, Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      Var i EQ Zero\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "prefer 2"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      Var i EQ Zero\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Zero, Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ Zero, Var j' EQ Zero, Var i EQ Zero,\n                       Neg (Var j' EQ Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (blast intro: ContraProve [THEN rotate4] Sym Trans)\n    \\<comment> \\<open>SUCC case\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       Neg (Var j' EQ Var j), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Neg (Var k IN Var i IMP\n                             SyntaxN.All j\n                              (SyntaxN.All j'\n                                (SeqWRP s (Var k) (Var j) IMP\n                                 SeqWRP s' (Var k) (Var j') IMP\n                                 Var j' EQ Var j))))", "apply (rule Ex_I [where x = \"Var pi\"], auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var pi IN Var i), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (metis ContraProve EQ_imp_SUBS2 Mem_SUCC_I2 Refl Subset_D)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      ?A91\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {?A91,\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule SeqWRP_SUCC_E [of sl' s' \"Var pi\", THEN rotate4], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      ?A124\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {?A124, SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule SeqWRP_SUCC_E [of sl s \"Var pi\", THEN rotate7], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s (Var pi) (Var sl), Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'),\n                       SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SeqWRP s (Var pi) (Var j) IMP\n                           SeqWRP s' (Var pi) (Var j') IMP\n                           Var j' EQ Var j)),\n                       Var i EQ SUCC (Var pi), OrdP (Var pi),\n                       SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x = \"Var sl\", THEN rotate5], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SeqWRP s (Var pi) (Var sl) IMP\n                         SeqWRP s' (Var pi) (Var j') IMP Var j' EQ Var sl),\n                       SeqWRP s (Var pi) (Var sl), Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x = \"Var sl'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {SeqWRP s (Var pi) (Var sl) IMP\n                       SeqWRP s' (Var pi) (Var sl') IMP Var sl' EQ Var sl,\n                       SeqWRP s (Var pi) (Var sl), Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Imp_E, blast)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Var sl' EQ Var sl, SeqWRP s (Var pi) (Var sl),\n                       Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [OF Q_Succ_cong [OF Assume]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', i, j, j');\n     atom sl \\<sharp> (s, s', i, j, j', k);\n     atom sl' \\<sharp> (s, s', i, j, j', k, sl);\n     atom pi \\<sharp> (s, s', i, j, j', k, sl, sl')\\<rbrakk>\n    \\<Longrightarrow> {Q_Succ (Var sl') EQ Q_Succ (Var sl),\n                       Var sl' EQ Var sl, SeqWRP s (Var pi) (Var sl),\n                       Var j EQ Q_Succ (Var sl),\n                       SeqWRP s' (Var pi) (Var sl'),\n                       Var j' EQ Q_Succ (Var sl'), Var i EQ SUCC (Var pi),\n                       OrdP (Var pi), SeqWRP s' (Var i) (Var j'),\n                       SeqWRP s (Var i) (Var j)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans [OF Hyp Sym] HPair_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {OrdP (Var i)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SeqWRP s (Var i) (Var j) IMP\n      SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var i)} \\<turnstile> (All j' (SeqWRP s (Var i) (Var j) IMP (SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j)))(j::=y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SeqWRP s (Var i) (Var j) IMP\n      SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))\n\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    (SyntaxN.All j'\n      (SeqWRP s (Var i) (Var j) IMP\n       SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)", "by (metis All_D)"], ["proof (state)\nthis:\n  {OrdP (Var i)} \\<turnstile>\n  (SyntaxN.All j'\n    (SeqWRP s (Var i) (Var j) IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var i)} \\<turnstile> (SeqWRP s (Var i) y IMP (SeqWRP s' (Var i) (Var j') IMP Var j' EQ y))(j'::=y')\""], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SyntaxN.All j'\n    (SeqWRP s (Var i) (Var j) IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)\n\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    (SeqWRP s (Var i) y IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')", "using j j'"], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SyntaxN.All j'\n    (SeqWRP s (Var i) (Var j) IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ Var j))(j::=y)\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n\ngoal (1 subgoal):\n 1. {OrdP (Var i)} \\<turnstile>\n    (SeqWRP s (Var i) y IMP\n     SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')", "by simp (drule All_D [where x=y'], simp)"], ["proof (state)\nthis:\n  {OrdP (Var i)} \\<turnstile>\n  (SeqWRP s (Var i) y IMP\n   SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> OrdP (Var i) IMP (SeqWRP s (Var i) y IMP (SeqWRP s' (Var i) y' IMP y' EQ y))\""], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SeqWRP s (Var i) y IMP\n   SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y", "using j j'"], ["proof (prove)\nusing this:\n  {OrdP (Var i)} \\<turnstile>\n  (SeqWRP s (Var i) y IMP\n   SeqWRP s' (Var i) (Var j') IMP Var j' EQ y)(j'::=y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y", "by simp (metis Imp_I)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> (OrdP (Var i) IMP (SeqWRP s (Var i) y IMP (SeqWRP s' (Var i) y' IMP y' EQ y)))(i::=x)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  OrdP (Var i) IMP SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (OrdP (Var i) IMP\n     SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)", "by (metis Subst emptyE)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  (OrdP (Var i) IMP\n   SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (OrdP (Var i) IMP\n   SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "using i"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (OrdP (Var i) IMP\n   SeqWRP s (Var i) y IMP SeqWRP s' (Var i) y' IMP y' EQ y)(i::=x)\n  atom i \\<sharp> (s, s', y, y')\n\ngoal (1 subgoal):\n 1. {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y", "by simp (metis anti_deduction insert_commute)"], ["proof (state)\nthis:\n  {OrdP x, SeqWRP s x y, SeqWRP s' x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem WRP_unique: \"{OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "obtain s::name and s'::name\n    where \"atom s \\<sharp> (x,y,y')\"  \"atom s' \\<sharp> (x,y,y',s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s s'.\n        \\<lbrakk>atom s \\<sharp> (x, y, y');\n         atom s' \\<sharp> (x, y, y', s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n\ngoal (1 subgoal):\n 1. {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y", "by (auto simp: SeqWRP_unique [THEN rotate3] WRP.simps [of s _ y]  WRP.simps [of s' _ y'])"], ["proof (state)\nthis:\n  {OrdP x, WRP x y, WRP x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open>The Function HF and Lemma 6.2\\<close>"], ["", "subsection \\<open>Defining the syntax: quantified body\\<close>"], ["", "nominal_function SeqHRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,sl,sl',m,n,sm,sm',sn,sn');\n          atom sl \\<sharp> (s,sl',m,n,sm,sm',sn,sn');\n          atom sl' \\<sharp> (s,m,n,sm,sm',sn,sn');\n          atom m \\<sharp> (s,n,sm,sm',sn,sn');\n          atom n \\<sharp> (s,sm,sm',sn,sn');\n          atom sm \\<sharp> (s,sm',sn,sn');\n          atom sm' \\<sharp> (s,sn,sn');\n          atom sn \\<sharp> (s,sn');\n          atom sn' \\<sharp> (s)\\<rbrakk> \\<Longrightarrow>\n    SeqHRP x x' s k =\n      LstSeqP s k (HPair x x') AND\n      All2 l (SUCC k) (Ex sl (Ex sl' (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                ((OrdP (Var sl) AND WRP (Var sl) (Var sl')) OR\n                 Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN Var l AND Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                       Var sl EQ HPair (Var sm) (Var sn) AND\n                       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqHRP_graph_aux\n 2. \\<And>x y. SeqHRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k sl sl' m n sm sm' sn sn' xa x'.\n           \\<lbrakk>atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn');\n            atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn');\n            atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn');\n            atom m \\<sharp> (s, n, sm, sm', sn, sn');\n            atom n \\<sharp> (s, sm, sm', sn, sn');\n            atom sm \\<sharp> (s, sm', sn, sn');\n            atom sm' \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (xa, x', s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k sl sl' m n sm sm' sn sn' x x' la sa ka sla sl'a ma na sma\n       sm'a sna sn'a xa x'a.\n       \\<lbrakk>atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn');\n        atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn');\n        atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn');\n        atom m \\<sharp> (s, n, sm, sm', sn, sn');\n        atom n \\<sharp> (s, sm, sm', sn, sn');\n        atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n        atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s;\n        atom la \\<sharp> (sa, ka, sla, sl'a, ma, na, sma, sm'a, sna, sn'a);\n        atom sla \\<sharp> (sa, sl'a, ma, na, sma, sm'a, sna, sn'a);\n        atom sl'a \\<sharp> (sa, ma, na, sma, sm'a, sna, sn'a);\n        atom ma \\<sharp> (sa, na, sma, sm'a, sna, sn'a);\n        atom na \\<sharp> (sa, sma, sm'a, sna, sn'a);\n        atom sma \\<sharp> (sa, sm'a, sna, sn'a);\n        atom sm'a \\<sharp> (sa, sna, sn'a); atom sna \\<sharp> (sa, sn'a);\n        atom sn'a \\<sharp> sa; (x, x', s, k) = (xa, x'a, sa, ka)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k (HPair x x') AND\n                         All2 l (SUCC k)\n                          (SyntaxN.Ex sl\n                            (SyntaxN.Ex sl'\n                              (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                               s AND\n                               (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                SyntaxN.Ex m\n                                 (SyntaxN.Ex n\n                                   (SyntaxN.Ex sm\n                                     (SyntaxN.Ex sm'\n (SyntaxN.Ex sn\n   (SyntaxN.Ex sn'\n     (Var m IN Var l AND\n      Var n IN Var l AND\n      HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n      HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n      Var sl EQ HPair (Var sm) (Var sn) AND\n      Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))) =\n                         LstSeqP sa ka (HPair xa x'a) AND\n                         All2 la (SUCC ka)\n                          (SyntaxN.Ex sla\n                            (SyntaxN.Ex sl'a\n                              (HPair (Var la)\n                                (HPair (Var sla) (Var sl'a)) IN\n                               sa AND\n                               (OrdP (Var sla) AND\n                                WRP (Var sla) (Var sl'a) OR\n                                SyntaxN.Ex ma\n                                 (SyntaxN.Ex na\n                                   (SyntaxN.Ex sma\n                                     (SyntaxN.Ex sm'a\n (SyntaxN.Ex sna\n   (SyntaxN.Ex sn'a\n     (Var ma IN Var la AND\n      Var na IN Var la AND\n      HPair (Var ma) (HPair (Var sma) (Var sm'a)) IN sa AND\n      HPair (Var na) (HPair (Var sna) (Var sn'a)) IN sa AND\n      Var sla EQ HPair (Var sma) (Var sna) AND\n      Var sl'a EQ Q_HPair (Var sm'a) (Var sn'a)))))))))))", "by (auto simp: eqvt_def SeqHRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqHRP_dom", "by lexicographic_order"], ["", "lemma\n shows SeqHRP_fresh_iff [simp]:\n      \"a \\<sharp> SeqHRP x x' s k \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n  and SeqHRP_sf [iff]:  \"Sigma_fm (SeqHRP x x' s k)\"  (is ?thsf)\n  and SeqHRP_imp_OrdP: \"{ SeqHRP x y s k } \\<turnstile> OrdP k\"  (is ?thord)\n  and SeqHRP_imp_LstSeqP: \"{ SeqHRP x y s k } \\<turnstile> LstSeqP s k (HPair x y)\"  (is ?thlstseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqHRP x x' s k =\n     (a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqHRP x x' s k)) &&&\n    {SeqHRP x y s k} \\<turnstile> OrdP k &&&\n    {SeqHRP x y s k} \\<turnstile> LstSeqP s k (HPair x y)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqHRP x x' s k =\n    (a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqHRP x x' s k)\n 3. {SeqHRP x y s k} \\<turnstile> OrdP k\n 4. {SeqHRP x y s k} \\<turnstile> LstSeqP s k (HPair x y)", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where atoms:\n         \"atom l \\<sharp> (s,k,sl,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl \\<sharp> (s,sl',m,n,sm,sm',sn,sn')\" \"atom sl' \\<sharp> (s,m,n,sm,sm',sn,sn')\"\n         \"atom m \\<sharp> (s,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,sm,sm',sn,sn')\"\n         \"atom sm \\<sharp> (s,sm',sn,sn')\" \"atom sm' \\<sharp> (s,sn,sn')\"\n         \"atom sn \\<sharp> (s,sn')\" \"atom sn' \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n         atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqHRP x x' s k =\n    (a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqHRP x x' s k)\n 3. {SeqHRP x y s k} \\<turnstile> OrdP k\n 4. {SeqHRP x y s k} \\<turnstile> LstSeqP s k (HPair x y)", "thus ?thesis1 ?thsf ?thord ?thlstseq"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqHRP x x' s k =\n     (a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqHRP x x' s k)) &&&\n    {SeqHRP x y s k} \\<turnstile> OrdP k &&&\n    {SeqHRP x y s k} \\<turnstile> LstSeqP s k (HPair x y)", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> SeqHRP x x' s k =\n  (a \\<sharp> x \\<and>\n   a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n  Sigma_fm (SeqHRP x x' s k)\n  {SeqHRP x y s k} \\<turnstile> OrdP k\n  {SeqHRP x y s k} \\<turnstile> LstSeqP s k (HPair x y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_subst [simp]:\n      \"(SeqHRP x x' s k)(i::=t) = SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where \"atom l \\<sharp> (s,k,t,i,sl,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl \\<sharp> (s,t,i,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl' \\<sharp> (s,t,i,m,n,sm,sm',sn,sn')\"\n          \"atom m \\<sharp> (s,t,i,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,t,i,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (s,t,i,sm',sn,sn')\" \"atom sm' \\<sharp> (s,t,i,sn,sn')\"\n          \"atom sn \\<sharp> (s,t,i,sn')\" \"atom sn' \\<sharp> (s,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, t, i, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (s, t, i, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, t, i, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, t, i, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, t, i, sm', sn, sn');\n         atom sm' \\<sharp> (s, t, i, sn, sn');\n         atom sn \\<sharp> (s, t, i, sn');\n         atom sn' \\<sharp> (s, t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, t, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, t, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, t, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, t, i, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, t, i, sm', sn, sn')\n  atom sm' \\<sharp> (s, t, i, sn, sn')\n  atom sn \\<sharp> (s, t, i, sn')\n  atom sn' \\<sharp> (s, t, i)\n\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, t, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, t, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, t, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, t, i, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, t, i, sm', sn, sn')\n  atom sm' \\<sharp> (s, t, i, sn, sn')\n  atom sn \\<sharp> (s, t, i, sn')\n  atom sn' \\<sharp> (s, t, i)\n\ngoal (1 subgoal):\n 1. (SeqHRP x x' s k)(i::=t) =\n    SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)", "by (auto simp: SeqHRP.simps [of l _ _ sl sl' m n sm sm' sn sn'])"], ["proof (state)\nthis:\n  (SeqHRP x x' s k)(i::=t) =\n  SeqHRP (subst i t x) (subst i t x') (subst i t s) (subst i t k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_cong:\n  assumes \"H \\<turnstile> x EQ x'\" and \"H \\<turnstile> y EQ y'\" \"H \\<turnstile> s EQ s'\" and  \"H \\<turnstile> k EQ k'\"\n  shows \"H \\<turnstile> SeqHRP x y s k IFF SeqHRP x' y' s' k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> SeqHRP x y s k IFF SeqHRP x' y' s' k'", "by (rule P4_cong [OF _ assms], auto)"], ["", "subsection \\<open>Defining the syntax: main predicate\\<close>"], ["", "nominal_function HRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (x,x',k); atom k \\<sharp> (x,x')\\<rbrakk> \\<Longrightarrow>\n         HRP x x' = Ex s (Ex k (SeqHRP x x' (Var s) (Var k)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt HRP_graph_aux\n 2. \\<And>x y. HRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s xa x' k.\n           \\<lbrakk>atom s \\<sharp> (xa, x', k); atom k \\<sharp> (xa, x');\n            x = (xa, x')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s x x' k sa xa x'a ka.\n       \\<lbrakk>atom s \\<sharp> (x, x', k); atom k \\<sharp> (x, x');\n        atom sa \\<sharp> (xa, x'a, ka); atom ka \\<sharp> (xa, x'a);\n        (x, x') = (xa, x'a)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex s\n                          (SyntaxN.Ex k (SeqHRP x x' (Var s) (Var k))) =\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka (SeqHRP xa x'a (Var sa) (Var ka)))", "by (auto simp: eqvt_def HRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All HRP_dom", "by lexicographic_order"], ["", "lemma\n shows HRP_fresh_iff [simp]: \"a \\<sharp> HRP x x' \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> x'\"  (is ?thesis1)\n   and HRP_sf [iff]:         \"Sigma_fm (HRP x x')\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    Sigma_fm (HRP x x')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x')\n 2. Sigma_fm (HRP x x')", "obtain s::name and k::name  where \"atom s \\<sharp> (x,x',k)\"  \"atom k \\<sharp> (x,x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (x, x', k);\n         atom k \\<sharp> (x, x')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, x', k)\n  atom k \\<sharp> (x, x')\n\ngoal (2 subgoals):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x')\n 2. Sigma_fm (HRP x x')", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, x', k)\n  atom k \\<sharp> (x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    Sigma_fm (HRP x x')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> HRP x x' = (a \\<sharp> x \\<and> a \\<sharp> x')\n  Sigma_fm (HRP x x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HRP_subst [simp]: \"(HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "obtain s::name and k::name where \"atom s \\<sharp> (x,x',t,i,k)\"  \"atom k \\<sharp> (x,x',t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (x, x', t, i, k);\n         atom k \\<sharp> (x, x', t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, x', t, i, k)\n  atom k \\<sharp> (x, x', t, i)\n\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, x', t, i, k)\n  atom k \\<sharp> (x, x', t, i)\n\ngoal (1 subgoal):\n 1. (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')", "by (auto simp: HRP.simps [of s _ _ k])"], ["proof (state)\nthis:\n  (HRP x x')(i::=t) = HRP (subst i t x) (subst i t x')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Proving that these relations are functions\\<close>"], ["", "lemma SeqHRP_lemma:\n  assumes \"atom m \\<sharp> (x,x',s,k,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (x,x',s,k,sm,sm',sn,sn')\"\n          \"atom sm \\<sharp> (x,x',s,k,sm',sn,sn')\" \"atom sm' \\<sharp> (x,x',s,k,sn,sn')\"\n          \"atom sn \\<sharp> (x,x',s,k,sn')\" \"atom sn' \\<sharp> (x,x',s,k)\"\n    shows \"{ SeqHRP x x' s k }\n         \\<turnstile> (OrdP x AND WRP x x') OR\n             Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN k AND Var n IN k AND\n                       SeqHRP (Var sm) (Var sm') s (Var m) AND\n                       SeqHRP (Var sn) (Var sn') s (Var n) AND\n                       x EQ HPair (Var sm) (Var sn) AND\n                       x' EQ Q_HPair (Var sm') (Var sn')))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "obtain l::name and sl::name and sl'::name\n    where atoms:\n          \"atom l \\<sharp> (x,x',s,k,sl,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl \\<sharp> (x,x',s,k,sl',m,n,sm,sm',sn,sn')\"\n          \"atom sl' \\<sharp> (x,x',s,k,m,n,sm,sm',sn,sn')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl'.\n        \\<lbrakk>atom\n                  l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "using atoms assms"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n  atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn')\n  atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn')\n  atom sm \\<sharp> (x, x', s, k, sm', sn, sn')\n  atom sm' \\<sharp> (x, x', s, k, sn, sn')\n  atom sn \\<sharp> (x, x', s, k, sn')\n  atom sn' \\<sharp> (x, x', s, k)\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s k} \\<turnstile>\n    OrdP x AND WRP x x' OR\n    SyntaxN.Ex m\n     (SyntaxN.Ex n\n       (SyntaxN.Ex sm\n         (SyntaxN.Ex sm'\n           (SyntaxN.Ex sn\n             (SyntaxN.Ex sn'\n               (Var m IN k AND\n                Var n IN k AND\n                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                x EQ HPair (Var sm) (Var sn) AND\n                x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (simp add: SeqHRP.simps [of l s k sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s k (HPair x x') AND\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Conj_E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s k (HPair x x'),\n                       All2 l (SUCC k)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule All2_SUCC_E' [where t=k, THEN rotate2], simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair k (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN k AND\n  Var n IN k AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule rotate2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair k (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN k AND\n  Var n IN k AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_E Conj_E)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> OrdP x AND WRP x x' OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> OrdP x AND WRP x x' OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl \\<sharp> C", "apply (rule cut_same [where A = \"HPair x x' EQ HPair (Var sl) (Var sl')\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      HPair x x' EQ HPair (Var sl) (Var sl')\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {HPair x x' EQ HPair (Var sl) (Var sl'),\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> OrdP x AND WRP x x' OR\n                                    SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> OrdP x AND WRP x x' OR\n                                   SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 6. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{All2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sl \\<sharp> C", "apply (metis Assume LstSeqP_EQ rotate4, simp_all, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_E [THEN rotate4])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var sl) AND WRP (Var sl) (Var sl'),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_I1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var sl) AND WRP (Var sl) (Var sl'),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x'\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (metis Assume AssumeH(3) Sym thin1  Iff_MP_same [OF Conj_cong [OF OrdP_cong WRP_cong] Assume])\n    \\<comment> \\<open>auto could be used but is VERY SLOW\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      OrdP x AND WRP x x' OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN k AND\n                                   Var n IN k AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_E Conj_EH)+"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN k AND\n          Var n IN k AND\n          SeqHRP (Var sm) (Var sm') s (Var m) AND\n          SeqHRP (Var sn) (Var sn') s (Var n) AND\n          x EQ HPair (Var sm) (Var sn) AND\n          x' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{x EQ Var sl, x' EQ Var sl',\nHPair k (HPair (Var sl) (Var sl')) IN s,\nAll2 l k\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\nLstSeqP s k (HPair x x')}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom\n               l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n      atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n      atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n      atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n      atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n      atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n      atom sm' \\<sharp> (x, x', s, k, sn, sn');\n      atom sn \\<sharp> (x, x', s, k, sn');\n      atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN k AND\n         Var n IN k AND\n         SeqHRP (Var sm) (Var sm') s (Var m) AND\n         SeqHRP (Var sn) (Var sn') s (Var n) AND\n         x EQ HPair (Var sm) (Var sn) AND\n         x' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 13 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN k AND\n                                  Var n IN k AND\n                                  SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                  SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                  x EQ HPair (Var sm) (Var sn) AND\n                                  x' EQ Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_I [where x = \"Var m\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (Var m IN k AND\n                                Var n IN k AND\n                                SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                x EQ HPair (Var sm) (Var sn) AND\n                                x' EQ Q_HPair (Var sm') (Var sn'))))))", "apply (rule Ex_I [where x = \"Var n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (Var m IN k AND\n                              Var n IN k AND\n                              SeqHRP (Var sm) (Var sm') s (Var m) AND\n                              SeqHRP (Var sn) (Var sn') s (Var n) AND\n                              x EQ HPair (Var sm) (Var sn) AND\n                              x' EQ Q_HPair (Var sm') (Var sn')))))", "apply (rule Ex_I [where x = \"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (Var m IN k AND\n                            Var n IN k AND\n                            SeqHRP (Var sm) (Var sm') s (Var m) AND\n                            SeqHRP (Var sn) (Var sn') s (Var n) AND\n                            x EQ HPair (Var sm) (Var sn) AND\n                            x' EQ Q_HPair (Var sm') (Var sn'))))", "apply (rule Ex_I [where x = \"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (Var m IN k AND\n                          Var n IN k AND\n                          SeqHRP (Var sm) (Var sm') s (Var m) AND\n                          SeqHRP (Var sn) (Var sn') s (Var n) AND\n                          x EQ HPair (Var sm) (Var sn) AND\n                          x' EQ Q_HPair (Var sm') (Var sn')))", "apply (rule Ex_I [where x = \"Var sn\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (Var m IN k AND\n                        Var n IN k AND\n                        SeqHRP (Var sm) (Var sm') s (Var m) AND\n                        SeqHRP (Var sn) (Var sn') s (Var n) AND\n                        x EQ HPair (Var sm) (Var sn) AND\n                        x' EQ Q_HPair (Var sm') (Var sn'))", "apply (rule Ex_I [where x = \"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      SeqHRP (Var sm) (Var sm') s (Var m) AND\n                      SeqHRP (Var sn) (Var sn') s (Var n) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (simp add: SeqHRP.simps [of l _ _ sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      Var m IN k AND\n                      Var n IN k AND\n                      (LstSeqP s (Var m) (HPair (Var sm) (Var sm')) AND\n                       All2 l (SUCC (Var m))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I, blast)+\n    \\<comment> \\<open>first SeqHRP subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var m) (HPair (Var sm) (Var sm')) AND\n                       All2 l (SUCC (Var m))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      LstSeqP s (Var m) (HPair (Var sm) (Var sm'))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var m))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro: LstSeqP_Mem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var m))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SUCC (Var m) SUBS k\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var m), k)\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro!: SUCC_Subset_Ord LstSeqP_OrdP, blast, simp)\n    \\<comment> \\<open>next SeqHRP subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      (LstSeqP s (Var n) (HPair (Var sn) (Var sn')) AND\n                       All2 l (SUCC (Var n))\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))) AND\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      LstSeqP s (Var n) (HPair (Var sn) (Var sn'))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var n))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro: LstSeqP_Mem)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      All2 l (SUCC (Var n))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (rule All2_Subset [OF Hyp], blast)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      SUCC (Var n) SUBS k\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> (SUCC (Var n), k)\n 4. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn) AND\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (auto intro!: SUCC_Subset_Ord LstSeqP_OrdP)\n    \\<comment> \\<open>finally, the equality pair\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x EQ HPair (Var sm) (Var sn)\n 2. \\<lbrakk>atom l \\<sharp> (x, x', s, k, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (x, x', s, k, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (x, x', s, k, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (x, x', s, k, n, sm, sm', sn, sn');\n     atom n \\<sharp> (x, x', s, k, sm, sm', sn, sn');\n     atom sm \\<sharp> (x, x', s, k, sm', sn, sn');\n     atom sm' \\<sharp> (x, x', s, k, sn, sn');\n     atom sn \\<sharp> (x, x', s, k, sn');\n     atom sn' \\<sharp> (x, x', s, k)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s,\n                       Var n IN k, Var m IN k, x EQ Var sl, x' EQ Var sl',\n                       HPair k (HPair (Var sl) (Var sl')) IN s,\n                       All2 l k\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       LstSeqP s k (HPair x x')} \\<turnstile>\n                      x' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro: Trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqHRP x x' s k} \\<turnstile>\n  OrdP x AND WRP x x' OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN k AND\n              Var n IN k AND\n              SeqHRP (Var sm) (Var sm') s (Var m) AND\n              SeqHRP (Var sn) (Var sn') s (Var n) AND\n              x EQ HPair (Var sm) (Var sn) AND\n              x' EQ Q_HPair (Var sm') (Var sn')))))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_unique: \"{SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "obtain i::name and j::name and j'::name and k::name and k'::name and l::name\n     and m::name and n::name and sm::name and sn::name and sm'::name and sn'::name\n     and m2::name and n2::name and sm2::name and sn2::name and sm2'::name and sn2'::name\n    where atoms:  \"atom i \\<sharp> (s,s',y,y')\"   \"atom j \\<sharp> (s,s',i,x,y,y')\"  \"atom j' \\<sharp> (s,s',i,j,x,y,y')\"\n                  \"atom k \\<sharp> (s,s',x,y,y',u',i,j,j')\" \"atom k' \\<sharp> (s,s',x,y,y',k,i,j,j')\" \"atom l \\<sharp> (s,s',i,j,j',k,k')\"\n                  \"atom m \\<sharp> (s,s',i,j,j',k,k',l)\"   \"atom n \\<sharp> (s,s',i,j,j',k,k',l,m)\"\n                  \"atom sm \\<sharp> (s,s',i,j,j',k,k',l,m,n)\"  \"atom sn \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm)\"\n                  \"atom sm' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn)\"   \"atom sn' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm')\"\n                  \"atom m2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn')\"   \"atom n2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2)\"\n                  \"atom sm2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2)\"  \"atom sn2 \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2)\"\n                  \"atom sm2' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2)\"   \"atom sn2' \\<sharp> (s,s',i,j,j',k,k',l,m,n,sm,sn,sm',sn',m2,n2,sm2,sn2,sm2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j j' k k' l m n sm sn sm' sn' m2 n2 sm2 sn2 sm2' sn2'.\n        \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n         atom j \\<sharp> (s, s', i, x, y, y');\n         atom j' \\<sharp> (s, s', i, j, x, y, y');\n         atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n         atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n         atom l \\<sharp> (s, s', i, j, j', k, k');\n         atom m \\<sharp> (s, s', i, j, j', k, k', l);\n         atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n         atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n         atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n         atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n         atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n         atom\n          m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n         atom\n          n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                       m2);\n         atom\n          sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                        m2, n2);\n         atom\n          sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                        m2, n2, sm2);\n         atom\n          sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                         m2, n2, sm2, sn2);\n         atom\n          sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn',\n                         m2, n2, sm2, sn2, sm2')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "have \"{OrdP (Var k)}\n       \\<turnstile> All i (All j (All j' (All k' (SeqHRP (Var i) (Var j) s (Var k) IMP (SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All i\n     (SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqHRP (Var i) (Var j) s (Var k) IMP\n            SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))", "apply (rule OrdIndH [where j=l])"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqHRP (Var i) (Var j) s (Var k) IMP\n                            SeqHRP (Var i) (Var j') s' (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqHRP (Var i) (Var j) s (Var k) IMP\n                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqHRP (Var i) (Var j) s (Var k) IMP\n              SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (2 subgoals):\n 1. atom\n     l \\<sharp> (k, SyntaxN.All i\n                     (SyntaxN.All j\n                       (SyntaxN.All j'\n                         (SyntaxN.All k'\n                           (SeqHRP (Var i) (Var j) s (Var k) IMP\n                            SeqHRP (Var i) (Var j') s' (Var k') IMP\n                            Var j' EQ Var j)))))\n 2. {} \\<turnstile>\n    SyntaxN.All k\n     (OrdP (Var k) IMP\n      All2 l (Var k)\n       ((SyntaxN.All i\n          (SyntaxN.All j\n            (SyntaxN.All j'\n              (SyntaxN.All k'\n                (SeqHRP (Var i) (Var j) s (Var k) IMP\n                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                 Var j' EQ Var j)))))(k::=Var l)) IMP\n      SyntaxN.All i\n       (SyntaxN.All j\n         (SyntaxN.All j'\n           (SyntaxN.All k'\n             (SeqHRP (Var i) (Var j) s (Var k) IMP\n              SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j)))))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Neg (Var j' EQ Var j),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SyntaxN.Ex l\n                       (Neg (Var l IN Var k IMP\n                             SyntaxN.All i\n                              (SyntaxN.All j\n                                (SyntaxN.All j'\n                                  (SyntaxN.All k'\n                                    (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                     SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                     Var j' EQ Var j))))))", "apply (rule Swap)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      ?A88\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A88,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqHRP_lemma [of m \"Var i\" \"Var j\" s \"Var k\" n sm sm' sn sn']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      ?A102\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {?A102,\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut1 [OF SeqHRP_lemma [of m2 \"Var i\" \"Var j'\" s' \"Var k'\" n2 sm2 sm2' sn2 sn2']], simp_all, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i) AND WRP (Var i) (Var j') OR\n                       SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH Conj_EH)+\n    \\<comment> \\<open>case 1, both are ordinals\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var i), WRP (Var i) (Var j'), OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: cut3 [OF WRP_unique])\n    \\<comment> \\<open>case 2, @{term \"OrdP (Var i)\"} but also a pair\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Conj_EH Ex_EH)+"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i), WRP (Var i) (Var j'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 14 subgoals...", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"OrdP (HPair (Var sm) (Var sn))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      OrdP (HPair (Var sm) (Var sn))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (HPair (Var sm) (Var sn)),\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k, OrdP (Var i), WRP (Var i) (Var j'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: OrdP_cong [OF Hyp, THEN Iff_MP_same], blast)\n    \\<comment> \\<open>towards second two cases\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m2\n                        (SyntaxN.Ex n2\n                          (SyntaxN.Ex sm2\n                            (SyntaxN.Ex sm2'\n                              (SyntaxN.Ex sn2\n                                (SyntaxN.Ex sn2'\n                                  (Var m2 IN Var k' AND\n                                   Var n2 IN Var k' AND\n                                   SeqHRP (Var sm2) (Var sm2') s'\n                                    (Var m2) AND\n                                   SeqHRP (Var sn2) (Var sn2') s'\n                                    (Var n2) AND\n                                   Var i EQ HPair (Var sm2) (Var sn2) AND\n                                   Var j' EQ\n                                   Q_HPair (Var sm2') (Var sn2'))))))),\n                       OrdP (Var i) AND WRP (Var i) (Var j) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Ex_E Disj_EH Conj_EH)+\n    \\<comment> \\<open>case 3, @{term \"OrdP (Var i)\"} but also a pair\\<close>"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       Var m2 IN Var k' AND\n                       Var n2 IN Var k' AND\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\n                       Var i EQ HPair (Var sm2) (Var sn2) AND\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\n WRP (Var i) (Var j) OR\n SyntaxN.Ex m\n  (SyntaxN.Ex n\n    (SyntaxN.Ex sm\n      (SyntaxN.Ex sm'\n        (SyntaxN.Ex sn\n          (SyntaxN.Ex sn'\n            (Var m IN Var k AND\n             Var n IN Var k AND\n             SeqHRP (Var sm) (Var sm') s (Var m) AND\n             SeqHRP (Var sn) (Var sn') s (Var n) AND\n             Var i EQ HPair (Var sm) (Var sn) AND\n             Var j EQ Q_HPair (Var sm') (Var sn'))))))),\n All2 l (Var k)\n  (SyntaxN.All i\n    (SyntaxN.All j\n      (SyntaxN.All j'\n        (SyntaxN.All k'\n          (SeqHRP (Var i) (Var j) s (Var l) IMP\n           SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\n SeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\n OrdP (Var k)}.\n                          atom sm2 \\<sharp> C\nA total of 14 subgoals...", "apply (rule cut_same [where A = \"OrdP (HPair (Var sm2) (Var sn2))\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      OrdP (HPair (Var sm2) (Var sn2))\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (HPair (Var sm2) (Var sn2)),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k', OrdP (Var i),\n                       WRP (Var i) (Var j),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       Var m2 IN Var k' AND\n                       Var n2 IN Var k' AND\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\n                       Var i EQ HPair (Var sm2) (Var sn2) AND\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\nA total of 15 subgoals...", "apply (blast intro: OrdP_cong [OF Hyp, THEN Iff_MP_same], blast)\n    \\<comment> \\<open>case 4, two pairs\\<close>"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var k AND\n                                   Var n IN Var k AND\n                                   SeqHRP (Var sm) (Var sm') s (Var m) AND\n                                   SeqHRP (Var sn) (Var sn') s (Var n) AND\n                                   Var i EQ HPair (Var sm) (Var sn) AND\n                                   Var j EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       Var m2 IN Var k' AND\n                       Var n2 IN Var k' AND\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\n                       Var i EQ HPair (Var sm2) (Var sn2) AND\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn2 \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn2 \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm2 \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var i) AND\nWRP (Var i) (Var j) OR\nSyntaxN.Ex m\n (SyntaxN.Ex n\n   (SyntaxN.Ex sm\n     (SyntaxN.Ex sm'\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var k AND\n            Var n IN Var k AND\n            SeqHRP (Var sm) (Var sm') s (Var m) AND\n            SeqHRP (Var sn) (Var sn') s (Var n) AND\n            Var i EQ HPair (Var sm) (Var sn) AND\n            Var j EQ Q_HPair (Var sm') (Var sn'))))))),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm2 \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n2 \\<sharp> Var j' EQ Var j\nA total of 13 subgoals...", "apply (rule Ex_E Disj_EH Conj_EH)+"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 25 subgoals...", "apply (rule All_E' [OF Hyp, where x=\"Var m\"], blast)"], ["proof (prove)\ngoal (25 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {(Var l IN Var k IMP\n                        SyntaxN.All i\n                         (SyntaxN.All j\n                           (SyntaxN.All j'\n                             (SyntaxN.All k'\n                               (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                Var j' EQ Var j)))))(l::=Var m),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn' \\<sharp> Var j' EQ Var j\n 3. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sn \\<sharp> Var j' EQ Var j\n 5. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm' \\<sharp> Var j' EQ Var j\n 7. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> atom sm \\<sharp> Var j' EQ Var j\n 9. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{Var m2 IN Var k' AND\nVar n2 IN Var k' AND\nSeqHRP (Var sm2) (Var sm2') s' (Var m2) AND\nSeqHRP (Var sn2) (Var sn2') s' (Var n2) AND\nVar i EQ HPair (Var sm2) (Var sn2) AND\nVar j' EQ Q_HPair (Var sm2') (Var sn2'),\nAll2 l (Var k)\n (SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var l) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))),\nSeqHRP (Var i) (Var j') s' (Var k'), SeqHRP (Var i) (Var j) s (Var k),\nOrdP (Var k)}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n      atom j \\<sharp> (s, s', i, x, y, y');\n      atom j' \\<sharp> (s, s', i, j, x, y, y');\n      atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n      atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n      atom l \\<sharp> (s, s', i, j, j', k, k');\n      atom m \\<sharp> (s, s', i, j, j', k, k', l);\n      atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n      atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n      atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n      atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n      atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n      atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n      atom\n       n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n      atom\n       sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2);\n      atom\n       sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2);\n      atom\n       sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2);\n      atom\n       sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                      n2, sm2, sn2, sm2')\\<rbrakk>\n     \\<Longrightarrow> atom n \\<sharp> Var j' EQ Var j\nA total of 25 subgoals...", "apply (rule All_E' [OF Hyp, where x=\"Var n\"], blast, simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var n IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var m IN Var k IMP\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var m) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var m) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqHRP (Var sm) (Var j) s (Var m) IMP\n                             SeqHRP (Var sm) (Var j') s' (Var k') IMP\n                             Var j' EQ Var j))),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                           SeqHRP (Var sm) (Var j') s' (Var k') IMP\n                           Var j' EQ Var sm')),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sm2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                         SeqHRP (Var sm) (Var sm2') s' (Var k') IMP\n                         Var sm2' EQ Var sm'),\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var m2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       SyntaxN.All i\n                        (SyntaxN.All j\n                          (SyntaxN.All j'\n                            (SyntaxN.All k'\n                              (SeqHRP (Var i) (Var j) s (Var n) IMP\n                               SeqHRP (Var i) (Var j') s' (Var k') IMP\n                               Var j' EQ Var j)))),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn\", THEN rotate2], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j\n                        (SyntaxN.All j'\n                          (SyntaxN.All k'\n                            (SeqHRP (Var sn) (Var j) s (Var n) IMP\n                             SeqHRP (Var sn) (Var j') s' (Var k') IMP\n                             Var j' EQ Var j))),\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All j'\n                        (SyntaxN.All k'\n                          (SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                           SeqHRP (Var sn) (Var j') s' (Var k') IMP\n                           Var j' EQ Var sn')),\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var sn2'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.All k'\n                        (SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                         SeqHRP (Var sn) (Var sn2') s' (Var k') IMP\n                         Var sn2' EQ Var sn'),\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule All_E [where x=\"Var n2\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Sym Trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"SeqHRP (Var sn) (Var sn2') s' (Var n2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SeqHRP (Var sn) (Var sn2') s' (Var n2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: SeqHRP_cong [OF Hyp Refl Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule cut_same [where A = \"SeqHRP (Var sm) (Var sm2') s' (Var m2)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      SeqHRP (Var sm) (Var sm2') s' (Var m2)\n 2. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sm) (Var sm2') s' (Var m2),\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: SeqHRP_cong [OF Hyp Refl Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP (Var sm) (Var sm2') s' (Var m2),\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       SeqHRP (Var sn) (Var sn') s (Var n) IMP\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2) IMP\n                       Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm') s (Var m) IMP\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2) IMP\n                       Var sm2' EQ Var sm',\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (rule Disj_EH, blast intro: thin1 ContraProve)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> (s, s', y, y');\n     atom j \\<sharp> (s, s', i, x, y, y');\n     atom j' \\<sharp> (s, s', i, j, x, y, y');\n     atom k \\<sharp> (s, s', x, y, y', u', i, j, j');\n     atom k' \\<sharp> (s, s', x, y, y', k, i, j, j');\n     atom l \\<sharp> (s, s', i, j, j', k, k');\n     atom m \\<sharp> (s, s', i, j, j', k, k', l);\n     atom n \\<sharp> (s, s', i, j, j', k, k', l, m);\n     atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n);\n     atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm);\n     atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn);\n     atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm');\n     atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn');\n     atom\n      n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2);\n     atom\n      sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2);\n     atom\n      sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                    n2, sm2);\n     atom\n      sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2);\n     atom\n      sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2,\n                     n2, sm2, sn2, sm2')\\<rbrakk>\n    \\<Longrightarrow> {Var sm2' EQ Var sm', Var sn2' EQ Var sn',\n                       SeqHRP (Var sm) (Var sm2') s' (Var m2),\n                       SeqHRP (Var sn) (Var sn2') s' (Var n2),\n                       HPair (Var sm) (Var sn) EQ HPair (Var sm2) (Var sn2),\n                       Var i EQ HPair (Var sm2) (Var sn2),\n                       Var j' EQ Q_HPair (Var sm2') (Var sn2'),\n                       SeqHRP (Var sn2) (Var sn2') s' (Var n2),\n                       SeqHRP (Var sm2) (Var sm2') s' (Var m2),\n                       Var n2 IN Var k', Var m2 IN Var k',\n                       Var i EQ HPair (Var sm) (Var sn),\n                       Var j EQ Q_HPair (Var sm') (Var sn'),\n                       SeqHRP (Var sn) (Var sn') s (Var n),\n                       SeqHRP (Var sm) (Var sm') s (Var m), Var n IN Var k,\n                       Var m IN Var k,\n                       All2 l (Var k)\n                        (SyntaxN.All i\n                          (SyntaxN.All j\n                            (SyntaxN.All j'\n                              (SyntaxN.All k'\n                                (SeqHRP (Var i) (Var j) s (Var l) IMP\n                                 SeqHRP (Var i) (Var j') s' (Var k') IMP\n                                 Var j' EQ Var j))))),\n                       SeqHRP (Var i) (Var j') s' (Var k'),\n                       SeqHRP (Var i) (Var j) s (Var k),\n                       OrdP (Var k)} \\<turnstile>\n                      Var j' EQ Var j", "apply (blast intro: Trans [OF Hyp Sym] intro!: HPair_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var k) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)}\n         \\<turnstile> All j (All j' (All k' (SeqHRP x (Var j) s (Var k)\n               IMP (SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j))))\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All i\n   (SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP (Var i) (Var j) s (Var k) IMP\n          SeqHRP (Var i) (Var j') s' (Var k') IMP Var j' EQ Var j))))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "apply (rule All_D [where x = x, THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqHRP (Var i) (Var j) s (Var k) IMP\n            SeqHRP (Var i) (Var j') s' (Var k') IMP\n            Var j' EQ Var j))))(i::=x),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SyntaxN.All j\n       (SyntaxN.All j'\n         (SyntaxN.All k'\n           (SeqHRP (Var i) (Var j) s (Var k) IMP\n            SeqHRP (Var i) (Var j') s' (Var k') IMP\n            Var j' EQ Var j))))(i::=x),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j\n     (SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x (Var j) s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)}\n         \\<turnstile> All j' (All k' (SeqHRP x y s (Var k) IMP (SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y)))\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j\n   (SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x (Var j) s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))", "apply (rule All_D [where x = y, THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=y),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SyntaxN.All j'\n       (SyntaxN.All k'\n         (SeqHRP x (Var j) s (Var k) IMP\n          SeqHRP x (Var j') s' (Var k') IMP Var j' EQ Var j)))(j::=y),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All j'\n     (SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j'\n   (SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP\n      SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)}\n          \\<turnstile> All k' (SeqHRP x y s (Var k) IMP (SeqHRP x y' s' (Var k') IMP y' EQ y))\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All j'\n   (SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP\n      SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)", "apply (rule All_D [where x = y', THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y'),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SyntaxN.All k'\n       (SeqHRP x y s (Var k) IMP\n        SeqHRP x (Var j') s' (Var k') IMP Var j' EQ y))(j'::=y'),\n     OrdP (Var k)} \\<turnstile>\n    SyntaxN.All k'\n     (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All k'\n   (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{OrdP (Var k)} \\<turnstile> SeqHRP x y s (Var k) IMP (SeqHRP x y' s' u' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SyntaxN.All k'\n   (SeqHRP x y s (Var k) IMP SeqHRP x y' s' (Var k') IMP y' EQ y)\n\ngoal (1 subgoal):\n 1. {OrdP (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "apply (rule All_D [where x = u', THEN cut_same])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(SeqHRP x y s (Var k) IMP\n      SeqHRP x y' s' (Var k') IMP y' EQ y)(k'::=u'),\n     OrdP (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "using atoms"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {(SeqHRP x y s (Var k) IMP\n      SeqHRP x y' s' (Var k') IMP y' EQ y)(k'::=u'),\n     OrdP (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "by auto"], ["proof (state)\nthis:\n  {OrdP (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{SeqHRP x y s (Var k)} \\<turnstile> SeqHRP x y s (Var k) IMP (SeqHRP x y' s' u' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {OrdP (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s (Var k)} \\<turnstile>\n    SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y", "by (metis SeqHRP_imp_OrdP cut1)"], ["proof (state)\nthis:\n  {SeqHRP x y s (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> ((SeqHRP x y s (Var k) IMP (SeqHRP x y' s' u' IMP y' EQ y)))(k::=u)\""], ["proof (prove)\nusing this:\n  {SeqHRP x y s (Var k)} \\<turnstile>\n  SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)", "by (metis Subst emptyE Assume MP_same Imp_I)"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "hence \"{} \\<turnstile> SeqHRP x y s u IMP (SeqHRP x y' s' u' IMP y' EQ y)\""], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y", "using atoms"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  (SeqHRP x y s (Var k) IMP SeqHRP x y' s' u' IMP y' EQ y)(k::=u)\n  atom i \\<sharp> (s, s', y, y')\n  atom j \\<sharp> (s, s', i, x, y, y')\n  atom j' \\<sharp> (s, s', i, j, x, y, y')\n  atom k \\<sharp> (s, s', x, y, y', u', i, j, j')\n  atom k' \\<sharp> (s, s', x, y, y', k, i, j, j')\n  atom l \\<sharp> (s, s', i, j, j', k, k')\n  atom m \\<sharp> (s, s', i, j, j', k, k', l)\n  atom n \\<sharp> (s, s', i, j, j', k, k', l, m)\n  atom sm \\<sharp> (s, s', i, j, j', k, k', l, m, n)\n  atom sn \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm)\n  atom sm' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn)\n  atom sn' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm')\n  atom m2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn')\n  atom n2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2)\n  atom\n   sm2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2)\n  atom\n   sn2 \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                 sm2)\n  atom\n   sm2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2)\n  atom\n   sn2' \\<sharp> (s, s', i, j, j', k, k', l, m, n, sm, sn, sm', sn', m2, n2,\n                  sm2, sn2, sm2')\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y", "by simp"], ["proof (state)\nthis:\n  {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile> SeqHRP x y s u IMP SeqHRP x y' s' u' IMP y' EQ y\n\ngoal (1 subgoal):\n 1. {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y", "by (metis anti_deduction insert_commute)"], ["proof (state)\nthis:\n  {SeqHRP x y s u, SeqHRP x y' s' u'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HRP_unique: \"{HRP x y, HRP x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "obtain s::name and s'::name and k::name and k'::name\n    where \"atom s \\<sharp> (x,y,y')\" \"atom s' \\<sharp> (x,y,y',s)\"\n          \"atom k \\<sharp> (x,y,y',s,s')\" \"atom k' \\<sharp> (x,y,y',s,s',k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s s' k k'.\n        \\<lbrakk>atom s \\<sharp> (x, y, y'); atom s' \\<sharp> (x, y, y', s);\n         atom k \\<sharp> (x, y, y', s, s');\n         atom k' \\<sharp> (x, y, y', s, s', k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n  atom k \\<sharp> (x, y, y', s, s')\n  atom k' \\<sharp> (x, y, y', s, s', k)\n\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (x, y, y')\n  atom s' \\<sharp> (x, y, y', s)\n  atom k \\<sharp> (x, y, y', s, s')\n  atom k' \\<sharp> (x, y, y', s, s', k)\n\ngoal (1 subgoal):\n 1. {HRP x y, HRP x y'} \\<turnstile> y' EQ y", "by (auto simp: SeqHRP_unique HRP.simps [of s x y k]  HRP.simps [of s' x y' k'])"], ["proof (state)\nthis:\n  {HRP x y, HRP x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HRP_ORD_OF: \"{} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>", "let ?vs = \"(i)\""], ["proof (state)\ngoal (1 subgoal):\n 1. {} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>", "obtain s k l::name and sl::name and sl'::name and m::name and n::name and\n    sm::name and sm'::name and sn::name and sn'::name\n    where atoms:\n      \"atom s \\<sharp> (?vs,sl,sl',m,n,sm,sm',sn,sn',l,k)\"\n      \"atom k \\<sharp> (?vs,sl,sl',m,n,sm,sm',sn,sn',l)\"\n      \"atom l \\<sharp> (?vs,sl,sl',m,n,sm,sm',sn,sn')\"\n      \"atom sl \\<sharp> (?vs,sl',m,n,sm,sm',sn,sn')\" \"atom sl' \\<sharp> (?vs,m,n,sm,sm',sn,sn')\"\n      \"atom m \\<sharp> (?vs,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (?vs,sm,sm',sn,sn')\"\n      \"atom sm \\<sharp> (?vs,sm',sn,sn')\" \"atom sm' \\<sharp> (?vs,sn,sn')\"\n      \"atom sn \\<sharp> (?vs,sn')\" \"atom sn' \\<sharp> ?vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s sl sl' m n sm sm' sn sn' l k.\n        \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n         atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n         atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (i, n, sm, sm', sn, sn');\n         atom n \\<sharp> (i, sm, sm', sn, sn');\n         atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n         atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k)\n  atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l)\n  atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (i, sm, sm', sn, sn')\n  atom sm \\<sharp> (i, sm', sn, sn')\n  atom sm' \\<sharp> (i, sn, sn')\n  atom sn \\<sharp> (i, sn')\n  atom sn' \\<sharp> i\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>", "then"], ["proof (chain)\npicking this:\n  atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k)\n  atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l)\n  atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (i, sm, sm', sn, sn')\n  atom sm \\<sharp> (i, sm', sn, sn')\n  atom sm' \\<sharp> (i, sn, sn')\n  atom sn \\<sharp> (i, sn')\n  atom sn' \\<sharp> i", "show ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k)\n  atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l)\n  atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (i, sm, sm', sn, sn')\n  atom sm \\<sharp> (i, sm', sn, sn')\n  atom sm' \\<sharp> (i, sn, sn')\n  atom sn \\<sharp> (i, sn')\n  atom sn' \\<sharp> i\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>", "apply (subst HRP.simps[of s _ _ k]; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (SeqHRP (ORD_OF i)\n                           \\<guillemotleft>ORD_OF i\\<guillemotright> (Var s)\n                           (Var k)))", "apply (subst SeqHRP.simps[of l _ _ sl sl' m n sm sm' sn sn']; simp?)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (ORD_OF i)\n                             \\<guillemotleft>ORD_OF i\\<guillemotright>) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))", "apply (rule Ex_I[where x=\"Eats Zero (HPair Zero (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>))\"]; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      SyntaxN.Ex k\n                       (LstSeqP\n                         (Eats Zero\n                           (HPair Zero\n                             (HPair (ORD_OF i)\n                               \\<guillemotleft>ORD_OF i\\<guillemotright>)))\n                         (Var k)\n                         (HPair (ORD_OF i)\n                           \\<guillemotleft>ORD_OF i\\<guillemotright>) AND\n                        All2 l (SUCC (Var k))\n                         (SyntaxN.Ex sl\n                           (SyntaxN.Ex sl'\n                             (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                              Eats Zero\n                               (HPair Zero\n                                 (HPair (ORD_OF i)\n                                   \\<guillemotleft>ORD_OF\n              i\\<guillemotright>)) AND\n                              (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                               SyntaxN.Ex m\n                                (SyntaxN.Ex n\n                                  (SyntaxN.Ex sm\n                                    (SyntaxN.Ex sm'\n(SyntaxN.Ex sn\n  (SyntaxN.Ex sn'\n    (Var m IN Var l AND\n     Var n IN Var l AND\n     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n     Eats Zero\n      (HPair Zero\n        (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n     Eats Zero\n      (HPair Zero\n        (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n     Var sl EQ HPair (Var sm) (Var sn) AND\n     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))))", "apply (rule Ex_I[where x=\"Zero\"]; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      LstSeqP\n                       (Eats Zero\n                         (HPair Zero\n                           (HPair (ORD_OF i)\n                             \\<guillemotleft>ORD_OF i\\<guillemotright>)))\n                       Zero\n                       (HPair (ORD_OF i)\n                         \\<guillemotleft>ORD_OF i\\<guillemotright>) AND\n                      All2 l (SUCC Zero)\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats Zero\n                             (HPair Zero\n                               (HPair (ORD_OF i)\n                                 \\<guillemotleft>ORD_OF\n            i\\<guillemotright>)) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats Zero\n    (HPair Zero\n      (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats Zero\n    (HPair Zero\n      (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule Conj_I[OF LstSeqP_single])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      All2 l (SUCC Zero)\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats Zero\n                             (HPair Zero\n                               (HPair (ORD_OF i)\n                                 \\<guillemotleft>ORD_OF\n            i\\<guillemotright>)) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats Zero\n    (HPair Zero\n      (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats Zero\n    (HPair Zero\n      (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule All2_SUCC_I, simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      All2 l Zero\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats Zero\n                             (HPair Zero\n                               (HPair (ORD_OF i)\n                                 \\<guillemotleft>ORD_OF\n            i\\<guillemotright>)) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats Zero\n    (HPair Zero\n      (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats Zero\n    (HPair Zero\n      (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      (SyntaxN.Ex sl\n                        (SyntaxN.Ex sl'\n                          (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                           Eats Zero\n                            (HPair Zero\n                              (HPair (ORD_OF i)\n                                \\<guillemotleft>ORD_OF\n           i\\<guillemotright>)) AND\n                           (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                            SyntaxN.Ex m\n                             (SyntaxN.Ex n\n                               (SyntaxN.Ex sm\n                                 (SyntaxN.Ex sm'\n                                   (SyntaxN.Ex sn\n                                     (SyntaxN.Ex sn'\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (HPair (Var sm) (Var sm')) IN\n  Eats Zero\n   (HPair Zero\n     (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n  HPair (Var n) (HPair (Var sn) (Var sn')) IN\n  Eats Zero\n   (HPair Zero\n     (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n  Var sl EQ HPair (Var sm) (Var sn) AND\n  Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))(l::=Zero)", "apply auto [2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair Zero (HPair (Var sl) (Var sl')) IN\n                          Eats Zero\n                           (HPair Zero\n                             (HPair (ORD_OF i)\n                               \\<guillemotleft>ORD_OF\n          i\\<guillemotright>)) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Zero AND\n Var n IN Zero AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats Zero\n  (HPair Zero\n    (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats Zero\n  (HPair Zero\n    (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (rule Ex_I[where x=\"ORD_OF i\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      SyntaxN.Ex sl'\n                       (HPair Zero (HPair (ORD_OF i) (Var sl')) IN\n                        Eats Zero\n                         (HPair Zero\n                           (HPair (ORD_OF i)\n                             \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n                        (OrdP (ORD_OF i) AND WRP (ORD_OF i) (Var sl') OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sm'\n                                (SyntaxN.Ex sn\n                                  (SyntaxN.Ex sn'\n                                    (Var m IN Zero AND\n                                     Var n IN Zero AND\n                                     HPair (Var m)\n(HPair (Var sm) (Var sm')) IN\n                                     Eats Zero\n(HPair Zero\n  (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n                                     HPair (Var n)\n(HPair (Var sn) (Var sn')) IN\n                                     Eats Zero\n(HPair Zero\n  (HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n                                     ORD_OF i EQ HPair (Var sm) (Var sn) AND\n                                     Var sl' EQ\n                                     Q_HPair (Var sm') (Var sn')))))))))", "apply (rule Ex_I[where x=\"\\<guillemotleft>ORD_OF i\\<guillemotright>\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l, k);\n     atom k \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn', l);\n     atom l \\<sharp> (i, sl, sl', m, n, sm, sm', sn, sn');\n     atom sl \\<sharp> (i, sl', m, n, sm, sm', sn, sn');\n     atom sl' \\<sharp> (i, m, n, sm, sm', sn, sn');\n     atom m \\<sharp> (i, n, sm, sm', sn, sn');\n     atom n \\<sharp> (i, sm, sm', sn, sn');\n     atom sm \\<sharp> (i, sm', sn, sn'); atom sm' \\<sharp> (i, sn, sn');\n     atom sn \\<sharp> (i, sn'); atom sn' \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      HPair Zero\n                       (HPair (ORD_OF i)\n                         \\<guillemotleft>ORD_OF i\\<guillemotright>) IN\n                      Eats Zero\n                       (HPair Zero\n                         (HPair (ORD_OF i)\n                           \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n                      (OrdP (ORD_OF i) AND\n                       WRP (ORD_OF i)\n                        \\<guillemotleft>ORD_OF i\\<guillemotright> OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Zero AND\n                                   Var n IN Zero AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   Eats Zero\n                                    (HPair Zero\n(HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   Eats Zero\n                                    (HPair Zero\n(HPair (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>)) AND\n                                   ORD_OF i EQ HPair (Var sm) (Var sn) AND\n                                   \\<guillemotleft>ORD_OF\n              i\\<guillemotright> EQ\n                                   Q_HPair (Var sm') (Var sn'))))))))", "apply (auto intro!: Disj_I1 WRP Mem_Eats_I2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile> HRP (ORD_OF i) \\<guillemotleft>ORD_OF i\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqHRP_HPair:\n  assumes \"atom s \\<sharp> (k,s1,s2,k1,k2,x,y,x',y')\" \"atom k \\<sharp> (s1,s2,k1,k2,x,y,x',y')\"\n  shows \"{SeqHRP x x' s1 k1,\n            SeqHRP y y' s2 k2}\n           \\<turnstile> Ex s (Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "let ?vs = \"(s1,s2,s,k1,k2,k,x,y,x',y')\""], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "obtain km::name and kn::name and j::name and k'::name\n    and l::name and sl::name and sl'::name and m::name and n::name\n    and sm::name and sm'::name and sn::name and sn'::name\n    where atoms2: \"atom km \\<sharp> (kn,j,k',l,s1,s2,s,k1,k2,k,x,y,x',y',sl,sl',m,n,sm,sm',sn,sn')\"\n      \"atom kn \\<sharp> (j,k',l,s1,s2,s,k1,k2,k,x,y,x',y',sl,sl',m,n,sm,sm',sn,sn')\"\n      \"atom j \\<sharp> (k',l,s1,s2,s,k1,k2,k,x,y,x',y',sl,sl',m,n,sm,sm',sn,sn')\"\n      and atoms: \"atom k' \\<sharp> (l,s1,s2,s,k1,k2,k,x,y,x',y',sl,sl',m,n,sm,sm',sn,sn')\"\n      \"atom l \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',sl,sl',m,n,sm,sm',sn,sn')\"\n      \"atom sl \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',sl',m,n,sm,sm',sn,sn')\"\n      \"atom sl' \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',m,n,sm,sm',sn,sn')\"\n      \"atom m \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',n,sm,sm',sn,sn')\"\n      \"atom n \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',sm,sm',sn,sn')\"\n      \"atom sm \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',sm',sn,sn')\"\n      \"atom sm' \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',sn,sn')\"\n      \"atom sn \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y',sn')\"\n      \"atom sn' \\<sharp> (s1,s2,s,k1,k2,k,x,y,x',y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>km kn j k' l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x',\n                               y', sl, sl', m, n, sm, sm', sn, sn');\n         atom\n          kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                       sl', m, n, sm, sm', sn, sn');\n         atom\n          j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                      n, sm, sm', sn, sn');\n         atom\n          k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                       sm, sm', sn, sn');\n         atom\n          l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                      sm', sn, sn');\n         atom\n          sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm,\n                       sm', sn, sn');\n         atom\n          sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm',\n                        sn, sn');\n         atom\n          m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn,\n                      sn');\n         atom\n          n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n         atom\n          sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n         atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n         atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n         atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom\n   km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                m, n, sm, sm', sn, sn')\n  atom\n   kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                sm, sm', sn, sn')\n  atom\n   j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n               sm', sn, sn')\n  atom\n   k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                sm', sn, sn')\n  atom\n   l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm, sm',\n               sn, sn')\n  atom\n   sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm', sn,\n                sn')\n  atom\n   sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn')\n  atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn')\n  atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn')\n  atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn')\n  atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn')\n  atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "let ?hyp = \"{HaddP k1 k2 (Var k'), OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n               SeqHRP x x' s1 k1, SeqHRP y y' s2 k2}\""], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "using assms atoms"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y')\n  atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y')\n  atom\n   k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                sm', sn, sn')\n  atom\n   l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm, sm',\n               sn, sn')\n  atom\n   sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm', sn,\n                sn')\n  atom\n   sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn')\n  atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn')\n  atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn')\n  atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn')\n  atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn')\n  atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\n\ngoal (1 subgoal):\n 1. {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex s\n     (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))", "apply (auto simp: SeqHRP.simps [of l \"Var s\" _ sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))", "apply (rule cut_same [where A=\"OrdP k1 AND OrdP k2\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP k1 AND OrdP k2\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {OrdP k1 AND OrdP k2, SeqHRP x x' s1 k1,\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))", "apply (metis Conj_I SeqHRP_imp_OrdP thin1 thin2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {OrdP k1 AND OrdP k2, SeqHRP x x' s1 k1,\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))", "apply (rule cut_same [OF exists_SeqAppendP [of s s1 \"SUCC k1\" s2 \"SUCC k2\"]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom s \\<sharp> (s1, SUCC k1, s2, SUCC k2)\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex s\n                        (SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s)),\n                       OrdP k1 AND OrdP k2, SeqHRP x x' s1 k1,\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))", "apply (rule AssumeH Ex_EH Conj_EH | simp)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       s \\<sharp> SyntaxN.Ex s\n                                   (SyntaxN.Ex k\n                                     (LstSeqP (Var s) (Var k)\n (HPair (HPair x y) (Q_HPair x' y')) AND\nAll2 l (SUCC (Var k))\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1 AND OrdP k2,\nSeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n                         atom s \\<sharp> C", "apply (rule cut_same [OF exists_HaddP [where j=k' and x=k1 and y=k2]])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP k2\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom k' \\<sharp> (k1, k2)\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex k' (HaddP k1 k2 (Var k')), OrdP k1,\n                       OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       s \\<sharp> SyntaxN.Ex s\n                                   (SyntaxN.Ex k\n                                     (LstSeqP (Var s) (Var k)\n (HPair (HPair x y) (Q_HPair x' y')) AND\nAll2 l (SUCC (Var k))\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1 AND OrdP k2,\nSeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n                         atom s \\<sharp> C", "apply (rule AssumeH Ex_EH Conj_EH | simp)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k\n                         (LstSeqP (Var s) (Var k)\n                           (HPair (HPair x y) (Q_HPair x' y')) AND\n                          All2 l (SUCC (Var k))\n                           (SyntaxN.Ex sl\n                             (SyntaxN.Ex sl'\n                               (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                                Var s AND\n                                (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                 SyntaxN.Ex m\n                                  (SyntaxN.Ex n\n                                    (SyntaxN.Ex sm\n(SyntaxN.Ex sm'\n  (SyntaxN.Ex sn\n    (SyntaxN.Ex sn'\n      (Var m IN Var l AND\n       Var n IN Var l AND\n       HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n       HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n       Var sl EQ HPair (Var sm) (Var sn) AND\n       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       k' \\<sharp> SyntaxN.Ex s\n                                    (SyntaxN.Ex k\n(LstSeqP (Var s) (Var k) (HPair (HPair x y) (Q_HPair x' y')) AND\n All2 l (SUCC (Var k))\n  (SyntaxN.Ex sl\n    (SyntaxN.Ex sl'\n      (HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s AND\n       (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n        SyntaxN.Ex m\n         (SyntaxN.Ex n\n           (SyntaxN.Ex sm\n             (SyntaxN.Ex sm'\n               (SyntaxN.Ex sn\n                 (SyntaxN.Ex sn'\n                   (Var m IN Var l AND\n                    Var n IN Var l AND\n                    HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n                    HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n                    Var sl EQ HPair (Var sm) (Var sn) AND\n                    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\nSeqHRP y y' s2 k2}.\n                         atom k' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       s \\<sharp> SyntaxN.Ex s\n                                   (SyntaxN.Ex k\n                                     (LstSeqP (Var s) (Var k)\n (HPair (HPair x y) (Q_HPair x' y')) AND\nAll2 l (SUCC (Var k))\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1 AND OrdP k2,\nSeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n                         atom s \\<sharp> C", "apply (rule Ex_I [where x=\"Eats (Var s) (HPair (SUCC(SUCC(Var k'))) (HPair(HPair x y)(Q_HPair x' y')))\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      (SyntaxN.Ex k\n                        (LstSeqP (Var s) (Var k)\n                          (HPair (HPair x y) (Q_HPair x' y')) AND\n                         All2 l (SUCC (Var k))\n                          (SyntaxN.Ex sl\n                            (SyntaxN.Ex sl'\n                              (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                               Var s AND\n                               (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                                SyntaxN.Ex m\n                                 (SyntaxN.Ex n\n                                   (SyntaxN.Ex sm\n                                     (SyntaxN.Ex sm'\n (SyntaxN.Ex sn\n   (SyntaxN.Ex sn'\n     (Var m IN Var l AND\n      Var n IN Var l AND\n      HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n      HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n      Var sl EQ HPair (Var sm) (Var sn) AND\n      Var sl' EQ\n      Q_HPair (Var sm')\n       (Var sn')))))))))))))(s::=Eats (Var s)\n                                  (HPair (SUCC (SUCC (Var k')))\n                                    (HPair (HPair x y) (Q_HPair x' y'))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       k' \\<sharp> SyntaxN.Ex s\n                                    (SyntaxN.Ex k\n(LstSeqP (Var s) (Var k) (HPair (HPair x y) (Q_HPair x' y')) AND\n All2 l (SUCC (Var k))\n  (SyntaxN.Ex sl\n    (SyntaxN.Ex sl'\n      (HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s AND\n       (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n        SyntaxN.Ex m\n         (SyntaxN.Ex n\n           (SyntaxN.Ex sm\n             (SyntaxN.Ex sm'\n               (SyntaxN.Ex sn\n                 (SyntaxN.Ex sn'\n                   (Var m IN Var l AND\n                    Var n IN Var l AND\n                    HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n                    HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n                    Var sl EQ HPair (Var sm) (Var sn) AND\n                    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\nSeqHRP y y' s2 k2}.\n                         atom k' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       s \\<sharp> SyntaxN.Ex s\n                                   (SyntaxN.Ex k\n                                     (LstSeqP (Var s) (Var k)\n (HPair (HPair x y) (Q_HPair x' y')) AND\nAll2 l (SUCC (Var k))\n (SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN Var l AND\n                   Var n IN Var l AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN Var s AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN Var s AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP k1 AND OrdP k2,\nSeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n                         atom s \\<sharp> C", "apply (simp_all (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex k\n                       (LstSeqP\n                         (Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))))\n                         (Var k) (HPair (HPair x y) (Q_HPair x' y')) AND\n                        All2 l (SUCC (Var k))\n                         (SyntaxN.Ex sl\n                           (SyntaxN.Ex sl'\n                             (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                               SyntaxN.Ex m\n                                (SyntaxN.Ex n\n                                  (SyntaxN.Ex sm\n                                    (SyntaxN.Ex sm'\n(SyntaxN.Ex sn\n  (SyntaxN.Ex sn'\n    (Var m IN Var l AND\n     Var n IN Var l AND\n     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n     Eats (Var s)\n      (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n     Eats (Var s)\n      (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n     Var sl EQ HPair (Var sm) (Var sn) AND\n     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))))", "apply (rule Ex_I [where x=\"SUCC (SUCC (Var k'))\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      LstSeqP\n                       (Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))))\n                       (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y')) AND\n                      All2 l (SUCC (SUCC (SUCC (Var k'))))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule Conj_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      LstSeqP\n                       (Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))))\n                       (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y'))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      All2 l (SUCC (SUCC (SUCC (Var k'))))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (blast intro: LstSeqP_SeqAppendP_Eats SeqHRP_imp_LstSeqP [THEN cut1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      All2 l (SUCC (SUCC (SUCC (Var k'))))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "proof (rule All2_SUCC_I, simp_all)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      All2 l (SUCC (SUCC (Var k')))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN SUCC (SUCC (Var k')) AND\n Var n IN SUCC (SUCC (Var k')) AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "show \"?hyp \\<turnstile>     SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (SUCC (SUCC (Var k'))) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s) (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN SUCC (SUCC (Var k')) AND\n                     Var n IN SUCC (SUCC (Var k')) AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s) (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s) (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\"\n      \\<comment> \\<open>verifying the final values\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (SUCC (SUCC (Var k'))) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN SUCC (SUCC (Var k')) AND\n                     Var n IN SUCC (SUCC (Var k')) AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (rule Ex_I [where x=\"HPair x y\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    (SyntaxN.Ex sl'\n      (HPair (SUCC (SUCC (Var k'))) (HPair (Var sl) (Var sl')) IN\n       Eats (Var s)\n        (HPair (SUCC (SUCC (Var k')))\n          (HPair (HPair x y) (Q_HPair x' y'))) AND\n       (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n        SyntaxN.Ex m\n         (SyntaxN.Ex n\n           (SyntaxN.Ex sm\n             (SyntaxN.Ex sm'\n               (SyntaxN.Ex sn\n                 (SyntaxN.Ex sn'\n                   (Var m IN SUCC (SUCC (Var k')) AND\n                    Var n IN SUCC (SUCC (Var k')) AND\n                    HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                    Eats (Var s)\n                     (HPair (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y'))) AND\n                    HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                    Eats (Var s)\n                     (HPair (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y'))) AND\n                    Var sl EQ HPair (Var sm) (Var sn) AND\n                    Var sl' EQ\n                    Q_HPair (Var sm') (Var sn'))))))))))(sl::=HPair x y)", "using assms atoms"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y')\n  atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y')\n  atom\n   k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                sm', sn, sn')\n  atom\n   l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm, sm',\n               sn, sn')\n  atom\n   sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm', sn,\n                sn')\n  atom\n   sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn')\n  atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn')\n  atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn')\n  atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn')\n  atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn')\n  atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\n\ngoal (1 subgoal):\n 1. {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    (SyntaxN.Ex sl'\n      (HPair (SUCC (SUCC (Var k'))) (HPair (Var sl) (Var sl')) IN\n       Eats (Var s)\n        (HPair (SUCC (SUCC (Var k')))\n          (HPair (HPair x y) (Q_HPair x' y'))) AND\n       (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n        SyntaxN.Ex m\n         (SyntaxN.Ex n\n           (SyntaxN.Ex sm\n             (SyntaxN.Ex sm'\n               (SyntaxN.Ex sn\n                 (SyntaxN.Ex sn'\n                   (Var m IN SUCC (SUCC (Var k')) AND\n                    Var n IN SUCC (SUCC (Var k')) AND\n                    HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                    Eats (Var s)\n                     (HPair (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y'))) AND\n                    HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                    Eats (Var s)\n                     (HPair (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y'))) AND\n                    Var sl EQ HPair (Var sm) (Var sn) AND\n                    Var sl' EQ\n                    Q_HPair (Var sm') (Var sn'))))))))))(sl::=HPair x y)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl'\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Var sl')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        (OrdP (HPair x y) AND WRP (HPair x y) (Var sl') OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sm'\n                                (SyntaxN.Ex sn\n                                  (SyntaxN.Ex sn'\n                                    (Var m IN SUCC (SUCC (Var k')) AND\n                                     Var n IN SUCC (SUCC (Var k')) AND\n                                     HPair (Var m)\n(HPair (Var sm) (Var sm')) IN\n                                     Eats (Var s)\n(HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                     HPair (Var n)\n(HPair (Var sn) (Var sn')) IN\n                                     Eats (Var s)\n(HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                     HPair x y EQ\n                                     HPair (Var sm) (Var sn) AND\n                                     Var sl' EQ\n                                     Q_HPair (Var sm') (Var sn')))))))))", "apply (rule Ex_I [where x=\"Q_HPair x' y'\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (SUCC (SUCC (Var k')))\n                       (HPair (HPair x y) (Q_HPair x' y')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      (OrdP (HPair x y) AND\n                       WRP (HPair x y) (Q_HPair x' y') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN SUCC (SUCC (Var k')) AND\n                                   Var n IN SUCC (SUCC (Var k')) AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   HPair x y EQ HPair (Var sm) (Var sn) AND\n                                   Q_HPair x' y' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))))", "apply (rule Conj_I, metis Mem_Eats_I2 Refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP (HPair x y) AND\n                      WRP (HPair x y) (Q_HPair x' y') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN SUCC (SUCC (Var k')) AND\n                                  Var n IN SUCC (SUCC (Var k')) AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair x y EQ HPair (Var sm) (Var sn) AND\n                                  Q_HPair x' y' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))", "apply (rule Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN SUCC (SUCC (Var k')) AND\n                                  Var n IN SUCC (SUCC (Var k')) AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair x y EQ HPair (Var sm) (Var sn) AND\n                                  Q_HPair x' y' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))", "apply (rule Ex_I [where x=k1], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (k1 IN SUCC (SUCC (Var k')) AND\n                                Var n IN SUCC (SUCC (Var k')) AND\n                                HPair k1 (HPair (Var sm) (Var sm')) IN\n                                Eats (Var s)\n                                 (HPair (SUCC (SUCC (Var k')))\n                                   (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                                Eats (Var s)\n                                 (HPair (SUCC (SUCC (Var k')))\n                                   (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                HPair x y EQ HPair (Var sm) (Var sn) AND\n                                Q_HPair x' y' EQ\n                                Q_HPair (Var sm') (Var sn'))))))", "apply (rule Ex_I [where x=\"SUCC (Var k')\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (k1 IN SUCC (SUCC (Var k')) AND\n                              SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                              HPair k1 (HPair (Var sm) (Var sm')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              HPair (SUCC (Var k'))\n                               (HPair (Var sn) (Var sn')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              HPair x y EQ HPair (Var sm) (Var sn) AND\n                              Q_HPair x' y' EQ\n                              Q_HPair (Var sm') (Var sn')))))", "apply (rule Ex_I [where x=x], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (k1 IN SUCC (SUCC (Var k')) AND\n                            SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                            HPair k1 (HPair x (Var sm')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            HPair (SUCC (Var k'))\n                             (HPair (Var sn) (Var sn')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            HPair x y EQ HPair x (Var sn) AND\n                            Q_HPair x' y' EQ Q_HPair (Var sm') (Var sn'))))", "apply (rule_tac x=x' in Ex_I, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (k1 IN SUCC (SUCC (Var k')) AND\n                          SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                          HPair k1 (HPair x x') IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          HPair (SUCC (Var k'))\n                           (HPair (Var sn) (Var sn')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          HPair x y EQ HPair x (Var sn) AND\n                          Q_HPair x' y' EQ Q_HPair x' (Var sn')))", "apply (rule Ex_I [where x=y], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (k1 IN SUCC (SUCC (Var k')) AND\n                        SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                        HPair k1 (HPair x x') IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        HPair (SUCC (Var k')) (HPair y (Var sn')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        HPair x y EQ HPair x y AND\n                        Q_HPair x' y' EQ Q_HPair x' (Var sn'))", "apply (rule_tac x=y' in Ex_I, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      k1 IN SUCC (SUCC (Var k')) AND\n                      SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                      HPair k1 (HPair x x') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (SUCC (Var k')) (HPair y y') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair x y EQ HPair x y AND\n                      Q_HPair x' y' EQ Q_HPair x' y'", "apply (rule Conj_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      k1 IN SUCC (SUCC (Var k'))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                      HPair k1 (HPair x x') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (SUCC (Var k')) (HPair y y') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair x y EQ HPair x y AND\n                      Q_HPair x' y' EQ Q_HPair x' y'", "apply (blast intro: HaddP_Mem_I LstSeqP_OrdP Mem_SUCC_I1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SUCC (Var k') IN SUCC (SUCC (Var k')) AND\n                      HPair k1 (HPair x x') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (SUCC (Var k')) (HPair y y') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair x y EQ HPair x y AND\n                      Q_HPair x' y' EQ Q_HPair x' y'", "apply (rule Conj_I [OF Mem_SUCC_Refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair k1 (HPair x x') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (SUCC (Var k')) (HPair y y') IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair x y EQ HPair x y AND\n                      Q_HPair x' y' EQ Q_HPair x' y'", "apply (blast intro: Disj_I1 Mem_Eats_I1 Mem_SUCC_Refl SeqHRP_imp_LstSeqP [THEN cut1]\n          LstSeqP_imp_Mem SeqAppendP_Mem1 [THEN cut3] SeqAppendP_Mem2 [THEN cut4] HaddP_SUCC1 [THEN cut1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n   SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n   SeqHRP y y' s2 k2} \\<turnstile>\n  SyntaxN.Ex sl\n   (SyntaxN.Ex sl'\n     (HPair (SUCC (SUCC (Var k'))) (HPair (Var sl) (Var sl')) IN\n      Eats (Var s)\n       (HPair (SUCC (SUCC (Var k')))\n         (HPair (HPair x y) (Q_HPair x' y'))) AND\n      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n       SyntaxN.Ex m\n        (SyntaxN.Ex n\n          (SyntaxN.Ex sm\n            (SyntaxN.Ex sm'\n              (SyntaxN.Ex sn\n                (SyntaxN.Ex sn'\n                  (Var m IN SUCC (SUCC (Var k')) AND\n                   Var n IN SUCC (SUCC (Var k')) AND\n                   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                   Eats (Var s)\n                    (HPair (SUCC (SUCC (Var k')))\n                      (HPair (HPair x y) (Q_HPair x' y'))) AND\n                   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                   Eats (Var s)\n                    (HPair (SUCC (SUCC (Var k')))\n                      (HPair (HPair x y) (Q_HPair x' y'))) AND\n                   Var sl EQ HPair (Var sm) (Var sn) AND\n                   Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      All2 l (SUCC (SUCC (Var k')))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\\<rbrakk>\n    \\<Longrightarrow> {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      All2 l (SUCC (SUCC (Var k')))\n                       (SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN\n   Eats (Var s)\n    (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "show \"?hyp \\<turnstile>  All2 l (SUCC (SUCC (Var k')))\n     (SyntaxN.Ex sl\n       (SyntaxN.Ex sl'\n         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n          Eats (Var s) (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n           SyntaxN.Ex m\n            (SyntaxN.Ex n\n              (SyntaxN.Ex sm\n                (SyntaxN.Ex sm'\n                  (SyntaxN.Ex sn\n                    (SyntaxN.Ex sn'\n                      (Var m IN Var l AND\n                       Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                       Eats (Var s) (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                       Eats (Var s) (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       Var sl EQ HPair (Var sm) (Var sn) AND Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\"\n      \\<comment> \\<open>verifying the sequence buildup\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    All2 l (SUCC (SUCC (Var k')))\n     (SyntaxN.Ex sl\n       (SyntaxN.Ex sl'\n         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n           SyntaxN.Ex m\n            (SyntaxN.Ex n\n              (SyntaxN.Ex sm\n                (SyntaxN.Ex sm'\n                  (SyntaxN.Ex sn\n                    (SyntaxN.Ex sn'\n                      (Var m IN Var l AND\n                       Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                       Eats (Var s)\n                        (HPair (SUCC (SUCC (Var k')))\n                          (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                       Eats (Var s)\n                        (HPair (SUCC (SUCC (Var k')))\n                          (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       Var sl EQ HPair (Var sm) (Var sn) AND\n                       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule cut_same [where A=\"HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k')))\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k')))\n 2. {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    All2 l (SUCC (SUCC (Var k')))\n     (SyntaxN.Ex sl\n       (SyntaxN.Ex sl'\n         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n           SyntaxN.Ex m\n            (SyntaxN.Ex n\n              (SyntaxN.Ex sm\n                (SyntaxN.Ex sm'\n                  (SyntaxN.Ex sn\n                    (SyntaxN.Ex sn'\n                      (Var m IN Var l AND\n                       Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                       Eats (Var s)\n                        (HPair (SUCC (SUCC (Var k')))\n                          (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                       Eats (Var s)\n                        (HPair (SUCC (SUCC (Var k')))\n                          (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       Var sl EQ HPair (Var sm) (Var sn) AND\n                       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (blast intro: HaddP_SUCC1 [THEN cut1] HaddP_SUCC2 [THEN cut1])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    All2 l (SUCC (SUCC (Var k')))\n     (SyntaxN.Ex sl\n       (SyntaxN.Ex sl'\n         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n           SyntaxN.Ex m\n            (SyntaxN.Ex n\n              (SyntaxN.Ex sm\n                (SyntaxN.Ex sm'\n                  (SyntaxN.Ex sn\n                    (SyntaxN.Ex sn'\n                      (Var m IN Var l AND\n                       Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                       Eats (Var s)\n                        (HPair (SUCC (SUCC (Var k')))\n                          (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                       Eats (Var s)\n                        (HPair (SUCC (SUCC (Var k')))\n                          (HPair (HPair x y) (Q_HPair x' y'))) AND\n                       Var sl EQ HPair (Var sm) (Var sn) AND\n                       Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule All_I Imp_I)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. {Var l IN SUCC (SUCC (Var k')),\n     HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN Var l AND\n                     Var n IN Var l AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 2. \\<forall>C\\<in>{HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                    HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                    SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                    SeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n       atom l \\<sharp> C", "apply (rule HaddP_Mem_cases [where i=j])"], ["proof (prove)\ngoal (7 subgoals):\n 1. {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    HaddP ?k1.20 ?k2.20 (SUCC (SUCC (Var k')))\n 2. {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    OrdP ?k1.20\n 3. {Var l IN ?k1.20, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n     HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN Var l AND\n                     Var n IN Var l AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. {Var j IN ?k2.20, HaddP ?k1.20 (Var j) (Var l),\n     HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN Var l AND\n                     Var n IN Var l AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. atom\n     j \\<sharp> (?k1.20, ?k2.20, SUCC (SUCC (Var k')), Var l,\n                 SyntaxN.Ex sl\n                  (SyntaxN.Ex sl'\n                    (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))))))\n 6. \\<forall>C\\<in>{HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                    HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                    SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                    SeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n       atom j \\<sharp> C\n 7. \\<forall>C\\<in>{HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                    HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                    SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                    SeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n       atom l \\<sharp> C", "using assms atoms atoms2"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y')\n  atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y')\n  atom\n   k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                sm', sn, sn')\n  atom\n   l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm, sm',\n               sn, sn')\n  atom\n   sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm', sn,\n                sn')\n  atom\n   sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn')\n  atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn')\n  atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn')\n  atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn')\n  atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn')\n  atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y')\n  atom\n   km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                m, n, sm, sm', sn, sn')\n  atom\n   kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                sm, sm', sn, sn')\n  atom\n   j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n               sm', sn, sn')\n\ngoal (7 subgoals):\n 1. {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    HaddP ?k1.20 ?k2.20 (SUCC (SUCC (Var k')))\n 2. {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    OrdP ?k1.20\n 3. {Var l IN ?k1.20, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n     HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n     SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n     SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN Var l AND\n                     Var n IN Var l AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. {Var j IN ?k2.20, HaddP ?k1.20 (Var j) (Var l),\n     HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\n     OrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n     SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n    SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN Var l AND\n                     Var n IN Var l AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. atom\n     j \\<sharp> (?k1.20, ?k2.20, SUCC (SUCC (Var k')), Var l,\n                 SyntaxN.Ex sl\n                  (SyntaxN.Ex sl'\n                    (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))))))\n 6. \\<forall>C\\<in>{HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                    HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                    SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                    SeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n       atom j \\<sharp> C\n 7. \\<forall>C\\<in>{HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                    HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                    SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                    SeqHRP x x' s1 k1, SeqHRP y y' s2 k2}.\n       atom l \\<sharp> C", "apply simp_all"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      HaddP ?k1.20 ?k2.20 (SUCC (SUCC (Var k')))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP ?k1.20\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var l IN ?k1.20,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN ?k2.20, HaddP ?k1.20 (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (?k1.20, ?k2.20, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule AssumeH)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP (SUCC k1)\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (blast intro: OrdP_SUCC_I LstSeqP_OrdP)\n        \\<comment> \\<open>... the sequence buildup via s1\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (simp add: SeqHRP.simps [of l s1 _ sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       LstSeqP s1 k1 (HPair x x') AND\n                       All2 l (SUCC k1)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s1 AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s1 AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s1 AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule AssumeH Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s1 k1 (HPair x x'),\n                       All2 l (SUCC k1)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s1 AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s1 AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s1 AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule All2_E [THEN rotate2])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> SUCC k1\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      ?x143 IN SUCC k1\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {(SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s1 AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s1 AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s1 AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))(l::=?x143),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (simp | rule AssumeH Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s1 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s1 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule Ex_I [where x=\"Var sl\"], simp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s1 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s1 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl'\n                       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sm'\n                                (SyntaxN.Ex sn\n                                  (SyntaxN.Ex sn'\n                                    (Var m IN Var l AND\n                                     Var n IN Var l AND\n                                     HPair (Var m)\n(HPair (Var sm) (Var sm')) IN\n                                     Eats (Var s)\n(HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                     HPair (Var n)\n(HPair (Var sn) (Var sn')) IN\n                                     Eats (Var s)\n(HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                     Var sl EQ HPair (Var sm) (Var sn) AND\n                                     Var sl' EQ\n                                     Q_HPair (Var sm') (Var sn')))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule Ex_I [where x=\"Var sl'\"], simp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s1 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s1 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule Conj_I [OF Mem_Eats_I1])"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s1 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s1 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (Var l) (HPair (Var sl) (Var sl')) IN Var s\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s1 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s1 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl \\<sharp> C\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (metis SeqAppendP_Mem1 rotate3 thin2 thin4)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s1 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s1 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s1 k1 (HPair x x'),\nVar l IN SUCC k1, HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\nHaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\nSeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP y y' s2 k2}.\n                         atom sl \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       j \\<sharp> (SUCC k1, SUCC k2, SUCC (SUCC (Var k')),\n                                   Var l,\n                                   SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))", "apply (rule AssumeH Disj_IE1H Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (rule Ex_I [where x=\"Var m\"], simp)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (Var m IN Var l AND\n                                Var n IN Var l AND\n                                HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                                Eats (Var s)\n                                 (HPair (SUCC (SUCC (Var k')))\n                                   (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                                Eats (Var s)\n                                 (HPair (SUCC (SUCC (Var k')))\n                                   (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                Var sl EQ HPair (Var sm) (Var sn) AND\n                                Var sl' EQ Q_HPair (Var sm') (Var sn'))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (rule Ex_I [where x=\"Var n\"], simp)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (Var m IN Var l AND\n                              Var n IN Var l AND\n                              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              Var sl EQ HPair (Var sm) (Var sn) AND\n                              Var sl' EQ Q_HPair (Var sm') (Var sn')))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (rule Ex_I [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (Var m IN Var l AND\n                            Var n IN Var l AND\n                            HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            Var sl EQ HPair (Var sm) (Var sn) AND\n                            Var sl' EQ Q_HPair (Var sm') (Var sn'))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (rule Ex_I [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (Var m IN Var l AND\n                          Var n IN Var l AND\n                          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          Var sl EQ HPair (Var sm) (Var sn) AND\n                          Var sl' EQ Q_HPair (Var sm') (Var sn')))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (rule Ex_I [where x=\"Var sn\"], simp)"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (Var m IN Var l AND\n                        Var n IN Var l AND\n                        HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        Var sl EQ HPair (Var sm) (Var sn) AND\n                        Var sl' EQ Q_HPair (Var sm') (Var sn'))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HPair (Var l)\n (HPair (Var sl) (Var sl')) IN\ns1,\nLstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP y y' s2 k2}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (rule Ex_I [where x=\"Var sn'\"], simp_all (no_asm_simp))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      Var m IN Var l AND\n                      Var n IN Var l AND\n                      HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (rule Conj_I, rule AssumeH)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (rule Conj_I)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y')))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (blast intro: OrdP_Trans [OF OrdP_SUCC_I] Mem_Eats_I1 [OF SeqAppendP_Mem1 [THEN cut3]] Hyp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s1,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s1,\n                       Var n IN Var l, Var m IN Var l,\n                       HPair (Var l) (HPair (Var sl) (Var sl')) IN s1,\n                       LstSeqP s1 k1 (HPair x x'), Var l IN SUCC k1,\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP y y' s2 k2} \\<turnstile>\n                      HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (blast intro: Disj_I1 Disj_I2 OrdP_Trans [OF OrdP_SUCC_I] Mem_Eats_I1 [OF SeqAppendP_Mem1 [THEN cut3]] Hyp)\n        \\<comment> \\<open>... the sequence buildup via s2\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (simp add: SeqHRP.simps [of l s2 _ sl sl' m n sm sm' sn sn'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1,\n                       LstSeqP s2 k2 (HPair y y') AND\n                       All2 l (SUCC k2)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s2 AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s2 AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s2 AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (rule AssumeH Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s2 k2 (HPair y y'),\n                       All2 l (SUCC k2)\n                        (SyntaxN.Ex sl\n                          (SyntaxN.Ex sl'\n                            (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                             s2 AND\n                             (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sm'\n                                     (SyntaxN.Ex sn\n (SyntaxN.Ex sn'\n   (Var m IN Var l AND\n    Var n IN Var l AND\n    HPair (Var m) (HPair (Var sm) (Var sm')) IN s2 AND\n    HPair (Var n) (HPair (Var sn) (Var sn')) IN s2 AND\n    Var sl EQ HPair (Var sm) (Var sn) AND\n    Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))),\n                       Var j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (rule All2_E [THEN rotate2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom l \\<sharp> SUCC k2\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      ?x356 IN SUCC k2\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {(SyntaxN.Ex sl\n                         (SyntaxN.Ex sl'\n                           (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                            s2 AND\n                            (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                             SyntaxN.Ex m\n                              (SyntaxN.Ex n\n                                (SyntaxN.Ex sm\n                                  (SyntaxN.Ex sm'\n                                    (SyntaxN.Ex sn\n(SyntaxN.Ex sn'\n  (Var m IN Var l AND\n   Var n IN Var l AND\n   HPair (Var m) (HPair (Var sm) (Var sm')) IN s2 AND\n   HPair (Var n) (HPair (Var sn) (Var sn')) IN s2 AND\n   Var sl EQ HPair (Var sm) (Var sn) AND\n   Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))(l::=?x356),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))", "apply (simp | rule AssumeH Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (SyntaxN.Ex sl'\n                         (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                           SyntaxN.Ex m\n                            (SyntaxN.Ex n\n                              (SyntaxN.Ex sm\n                                (SyntaxN.Ex sm'\n                                  (SyntaxN.Ex sn\n                                    (SyntaxN.Ex sn'\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (HPair (Var sm) (Var sm')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n HPair (Var n) (HPair (Var sn) (Var sn')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n Var sl EQ HPair (Var sm) (Var sn) AND\n Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (rule Ex_I [where x=\"Var sl\"], simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sl'\n                       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sm'\n                                (SyntaxN.Ex sn\n                                  (SyntaxN.Ex sn'\n                                    (Var m IN Var l AND\n                                     Var n IN Var l AND\n                                     HPair (Var m)\n(HPair (Var sm) (Var sm')) IN\n                                     Eats (Var s)\n(HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                     HPair (Var n)\n(HPair (Var sn) (Var sn')) IN\n                                     Eats (Var s)\n(HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                     Var sl EQ HPair (Var sm) (Var sn) AND\n                                     Var sl' EQ\n                                     Q_HPair (Var sm') (Var sn')))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (rule Ex_I [where x=\"Var sl'\"], simp)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (rule cut_same [where A=\"OrdP (Var j)\"])"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      OrdP (Var j)\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (metis HaddP_imp_OrdP rotate2 thin2)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var l AND\n                                   Var n IN Var l AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   Eats (Var s)\n                                    (HPair (SUCC (SUCC (Var k')))\n(HPair (HPair x y) (Q_HPair x' y'))) AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (rule Conj_I)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y')))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (blast intro: Mem_Eats_I1 SeqAppendP_Mem2 [THEN cut4] del: Disj_EH)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sm'\n                              (SyntaxN.Ex sn\n                                (SyntaxN.Ex sn'\n                                  (Var m IN Var j AND\n                                   Var n IN Var j AND\n                                   HPair (Var m)\n                                    (HPair (Var sm) (Var sm')) IN\n                                   s2 AND\n                                   HPair (Var n)\n                                    (HPair (Var sn) (Var sn')) IN\n                                   s2 AND\n                                   Var sl EQ HPair (Var sm) (Var sn) AND\n                                   Var sl' EQ\n                                   Q_HPair (Var sm') (Var sn'))))))),\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl' \\<sharp> SyntaxN.Ex sl\n                                     (SyntaxN.Ex sl'\n (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n  Eats (Var s)\n   (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n  (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n   SyntaxN.Ex m\n    (SyntaxN.Ex n\n      (SyntaxN.Ex sm\n        (SyntaxN.Ex sm'\n          (SyntaxN.Ex sn\n            (SyntaxN.Ex sn'\n              (Var m IN Var l AND\n               Var n IN Var l AND\n               HPair (Var m) (HPair (Var sm) (Var sm')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               HPair (Var n) (HPair (Var sn) (Var sn')) IN\n               Eats (Var s)\n                (HPair (SUCC (SUCC (Var k')))\n                  (HPair (HPair x y) (Q_HPair x' y'))) AND\n               Var sl EQ HPair (Var sm) (Var sn) AND\n               Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sl \\<sharp> SyntaxN.Ex sl\n                                    (SyntaxN.Ex sl'\n(HPair (Var l) (HPair (Var sl) (Var sl')) IN\n Eats (Var s)\n  (HPair (SUCC (SUCC (Var k'))) (HPair (HPair x y) (Q_HPair x' y'))) AND\n (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n  SyntaxN.Ex m\n   (SyntaxN.Ex n\n     (SyntaxN.Ex sm\n       (SyntaxN.Ex sm'\n         (SyntaxN.Ex sn\n           (SyntaxN.Ex sn'\n             (Var m IN Var l AND\n              Var n IN Var l AND\n              HPair (Var m) (HPair (Var sm) (Var sm')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              HPair (Var n) (HPair (Var sn) (Var sn')) IN\n              Eats (Var s)\n               (HPair (SUCC (SUCC (Var k')))\n                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n              Var sl EQ HPair (Var sm) (Var sn) AND\n              Var sl' EQ Q_HPair (Var sm') (Var sn'))))))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sl \\<sharp> C", "apply (rule AssumeH Disj_IE1H Ex_EH Conj_EH)+"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 17 subgoals...", "apply (rule cut_same [OF exists_HaddP [where j=km and x=\"SUCC k1\" and y=\"Var m\"]])"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      OrdP (Var m)\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom km \\<sharp> (SUCC k1, Var m)\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex km (HaddP (SUCC k1) (Var m) (Var km)),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm' \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (blast intro: Ord_IN_Ord, simp)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex km (HaddP (SUCC k1) (Var m) (Var km)),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 17 subgoals...", "apply (rule cut_same [OF exists_HaddP [where j=kn and x=\"SUCC k1\" and y=\"Var n\"]])"], ["proof (prove)\ngoal (19 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex km (HaddP (SUCC k1) (Var m) (Var km)),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      OrdP (Var n)\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom kn \\<sharp> (SUCC k1, Var n)\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex kn (HaddP (SUCC k1) (Var n) (Var kn)),\n                       SyntaxN.Ex km (HaddP (SUCC k1) (Var m) (Var km)),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm' \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 19 subgoals...", "apply (metis AssumeH(6) Ord_IN_Ord0 rotate8, simp)"], ["proof (prove)\ngoal (17 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {SyntaxN.Ex kn (HaddP (SUCC k1) (Var n) (Var kn)),\n                       SyntaxN.Ex km (HaddP (SUCC k1) (Var m) (Var km)),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sm \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sm \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        n \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 17 subgoals...", "apply (rule AssumeH Ex_EH Conj_EH | simp)+"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sm'\n                             (SyntaxN.Ex sn\n                               (SyntaxN.Ex sn'\n                                 (Var m IN Var l AND\n                                  Var n IN Var l AND\n                                  HPair (Var m)\n                                   (HPair (Var sm) (Var sm')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  HPair (Var n)\n                                   (HPair (Var sn) (Var sn')) IN\n                                  Eats (Var s)\n                                   (HPair (SUCC (SUCC (Var k')))\n                                     (HPair (HPair x y)\n (Q_HPair x' y'))) AND\n                                  Var sl EQ HPair (Var sm) (Var sn) AND\n                                  Var sl' EQ\n                                  Q_HPair (Var sm') (Var sn')))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       km \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HaddP (SUCC k1) (Var n) (Var kn),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom km \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       kn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SyntaxN.Ex km\n (HaddP (SUCC k1) (Var m) (Var km)),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom kn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm' \\<sharp> SyntaxN.Ex m\n(SyntaxN.Ex n\n  (SyntaxN.Ex sm\n    (SyntaxN.Ex sm'\n      (SyntaxN.Ex sn\n        (SyntaxN.Ex sn'\n          (Var m IN Var l AND\n           Var n IN Var l AND\n           HPair (Var m) (HPair (Var sm) (Var sm')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           HPair (Var n) (HPair (Var sn) (Var sn')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           Var sl EQ HPair (Var sm) (Var sn) AND\n           Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 21 subgoals...", "apply (rule Ex_I [where x=\"Var km\"], simp)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sm'\n                           (SyntaxN.Ex sn\n                             (SyntaxN.Ex sn'\n                               (Var km IN Var l AND\n                                Var n IN Var l AND\n                                HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                                Eats (Var s)\n                                 (HPair (SUCC (SUCC (Var k')))\n                                   (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                                Eats (Var s)\n                                 (HPair (SUCC (SUCC (Var k')))\n                                   (HPair (HPair x y) (Q_HPair x' y'))) AND\n                                Var sl EQ HPair (Var sm) (Var sn) AND\n                                Var sl' EQ Q_HPair (Var sm') (Var sn'))))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       km \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HaddP (SUCC k1) (Var n) (Var kn),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom km \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       kn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SyntaxN.Ex km\n (HaddP (SUCC k1) (Var m) (Var km)),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom kn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm' \\<sharp> SyntaxN.Ex m\n(SyntaxN.Ex n\n  (SyntaxN.Ex sm\n    (SyntaxN.Ex sm'\n      (SyntaxN.Ex sn\n        (SyntaxN.Ex sn'\n          (Var m IN Var l AND\n           Var n IN Var l AND\n           HPair (Var m) (HPair (Var sm) (Var sm')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           HPair (Var n) (HPair (Var sn) (Var sn')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           Var sl EQ HPair (Var sm) (Var sn) AND\n           Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 21 subgoals...", "apply (rule Ex_I [where x=\"Var kn\"], simp)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sm'\n                         (SyntaxN.Ex sn\n                           (SyntaxN.Ex sn'\n                             (Var km IN Var l AND\n                              Var kn IN Var l AND\n                              HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                              Eats (Var s)\n                               (HPair (SUCC (SUCC (Var k')))\n                                 (HPair (HPair x y) (Q_HPair x' y'))) AND\n                              Var sl EQ HPair (Var sm) (Var sn) AND\n                              Var sl' EQ Q_HPair (Var sm') (Var sn')))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       km \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HaddP (SUCC k1) (Var n) (Var kn),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom km \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       kn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SyntaxN.Ex km\n (HaddP (SUCC k1) (Var m) (Var km)),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom kn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm' \\<sharp> SyntaxN.Ex m\n(SyntaxN.Ex n\n  (SyntaxN.Ex sm\n    (SyntaxN.Ex sm'\n      (SyntaxN.Ex sn\n        (SyntaxN.Ex sn'\n          (Var m IN Var l AND\n           Var n IN Var l AND\n           HPair (Var m) (HPair (Var sm) (Var sm')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           HPair (Var n) (HPair (Var sn) (Var sn')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           Var sl EQ HPair (Var sm) (Var sn) AND\n           Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 21 subgoals...", "apply (rule Ex_I [where x=\"Var sm\"], simp)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sm'\n                       (SyntaxN.Ex sn\n                         (SyntaxN.Ex sn'\n                           (Var km IN Var l AND\n                            Var kn IN Var l AND\n                            HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                            Eats (Var s)\n                             (HPair (SUCC (SUCC (Var k')))\n                               (HPair (HPair x y) (Q_HPair x' y'))) AND\n                            Var sl EQ HPair (Var sm) (Var sn) AND\n                            Var sl' EQ Q_HPair (Var sm') (Var sn'))))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       km \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HaddP (SUCC k1) (Var n) (Var kn),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom km \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       kn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SyntaxN.Ex km\n (HaddP (SUCC k1) (Var m) (Var km)),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom kn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm' \\<sharp> SyntaxN.Ex m\n(SyntaxN.Ex n\n  (SyntaxN.Ex sm\n    (SyntaxN.Ex sm'\n      (SyntaxN.Ex sn\n        (SyntaxN.Ex sn'\n          (Var m IN Var l AND\n           Var n IN Var l AND\n           HPair (Var m) (HPair (Var sm) (Var sm')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           HPair (Var n) (HPair (Var sn) (Var sn')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           Var sl EQ HPair (Var sm) (Var sn) AND\n           Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 21 subgoals...", "apply (rule Ex_I [where x=\"Var sm'\"], simp)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (SyntaxN.Ex sn'\n                         (Var km IN Var l AND\n                          Var kn IN Var l AND\n                          HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                          Eats (Var s)\n                           (HPair (SUCC (SUCC (Var k')))\n                             (HPair (HPair x y) (Q_HPair x' y'))) AND\n                          Var sl EQ HPair (Var sm) (Var sn) AND\n                          Var sl' EQ Q_HPair (Var sm') (Var sn')))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       km \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HaddP (SUCC k1) (Var n) (Var kn),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom km \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       kn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SyntaxN.Ex km\n (HaddP (SUCC k1) (Var m) (Var km)),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom kn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm' \\<sharp> SyntaxN.Ex m\n(SyntaxN.Ex n\n  (SyntaxN.Ex sm\n    (SyntaxN.Ex sm'\n      (SyntaxN.Ex sn\n        (SyntaxN.Ex sn'\n          (Var m IN Var l AND\n           Var n IN Var l AND\n           HPair (Var m) (HPair (Var sm) (Var sm')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           HPair (Var n) (HPair (Var sn) (Var sn')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           Var sl EQ HPair (Var sm) (Var sn) AND\n           Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 21 subgoals...", "apply (rule Ex_I [where x=\"Var sn\"], simp)"], ["proof (prove)\ngoal (21 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      SyntaxN.Ex sn'\n                       (Var km IN Var l AND\n                        Var kn IN Var l AND\n                        HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                        Eats (Var s)\n                         (HPair (SUCC (SUCC (Var k')))\n                           (HPair (HPair x y) (Q_HPair x' y'))) AND\n                        Var sl EQ HPair (Var sm) (Var sn) AND\n                        Var sl' EQ Q_HPair (Var sm') (Var sn'))\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       km \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{HaddP (SUCC k1) (Var n) (Var kn),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom km \\<sharp> C\n 4. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       kn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 5. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{SyntaxN.Ex km\n (HaddP (SUCC k1) (Var m) (Var km)),\nVar sl EQ HPair (Var sm) (Var sn), Var sl' EQ Q_HPair (Var sm') (Var sn'),\nHPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\nHPair (Var m) (HPair (Var sm) (Var sm')) IN s2, Var n IN Var j,\nVar m IN Var j, OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom kn \\<sharp> C\n 6. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn' \\<sharp> SyntaxN.Ex m\n                                     (SyntaxN.Ex n\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sn\n       (SyntaxN.Ex sn'\n         (Var m IN Var l AND\n          Var n IN Var l AND\n          HPair (Var m) (HPair (Var sm) (Var sm')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          HPair (Var n) (HPair (Var sn) (Var sn')) IN\n          Eats (Var s)\n           (HPair (SUCC (SUCC (Var k')))\n             (HPair (HPair x y) (Q_HPair x' y'))) AND\n          Var sl EQ HPair (Var sm) (Var sn) AND\n          Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 7. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn' \\<sharp> C\n 8. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> atom\n                       sn \\<sharp> SyntaxN.Ex m\n                                    (SyntaxN.Ex n\n(SyntaxN.Ex sm\n  (SyntaxN.Ex sm'\n    (SyntaxN.Ex sn\n      (SyntaxN.Ex sn'\n        (Var m IN Var l AND\n         Var n IN Var l AND\n         HPair (Var m) (HPair (Var sm) (Var sm')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         HPair (Var n) (HPair (Var sn) (Var sn')) IN\n         Eats (Var s)\n          (HPair (SUCC (SUCC (Var k')))\n            (HPair (HPair x y) (Q_HPair x' y'))) AND\n         Var sl EQ HPair (Var sm) (Var sn) AND\n         Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\n 9. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> \\<forall>C\\<in>{OrdP (Var j),\nHPair (Var j) (HPair (Var sl) (Var sl')) IN s2, LstSeqP s2 k2 (HPair y y'),\nVar j IN SUCC k2, HaddP (SUCC k1) (Var j) (Var l),\nHaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))), HaddP k1 k2 (Var k'),\nOrdP k1, OrdP k2, SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\nSeqHRP x x' s1 k1}.\n                         atom sn \\<sharp> C\n 10. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n      atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n      atom\n       k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                    sm, sm', sn, sn');\n      atom\n       l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n      atom\n       sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                    sn, sn');\n      atom\n       sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                     sn');\n      atom\n       m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n      atom\n       n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n      atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n      atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n      atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n      atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n      atom\n       km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                    sl', m, n, sm, sm', sn, sn');\n      atom\n       kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl',\n                    m, n, sm, sm', sn, sn');\n      atom\n       j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                   sm, sm', sn, sn')\\<rbrakk>\n     \\<Longrightarrow> atom\n                        sm' \\<sharp> SyntaxN.Ex m\n(SyntaxN.Ex n\n  (SyntaxN.Ex sm\n    (SyntaxN.Ex sm'\n      (SyntaxN.Ex sn\n        (SyntaxN.Ex sn'\n          (Var m IN Var l AND\n           Var n IN Var l AND\n           HPair (Var m) (HPair (Var sm) (Var sm')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           HPair (Var n) (HPair (Var sn) (Var sn')) IN\n           Eats (Var s)\n            (HPair (SUCC (SUCC (Var k')))\n              (HPair (HPair x y) (Q_HPair x' y'))) AND\n           Var sl EQ HPair (Var sm) (Var sn) AND\n           Var sl' EQ Q_HPair (Var sm') (Var sn')))))))\nA total of 21 subgoals...", "apply (rule Ex_I [where x=\"Var sn'\"], simp_all (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      Var km IN Var l AND\n                      Var kn IN Var l AND\n                      HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')", "apply (rule Conj_I [OF _ Conj_I])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      Var km IN Var l\n 2. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      Var kn IN Var l\n 3. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')", "apply (blast intro!: HaddP_Mem_cancel_left [THEN Iff_MP2_same] OrdP_SUCC_I intro: LstSeqP_OrdP Hyp)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom s \\<sharp> (k, s1, s2, k1, k2, x, y, x', y');\n     atom k \\<sharp> (s1, s2, k1, k2, x, y, x', y');\n     atom\n      k' \\<sharp> (l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                   sm', sn, sn');\n     atom\n      l \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n, sm,\n                  sm', sn, sn');\n     atom\n      sl \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sl', m, n, sm, sm',\n                   sn, sn');\n     atom\n      sl' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', m, n, sm, sm', sn,\n                    sn');\n     atom\n      m \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', n, sm, sm', sn, sn');\n     atom n \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm, sm', sn, sn');\n     atom sm \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sm', sn, sn');\n     atom sm' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn, sn');\n     atom sn \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y', sn');\n     atom sn' \\<sharp> (s1, s2, s, k1, k2, k, x, y, x', y');\n     atom\n      km \\<sharp> (kn, j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl,\n                   sl', m, n, sm, sm', sn, sn');\n     atom\n      kn \\<sharp> (j, k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m,\n                   n, sm, sm', sn, sn');\n     atom\n      j \\<sharp> (k', l, s1, s2, s, k1, k2, k, x, y, x', y', sl, sl', m, n,\n                  sm, sm', sn, sn')\\<rbrakk>\n    \\<Longrightarrow> {HaddP (SUCC k1) (Var m) (Var km),\n                       HaddP (SUCC k1) (Var n) (Var kn),\n                       Var sl EQ HPair (Var sm) (Var sn),\n                       Var sl' EQ Q_HPair (Var sm') (Var sn'),\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s2,\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s2,\n                       Var n IN Var j, Var m IN Var j, OrdP (Var j),\n                       HPair (Var j) (HPair (Var sl) (Var sl')) IN s2,\n                       LstSeqP s2 k2 (HPair y y'), Var j IN SUCC k2,\n                       HaddP (SUCC k1) (Var j) (Var l),\n                       HaddP (SUCC k1) (SUCC k2) (SUCC (SUCC (Var k'))),\n                       HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n                       SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s),\n                       SeqHRP x x' s1 k1} \\<turnstile>\n                      HPair (Var km) (HPair (Var sm) (Var sm')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      HPair (Var kn) (HPair (Var sn) (Var sn')) IN\n                      Eats (Var s)\n                       (HPair (SUCC (SUCC (Var k')))\n                         (HPair (HPair x y) (Q_HPair x' y'))) AND\n                      Var sl EQ HPair (Var sm) (Var sn) AND\n                      Var sl' EQ Q_HPair (Var sm') (Var sn')", "apply (blast del: Disj_EH  intro: OrdP_Trans Hyp\n          intro!: Mem_Eats_I1 SeqAppendP_Mem2 [THEN cut4] HaddP_imp_OrdP [THEN cut1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {HaddP k1 k2 (Var k'), OrdP k1, OrdP k2,\n   SeqAppendP s1 (SUCC k1) s2 (SUCC k2) (Var s), SeqHRP x x' s1 k1,\n   SeqHRP y y' s2 k2} \\<turnstile>\n  All2 l (SUCC (SUCC (Var k')))\n   (SyntaxN.Ex sl\n     (SyntaxN.Ex sl'\n       (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n        Eats (Var s)\n         (HPair (SUCC (SUCC (Var k')))\n           (HPair (HPair x y) (Q_HPair x' y'))) AND\n        (OrdP (Var sl) AND WRP (Var sl) (Var sl') OR\n         SyntaxN.Ex m\n          (SyntaxN.Ex n\n            (SyntaxN.Ex sm\n              (SyntaxN.Ex sm'\n                (SyntaxN.Ex sn\n                  (SyntaxN.Ex sn'\n                    (Var m IN Var l AND\n                     Var n IN Var l AND\n                     HPair (Var m) (HPair (Var sm) (Var sm')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     HPair (Var n) (HPair (Var sn) (Var sn')) IN\n                     Eats (Var s)\n                      (HPair (SUCC (SUCC (Var k')))\n                        (HPair (HPair x y) (Q_HPair x' y'))) AND\n                     Var sl EQ HPair (Var sm) (Var sn) AND\n                     Var sl' EQ Q_HPair (Var sm') (Var sn')))))))))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {SeqHRP x x' s1 k1, SeqHRP y y' s2 k2} \\<turnstile>\n  SyntaxN.Ex s\n   (SyntaxN.Ex k (SeqHRP (HPair x y) (Q_HPair x' y') (Var s) (Var k)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(*>*)"], ["", "lemma HRP_HPair: \"{HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')", "obtain k1::name and s1::name and k2::name and s2::name and k::name and s::name\n    where \"atom s1 \\<sharp> (x,y,x',y')\"        \"atom k1 \\<sharp> (x,y,x',y',s1)\"\n      \"atom s2 \\<sharp> (x,y,x',y',k1,s1)\"  \"atom k2 \\<sharp> (x,y,x',y',s2,k1,s1)\"\n      \"atom s  \\<sharp> (x,y,x',y',k2,s2,k1,s1)\" \"atom k  \\<sharp> (x,y,x',y',s,k2,s2,k1,s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s1 k1 s2 k2 s k.\n        \\<lbrakk>atom s1 \\<sharp> (x, y, x', y');\n         atom k1 \\<sharp> (x, y, x', y', s1);\n         atom s2 \\<sharp> (x, y, x', y', k1, s1);\n         atom k2 \\<sharp> (x, y, x', y', s2, k1, s1);\n         atom s \\<sharp> (x, y, x', y', k2, s2, k1, s1);\n         atom k \\<sharp> (x, y, x', y', s, k2, s2, k1, s1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s1 \\<sharp> (x, y, x', y')\n  atom k1 \\<sharp> (x, y, x', y', s1)\n  atom s2 \\<sharp> (x, y, x', y', k1, s1)\n  atom k2 \\<sharp> (x, y, x', y', s2, k1, s1)\n  atom s \\<sharp> (x, y, x', y', k2, s2, k1, s1)\n  atom k \\<sharp> (x, y, x', y', s, k2, s2, k1, s1)\n\ngoal (1 subgoal):\n 1. {HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s1 \\<sharp> (x, y, x', y')\n  atom k1 \\<sharp> (x, y, x', y', s1)\n  atom s2 \\<sharp> (x, y, x', y', k1, s1)\n  atom k2 \\<sharp> (x, y, x', y', s2, k1, s1)\n  atom s \\<sharp> (x, y, x', y', k2, s2, k1, s1)\n  atom k \\<sharp> (x, y, x', y', s, k2, s2, k1, s1)\n\ngoal (1 subgoal):\n 1. {HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')", "by (force simp: HRP.simps [of s \"HPair x y\" _ k]\n        HRP.simps [of s1 x _ k1]\n        HRP.simps [of s2 y _ k2]\n        intro: SeqHRP_HPair [THEN cut2])"], ["proof (state)\nthis:\n  {HRP x x', HRP y y'} \\<turnstile> HRP (HPair x y) (Q_HPair x' y')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HRP_HPair_quot: \"{HRP x \\<guillemotleft>x\\<guillemotright>, HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile> HRP (HPair x y) \\<guillemotleft>HPair x y\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {HRP x \\<guillemotleft>x\\<guillemotright>,\n     HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile>\n    HRP (HPair x y) \\<guillemotleft>HPair x y\\<guillemotright>", "using HRP_HPair[of x \"\\<guillemotleft>x\\<guillemotright>\" y \"\\<guillemotleft>y\\<guillemotright>\"]"], ["proof (prove)\nusing this:\n  {HRP x \\<guillemotleft>x\\<guillemotright>,\n   HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile>\n  HRP (HPair x y)\n   (Q_HPair \\<guillemotleft>x\\<guillemotright>\n     \\<guillemotleft>y\\<guillemotright>)\n\ngoal (1 subgoal):\n 1. {HRP x \\<guillemotleft>x\\<guillemotright>,\n     HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile>\n    HRP (HPair x y) \\<guillemotleft>HPair x y\\<guillemotright>", "unfolding HPair_def quot_simps"], ["proof (prove)\nusing this:\n  {HRP x \\<guillemotleft>x\\<guillemotright>,\n   HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile>\n  HRP (Eats (Eats Zero (Eats (Eats Zero y) x)) (Eats (Eats Zero x) x))\n   (Eats\n     (Eats Zero\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats\n                         (Eats Zero\n                           (Eats\n                             (Eats Zero\n                               (Eats\n                                 (Eats Zero\n                                   \\<guillemotleft>x\\<guillemotright>)\n                                 (Eats\n                                   (Eats Zero\n                                     (Eats\n (Eats Zero\n   (Eats\n     (Eats Zero (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>) Zero))\n     (Eats (Eats Zero Zero) Zero)))\n (HTuple (Suc 0))))\n                                   (Eats (Eats Zero (HTuple (Suc 0)))\n                                     (HTuple (Suc 0))))))\n                             (Eats\n                               (Eats Zero\n                                 (Eats\n                                   (Eats Zero\n                                     (Eats\n (Eats Zero\n   (Eats\n     (Eats Zero (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>) Zero))\n     (Eats (Eats Zero Zero) Zero)))\n (HTuple (Suc 0))))\n                                   (Eats (Eats Zero (HTuple (Suc 0)))\n                                     (HTuple (Suc 0)))))\n                               (Eats\n                                 (Eats Zero\n                                   (Eats\n                                     (Eats Zero\n (Eats\n   (Eats Zero (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>) Zero))\n   (Eats (Eats Zero Zero) Zero)))\n                                     (HTuple (Suc 0))))\n                                 (Eats (Eats Zero (HTuple (Suc 0)))\n                                   (HTuple (Suc 0)))))))\n                         (HTuple (Suc 0))))\n                     (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))\n                 (Eats\n                   (Eats Zero\n                     (Eats\n                       (Eats Zero\n                         (Eats\n                           (Eats Zero\n                             (Eats\n                               (Eats Zero\n                                 (Eats\n                                   (Eats Zero\n                                     (Eats\n (Eats Zero\n   (Eats\n     (Eats Zero\n       (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       Zero))\n                   (Eats (Eats Zero Zero) Zero)))\n               (HTuple (Suc 0))))\n           (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0))))))\n     (Eats\n       (Eats Zero\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       Zero))\n                   (Eats (Eats Zero Zero) Zero)))\n               (HTuple (Suc 0))))\n           (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                     Zero))\n                 (Eats (Eats Zero Zero) Zero)))\n             (HTuple (Suc 0))))\n         (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))))\n (HTuple (Suc 0))))\n                                   (Eats (Eats Zero (HTuple (Suc 0)))\n                                     (HTuple (Suc 0)))))\n                               Zero))\n                           (Eats (Eats Zero Zero) Zero)))\n                       (HTuple (Suc 0))))\n                   (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0))))))\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats\n                       (Eats Zero\n                         (Eats\n                           (Eats Zero\n                             (Eats\n                               (Eats Zero\n                                 (Eats\n                                   (Eats Zero\n                                     (Eats\n (Eats Zero\n   (Eats\n     (Eats Zero\n       (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       Zero))\n                   (Eats (Eats Zero Zero) Zero)))\n               (HTuple (Suc 0))))\n           (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0))))))\n     (Eats\n       (Eats Zero\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       Zero))\n                   (Eats (Eats Zero Zero) Zero)))\n               (HTuple (Suc 0))))\n           (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                     Zero))\n                 (Eats (Eats Zero Zero) Zero)))\n             (HTuple (Suc 0))))\n         (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))))\n (HTuple (Suc 0))))\n                                   (Eats (Eats Zero (HTuple (Suc 0)))\n                                     (HTuple (Suc 0)))))\n                               Zero))\n                           (Eats (Eats Zero Zero) Zero)))\n                       (HTuple (Suc 0))))\n                   (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats\n                         (Eats Zero\n                           (Eats\n                             (Eats Zero\n                               (Eats\n                                 (Eats Zero\n                                   (Eats\n                                     (Eats Zero\n (Eats\n   (Eats Zero\n     (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                     Zero))\n                 (Eats (Eats Zero Zero) Zero)))\n             (HTuple (Suc 0))))\n         (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0))))))\n   (Eats\n     (Eats Zero\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                     Zero))\n                 (Eats (Eats Zero Zero) Zero)))\n             (HTuple (Suc 0))))\n         (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))\n     (Eats\n       (Eats Zero\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>) Zero))\n               (Eats (Eats Zero Zero) Zero)))\n           (HTuple (Suc 0))))\n       (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))))\n                                     (HTuple (Suc 0))))\n                                 (Eats (Eats Zero (HTuple (Suc 0)))\n                                   (HTuple (Suc 0)))))\n                             Zero))\n                         (Eats (Eats Zero Zero) Zero)))\n                     (HTuple (Suc 0))))\n                 (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0)))))))\n         (HTuple (Suc 0))))\n     (Eats (Eats Zero (HTuple (Suc 0))) (HTuple (Suc 0))))\n\ngoal (1 subgoal):\n 1. {HRP x \\<guillemotleft>x\\<guillemotright>,\n     HRP y \\<guillemotleft>y\\<guillemotright>} \\<turnstile>\n    HRP (Eats (Eats Zero (Eats (Eats Zero y) x)) (Eats (Eats Zero x) x))\n     (Eats\n       (Eats Zero\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats\n                       (Eats Zero\n                         (Eats\n                           (Eats Zero\n                             (Eats\n                               (Eats Zero\n                                 (Eats\n                                   (Eats Zero\n                                     \\<guillemotleft>x\\<guillemotright>)\n                                   (Eats\n                                     (Eats Zero\n (Eats\n   (Eats Zero\n     (Eats\n       (Eats Zero\n         (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n           \\<guillemotleft>Zero\\<guillemotright>))\n       (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n         \\<guillemotleft>Zero\\<guillemotright>)))\n   (HTuple 1)))\n                                     (Eats (Eats Zero (HTuple 1))\n (HTuple 1)))))\n                               (Eats\n                                 (Eats Zero\n                                   (Eats\n                                     (Eats Zero\n (Eats\n   (Eats Zero\n     (Eats\n       (Eats Zero\n         (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n           \\<guillemotleft>Zero\\<guillemotright>))\n       (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n         \\<guillemotleft>Zero\\<guillemotright>)))\n   (HTuple 1)))\n                                     (Eats (Eats Zero (HTuple 1))\n (HTuple 1))))\n                                 (Eats\n                                   (Eats Zero\n                                     (Eats\n (Eats Zero\n   (Eats\n     (Eats Zero\n       (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n         \\<guillemotleft>Zero\\<guillemotright>))\n     (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n       \\<guillemotleft>Zero\\<guillemotright>)))\n (HTuple 1)))\n                                   (Eats (Eats Zero (HTuple 1))\n                                     (HTuple 1))))))\n                           (HTuple 1)))\n                       (Eats (Eats Zero (HTuple 1)) (HTuple 1))))\n                   (Eats\n                     (Eats Zero\n                       (Eats\n                         (Eats Zero\n                           (Eats\n                             (Eats Zero\n                               (Eats\n                                 (Eats Zero\n                                   (Eats\n                                     (Eats Zero\n (Eats\n   (Eats Zero\n     (Eats\n       (Eats Zero\n         (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                         \\<guillemotleft>Zero\\<guillemotright>))\n                     (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>)))\n                 (HTuple 1)))\n             (Eats (Eats Zero (HTuple 1)) (HTuple 1)))))\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                         \\<guillemotleft>Zero\\<guillemotright>))\n                     (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>)))\n                 (HTuple 1)))\n             (Eats (Eats Zero (HTuple 1)) (HTuple 1))))\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>))\n                   (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                     \\<guillemotleft>Zero\\<guillemotright>)))\n               (HTuple 1)))\n           (Eats (Eats Zero (HTuple 1)) (HTuple 1))))))\n   (HTuple 1)))\n                                     (Eats (Eats Zero (HTuple 1))\n (HTuple 1))))\n                                 \\<guillemotleft>Zero\\<guillemotright>))\n                             (Eats\n                               (Eats Zero\n                                 \\<guillemotleft>Zero\\<guillemotright>)\n                               \\<guillemotleft>Zero\\<guillemotright>)))\n                         (HTuple 1)))\n                     (Eats (Eats Zero (HTuple 1)) (HTuple 1)))))\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats\n                         (Eats Zero\n                           (Eats\n                             (Eats Zero\n                               (Eats\n                                 (Eats Zero\n                                   (Eats\n                                     (Eats Zero\n (Eats\n   (Eats Zero\n     (Eats\n       (Eats Zero\n         (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                         \\<guillemotleft>Zero\\<guillemotright>))\n                     (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>)))\n                 (HTuple 1)))\n             (Eats (Eats Zero (HTuple 1)) (HTuple 1)))))\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats\n                     (Eats Zero\n                       (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                         \\<guillemotleft>Zero\\<guillemotright>))\n                     (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>)))\n                 (HTuple 1)))\n             (Eats (Eats Zero (HTuple 1)) (HTuple 1))))\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>))\n                   (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                     \\<guillemotleft>Zero\\<guillemotright>)))\n               (HTuple 1)))\n           (Eats (Eats Zero (HTuple 1)) (HTuple 1))))))\n   (HTuple 1)))\n                                     (Eats (Eats Zero (HTuple 1))\n (HTuple 1))))\n                                 \\<guillemotleft>Zero\\<guillemotright>))\n                             (Eats\n                               (Eats Zero\n                                 \\<guillemotleft>Zero\\<guillemotright>)\n                               \\<guillemotleft>Zero\\<guillemotright>)))\n                         (HTuple 1)))\n                     (Eats (Eats Zero (HTuple 1)) (HTuple 1))))\n                 (Eats\n                   (Eats Zero\n                     (Eats\n                       (Eats Zero\n                         (Eats\n                           (Eats Zero\n                             (Eats\n                               (Eats Zero\n                                 (Eats\n                                   (Eats Zero\n                                     (Eats\n (Eats Zero\n   (Eats\n     (Eats Zero\n       (Eats (Eats Zero \\<guillemotleft>x\\<guillemotright>)\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>))\n                   (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                     \\<guillemotleft>Zero\\<guillemotright>)))\n               (HTuple 1)))\n           (Eats (Eats Zero (HTuple 1)) (HTuple 1)))))\n     (Eats\n       (Eats Zero\n         (Eats\n           (Eats Zero\n             (Eats\n               (Eats Zero\n                 (Eats\n                   (Eats Zero\n                     (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                       \\<guillemotleft>Zero\\<guillemotright>))\n                   (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                     \\<guillemotleft>Zero\\<guillemotright>)))\n               (HTuple 1)))\n           (Eats (Eats Zero (HTuple 1)) (HTuple 1))))\n       (Eats\n         (Eats Zero\n           (Eats\n             (Eats Zero\n               (Eats\n                 (Eats Zero\n                   (Eats (Eats Zero \\<guillemotleft>y\\<guillemotright>)\n                     \\<guillemotleft>Zero\\<guillemotright>))\n                 (Eats (Eats Zero \\<guillemotleft>Zero\\<guillemotright>)\n                   \\<guillemotleft>Zero\\<guillemotright>)))\n             (HTuple 1)))\n         (Eats (Eats Zero (HTuple 1)) (HTuple 1))))))\n (HTuple 1)))\n                                   (Eats (Eats Zero (HTuple 1))\n                                     (HTuple 1))))\n                               \\<guillemotleft>Zero\\<guillemotright>))\n                           (Eats\n                             (Eats Zero\n                               \\<guillemotleft>Zero\\<guillemotright>)\n                             \\<guillemotleft>Zero\\<guillemotright>)))\n                       (HTuple 1)))\n                   (Eats (Eats Zero (HTuple 1)) (HTuple 1))))))\n           (HTuple 1)))\n       (Eats (Eats Zero (HTuple 1)) (HTuple 1)))", "by auto"], ["", "lemma prove_HRP_coding_tm: fixes t::tm shows \"coding_tm t \\<Longrightarrow> {} \\<turnstile> HRP t \\<guillemotleft>t\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coding_tm t \\<Longrightarrow>\n    {} \\<turnstile> HRP t \\<guillemotleft>t\\<guillemotright>", "by (induct t rule: coding_tm.induct)\n    (auto simp: quot_simps HRP_ORD_OF HRP_HPair_quot[THEN cut2])"], ["", "lemmas prove_HRP = prove_HRP_coding_tm[OF quot_fm_coding]"], ["", "section\\<open>The Function K and Lemma 6.3\\<close>"], ["", "nominal_function KRP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"atom y \\<sharp> (v,x,x') \\<Longrightarrow>\n         KRP v x x' = Ex y (HRP x (Var y) AND SubstFormP v (Var y) x x')\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt KRP_graph_aux\n 2. \\<And>x y. KRP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>y v xa x'.\n           \\<lbrakk>atom y \\<sharp> (v, xa, x'); x = (v, xa, x')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>y v x x' ya va xa x'a.\n       \\<lbrakk>atom y \\<sharp> (v, x, x'); atom ya \\<sharp> (va, xa, x'a);\n        (v, x, x') = (va, xa, x'a)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex y\n                          (HRP x (Var y) AND SubstFormP v (Var y) x x') =\n                         SyntaxN.Ex ya\n                          (HRP xa (Var ya) AND\n                           SubstFormP va (Var ya) xa x'a)", "by (auto simp: eqvt_def KRP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All KRP_dom", "by lexicographic_order"], ["", "lemma KRP_fresh_iff [simp]: \"a \\<sharp> KRP v x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "obtain y::name where \"atom y \\<sharp> (v,x,x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        atom y \\<sharp> (v, x, x') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom y \\<sharp> (v, x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (v, x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> KRP v x x' =\n    (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> KRP v x x' =\n  (a \\<sharp> v \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma KRP_subst [simp]: \"(KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "obtain y::name where \"atom y \\<sharp> (v,x,x',t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        atom y \\<sharp> (v, x, x', t, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom y \\<sharp> (v, x, x', t, i)\n\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (v, x, x', t, i)\n\ngoal (1 subgoal):\n 1. (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')", "by (auto simp: KRP.simps [of y])"], ["proof (state)\nthis:\n  (KRP v x x')(i::=t) = KRP (subst i t v) (subst i t x) (subst i t x')\n\ngoal:\nNo subgoals!", "qed"], ["", "declare KRP.simps [simp del]"], ["", "lemma prove_SubstFormP: \"{} \\<turnstile> SubstFormP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    SubstFormP \\<guillemotleft>Var i\\<guillemotright>\n     \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\n     \\<guillemotleft>A\\<guillemotright>\n     \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>", "using SubstFormP"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  SubstFormP \\<guillemotleft>Var ?i\\<guillemotright>\n   \\<guillemotleft>?t\\<guillemotright> \\<guillemotleft>?A\\<guillemotright>\n   \\<guillemotleft>?A(?i::=?t)\\<guillemotright>\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    SubstFormP \\<guillemotleft>Var i\\<guillemotright>\n     \\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\n     \\<guillemotleft>A\\<guillemotright>\n     \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>", "by blast"], ["", "lemma prove_KRP: \"{} \\<turnstile> KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>A\\<guillemotright> \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    KRP \\<guillemotleft>Var i\\<guillemotright>\n     \\<guillemotleft>A\\<guillemotright>\n     \\<guillemotleft>A(i::=\\<guillemotleft>A\\<guillemotright>)\\<guillemotright>", "by (auto simp: KRP.simps [of y]\n           intro!: Ex_I [where x=\"\\<guillemotleft>\\<guillemotleft>A\\<guillemotright>\\<guillemotright>\"] prove_HRP prove_SubstFormP)"], ["", "lemma KRP_unique: \"{KRP v x y, KRP v x y'} \\<turnstile> y' EQ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "obtain u::name and u'::name where \"atom u \\<sharp> (v,x,y,y')\" \"atom u' \\<sharp> (v,x,y,y',u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u u'.\n        \\<lbrakk>atom u \\<sharp> (v, x, y, y');\n         atom u' \\<sharp> (v, x, y, y', u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom u \\<sharp> (v, x, y, y')\n  atom u' \\<sharp> (v, x, y, y', u)\n\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom u \\<sharp> (v, x, y, y')\n  atom u' \\<sharp> (v, x, y, y', u)\n\ngoal (1 subgoal):\n 1. {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y", "by (auto simp: KRP.simps [of u v x y] KRP.simps [of u' v x y']\n             intro: SubstFormP_cong [THEN Iff_MP2_same]\n                    SubstFormP_unique [THEN cut2] HRP_unique [THEN cut2])"], ["proof (state)\nthis:\n  {KRP v x y, KRP v x y'} \\<turnstile> y' EQ y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma KRP_subst_fm: \"{KRP \\<guillemotleft>Var i\\<guillemotright> \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)} \\<turnstile> Var j EQ \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {KRP \\<guillemotleft>Var i\\<guillemotright>\n      \\<guillemotleft>\\<beta>\\<guillemotright> (Var j)} \\<turnstile>\n    Var j EQ\n    \\<guillemotleft>\\<beta>(i::=\\<guillemotleft>\\<beta>\\<guillemotright>)\\<guillemotright>", "by (metis KRP_unique cut0 prove_KRP)"], ["", "end"]]}