{"file_name": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless/Pf_Predicates.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless", "problem_names": ["lemma\n shows SentP_fresh_iff [simp]: \"a \\<sharp> SentP x \\<longleftrightarrow> a \\<sharp> x\"                  (is ?thesis1)\n   and SentP_sf [iff]:         \"Sigma_fm (SentP x)\"                     (is ?thsf)", "lemma HF_axP_sf [iff]: \"Sigma_fm (HF_axP t)\"", "lemma\n shows Special_axP_fresh_iff [simp]: \"a \\<sharp> Special_axP p \\<longleftrightarrow> a \\<sharp> p\" (is ?thesis1)\n   and Special_axP_sf [iff]:       \"Sigma_fm (Special_axP p)\" (is ?thesis3)", "lemma\n shows Induction_axP_fresh_iff [simp]: \"a \\<sharp> Induction_axP p \\<longleftrightarrow> a \\<sharp> p\" (is ?thesis1)\n   and Induction_axP_sf [iff]: \"Sigma_fm (Induction_axP p)\" (is ?thesis3)", "lemma AxiomP_I:\n  \"{} \\<turnstile> AxiomP \\<guillemotleft>extra_axiom\\<guillemotright>\"\n  \"{} \\<turnstile> SentP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> Equality_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> HF_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> Special_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> Induction_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"", "lemma AxiomP_eqvt [eqvt]: \"(p \\<bullet> AxiomP x) = AxiomP (p \\<bullet> x)\"", "lemma AxiomP_fresh_iff [simp]: \"a \\<sharp> AxiomP x \\<longleftrightarrow> a \\<sharp> x\"", "lemma AxiomP_sf [iff]: \"Sigma_fm (AxiomP t)\"", "lemma ModPonP_eqvt [eqvt]: \"(p \\<bullet> ModPonP x y z) = ModPonP (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z)\"", "lemma ModPonP_fresh_iff [simp]: \"a \\<sharp> ModPonP x y z \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> y \\<and> a \\<sharp> z\"", "lemma ModPonP_sf [iff]: \"Sigma_fm (ModPonP t u v)\"", "lemma ModPonP_subst [simp]:\n  \"(ModPonP t u v)(i::=w) = ModPonP (subst i w t) (subst i w u) (subst i w v)\"", "lemma\n shows ExistsP_fresh_iff [simp]: \"a \\<sharp> ExistsP p q \\<longleftrightarrow> a \\<sharp> p \\<and> a \\<sharp> q\"    (is ?thesis1)\n   and ExistsP_sf [iff]:       \"Sigma_fm (ExistsP p q)\"   (is ?thesis3)", "lemma ExistsP_subst [simp]: \"(ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)\"", "lemma\n shows SubstP_fresh_iff [simp]: \"a \\<sharp> SubstP p q \\<longleftrightarrow> a \\<sharp> p \\<and> a \\<sharp> q\"        (is ?thesis1)\n   and SubstP_sf [iff]: \"Sigma_fm (SubstP p q)\"                           (is ?thesis3)", "lemma SubstP_subst [simp]: \"(SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)\"", "lemma\n  shows PrfP_fresh_iff [simp]: \"a \\<sharp> PrfP s k t \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t\"      (is ?thesis1)\n  and PrfP_imp_OrdP [simp]:    \"{PrfP s k t} \\<turnstile> OrdP k\"         (is ?thord)\n  and PrfP_imp_LstSeqP [simp]: \"{PrfP s k t} \\<turnstile> LstSeqP s k t\"  (is ?thlstseq)\n  and PrfP_sf [iff]:           \"Sigma_fm (PrfP s k t)\"         (is ?thsf)", "lemma PrfP_subst [simp]:\n     \"(PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)\"", "lemma\n shows PfP_fresh_iff [simp]: \"a \\<sharp> PfP y \\<longleftrightarrow> a \\<sharp> y\"           (is ?thesis1)\n   and PfP_sf [iff]: \"Sigma_fm (PfP y)\"                      (is ?thsf)", "lemma PfP_subst [simp]: \"(PfP t)(j::=w) = PfP (subst j w t)\"", "lemma ground_PfP [simp]: \"ground_fm (PfP y) = ground y\""], "translations": [["", "lemma\n shows SentP_fresh_iff [simp]: \"a \\<sharp> SentP x \\<longleftrightarrow> a \\<sharp> x\"                  (is ?thesis1)\n   and SentP_sf [iff]:         \"Sigma_fm (SentP x)\"                     (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> SentP x = a \\<sharp> x &&& Sigma_fm (SentP x)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> SentP x = a \\<sharp> x\n 2. Sigma_fm (SentP x)", "obtain y::name and z::name and w::name  where \"atom y \\<sharp> (z,w,x)\" \"atom z \\<sharp> (w,x)\" \"atom w \\<sharp> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y z w.\n        \\<lbrakk>atom y \\<sharp> (z, w, x); atom z \\<sharp> (w, x);\n         atom w \\<sharp> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom y \\<sharp> (z, w, x)\n  atom z \\<sharp> (w, x)\n  atom w \\<sharp> x\n\ngoal (2 subgoals):\n 1. a \\<sharp> SentP x = a \\<sharp> x\n 2. Sigma_fm (SentP x)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (z, w, x)\n  atom z \\<sharp> (w, x)\n  atom w \\<sharp> x\n\ngoal (1 subgoal):\n 1. a \\<sharp> SentP x = a \\<sharp> x &&& Sigma_fm (SentP x)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> SentP x = a \\<sharp> x\n  Sigma_fm (SentP x)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The predicate \\<open>Equality_axP\\<close>, for the Equality Axioms\\<close>"], ["", "function Equality_axP :: \"tm \\<Rightarrow> fm\"\n  where \"Equality_axP x =\n    x EQ \\<guillemotleft>refl_ax\\<guillemotright> OR x EQ \\<guillemotleft>eq_cong_ax\\<guillemotright> OR x EQ \\<guillemotleft>mem_cong_ax\\<guillemotright> OR x EQ \\<guillemotleft>eats_cong_ax\\<guillemotright>\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x. (\\<And>xa. x = xa \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>x xa.\n       x = xa \\<Longrightarrow>\n       x EQ \\<guillemotleft>refl_ax\\<guillemotright> OR\n       x EQ \\<guillemotleft>eq_cong_ax\\<guillemotright> OR\n       x EQ \\<guillemotleft>mem_cong_ax\\<guillemotright> OR\n       x EQ \\<guillemotleft>eats_cong_ax\\<guillemotright> =\n       xa EQ \\<guillemotleft>refl_ax\\<guillemotright> OR\n       xa EQ \\<guillemotleft>eq_cong_ax\\<guillemotright> OR\n       xa EQ \\<guillemotleft>mem_cong_ax\\<guillemotright> OR\n       xa EQ \\<guillemotleft>eats_cong_ax\\<guillemotright>", "by auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All Equality_axP_dom", "by lexicographic_order"], ["", "subsection \\<open>The predicate \\<open>HF_axP\\<close>, for the HF Axioms\\<close>"], ["", "function HF_axP :: \"tm \\<Rightarrow> fm\"\n  where \"HF_axP x = x EQ \\<guillemotleft>HF1\\<guillemotright> OR x EQ \\<guillemotleft>HF2\\<guillemotright>\""], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x. (\\<And>xa. x = xa \\<Longrightarrow> P) \\<Longrightarrow> P\n 2. \\<And>x xa.\n       x = xa \\<Longrightarrow>\n       x EQ \\<guillemotleft>HF1\\<guillemotright> OR\n       x EQ \\<guillemotleft>HF2\\<guillemotright> =\n       xa EQ \\<guillemotleft>HF1\\<guillemotright> OR\n       xa EQ \\<guillemotleft>HF2\\<guillemotright>", "by auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All HF_axP_dom", "by lexicographic_order"], ["", "lemma HF_axP_sf [iff]: \"Sigma_fm (HF_axP t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HF_axP t)", "by auto"], ["", "subsection \\<open>The specialisation axioms\\<close>"], ["", "subsubsection \\<open>Defining the syntax\\<close>"], ["", "nominal_function Special_axP :: \"tm \\<Rightarrow> fm\" where\n  \"\\<lbrakk>atom v \\<sharp> (p,sx,y,ax,x); atom x \\<sharp> (p,sx,y,ax);\n    atom ax \\<sharp> (p,sx,y); atom y \\<sharp> (p,sx); atom sx \\<sharp> p\\<rbrakk> \\<Longrightarrow>\n  Special_axP p = Ex v (Ex x (Ex ax (Ex y (Ex sx\n                   (FormP (Var x) AND VarP (Var v) AND TermP (Var y) AND\n                    AbstFormP (Var v) Zero (Var x) (Var ax) AND\n                    SubstFormP (Var v) (Var y) (Var x) (Var sx) AND\n                    p EQ Q_Imp (Var sx) (Q_Ex (Var ax)))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt Special_axP_graph_aux\n 2. \\<And>x y. Special_axP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>v p sx y ax xa.\n           \\<lbrakk>atom v \\<sharp> (p, sx, y, ax, xa);\n            atom xa \\<sharp> (p, sx, y, ax); atom ax \\<sharp> (p, sx, y);\n            atom y \\<sharp> (p, sx); atom sx \\<sharp> p; x = p\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>v p sx y ax x va pa sxa ya axa xa.\n       \\<lbrakk>atom v \\<sharp> (p, sx, y, ax, x);\n        atom x \\<sharp> (p, sx, y, ax); atom ax \\<sharp> (p, sx, y);\n        atom y \\<sharp> (p, sx); atom sx \\<sharp> p;\n        atom va \\<sharp> (pa, sxa, ya, axa, xa);\n        atom xa \\<sharp> (pa, sxa, ya, axa);\n        atom axa \\<sharp> (pa, sxa, ya); atom ya \\<sharp> (pa, sxa);\n        atom sxa \\<sharp> pa; p = pa\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex v\n                          (SyntaxN.Ex x\n                            (SyntaxN.Ex ax\n                              (SyntaxN.Ex y\n                                (SyntaxN.Ex sx\n                                  (FormP (Var x) AND\n                                   VarP (Var v) AND\n                                   TermP (Var y) AND\n                                   AbstFormP (Var v) Zero (Var x)\n                                    (Var ax) AND\n                                   SubstFormP (Var v) (Var y) (Var x)\n                                    (Var sx) AND\n                                   p EQ\n                                   Q_Imp (Var sx) (Q_Ex (Var ax))))))) =\n                         SyntaxN.Ex va\n                          (SyntaxN.Ex xa\n                            (SyntaxN.Ex axa\n                              (SyntaxN.Ex ya\n                                (SyntaxN.Ex sxa\n                                  (FormP (Var xa) AND\n                                   VarP (Var va) AND\n                                   TermP (Var ya) AND\n                                   AbstFormP (Var va) Zero (Var xa)\n                                    (Var axa) AND\n                                   SubstFormP (Var va) (Var ya) (Var xa)\n                                    (Var sxa) AND\n                                   pa EQ\n                                   Q_Imp (Var sxa) (Q_Ex (Var axa)))))))", "by (auto simp: eqvt_def Special_axP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All Special_axP_dom", "by lexicographic_order"], ["", "lemma\n shows Special_axP_fresh_iff [simp]: \"a \\<sharp> Special_axP p \\<longleftrightarrow> a \\<sharp> p\" (is ?thesis1)\n   and Special_axP_sf [iff]:       \"Sigma_fm (Special_axP p)\" (is ?thesis3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> Special_axP p = a \\<sharp> p &&& Sigma_fm (Special_axP p)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> Special_axP p = a \\<sharp> p\n 2. Sigma_fm (Special_axP p)", "obtain v::name and x::name and ax::name and y::name and sx::name\n    where \"atom v \\<sharp> (p,sx,y,ax,x)\" \"atom x \\<sharp> (p,sx,y,ax)\"\n          \"atom ax \\<sharp> (p,sx,y)\" \"atom y \\<sharp> (p,sx)\" \"atom sx \\<sharp> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v sx y ax x.\n        \\<lbrakk>atom v \\<sharp> (p, sx, y, ax, x);\n         atom x \\<sharp> (p, sx, y, ax); atom ax \\<sharp> (p, sx, y);\n         atom y \\<sharp> (p, sx); atom sx \\<sharp> p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom v \\<sharp> (p, sx, y, ax, x)\n  atom x \\<sharp> (p, sx, y, ax)\n  atom ax \\<sharp> (p, sx, y)\n  atom y \\<sharp> (p, sx)\n  atom sx \\<sharp> p\n\ngoal (2 subgoals):\n 1. a \\<sharp> Special_axP p = a \\<sharp> p\n 2. Sigma_fm (Special_axP p)", "thus ?thesis1 ?thesis3"], ["proof (prove)\nusing this:\n  atom v \\<sharp> (p, sx, y, ax, x)\n  atom x \\<sharp> (p, sx, y, ax)\n  atom ax \\<sharp> (p, sx, y)\n  atom y \\<sharp> (p, sx)\n  atom sx \\<sharp> p\n\ngoal (1 subgoal):\n 1. a \\<sharp> Special_axP p = a \\<sharp> p &&& Sigma_fm (Special_axP p)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> Special_axP p = a \\<sharp> p\n  Sigma_fm (Special_axP p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The induction axioms\\<close>"], ["", "subsubsection \\<open>Defining the syntax\\<close>"], ["", "nominal_function Induction_axP :: \"tm \\<Rightarrow> fm\" where\n  \"\\<lbrakk>atom ax \\<sharp> (p,v,w,x,x0,xw,xevw,allw,allvw);\n    atom allvw \\<sharp> (p,v,w,x,x0,xw,xevw,allw); atom allw \\<sharp> (p,v,w,x,x0,xw,xevw);\n    atom xevw \\<sharp> (p,v,w,x,x0,xw); atom xw \\<sharp> (p,v,w,x,x0);\n    atom x0 \\<sharp> (p,v,w,x); atom x \\<sharp> (p,v,w);\n    atom w \\<sharp> (p,v); atom v \\<sharp> p\\<rbrakk> \\<Longrightarrow>\n  Induction_axP p = Ex v (Ex w (Ex x (Ex x0 (Ex xw (Ex xevw (Ex allw (Ex allvw (Ex ax\n               ((Var v NEQ Var w) AND VarNonOccFormP (Var w) (Var x) AND\n                SubstFormP (Var v) Zero (Var x) (Var x0) AND\n                SubstFormP (Var v) (Var w) (Var x) (Var xw) AND\n                SubstFormP (Var v) (Q_Eats (Var v) (Var w)) (Var x) (Var xevw) AND\n                AbstFormP (Var w) Zero (Q_Imp (Var x) (Q_Imp (Var xw) (Var xevw))) (Var allw) AND\n                AbstFormP (Var v) Zero (Q_All (Var allw)) (Var allvw) AND\n                AbstFormP (Var v) Zero (Var x) (Var ax) AND\n                p EQ Q_Imp (Var x0) (Q_Imp (Q_All (Var allvw)) (Q_All (Var ax))))))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt Induction_axP_graph_aux\n 2. \\<And>x y. Induction_axP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>ax p v w xa x0 xw xevw allw allvw.\n           \\<lbrakk>atom\n                     ax \\<sharp> (p, v, w, xa, x0, xw, xevw, allw, allvw);\n            atom allvw \\<sharp> (p, v, w, xa, x0, xw, xevw, allw);\n            atom allw \\<sharp> (p, v, w, xa, x0, xw, xevw);\n            atom xevw \\<sharp> (p, v, w, xa, x0, xw);\n            atom xw \\<sharp> (p, v, w, xa, x0);\n            atom x0 \\<sharp> (p, v, w, xa); atom xa \\<sharp> (p, v, w);\n            atom w \\<sharp> (p, v); atom v \\<sharp> p; x = p\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>ax p v w x x0 xw xevw allw allvw axa pa va wa xa x0a xwa xevwa\n       allwa allvwa.\n       \\<lbrakk>atom ax \\<sharp> (p, v, w, x, x0, xw, xevw, allw, allvw);\n        atom allvw \\<sharp> (p, v, w, x, x0, xw, xevw, allw);\n        atom allw \\<sharp> (p, v, w, x, x0, xw, xevw);\n        atom xevw \\<sharp> (p, v, w, x, x0, xw);\n        atom xw \\<sharp> (p, v, w, x, x0); atom x0 \\<sharp> (p, v, w, x);\n        atom x \\<sharp> (p, v, w); atom w \\<sharp> (p, v);\n        atom v \\<sharp> p;\n        atom axa \\<sharp> (pa, va, wa, xa, x0a, xwa, xevwa, allwa, allvwa);\n        atom allvwa \\<sharp> (pa, va, wa, xa, x0a, xwa, xevwa, allwa);\n        atom allwa \\<sharp> (pa, va, wa, xa, x0a, xwa, xevwa);\n        atom xevwa \\<sharp> (pa, va, wa, xa, x0a, xwa);\n        atom xwa \\<sharp> (pa, va, wa, xa, x0a);\n        atom x0a \\<sharp> (pa, va, wa, xa); atom xa \\<sharp> (pa, va, wa);\n        atom wa \\<sharp> (pa, va); atom va \\<sharp> pa; p = pa\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex v\n                          (SyntaxN.Ex w\n                            (SyntaxN.Ex x\n                              (SyntaxN.Ex x0\n                                (SyntaxN.Ex xw\n                                  (SyntaxN.Ex xevw\n                                    (SyntaxN.Ex allw\n(SyntaxN.Ex allvw\n  (SyntaxN.Ex ax\n    (Var v NEQ Var w AND\n     VarNonOccFormP (Var w) (Var x) AND\n     SubstFormP (Var v) Zero (Var x) (Var x0) AND\n     SubstFormP (Var v) (Var w) (Var x) (Var xw) AND\n     SubstFormP (Var v) (Q_Eats (Var v) (Var w)) (Var x) (Var xevw) AND\n     AbstFormP (Var w) Zero (Q_Imp (Var x) (Q_Imp (Var xw) (Var xevw)))\n      (Var allw) AND\n     AbstFormP (Var v) Zero (Q_All (Var allw)) (Var allvw) AND\n     AbstFormP (Var v) Zero (Var x) (Var ax) AND\n     p EQ\n     Q_Imp (Var x0) (Q_Imp (Q_All (Var allvw)) (Q_All (Var ax)))))))))))) =\n                         SyntaxN.Ex va\n                          (SyntaxN.Ex wa\n                            (SyntaxN.Ex xa\n                              (SyntaxN.Ex x0a\n                                (SyntaxN.Ex xwa\n                                  (SyntaxN.Ex xevwa\n                                    (SyntaxN.Ex allwa\n(SyntaxN.Ex allvwa\n  (SyntaxN.Ex axa\n    (Var va NEQ Var wa AND\n     VarNonOccFormP (Var wa) (Var xa) AND\n     SubstFormP (Var va) Zero (Var xa) (Var x0a) AND\n     SubstFormP (Var va) (Var wa) (Var xa) (Var xwa) AND\n     SubstFormP (Var va) (Q_Eats (Var va) (Var wa)) (Var xa) (Var xevwa) AND\n     AbstFormP (Var wa) Zero (Q_Imp (Var xa) (Q_Imp (Var xwa) (Var xevwa)))\n      (Var allwa) AND\n     AbstFormP (Var va) Zero (Q_All (Var allwa)) (Var allvwa) AND\n     AbstFormP (Var va) Zero (Var xa) (Var axa) AND\n     pa EQ\n     Q_Imp (Var x0a) (Q_Imp (Q_All (Var allvwa)) (Q_All (Var axa))))))))))))", "by (auto simp: eqvt_def Induction_axP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All Induction_axP_dom", "by lexicographic_order"], ["", "lemma\n shows Induction_axP_fresh_iff [simp]: \"a \\<sharp> Induction_axP p \\<longleftrightarrow> a \\<sharp> p\" (is ?thesis1)\n   and Induction_axP_sf [iff]: \"Sigma_fm (Induction_axP p)\" (is ?thesis3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> Induction_axP p = a \\<sharp> p &&& Sigma_fm (Induction_axP p)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> Induction_axP p = a \\<sharp> p\n 2. Sigma_fm (Induction_axP p)", "obtain v::name and w::name and x::name and x0::name and xw::name and xevw::name\n                 and allw::name and allvw::name and ax::name\n    where atoms: \"atom ax \\<sharp> (p,v,w,x,x0,xw,xevw,allw,allvw)\"\n                 \"atom allvw \\<sharp> (p,v,w,x,x0,xw,xevw,allw)\" \"atom allw \\<sharp> (p,v,w,x,x0,xw,xevw)\"\n                 \"atom xevw \\<sharp> (p,v,w,x,x0,xw)\" \"atom xw \\<sharp> (p,v,w,x,x0)\" \"atom x0 \\<sharp> (p,v,w,x)\"\n                 \"atom x \\<sharp> (p,v,w)\" \"atom w \\<sharp> (p,v)\" \"atom v \\<sharp> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ax v w x x0 xw xevw allw allvw.\n        \\<lbrakk>atom ax \\<sharp> (p, v, w, x, x0, xw, xevw, allw, allvw);\n         atom allvw \\<sharp> (p, v, w, x, x0, xw, xevw, allw);\n         atom allw \\<sharp> (p, v, w, x, x0, xw, xevw);\n         atom xevw \\<sharp> (p, v, w, x, x0, xw);\n         atom xw \\<sharp> (p, v, w, x, x0); atom x0 \\<sharp> (p, v, w, x);\n         atom x \\<sharp> (p, v, w); atom w \\<sharp> (p, v);\n         atom v \\<sharp> p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom ax \\<sharp> (p, v, w, x, x0, xw, xevw, allw, allvw)\n  atom allvw \\<sharp> (p, v, w, x, x0, xw, xevw, allw)\n  atom allw \\<sharp> (p, v, w, x, x0, xw, xevw)\n  atom xevw \\<sharp> (p, v, w, x, x0, xw)\n  atom xw \\<sharp> (p, v, w, x, x0)\n  atom x0 \\<sharp> (p, v, w, x)\n  atom x \\<sharp> (p, v, w)\n  atom w \\<sharp> (p, v)\n  atom v \\<sharp> p\n\ngoal (2 subgoals):\n 1. a \\<sharp> Induction_axP p = a \\<sharp> p\n 2. Sigma_fm (Induction_axP p)", "thus ?thesis1 ?thesis3"], ["proof (prove)\nusing this:\n  atom ax \\<sharp> (p, v, w, x, x0, xw, xevw, allw, allvw)\n  atom allvw \\<sharp> (p, v, w, x, x0, xw, xevw, allw)\n  atom allw \\<sharp> (p, v, w, x, x0, xw, xevw)\n  atom xevw \\<sharp> (p, v, w, x, x0, xw)\n  atom xw \\<sharp> (p, v, w, x, x0)\n  atom x0 \\<sharp> (p, v, w, x)\n  atom x \\<sharp> (p, v, w)\n  atom w \\<sharp> (p, v)\n  atom v \\<sharp> p\n\ngoal (1 subgoal):\n 1. a \\<sharp> Induction_axP p = a \\<sharp> p &&& Sigma_fm (Induction_axP p)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> Induction_axP p = a \\<sharp> p\n  Sigma_fm (Induction_axP p)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The predicate \\<open>AxiomP\\<close>, for any Axioms\\<close>"], ["", "definition AxiomP :: \"tm \\<Rightarrow> fm\"\n  where \"AxiomP x \\<equiv> x EQ \\<guillemotleft>extra_axiom\\<guillemotright> OR SentP x OR Equality_axP x OR\n                    HF_axP x OR Special_axP x OR Induction_axP x\""], ["", "lemma AxiomP_I:\n  \"{} \\<turnstile> AxiomP \\<guillemotleft>extra_axiom\\<guillemotright>\"\n  \"{} \\<turnstile> SentP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> Equality_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> HF_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> Special_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\"\n  \"{} \\<turnstile> Induction_axP x \\<Longrightarrow> {} \\<turnstile> AxiomP x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<turnstile> AxiomP \\<guillemotleft>extra_axiom\\<guillemotright> &&&\n     ({} \\<turnstile> SentP x \\<Longrightarrow>\n      {} \\<turnstile> AxiomP x) &&&\n     ({} \\<turnstile> Equality_axP x \\<Longrightarrow>\n      {} \\<turnstile> AxiomP x)) &&&\n    ({} \\<turnstile> HF_axP x \\<Longrightarrow>\n     {} \\<turnstile> AxiomP x) &&&\n    ({} \\<turnstile> Special_axP x \\<Longrightarrow>\n     {} \\<turnstile> AxiomP x) &&&\n    ({} \\<turnstile> Induction_axP x \\<Longrightarrow>\n     {} \\<turnstile> AxiomP x)", "unfolding AxiomP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ({} \\<turnstile>\n     \\<guillemotleft>extra_axiom\\<guillemotright> EQ\n     \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     SentP \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     Equality_axP \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     HF_axP \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     Special_axP \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     Induction_axP \\<guillemotleft>extra_axiom\\<guillemotright> &&&\n     ({} \\<turnstile> SentP x \\<Longrightarrow>\n      {} \\<turnstile>\n      x EQ \\<guillemotleft>extra_axiom\\<guillemotright> OR\n      SentP x OR\n      Equality_axP x OR HF_axP x OR Special_axP x OR Induction_axP x) &&&\n     ({} \\<turnstile> Equality_axP x \\<Longrightarrow>\n      {} \\<turnstile>\n      x EQ \\<guillemotleft>extra_axiom\\<guillemotright> OR\n      SentP x OR\n      Equality_axP x OR HF_axP x OR Special_axP x OR Induction_axP x)) &&&\n    ({} \\<turnstile> HF_axP x \\<Longrightarrow>\n     {} \\<turnstile>\n     x EQ \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     SentP x OR\n     Equality_axP x OR HF_axP x OR Special_axP x OR Induction_axP x) &&&\n    ({} \\<turnstile> Special_axP x \\<Longrightarrow>\n     {} \\<turnstile>\n     x EQ \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     SentP x OR\n     Equality_axP x OR HF_axP x OR Special_axP x OR Induction_axP x) &&&\n    ({} \\<turnstile> Induction_axP x \\<Longrightarrow>\n     {} \\<turnstile>\n     x EQ \\<guillemotleft>extra_axiom\\<guillemotright> OR\n     SentP x OR\n     Equality_axP x OR HF_axP x OR Special_axP x OR Induction_axP x)", "by (rule Disj_I1, rule Refl,\n      rule Disj_I2, rule Disj_I1, assumption,\n      rule Disj_I2, rule Disj_I2, rule Disj_I1, assumption,\n      rule Disj_I2, rule Disj_I2, rule Disj_I2, rule Disj_I1, assumption,\n      rule Disj_I2, rule Disj_I2, rule Disj_I2, rule Disj_I2, rule Disj_I1, assumption,\n      rule Disj_I2, rule Disj_I2, rule Disj_I2, rule Disj_I2, rule Disj_I2, assumption)"], ["", "lemma AxiomP_eqvt [eqvt]: \"(p \\<bullet> AxiomP x) = AxiomP (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> AxiomP x = AxiomP (p \\<bullet> x)", "by (simp add: AxiomP_def)"], ["", "lemma AxiomP_fresh_iff [simp]: \"a \\<sharp> AxiomP x \\<longleftrightarrow> a \\<sharp> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> AxiomP x = a \\<sharp> x", "by (auto simp: AxiomP_def)"], ["", "lemma AxiomP_sf [iff]: \"Sigma_fm (AxiomP t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (AxiomP t)", "by (auto simp: AxiomP_def)"], ["", "subsection \\<open>The predicate \\<open>ModPonP\\<close>, for the inference rule Modus Ponens\\<close>"], ["", "definition ModPonP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"ModPonP x y z = (y EQ Q_Imp x z)\""], ["", "lemma ModPonP_eqvt [eqvt]: \"(p \\<bullet> ModPonP x y z) = ModPonP (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> ModPonP x y z =\n    ModPonP (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z)", "by (simp add: ModPonP_def)"], ["", "lemma ModPonP_fresh_iff [simp]: \"a \\<sharp> ModPonP x y z \\<longleftrightarrow> a \\<sharp> x \\<and> a \\<sharp> y \\<and> a \\<sharp> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> ModPonP x y z =\n    (a \\<sharp> x \\<and> a \\<sharp> y \\<and> a \\<sharp> z)", "by (auto simp: ModPonP_def)"], ["", "lemma ModPonP_sf [iff]: \"Sigma_fm (ModPonP t u v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (ModPonP t u v)", "by (auto simp: ModPonP_def)"], ["", "lemma ModPonP_subst [simp]:\n  \"(ModPonP t u v)(i::=w) = ModPonP (subst i w t) (subst i w u) (subst i w v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ModPonP t u v)(i::=w) =\n    ModPonP (subst i w t) (subst i w u) (subst i w v)", "by (auto simp: ModPonP_def)"], ["", "subsection \\<open>The predicate \\<open>ExistsP\\<close>, for the existential rule\\<close>"], ["", "subsubsection \\<open>Definition\\<close>"], ["", "(*  \"\\<turnstile> A IMP B \\<Longrightarrow> atom i \\<sharp> B \\<Longrightarrow>  \\<turnstile> (Ex i A) IMP B\" *)"], ["", "nominal_function ExistsP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\" where\n  \"\\<lbrakk>atom x \\<sharp> (p,q,v,y,x'); atom x' \\<sharp> (p,q,v,y);\n    atom y \\<sharp> (p,q,v); atom v \\<sharp> (p,q)\\<rbrakk> \\<Longrightarrow>\n  ExistsP p q = Ex x (Ex x' (Ex y (Ex v (FormP (Var x) AND\n                    VarNonOccFormP (Var v) (Var y) AND\n                    AbstFormP (Var v) Zero (Var x) (Var x') AND\n                    p EQ Q_Imp (Var x) (Var y) AND\n                    q EQ Q_Imp (Q_Ex (Var x')) (Var y)))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt ExistsP_graph_aux\n 2. \\<And>x y. ExistsP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>xa p q v y x'.\n           \\<lbrakk>atom xa \\<sharp> (p, q, v, y, x');\n            atom x' \\<sharp> (p, q, v, y); atom y \\<sharp> (p, q, v);\n            atom v \\<sharp> (p, q); x = (p, q)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>x p q v y x' xa pa qa va ya x'a.\n       \\<lbrakk>atom x \\<sharp> (p, q, v, y, x');\n        atom x' \\<sharp> (p, q, v, y); atom y \\<sharp> (p, q, v);\n        atom v \\<sharp> (p, q); atom xa \\<sharp> (pa, qa, va, ya, x'a);\n        atom x'a \\<sharp> (pa, qa, va, ya); atom ya \\<sharp> (pa, qa, va);\n        atom va \\<sharp> (pa, qa); (p, q) = (pa, qa)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex x\n                          (SyntaxN.Ex x'\n                            (SyntaxN.Ex y\n                              (SyntaxN.Ex v\n                                (FormP (Var x) AND\n                                 VarNonOccFormP (Var v) (Var y) AND\n                                 AbstFormP (Var v) Zero (Var x) (Var x') AND\n                                 p EQ Q_Imp (Var x) (Var y) AND\n                                 q EQ Q_Imp (Q_Ex (Var x')) (Var y))))) =\n                         SyntaxN.Ex xa\n                          (SyntaxN.Ex x'a\n                            (SyntaxN.Ex ya\n                              (SyntaxN.Ex va\n                                (FormP (Var xa) AND\n                                 VarNonOccFormP (Var va) (Var ya) AND\n                                 AbstFormP (Var va) Zero (Var xa)\n                                  (Var x'a) AND\n                                 pa EQ Q_Imp (Var xa) (Var ya) AND\n                                 qa EQ Q_Imp (Q_Ex (Var x'a)) (Var ya)))))", "by (auto simp: eqvt_def ExistsP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All ExistsP_dom", "by lexicographic_order"], ["", "lemma\n shows ExistsP_fresh_iff [simp]: \"a \\<sharp> ExistsP p q \\<longleftrightarrow> a \\<sharp> p \\<and> a \\<sharp> q\"    (is ?thesis1)\n   and ExistsP_sf [iff]:       \"Sigma_fm (ExistsP p q)\"   (is ?thesis3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> ExistsP p q = (a \\<sharp> p \\<and> a \\<sharp> q) &&&\n    Sigma_fm (ExistsP p q)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> ExistsP p q = (a \\<sharp> p \\<and> a \\<sharp> q)\n 2. Sigma_fm (ExistsP p q)", "obtain x::name and x'::name and y::name and v::name\n    where \"atom x \\<sharp> (p,q,v,y,x')\"  \"atom x' \\<sharp> (p,q,v,y)\" \"atom y \\<sharp> (p,q,v)\"  \"atom v \\<sharp> (p,q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x v y x'.\n        \\<lbrakk>atom x \\<sharp> (p, q, v, y, x');\n         atom x' \\<sharp> (p, q, v, y); atom y \\<sharp> (p, q, v);\n         atom v \\<sharp> (p, q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom x \\<sharp> (p, q, v, y, x')\n  atom x' \\<sharp> (p, q, v, y)\n  atom y \\<sharp> (p, q, v)\n  atom v \\<sharp> (p, q)\n\ngoal (2 subgoals):\n 1. a \\<sharp> ExistsP p q = (a \\<sharp> p \\<and> a \\<sharp> q)\n 2. Sigma_fm (ExistsP p q)", "thus ?thesis1 ?thesis3"], ["proof (prove)\nusing this:\n  atom x \\<sharp> (p, q, v, y, x')\n  atom x' \\<sharp> (p, q, v, y)\n  atom y \\<sharp> (p, q, v)\n  atom v \\<sharp> (p, q)\n\ngoal (1 subgoal):\n 1. a \\<sharp> ExistsP p q = (a \\<sharp> p \\<and> a \\<sharp> q) &&&\n    Sigma_fm (ExistsP p q)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> ExistsP p q = (a \\<sharp> p \\<and> a \\<sharp> q)\n  Sigma_fm (ExistsP p q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ExistsP_subst [simp]: \"(ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)", "obtain x::name and x'::name and y::name and v::name\n    where \"atom x \\<sharp> (j,w,p,q,v,y,x')\"   \"atom x' \\<sharp> (j,w,p,q,v,y)\"\n          \"atom y \\<sharp> (j,w,p,q,v)\"   \"atom v \\<sharp> (j,w,p,q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x v y x'.\n        \\<lbrakk>atom x \\<sharp> (j, w, p, q, v, y, x');\n         atom x' \\<sharp> (j, w, p, q, v, y);\n         atom y \\<sharp> (j, w, p, q, v);\n         atom v \\<sharp> (j, w, p, q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom x \\<sharp> (j, w, p, q, v, y, x')\n  atom x' \\<sharp> (j, w, p, q, v, y)\n  atom y \\<sharp> (j, w, p, q, v)\n  atom v \\<sharp> (j, w, p, q)\n\ngoal (1 subgoal):\n 1. (ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom x \\<sharp> (j, w, p, q, v, y, x')\n  atom x' \\<sharp> (j, w, p, q, v, y)\n  atom y \\<sharp> (j, w, p, q, v)\n  atom v \\<sharp> (j, w, p, q)\n\ngoal (1 subgoal):\n 1. (ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)", "by (auto simp: ExistsP.simps [of x _ _ x' y v])"], ["proof (state)\nthis:\n  (ExistsP p q)(j::=w) = ExistsP (subst j w p) (subst j w q)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The predicate \\<open>SubstP\\<close>, for the substitution rule\\<close>"], ["", "text\\<open>Although the substitution rule is derivable in the calculus, the derivation is\ntoo complicated to reproduce within the proof function. It is much easier to\nprovide it as an immediate inference step, justifying its soundness in terms\nof other inference rules.\\<close>"], ["", "subsubsection \\<open>Definition\\<close>"], ["", "nominal_function SubstP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\" where\n  \"\\<lbrakk>atom u \\<sharp> (p,q,v); atom v \\<sharp> (p,q)\\<rbrakk> \\<Longrightarrow>\n   SubstP p q = Ex v (Ex u (SubstFormP (Var v) (Var u) p q))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SubstP_graph_aux\n 2. \\<And>x y. SubstP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>u p q v.\n           \\<lbrakk>atom u \\<sharp> (p, q, v); atom v \\<sharp> (p, q);\n            x = (p, q)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>u p q v ua pa qa va.\n       \\<lbrakk>atom u \\<sharp> (p, q, v); atom v \\<sharp> (p, q);\n        atom ua \\<sharp> (pa, qa, va); atom va \\<sharp> (pa, qa);\n        (p, q) = (pa, qa)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex v\n                          (SyntaxN.Ex u (SubstFormP (Var v) (Var u) p q)) =\n                         SyntaxN.Ex va\n                          (SyntaxN.Ex ua\n                            (SubstFormP (Var va) (Var ua) pa qa))", "by (auto simp: eqvt_def SubstP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SubstP_dom", "by lexicographic_order"], ["", "lemma\n shows SubstP_fresh_iff [simp]: \"a \\<sharp> SubstP p q \\<longleftrightarrow> a \\<sharp> p \\<and> a \\<sharp> q\"        (is ?thesis1)\n   and SubstP_sf [iff]: \"Sigma_fm (SubstP p q)\"                           (is ?thesis3)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> SubstP p q = (a \\<sharp> p \\<and> a \\<sharp> q) &&&\n    Sigma_fm (SubstP p q)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> SubstP p q = (a \\<sharp> p \\<and> a \\<sharp> q)\n 2. Sigma_fm (SubstP p q)", "obtain u::name and v::name  where \"atom u \\<sharp> (p,q,v)\" \"atom v \\<sharp> (p,q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>atom u \\<sharp> (p, q, v); atom v \\<sharp> (p, q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom u \\<sharp> (p, q, v)\n  atom v \\<sharp> (p, q)\n\ngoal (2 subgoals):\n 1. a \\<sharp> SubstP p q = (a \\<sharp> p \\<and> a \\<sharp> q)\n 2. Sigma_fm (SubstP p q)", "thus ?thesis1 ?thesis3"], ["proof (prove)\nusing this:\n  atom u \\<sharp> (p, q, v)\n  atom v \\<sharp> (p, q)\n\ngoal (1 subgoal):\n 1. a \\<sharp> SubstP p q = (a \\<sharp> p \\<and> a \\<sharp> q) &&&\n    Sigma_fm (SubstP p q)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> SubstP p q = (a \\<sharp> p \\<and> a \\<sharp> q)\n  Sigma_fm (SubstP p q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstP_subst [simp]: \"(SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)", "obtain u::name and v::name  where \"atom u \\<sharp> (j,w,p,q,v)\"  \"atom v \\<sharp> (j,w,p,q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>atom u \\<sharp> (j, w, p, q, v);\n         atom v \\<sharp> (j, w, p, q)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom u \\<sharp> (j, w, p, q, v)\n  atom v \\<sharp> (j, w, p, q)\n\ngoal (1 subgoal):\n 1. (SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom u \\<sharp> (j, w, p, q, v)\n  atom v \\<sharp> (j, w, p, q)\n\ngoal (1 subgoal):\n 1. (SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)", "by (simp add: SubstP.simps [of u _ _ v])"], ["proof (state)\nthis:\n  (SubstP p q)(j::=w) = SubstP (subst j w p) (subst j w q)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The predicate \\<open>PrfP\\<close>\\<close>"], ["", "(*Prf(s,k,t) \\<equiv> LstSeq(s,k,t) \\<and> (\\<forall>n\\<in>k)[Sent (s n) \\<or> (\\<exists>m,l\\<in>n)[ModPon (s m) (s l) (s n)]]*)"], ["", "nominal_function PrfP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,sl,m,n,sm,sn); atom sl \\<sharp> (s,m,n,sm,sn);\n          atom m \\<sharp> (s,n,sm,sn); atom n \\<sharp> (s,k,sm,sn);\n          atom sm \\<sharp> (s,sn); atom sn \\<sharp> (s)\\<rbrakk> \\<Longrightarrow>\n    PrfP s k t =\n      LstSeqP s k t AND\n      All2 n (SUCC k) (Ex sn (HPair (Var n) (Var sn) IN s AND (AxiomP (Var sn) OR\n                Ex m (Ex l (Ex sm (Ex sl (Var m IN Var n AND Var l IN Var n AND\n                       HPair (Var m) (Var sm) IN s AND HPair (Var l) (Var sl) IN s AND\n                       (ModPonP (Var sm) (Var sl) (Var sn) OR\n                        ExistsP (Var sm) (Var sn) OR\n                        SubstP (Var sm) (Var sn)))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt PrfP_graph_aux\n 2. \\<And>x y. PrfP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s sl m n sm sn k t.\n           \\<lbrakk>atom l \\<sharp> (s, sl, m, n, sm, sn);\n            atom sl \\<sharp> (s, m, n, sm, sn);\n            atom m \\<sharp> (s, n, sm, sn); atom n \\<sharp> (s, k, sm, sn);\n            atom sm \\<sharp> (s, sn); atom sn \\<sharp> s;\n            x = (s, k, t)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s sl m n sm sn k t la sa sla ma na sma sna ka ta.\n       \\<lbrakk>atom l \\<sharp> (s, sl, m, n, sm, sn);\n        atom sl \\<sharp> (s, m, n, sm, sn); atom m \\<sharp> (s, n, sm, sn);\n        atom n \\<sharp> (s, k, sm, sn); atom sm \\<sharp> (s, sn);\n        atom sn \\<sharp> s; atom la \\<sharp> (sa, sla, ma, na, sma, sna);\n        atom sla \\<sharp> (sa, ma, na, sma, sna);\n        atom ma \\<sharp> (sa, na, sma, sna);\n        atom na \\<sharp> (sa, ka, sma, sna); atom sma \\<sharp> (sa, sna);\n        atom sna \\<sharp> sa; (s, k, t) = (sa, ka, ta)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k t AND\n                         All2 n (SUCC k)\n                          (SyntaxN.Ex sn\n                            (HPair (Var n) (Var sn) IN s AND\n                             (AxiomP (Var sn) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex l\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sl\n                                     (Var m IN Var n AND\nVar l IN Var n AND\nHPair (Var m) (Var sm) IN s AND\nHPair (Var l) (Var sl) IN s AND\n(ModPonP (Var sm) (Var sl) (Var sn) OR\n ExistsP (Var sm) (Var sn) OR SubstP (Var sm) (Var sn))))))))) =\n                         LstSeqP sa ka ta AND\n                         All2 na (SUCC ka)\n                          (SyntaxN.Ex sna\n                            (HPair (Var na) (Var sna) IN sa AND\n                             (AxiomP (Var sna) OR\n                              SyntaxN.Ex ma\n                               (SyntaxN.Ex la\n                                 (SyntaxN.Ex sma\n                                   (SyntaxN.Ex sla\n                                     (Var ma IN Var na AND\nVar la IN Var na AND\nHPair (Var ma) (Var sma) IN sa AND\nHPair (Var la) (Var sla) IN sa AND\n(ModPonP (Var sma) (Var sla) (Var sna) OR\n ExistsP (Var sma) (Var sna) OR SubstP (Var sma) (Var sna)))))))))", "by (auto simp: eqvt_def PrfP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All PrfP_dom", "by lexicographic_order"], ["", "lemma\n  shows PrfP_fresh_iff [simp]: \"a \\<sharp> PrfP s k t \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t\"      (is ?thesis1)\n  and PrfP_imp_OrdP [simp]:    \"{PrfP s k t} \\<turnstile> OrdP k\"         (is ?thord)\n  and PrfP_imp_LstSeqP [simp]: \"{PrfP s k t} \\<turnstile> LstSeqP s k t\"  (is ?thlstseq)\n  and PrfP_sf [iff]:           \"Sigma_fm (PrfP s k t)\"         (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> PrfP s k t =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t) &&&\n     {PrfP s k t} \\<turnstile> OrdP k) &&&\n    {PrfP s k t} \\<turnstile> LstSeqP s k t &&& Sigma_fm (PrfP s k t)", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> PrfP s k t =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n 2. {PrfP s k t} \\<turnstile> OrdP k\n 3. {PrfP s k t} \\<turnstile> LstSeqP s k t\n 4. Sigma_fm (PrfP s k t)", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where atoms: \"atom l \\<sharp> (s,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (s,m,n,sm,sn)\"\n        \"atom m \\<sharp> (s,n,sm,sn)\"   \"atom n \\<sharp> (s,k,sm,sn)\"\n        \"atom sm \\<sharp> (s,sn)\"   \"atom sn \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (s, sl, m, n, sm, sn);\n         atom sl \\<sharp> (s, m, n, sm, sn); atom m \\<sharp> (s, n, sm, sn);\n         atom n \\<sharp> (s, k, sm, sn); atom sm \\<sharp> (s, sn);\n         atom sn \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, m, n, sm, sn)\n  atom m \\<sharp> (s, n, sm, sn)\n  atom n \\<sharp> (s, k, sm, sn)\n  atom sm \\<sharp> (s, sn)\n  atom sn \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> PrfP s k t =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n 2. {PrfP s k t} \\<turnstile> OrdP k\n 3. {PrfP s k t} \\<turnstile> LstSeqP s k t\n 4. Sigma_fm (PrfP s k t)", "thus ?thesis1 ?thord ?thlstseq ?thsf"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, m, n, sm, sn)\n  atom m \\<sharp> (s, n, sm, sn)\n  atom n \\<sharp> (s, k, sm, sn)\n  atom sm \\<sharp> (s, sn)\n  atom sn \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> PrfP s k t =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t) &&&\n     {PrfP s k t} \\<turnstile> OrdP k) &&&\n    {PrfP s k t} \\<turnstile> LstSeqP s k t &&& Sigma_fm (PrfP s k t)", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> PrfP s k t =\n  (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n  {PrfP s k t} \\<turnstile> OrdP k\n  {PrfP s k t} \\<turnstile> LstSeqP s k t\n  Sigma_fm (PrfP s k t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PrfP_subst [simp]:\n     \"(PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where \"atom l \\<sharp> (t,u,v,j,w,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (t,u,v,j,w,m,n,sm,sn)\"\n          \"atom m \\<sharp> (t,u,v,j,w,n,sm,sn)\"   \"atom n \\<sharp> (t,u,v,j,w,sm,sn)\"\n          \"atom sm \\<sharp> (t,u,v,j,w,sn)\"   \"atom sn \\<sharp> (t,u,v,j,w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (t, u, v, j, w, sl, m, n, sm, sn);\n         atom sl \\<sharp> (t, u, v, j, w, m, n, sm, sn);\n         atom m \\<sharp> (t, u, v, j, w, n, sm, sn);\n         atom n \\<sharp> (t, u, v, j, w, sm, sn);\n         atom sm \\<sharp> (t, u, v, j, w, sn);\n         atom sn \\<sharp> (t, u, v, j, w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (t, u, v, j, w, sl, m, n, sm, sn)\n  atom sl \\<sharp> (t, u, v, j, w, m, n, sm, sn)\n  atom m \\<sharp> (t, u, v, j, w, n, sm, sn)\n  atom n \\<sharp> (t, u, v, j, w, sm, sn)\n  atom sm \\<sharp> (t, u, v, j, w, sn)\n  atom sn \\<sharp> (t, u, v, j, w)\n\ngoal (1 subgoal):\n 1. (PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (t, u, v, j, w, sl, m, n, sm, sn)\n  atom sl \\<sharp> (t, u, v, j, w, m, n, sm, sn)\n  atom m \\<sharp> (t, u, v, j, w, n, sm, sn)\n  atom n \\<sharp> (t, u, v, j, w, sm, sn)\n  atom sm \\<sharp> (t, u, v, j, w, sn)\n  atom sn \\<sharp> (t, u, v, j, w)\n\ngoal (1 subgoal):\n 1. (PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)", "by (simp add: PrfP.simps [of l _ sl m n sm sn])"], ["proof (state)\nthis:\n  (PrfP t u v)(j::=w) = PrfP (subst j w t) (subst j w u) (subst j w v)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The predicate \\<open>PfP\\<close>\\<close>"], ["", "nominal_function PfP :: \"tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom k \\<sharp> (s,y); atom s \\<sharp> y\\<rbrakk> \\<Longrightarrow>\n    PfP y = Ex k (Ex s (PrfP (Var s) (Var k) y))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt PfP_graph_aux\n 2. \\<And>x y. PfP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>k s y.\n           \\<lbrakk>atom k \\<sharp> (s, y); atom s \\<sharp> y;\n            x = y\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>k s y ka sa ya.\n       \\<lbrakk>atom k \\<sharp> (s, y); atom s \\<sharp> y;\n        atom ka \\<sharp> (sa, ya); atom sa \\<sharp> ya; y = ya\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex k\n                          (SyntaxN.Ex s (PrfP (Var s) (Var k) y)) =\n                         SyntaxN.Ex ka\n                          (SyntaxN.Ex sa (PrfP (Var sa) (Var ka) ya))", "by (auto simp: eqvt_def PfP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All PfP_dom", "by lexicographic_order"], ["", "lemma\n shows PfP_fresh_iff [simp]: \"a \\<sharp> PfP y \\<longleftrightarrow> a \\<sharp> y\"           (is ?thesis1)\n   and PfP_sf [iff]: \"Sigma_fm (PfP y)\"                      (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> PfP y = a \\<sharp> y &&& Sigma_fm (PfP y)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> PfP y = a \\<sharp> y\n 2. Sigma_fm (PfP y)", "obtain k::name and s::name where \"atom k \\<sharp> (s,y)\" \"atom s \\<sharp> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, y); atom s \\<sharp> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, y)\n  atom s \\<sharp> y\n\ngoal (2 subgoals):\n 1. a \\<sharp> PfP y = a \\<sharp> y\n 2. Sigma_fm (PfP y)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, y)\n  atom s \\<sharp> y\n\ngoal (1 subgoal):\n 1. a \\<sharp> PfP y = a \\<sharp> y &&& Sigma_fm (PfP y)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> PfP y = a \\<sharp> y\n  Sigma_fm (PfP y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PfP_subst [simp]: \"(PfP t)(j::=w) = PfP (subst j w t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (PfP t)(j::=w) = PfP (subst j w t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (PfP t)(j::=w) = PfP (subst j w t)", "obtain k::name and s::name where \"atom k \\<sharp> (s,t,j,w)\" \"atom s \\<sharp> (t,j,w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, t, j, w);\n         atom s \\<sharp> (t, j, w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, t, j, w)\n  atom s \\<sharp> (t, j, w)\n\ngoal (1 subgoal):\n 1. (PfP t)(j::=w) = PfP (subst j w t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, t, j, w)\n  atom s \\<sharp> (t, j, w)\n\ngoal (1 subgoal):\n 1. (PfP t)(j::=w) = PfP (subst j w t)", "by (auto simp: PfP.simps [of k s])"], ["proof (state)\nthis:\n  (PfP t)(j::=w) = PfP (subst j w t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ground_PfP [simp]: \"ground_fm (PfP y) = ground y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_fm (PfP y) = ground y", "by (simp add: ground_aux_def ground_fm_aux_def supp_conv_fresh)"], ["", "end"]]}