{"file_name": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless/Sigma.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless", "problem_names": ["lemma ground_aux_simps[simp]:\n  \"ground_aux Zero S = True\"\n  \"ground_aux (Var k) S = (if atom k \\<in> S then True else False)\"\n  \"ground_aux (Eats t u) S = (ground_aux t S \\<and> ground_aux u S)\"", "lemma ground_fm_aux_simps[simp]:\n  \"ground_fm_aux Fls S = True\"\n  \"ground_fm_aux (t IN u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (t EQ u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (A OR B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A AND B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A IFF B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (Neg A) S =  (ground_fm_aux A S)\"\n  \"ground_fm_aux (Ex x A) S = (ground_fm_aux A (S \\<union> {atom x}))\"", "lemma ground_fresh[simp]:\n  \"ground t \\<Longrightarrow> atom i \\<sharp> t\"\n  \"ground_fm A \\<Longrightarrow> atom i \\<sharp> A\"", "lemma Sigma_fm_Iff: \"\\<lbrakk>{} \\<turnstile> B IFF A; supp A \\<subseteq> supp B; Sigma_fm A\\<rbrakk> \\<Longrightarrow> Sigma_fm B\"", "lemma ss_fm_imp_Sigma_fm [intro]: \"ss_fm A \\<Longrightarrow> Sigma_fm A\"", "lemma Sigma_fm_Fls [iff]: \"Sigma_fm Fls\"", "lemma\n  assumes \"Sigma_fm A\" \"Sigma_fm B\"\n    shows Sigma_fm_AND [intro!]: \"Sigma_fm (A AND B)\"\n      and Sigma_fm_OR [intro!]:  \"Sigma_fm (A OR B)\"\n      and Sigma_fm_Ex [intro!]:  \"Sigma_fm (Ex i A)\"", "lemma Sigma_fm_All2_Var:\n  assumes H0: \"Sigma_fm A\" and ij: \"atom j \\<sharp> (i,A)\"\n  shows \"Sigma_fm (All2 i (Var j) A)\"", "lemma Eq_Eats_Iff:\n   assumes [unfolded fresh_Pair, simp]: \"atom i \\<sharp> (z,x,y)\"\n   shows \"{} \\<turnstile> z EQ Eats x y IFF (All2 i z (Var i IN x OR Var i EQ y)) AND x SUBS z AND y IN z\"", "lemma Subset_Zero_sf: \"Sigma_fm (Var i SUBS Zero)\"", "lemma Eq_Zero_sf: \"Sigma_fm (Var i EQ Zero)\"", "lemma theorem_sf: assumes \"{} \\<turnstile> A\" shows \"Sigma_fm A\"", "lemma Var_Subset_sf: \"Sigma_fm (Var i SUBS Var j)\"", "lemma Zero_Mem_sf: \"Sigma_fm (Zero IN Var i)\"", "lemma ijk: \"i + k < Suc (i + j + k)\"", "lemma All2_term_Iff_fresh: \"i\\<noteq>j \\<Longrightarrow> atom j' \\<sharp> (i,j,A) \\<Longrightarrow>\n   {} \\<turnstile> (All2 i (Var j) A) IFF Ex j' (Var j EQ Var j' AND All2 i (Var j') A)\"", "lemma Sigma_fm_All2_fresh:\n  assumes \"Sigma_fm A\" \"i\\<noteq>j\"\n    shows \"Sigma_fm (All2 i (Var j) A)\"", "lemma Subset_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j IN t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i SUBS Eats t u)\"", "lemma Eq_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i EQ Eats t u)\"", "lemma Eats_Mem_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Eats t u IN Var i)\"", "lemma Subset_Mem_sf_lemma:\n  \"size t + size u < n \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)\"", "lemma Subset_sf [iff]: \"Sigma_fm (t SUBS u)\"", "lemma Mem_sf [iff]: \"Sigma_fm (t IN u)\"", "lemma Equality_sf [iff]: \"Sigma_fm (t EQ u)\"", "lemma All2_term_Iff: \"atom i \\<sharp> t \\<Longrightarrow> atom j \\<sharp> (i,t,A) \\<Longrightarrow>\n                  {} \\<turnstile> (All2 i t A) IFF Ex j (Var j EQ t AND All2 i (Var j) A)\"", "lemma Sigma_fm_All2 [intro!]:\n  assumes \"Sigma_fm A\" \"atom i \\<sharp> t\"\n    shows \"Sigma_fm (All2 i t A)\"", "lemma OrdP_sf [iff]: \"Sigma_fm (OrdP t)\"", "lemma OrdNotEqP_sf [iff]: \"Sigma_fm (OrdNotEqP t u)\"", "lemma HDomain_Incl_sf [iff]: \"Sigma_fm (HDomain_Incl t u)\"", "lemma HFun_Sigma_Iff:\n  assumes \"atom z \\<sharp> (r,z',x,y,x',y')\"  \"atom z' \\<sharp> (r,x,y,x',y')\"\n       \"atom x \\<sharp> (r,y,x',y')\"  \"atom y \\<sharp> (r,x',y')\"\n       \"atom x' \\<sharp> (r,y')\"  \"atom y' \\<sharp> (r)\"\n  shows\n  \"{} \\<turnstile>HFun_Sigma r IFF\n         All2 z r (All2 z' r (Ex x (Ex y (Ex x' (Ex y'\n             (Var z EQ HPair (Var x) (Var y) AND Var z' EQ HPair (Var x') (Var y')\n              AND OrdP (Var x) AND OrdP (Var x') AND\n              ((Var x NEQ Var x') OR (Var y EQ Var y'))))))))\"", "lemma HFun_Sigma_sf [iff]: \"Sigma_fm (HFun_Sigma t)\"", "lemma LstSeqP_sf [iff]: \"Sigma_fm (LstSeqP t u v)\""], "translations": [["", "lemma ground_aux_simps[simp]:\n  \"ground_aux Zero S = True\"\n  \"ground_aux (Var k) S = (if atom k \\<in> S then True else False)\"\n  \"ground_aux (Eats t u) S = (ground_aux t S \\<and> ground_aux u S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_aux Zero S = True &&&\n    ground_aux (Var k) S = (if atom k \\<in> S then True else False) &&&\n    ground_aux (Eats t u) S = (ground_aux t S \\<and> ground_aux u S)", "unfolding ground_aux_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp Zero \\<subseteq> S) = True &&&\n    (supp (Var k) \\<subseteq> S) =\n    (if atom k \\<in> S then True else False) &&&\n    (supp (Eats t u) \\<subseteq> S) =\n    (supp t \\<subseteq> S \\<and> supp u \\<subseteq> S)", "by (simp_all add: supp_at_base)"], ["", "lemma ground_fm_aux_simps[simp]:\n  \"ground_fm_aux Fls S = True\"\n  \"ground_fm_aux (t IN u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (t EQ u) S = (ground_aux t S \\<and> ground_aux u S)\"\n  \"ground_fm_aux (A OR B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A AND B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (A IFF B) S = (ground_fm_aux A S \\<and> ground_fm_aux B S)\"\n  \"ground_fm_aux (Neg A) S =  (ground_fm_aux A S)\"\n  \"ground_fm_aux (Ex x A) S = (ground_fm_aux A (S \\<union> {atom x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((ground_fm_aux Fls S = True &&&\n      ground_fm_aux (t IN u) S = (ground_aux t S \\<and> ground_aux u S)) &&&\n     ground_fm_aux (t EQ u) S = (ground_aux t S \\<and> ground_aux u S) &&&\n     ground_fm_aux (A OR B) S =\n     (ground_fm_aux A S \\<and> ground_fm_aux B S)) &&&\n    (ground_fm_aux (A AND B) S =\n     (ground_fm_aux A S \\<and> ground_fm_aux B S) &&&\n     ground_fm_aux (A IFF B) S =\n     (ground_fm_aux A S \\<and> ground_fm_aux B S)) &&&\n    ground_fm_aux (Neg A) S = ground_fm_aux A S &&&\n    ground_fm_aux (SyntaxN.Ex x A) S = ground_fm_aux A (S \\<union> {atom x})", "by (auto simp: ground_fm_aux_def ground_aux_def supp_conv_fresh)"], ["", "lemma ground_fresh[simp]:\n  \"ground t \\<Longrightarrow> atom i \\<sharp> t\"\n  \"ground_fm A \\<Longrightarrow> atom i \\<sharp> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ground t \\<Longrightarrow> atom i \\<sharp> t) &&&\n    (ground_fm A \\<Longrightarrow> atom i \\<sharp> A)", "unfolding ground_aux_def ground_fm_aux_def fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (supp t \\<subseteq> {} \\<Longrightarrow> atom i \\<notin> supp t) &&&\n    (supp A \\<subseteq> {} \\<Longrightarrow> atom i \\<notin> supp A)", "by simp_all"], ["", "section\\<open>Sigma Formulas\\<close>"], ["", "text\\<open>Section 2 material\\<close>"], ["", "subsection \\<open>Strict Sigma Formulas\\<close>"], ["", "text\\<open>Definition 2.1\\<close>"], ["", "inductive ss_fm :: \"fm \\<Rightarrow> bool\" where\n    MemI:  \"ss_fm (Var i IN Var j)\"\n  | DisjI: \"ss_fm A \\<Longrightarrow> ss_fm B \\<Longrightarrow> ss_fm (A OR B)\"\n  | ConjI: \"ss_fm A \\<Longrightarrow> ss_fm B \\<Longrightarrow> ss_fm (A AND B)\"\n  | ExI:   \"ss_fm A \\<Longrightarrow> ss_fm (Ex i A)\"\n  | All2I: \"ss_fm A \\<Longrightarrow> atom j \\<sharp> (i,A) \\<Longrightarrow> ss_fm (All2 i (Var j) A)\""], ["", "equivariance ss_fm"], ["", "nominal_inductive ss_fm\n  avoids ExI: \"i\" | All2I: \"i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>A i.\n         ss_fm A \\<Longrightarrow> {atom i} \\<sharp>* SyntaxN.Ex i A) &&&\n     (\\<And>A i. ss_fm A \\<Longrightarrow> finite {atom i})) &&&\n    (\\<And>A j i.\n        \\<lbrakk>ss_fm A; atom j \\<sharp> (i, A)\\<rbrakk>\n        \\<Longrightarrow> {atom i} \\<sharp>* All2 i (Var j) A) &&&\n    (\\<And>A j i.\n        \\<lbrakk>ss_fm A; atom j \\<sharp> (i, A)\\<rbrakk>\n        \\<Longrightarrow> finite {atom i})", "by (simp_all add: fresh_star_def)"], ["", "declare ss_fm.intros [intro]"], ["", "definition Sigma_fm :: \"fm \\<Rightarrow> bool\"\n  where \"Sigma_fm A \\<longleftrightarrow> (\\<exists>B. ss_fm B \\<and> supp B \\<subseteq> supp A \\<and> {} \\<turnstile> A IFF B)\""], ["", "lemma Sigma_fm_Iff: \"\\<lbrakk>{} \\<turnstile> B IFF A; supp A \\<subseteq> supp B; Sigma_fm A\\<rbrakk> \\<Longrightarrow> Sigma_fm B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{} \\<turnstile> B IFF A; supp A \\<subseteq> supp B;\n     Sigma_fm A\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm B", "by (metis Sigma_fm_def Iff_trans order_trans)"], ["", "lemma ss_fm_imp_Sigma_fm [intro]: \"ss_fm A \\<Longrightarrow> Sigma_fm A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ss_fm A \\<Longrightarrow> Sigma_fm A", "by (metis Iff_refl Sigma_fm_def order_refl)"], ["", "lemma Sigma_fm_Fls [iff]: \"Sigma_fm Fls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm Fls", "by (rule Sigma_fm_Iff [of _ \"Ex i (Var i IN Var i)\"]) auto"], ["", "subsection\\<open>Closure properties for Sigma-formulas\\<close>"], ["", "lemma\n  assumes \"Sigma_fm A\" \"Sigma_fm B\"\n    shows Sigma_fm_AND [intro!]: \"Sigma_fm (A AND B)\"\n      and Sigma_fm_OR [intro!]:  \"Sigma_fm (A OR B)\"\n      and Sigma_fm_Ex [intro!]:  \"Sigma_fm (Ex i A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (A AND B) &&& Sigma_fm (A OR B) &&& Sigma_fm (SyntaxN.Ex i A)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. Sigma_fm (A AND B)\n 2. Sigma_fm (A OR B)\n 3. Sigma_fm (SyntaxN.Ex i A)", "obtain SA SB where \"ss_fm SA\" \"{} \\<turnstile> A IFF SA\" \"supp SA \\<subseteq> supp A\"\n                 and \"ss_fm SB\" \"{} \\<turnstile> B IFF SB\" \"supp SB \\<subseteq> supp B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>SA SB.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A; ss_fm SB; {} \\<turnstile> B IFF SB;\n         supp SB \\<subseteq> supp B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  Sigma_fm A\n  Sigma_fm B\n\ngoal (1 subgoal):\n 1. (\\<And>SA SB.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A; ss_fm SB; {} \\<turnstile> B IFF SB;\n         supp SB \\<subseteq> supp B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: Sigma_fm_def)"], ["proof (state)\nthis:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  ss_fm SB\n  {} \\<turnstile> B IFF SB\n  supp SB \\<subseteq> supp B\n\ngoal (3 subgoals):\n 1. Sigma_fm (A AND B)\n 2. Sigma_fm (A OR B)\n 3. Sigma_fm (SyntaxN.Ex i A)", "then"], ["proof (chain)\npicking this:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  ss_fm SB\n  {} \\<turnstile> B IFF SB\n  supp SB \\<subseteq> supp B", "show \"Sigma_fm (A AND B)\"  \"Sigma_fm (A OR B)\"  \"Sigma_fm (Ex i A)\""], ["proof (prove)\nusing this:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  ss_fm SB\n  {} \\<turnstile> B IFF SB\n  supp SB \\<subseteq> supp B\n\ngoal (1 subgoal):\n 1. Sigma_fm (A AND B) &&& Sigma_fm (A OR B) &&& Sigma_fm (SyntaxN.Ex i A)", "apply (auto simp: Sigma_fm_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ba.\n                         ss_fm Ba \\<and>\n                         supp Ba \\<subseteq> supp A \\<union> supp B \\<and>\n                         {} \\<turnstile> A AND B IFF Ba\n 2. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ba.\n                         ss_fm Ba \\<and>\n                         supp Ba \\<subseteq> supp A \\<union> supp B \\<and>\n                         {} \\<turnstile> A OR B IFF Ba\n 3. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         ss_fm B \\<and>\n                         supp B \\<subseteq> supp A - {atom i} \\<and>\n                         {} \\<turnstile> SyntaxN.Ex i A IFF B", "apply (metis ss_fm.ConjI Conj_cong Un_mono supp_Conj)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Ba.\n                         ss_fm Ba \\<and>\n                         supp Ba \\<subseteq> supp A \\<union> supp B \\<and>\n                         {} \\<turnstile> A OR B IFF Ba\n 2. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         ss_fm B \\<and>\n                         supp B \\<subseteq> supp A - {atom i} \\<and>\n                         {} \\<turnstile> SyntaxN.Ex i A IFF B", "apply (metis ss_fm.DisjI Disj_cong Un_mono fm.supp(3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         ss_fm B \\<and>\n                         supp B \\<subseteq> supp A - {atom i} \\<and>\n                         {} \\<turnstile> SyntaxN.Ex i A IFF B", "apply (rule exI [where x = \"Ex i SA\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA; supp SA \\<subseteq> supp A;\n     ss_fm SB; {} \\<turnstile> B IFF SB; supp SB \\<subseteq> supp B\\<rbrakk>\n    \\<Longrightarrow> ss_fm (SyntaxN.Ex i SA) \\<and>\n                      supp (SyntaxN.Ex i SA)\n                      \\<subseteq> supp A - {atom i} \\<and>\n                      {} \\<turnstile> SyntaxN.Ex i A IFF SyntaxN.Ex i SA", "apply (auto intro!: Ex_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (A AND B)\n  Sigma_fm (A OR B)\n  Sigma_fm (SyntaxN.Ex i A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sigma_fm_All2_Var:\n  assumes H0: \"Sigma_fm A\" and ij: \"atom j \\<sharp> (i,A)\"\n  shows \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "obtain SA where SA: \"ss_fm SA\" \"{} \\<turnstile> A IFF SA\" \"supp SA \\<subseteq> supp A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>SA.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using H0"], ["proof (prove)\nusing this:\n  Sigma_fm A\n\ngoal (1 subgoal):\n 1. (\\<And>SA.\n        \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n         supp SA \\<subseteq> supp A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: Sigma_fm_def)"], ["proof (state)\nthis:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "show \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "apply (rule Sigma_fm_Iff [of _ \"All2 i (Var j) SA\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. {} \\<turnstile> All2 i (Var j) A IFF All2 i (Var j) SA\n 2. supp (All2 i (Var j) SA) \\<subseteq> supp (All2 i (Var j) A)\n 3. Sigma_fm (All2 i (Var j) SA)", "apply (metis All2_cong Refl SA(2) emptyE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. supp (All2 i (Var j) SA) \\<subseteq> supp (All2 i (Var j) A)\n 2. Sigma_fm (All2 i (Var j) SA)", "using SA ij"], ["proof (prove)\nusing this:\n  ss_fm SA\n  {} \\<turnstile> A IFF SA\n  supp SA \\<subseteq> supp A\n  atom j \\<sharp> (i, A)\n\ngoal (2 subgoals):\n 1. supp (All2 i (Var j) SA) \\<subseteq> supp (All2 i (Var j) A)\n 2. Sigma_fm (All2 i (Var j) SA)", "apply (auto simp: supp_conv_fresh subset_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ss_fm SA; {} \\<turnstile> A IFF SA;\n     \\<forall>t. \\<not> t \\<sharp> SA \\<longrightarrow> \\<not> t \\<sharp> A;\n     atom j \\<sharp> (i, A)\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (All2 i (Var j) SA)", "apply (metis ss_fm.All2I fresh_Pair ss_fm_imp_Sigma_fm)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (All2 i (Var j) A)\n\ngoal:\nNo subgoals!", "qed"], ["", "section\\<open>Lemma 2.2: Atomic formulas are Sigma-formulas\\<close>"], ["", "lemma Eq_Eats_Iff:\n   assumes [unfolded fresh_Pair, simp]: \"atom i \\<sharp> (z,x,y)\"\n   shows \"{} \\<turnstile> z EQ Eats x y IFF (All2 i z (Var i IN x OR Var i EQ y)) AND x SUBS z AND y IN z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    z EQ Eats x y IFF\n    All2 i z (Var i IN x OR Var i EQ y) AND x SUBS z AND y IN z", "proof (rule Iff_I, auto)"], ["proof (state)\ngoal (4 subgoals):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\n 2. {z EQ Eats x y} \\<turnstile> x SUBS z\n 3. {z EQ Eats x y} \\<turnstile> y IN z\n 4. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "have \"{Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y", "by (metis Assume Iff_MP_left Iff_sym Mem_cong Refl)"], ["proof (state)\nthis:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y\n\ngoal (4 subgoals):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\n 2. {z EQ Eats x y} \\<turnstile> x SUBS z\n 3. {z EQ Eats x y} \\<turnstile> y IN z\n 4. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "then"], ["proof (chain)\npicking this:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y", "show \"{Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\""], ["proof (prove)\nusing this:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN Eats x y\n\ngoal (1 subgoal):\n 1. {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y", "by (metis Iff_MP_same Mem_Eats_Iff)"], ["proof (state)\nthis:\n  {Var i IN z, z EQ Eats x y} \\<turnstile> Var i IN x OR Var i EQ y\n\ngoal (3 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> x SUBS z\n 2. {z EQ Eats x y} \\<turnstile> y IN z\n 3. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> x SUBS z\n 2. {z EQ Eats x y} \\<turnstile> y IN z\n 3. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "show \"{z EQ Eats x y} \\<turnstile> x SUBS z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z EQ Eats x y} \\<turnstile> x SUBS z", "by (metis Iff_MP2_same Subset_cong [OF Refl Assume] Subset_Eats_I)"], ["proof (state)\nthis:\n  {z EQ Eats x y} \\<turnstile> x SUBS z\n\ngoal (2 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> y IN z\n 2. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. {z EQ Eats x y} \\<turnstile> y IN z\n 2. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "show \"{z EQ Eats x y} \\<turnstile> y IN z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {z EQ Eats x y} \\<turnstile> y IN z", "by (metis Iff_MP2_same Mem_cong Assume Refl Mem_Eats_I2)"], ["proof (state)\nthis:\n  {z EQ Eats x y} \\<turnstile> y IN z\n\ngoal (1 subgoal):\n 1. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "show \"{x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile> z EQ Eats x y\"\n       (is \"{_, _, ?allHyp} \\<turnstile> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n    z EQ Eats x y", "apply (rule Eq_Eats_iff [OF assms, THEN Iff_MP2_same], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Neg (Var i IN z IFF Var i IN x OR Var i EQ y), x SUBS z,\n     y IN z} \\<turnstile>\n    SyntaxN.Ex i (Neg (Var i IN z IMP Var i IN x OR Var i EQ y))", "apply (rule Ex_I [where x=\"Var i\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Neg (Var i IN z IFF Var i IN x OR Var i EQ y), x SUBS z,\n     y IN z} \\<turnstile>\n    (Neg (Var i IN z IMP Var i IN x OR Var i EQ y))(i::=Var i)", "apply (auto intro: Subset_D  Mem_cong [OF Assume Refl, THEN Iff_MP2_same])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {x SUBS z, y IN z, All2 i z (Var i IN x OR Var i EQ y)} \\<turnstile>\n  z EQ Eats x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_Zero_sf: \"Sigma_fm (Var i SUBS Zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "obtain j::name where j: \"atom j \\<sharp> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. atom j \\<sharp> i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "hence Subset_Zero_Iff: \"{} \\<turnstile> Var i SUBS Zero IFF (All2 j (Var i) Fls)\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls", "by (auto intro!: Subset_I [of j] intro: Eq_Zero_D Subset_Zero_D All2_E [THEN rotate2])"], ["proof (state)\nthis:\n  {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "using j"], ["proof (prove)\nusing this:\n  {} \\<turnstile> Var i SUBS Zero IFF All2 j (Var i) Fls\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Zero)", "by (auto simp: supp_conv_fresh\n             intro!: Sigma_fm_Iff [OF Subset_Zero_Iff] Sigma_fm_All2_Var)"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Zero)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_Zero_sf: \"Sigma_fm (Var i EQ Zero)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "obtain j::name where \"atom j \\<sharp> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. atom j \\<sharp> i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Zero)", "by (auto simp add: supp_conv_fresh\n             intro!: Sigma_fm_Iff [OF _ _ Subset_Zero_sf] Subset_Zero_D EQ_imp_SUBS)"], ["proof (state)\nthis:\n  Sigma_fm (Var i EQ Zero)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma theorem_sf: assumes \"{} \\<turnstile> A\" shows \"Sigma_fm A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm A", "obtain i::name and j::name\n    where ij: \"atom i \\<sharp> (j,A)\" \"atom j \\<sharp> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i j.\n        \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom i \\<sharp> (j, A)\n  atom j \\<sharp> A\n\ngoal (1 subgoal):\n 1. Sigma_fm A", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm A", "apply (rule Sigma_fm_Iff [where A = \"Ex i (Ex j (Var i IN Var j))\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. {} \\<turnstile> A IFF SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))\n 2. supp (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))) \\<subseteq> supp A\n 3. Sigma_fm (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j)))", "using ij"], ["proof (prove)\nusing this:\n  atom i \\<sharp> (j, A)\n  atom j \\<sharp> A\n\ngoal (3 subgoals):\n 1. {} \\<turnstile> A IFF SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))\n 2. supp (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))) \\<subseteq> supp A\n 3. Sigma_fm (SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j)))", "apply (auto simp: )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {A} \\<turnstile>\n                      SyntaxN.Ex i (SyntaxN.Ex j (Var i IN Var j))\n 2. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {Var i IN Var j} \\<turnstile> A", "apply (rule Ex_I [where x=Zero], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {A} \\<turnstile> SyntaxN.Ex j (Zero IN Var j)\n 2. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {Var i IN Var j} \\<turnstile> A", "apply (rule Ex_I [where x=\"Eats Zero Zero\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {A} \\<turnstile> (Zero IN Var j)(j::=Eats Zero Zero)\n 2. \\<lbrakk>atom i \\<sharp> (j, A); atom j \\<sharp> A\\<rbrakk>\n    \\<Longrightarrow> {Var i IN Var j} \\<turnstile> A", "apply (auto intro: Mem_Eats_I2 assms thin0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm A\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The subset relation\\<close>"], ["", "lemma Var_Subset_sf: \"Sigma_fm (Var i SUBS Var j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "obtain k::name where k: \"atom (k::name) \\<sharp> (i,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        atom k \\<sharp> (i, j) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "proof (cases \"i=j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i = j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)\n 2. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "case True"], ["proof (state)\nthis:\n  i = j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i = j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)\n 2. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = j\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "using k"], ["proof (prove)\nusing this:\n  i = j\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "by (auto intro!: theorem_sf Subset_I [where i=k])"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Var j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (i, j); i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (Var i SUBS Var j)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "using k"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  atom k \\<sharp> (i, j)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Var j)", "by (auto simp: ss_fm_imp_Sigma_fm Subset.simps [of k] ss_fm.intros)"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Var j)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Var j)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Zero_Mem_sf: \"Sigma_fm (Zero IN Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "obtain j::name where \"atom j \\<sharp> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j. atom j \\<sharp> i \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "hence Zero_Mem_Iff: \"{} \\<turnstile> Zero IN Var i IFF (Ex j (Var j  EQ Zero AND Var j  IN Var i))\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> i\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Zero IN Var i IFF SyntaxN.Ex j (Var j EQ Zero AND Var j IN Var i)", "by (auto intro: Ex_I [where x = Zero]  Mem_cong [OF Assume Refl, THEN Iff_MP_same])"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Zero IN Var i IFF SyntaxN.Ex j (Var j EQ Zero AND Var j IN Var i)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Zero IN Var i)", "by (auto intro!: Sigma_fm_Iff [OF Zero_Mem_Iff] Eq_Zero_sf)"], ["proof (state)\nthis:\n  Sigma_fm (Zero IN Var i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ijk: \"i + k < Suc (i + j + k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + k < Suc (i + j + k)", "by arith"], ["", "lemma All2_term_Iff_fresh: \"i\\<noteq>j \\<Longrightarrow> atom j' \\<sharp> (i,j,A) \\<Longrightarrow>\n   {} \\<turnstile> (All2 i (Var j) A) IFF Ex j' (Var j EQ Var j' AND All2 i (Var j') A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      All2 i (Var j) A IFF\n                      SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {All2 i (Var j) A} \\<turnstile>\n                      SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A)\n 2. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN Var j, Var j EQ Var j'} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j' IMP A))", "apply (rule Ex_I [where x=\"Var j\"], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<noteq> j; atom j' \\<sharp> (i, j, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN Var j, Var j EQ Var j'} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j' IMP A))", "apply (rule Ex_I [where x=\"Var i\"], auto intro: ContraProve Mem_cong [THEN Iff_MP_same])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Sigma_fm_All2_fresh:\n  assumes \"Sigma_fm A\" \"i\\<noteq>j\"\n    shows \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "obtain j'::name where j': \"atom j' \\<sharp> (i,j,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j'.\n        atom j' \\<sharp> (i, j, A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j' \\<sharp> (i, j, A)\n\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "show \"Sigma_fm (All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i (Var j) A)", "apply (rule Sigma_fm_Iff [OF All2_term_Iff_fresh [OF _ j']])"], ["proof (prove)\ngoal (3 subgoals):\n 1. i \\<noteq> j\n 2. supp (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))\n    \\<subseteq> supp (All2 i (Var j) A)\n 3. Sigma_fm (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))", "using assms j'"], ["proof (prove)\nusing this:\n  Sigma_fm A\n  i \\<noteq> j\n  atom j' \\<sharp> (i, j, A)\n\ngoal (3 subgoals):\n 1. i \\<noteq> j\n 2. supp (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))\n    \\<subseteq> supp (All2 i (Var j) A)\n 3. Sigma_fm (SyntaxN.Ex j' (Var j EQ Var j' AND All2 i (Var j') A))", "apply (auto simp: supp_conv_fresh Var_Subset_sf\n                intro!: Sigma_fm_All2_Var Sigma_fm_Iff [OF Extensionality _ _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (All2 i (Var j) A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j IN t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i SUBS Eats t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "obtain k::name where k: \"atom k \\<sharp> (t,u,Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        atom k \\<sharp> (t, u, Var i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "hence \"{} \\<turnstile> Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)\""], ["proof (prove)\nusing this:\n  atom k \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)", "apply (auto simp: fresh_Pair intro: Set_MP Disj_I1 Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> t; atom k \\<sharp> u;\n     atom k \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {All2 k (Var i)\n                        (Var k IN t OR Var k EQ u)} \\<turnstile>\n                      Var i SUBS Eats t u", "apply (force intro!: Subset_I [where i=k] intro: All2_E' [OF Hyp] Mem_Eats_I1 Mem_Eats_I2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  Var i SUBS Eats t u IFF All2 k (Var i) (Var k IN t OR Var k EQ u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i SUBS Eats t u)", "apply (rule Sigma_fm_Iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. supp (All2 k (Var i) (Var k IN t OR Var k EQ u))\n    \\<subseteq> supp (Var i SUBS Eats t u)\n 2. Sigma_fm (All2 k (Var i) (Var k IN t OR Var k EQ u))", "using k"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (t, u, Var i)\n\ngoal (2 subgoals):\n 1. supp (All2 k (Var i) (Var k IN t OR Var k EQ u))\n    \\<subseteq> supp (Var i SUBS Eats t u)\n 2. Sigma_fm (All2 k (Var i) (Var k IN t OR Var k EQ u))", "apply (auto intro!: Sigma_fm_All2_fresh simp add: assms fresh_Pair supp_conv_fresh fresh_at_base)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (Var i SUBS Eats t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eq_Eats_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Var i EQ Eats t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "obtain j::name and k::name and l::name\n    where atoms: \"atom j \\<sharp> (t,u,i)\" \"atom k \\<sharp> (t,u,i,j)\" \"atom l \\<sharp> (t,u,i,j,k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j k l.\n        \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n         atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> (t, u, i)\n  atom k \\<sharp> (t, u, i, j)\n  atom l \\<sharp> (t, u, i, j, k)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "hence \"{} \\<turnstile> Var i EQ Eats t u IFF\n              Ex j (Ex k (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> (t, u, i)\n  atom k \\<sharp> (t, u, i, j)\n  atom l \\<sharp> (t, u, i, j, k)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Var i EQ Eats t u IFF\n    SyntaxN.Ex j\n     (SyntaxN.Ex k\n       (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Eats t u} \\<turnstile>\n                      SyntaxN.Ex j\n                       (SyntaxN.Ex k\n                         (Var i EQ Eats (Var j) (Var k) AND\n                          Var j EQ t AND Var k EQ u))\n 2. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ t, Var k EQ u,\n                       Var i EQ Eats (Var j) (Var k)} \\<turnstile>\n                      Var i EQ Eats t u", "apply (rule Ex_I [where x=t], simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var i EQ Eats t u} \\<turnstile>\n                      SyntaxN.Ex k\n                       (Var i EQ Eats t (Var k) AND t EQ t AND Var k EQ u)\n 2. \\<lbrakk>atom j \\<sharp> (t, u, i); atom k \\<sharp> (t, u, i, j);\n     atom l \\<sharp> (t, u, i, j, k)\\<rbrakk>\n    \\<Longrightarrow> {Var j EQ t, Var k EQ u,\n                       Var i EQ Eats (Var j) (Var k)} \\<turnstile>\n                      Var i EQ Eats t u", "apply (rule Ex_I [where x=u], auto intro: Trans Eats_cong)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Var i EQ Eats t u IFF\n  SyntaxN.Ex j\n   (SyntaxN.Ex k\n     (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  Var i EQ Eats t u IFF\n  SyntaxN.Ex j\n   (SyntaxN.Ex k\n     (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u))\n\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats t u)", "apply (rule Sigma_fm_Iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. supp\n     (SyntaxN.Ex j\n       (SyntaxN.Ex k\n         (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u)))\n    \\<subseteq> supp (Var i EQ Eats t u)\n 2. Sigma_fm\n     (SyntaxN.Ex j\n       (SyntaxN.Ex k\n         (Var i EQ Eats (Var j) (Var k) AND Var j EQ t AND Var k EQ u)))", "apply (auto simp: assms supp_at_base)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Var i EQ Eats (Var j) (Var k))", "apply (rule Sigma_fm_Iff [OF Eq_Eats_Iff [of l]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. atom l \\<sharp> (Var i, Var j, Var k)\n 2. supp\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)\n    \\<subseteq> supp (Var i EQ Eats (Var j) (Var k))\n 3. Sigma_fm\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)", "using atoms"], ["proof (prove)\nusing this:\n  atom j \\<sharp> (t, u, i)\n  atom k \\<sharp> (t, u, i, j)\n  atom l \\<sharp> (t, u, i, j, k)\n\ngoal (3 subgoals):\n 1. atom l \\<sharp> (Var i, Var j, Var k)\n 2. supp\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)\n    \\<subseteq> supp (Var i EQ Eats (Var j) (Var k))\n 3. Sigma_fm\n     (All2 l (Var i) (Var l IN Var j OR Var l EQ Var k) AND\n      Var j SUBS Var i AND Var k IN Var i)", "apply (auto simp: supp_conv_fresh fresh_at_base Var_Subset_sf\n                intro!: Sigma_fm_All2_Var Sigma_fm_Iff [OF Extensionality _ _])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (Var i EQ Eats t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Eats_Mem_sf:\n  assumes \"\\<And>j::name. Sigma_fm (Var j EQ t)\"\n      and \"\\<And>k::name. Sigma_fm (Var k EQ u)\"\n  shows \"Sigma_fm (Eats t u IN Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "obtain j::name where j: \"atom j \\<sharp> (t,u,Var i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        atom j \\<sharp> (t, u, Var i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "hence \"{} \\<turnstile> Eats t u IN Var i IFF\n              Ex j (Var j IN Var i AND Var j EQ Eats t u)\""], ["proof (prove)\nusing this:\n  atom j \\<sharp> (t, u, Var i)\n\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    Eats t u IN Var i IFF\n    SyntaxN.Ex j (Var j IN Var i AND Var j EQ Eats t u)", "apply (auto simp: fresh_Pair intro: Ex_I [where x=\"Eats t u\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom j \\<sharp> t; atom j \\<sharp> u;\n     atom j \\<sharp> i\\<rbrakk>\n    \\<Longrightarrow> {Var j IN Var i, Var j EQ Eats t u} \\<turnstile>\n                      Eats t u IN Var i", "apply (metis Assume Mem_cong [OF _ Refl, THEN Iff_MP_same] rotate2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {} \\<turnstile>\n  Eats t u IN Var i IFF SyntaxN.Ex j (Var j IN Var i AND Var j EQ Eats t u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  {} \\<turnstile>\n  Eats t u IN Var i IFF SyntaxN.Ex j (Var j IN Var i AND Var j EQ Eats t u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (Eats t u IN Var i)", "by (rule Sigma_fm_Iff) (auto simp: assms supp_conv_fresh Eq_Eats_sf)"], ["proof (state)\nthis:\n  Sigma_fm (Eats t u IN Var i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_Mem_sf_lemma:\n  \"size t + size u < n \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size t + size u < n \\<Longrightarrow>\n    Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "proof (induction n arbitrary: t u rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x t u.\n       \\<lbrakk>\\<And>y t u.\n                   \\<lbrakk>y < x; size t + size u < y\\<rbrakk>\n                   \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and>\n                                     Sigma_fm (t IN u);\n        size t + size u < x\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "case (less n t u)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n; size ?t + size ?u < ?y\\<rbrakk>\n  \\<Longrightarrow> Sigma_fm (?t SUBS ?u) \\<and> Sigma_fm (?t IN ?u)\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. \\<And>x t u.\n       \\<lbrakk>\\<And>y t u.\n                   \\<lbrakk>y < x; size t + size u < y\\<rbrakk>\n                   \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and>\n                                     Sigma_fm (t IN u);\n        size t + size u < x\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. Sigma_fm (t SUBS u)\n 2. Sigma_fm (t IN u)", "show \"Sigma_fm (t SUBS u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "proof (cases t rule: tm.exhaust)"], ["proof (state)\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "case Zero"], ["proof (state)\nthis:\n  t = Zero\n\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Zero\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "by (auto intro: theorem_sf)"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "case (Var i)"], ["proof (state)\nthis:\n  t = Var i\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Var i\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "using less.prems"], ["proof (prove)\nusing this:\n  t = Var i\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "apply (cases u rule: tm.exhaust)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>t = Var i; size t + size u < n; u = Zero\\<rbrakk>\n    \\<Longrightarrow> Sigma_fm (t SUBS u)\n 2. \\<And>x2.\n       \\<lbrakk>t = Var i; size t + size u < n; u = Var x2\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u)\n 3. \\<And>x31 x32.\n       \\<lbrakk>t = Var i; size t + size u < n; u = Eats x31 x32\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (t SUBS u)", "apply (auto simp: Subset_Zero_sf Var_Subset_sf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x31 x32.\n       \\<lbrakk>t = Var i; Suc (size x31 + size x32) < n;\n        u = Eats x31 x32\\<rbrakk>\n       \\<Longrightarrow> Sigma_fm (Var i SUBS Eats x31 x32)", "apply (force simp: supp_conv_fresh less.IH\n                       intro: Subset_Eats_sf Sigma_fm_Iff [OF Extensionality])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "case (Eats t1 t2)"], ["proof (state)\nthis:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t SUBS u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "using less.IH [OF _ ijk] less.prems"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n  Suc (size ?t + ?j1 + size ?u) < n \\<Longrightarrow>\n  Sigma_fm (?t SUBS ?u) \\<and> Sigma_fm (?t IN ?u)\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "by (auto intro!: Sigma_fm_Iff [OF Eats_Subset_Iff]  simp: supp_conv_fresh)\n             (metis add.commute)"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "show \"Sigma_fm (t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "proof (cases u rule: tm.exhaust)"], ["proof (state)\ngoal (3 subgoals):\n 1. u = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case Zero"], ["proof (state)\nthis:\n  u = Zero\n\ngoal (3 subgoals):\n 1. u = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (rule Sigma_fm_Iff [where A=Fls]) (auto simp: supp_conv_fresh Zero)"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (2 subgoals):\n 1. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Var i)"], ["proof (state)\nthis:\n  u = Var i\n\ngoal (2 subgoals):\n 1. \\<And>x2. u = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "proof (cases t rule: tm.exhaust)"], ["proof (state)\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case Zero"], ["proof (state)\nthis:\n  t = Zero\n\ngoal (3 subgoals):\n 1. t = Zero \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 3. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Zero\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using \\<open>u = Var i\\<close>"], ["proof (prove)\nusing this:\n  t = Zero\n  u = Var i\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (auto intro: Zero_Mem_sf)"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Var j)"], ["proof (state)\nthis:\n  t = Var j\n\ngoal (2 subgoals):\n 1. \\<And>x2. t = Var x2 \\<Longrightarrow> Sigma_fm (t IN u)\n 2. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Var j\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using \\<open>u = Var i\\<close>"], ["proof (prove)\nusing this:\n  t = Var j\n  u = Var i\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by auto"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Eats t1 t2)"], ["proof (state)\nthis:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. t = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using \\<open>u = Var i\\<close> less.prems"], ["proof (prove)\nusing this:\n  t = Eats t1 t2\n  u = Var i\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (force intro: Eats_Mem_sf Sigma_fm_Iff [OF Extensionality _ _]\n                      simp: supp_conv_fresh less.IH [THEN conjunct1])"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "case (Eats t1 t2)"], ["proof (state)\nthis:\n  u = Eats t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x31 x32. u = Eats x31 x32 \\<Longrightarrow> Sigma_fm (t IN u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  u = Eats t1 t2\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "using  less.prems"], ["proof (prove)\nusing this:\n  u = Eats t1 t2\n  size t + size u < n\n\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (force intro: Sigma_fm_Iff [OF Mem_Eats_Iff] Sigma_fm_Iff [OF Extensionality _ _]\n                    simp: supp_conv_fresh less.IH)"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sigma_fm (t SUBS u) \\<and> Sigma_fm (t IN u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Subset_sf [iff]: \"Sigma_fm (t SUBS u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t SUBS u)", "by (metis Subset_Mem_sf_lemma [OF lessI])"], ["", "lemma Mem_sf [iff]: \"Sigma_fm (t IN u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t IN u)", "by (metis Subset_Mem_sf_lemma [OF lessI])"], ["", "text \\<open>The equality relation is a Sigma-Formula\\<close>"], ["", "lemma Equality_sf [iff]: \"Sigma_fm (t EQ u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t EQ u)", "by (auto intro: Sigma_fm_Iff [OF Extensionality] simp: supp_conv_fresh)"], ["", "section\\<open>Universal Quantification Bounded by an Arbitrary Term\\<close>"], ["", "lemma All2_term_Iff: \"atom i \\<sharp> t \\<Longrightarrow> atom j \\<sharp> (i,t,A) \\<Longrightarrow>\n                  {} \\<turnstile> (All2 i t A) IFF Ex j (Var j EQ t AND All2 i (Var j) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {} \\<turnstile>\n                      All2 i t A IFF\n                      SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {All2 i t A} \\<turnstile>\n                      SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A)\n 2. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN t, Var j EQ t} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j IMP A))", "apply (rule Ex_I [where x=t], auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN t, Var j EQ t} \\<turnstile>\n                      SyntaxN.Ex i (Neg (Var i IN Var j IMP A))", "apply (rule Ex_I [where x=\"Var i\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom i \\<sharp> t; atom j \\<sharp> (i, t, A)\\<rbrakk>\n    \\<Longrightarrow> {Neg A, Var i IN t, Var j EQ t} \\<turnstile>\n                      (Neg (Var i IN Var j IMP A))(i::=Var i)", "apply (auto intro: ContraProve Mem_cong [THEN Iff_MP2_same])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Sigma_fm_All2 [intro!]:\n  assumes \"Sigma_fm A\" \"atom i \\<sharp> t\"\n    shows \"Sigma_fm (All2 i t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "obtain j::name where j: \"atom j \\<sharp> (i,t,A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        atom j \\<sharp> (i, t, A) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom j \\<sharp> (i, t, A)\n\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "show \"Sigma_fm (All2 i t A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (All2 i t A)", "apply (rule Sigma_fm_Iff [OF All2_term_Iff [of i t j]])"], ["proof (prove)\ngoal (4 subgoals):\n 1. atom i \\<sharp> t\n 2. atom j \\<sharp> (i, t, A)\n 3. supp (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))\n    \\<subseteq> supp (All2 i t A)\n 4. Sigma_fm (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))", "using assms j"], ["proof (prove)\nusing this:\n  Sigma_fm A\n  atom i \\<sharp> t\n  atom j \\<sharp> (i, t, A)\n\ngoal (4 subgoals):\n 1. atom i \\<sharp> t\n 2. atom j \\<sharp> (i, t, A)\n 3. supp (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))\n    \\<subseteq> supp (All2 i t A)\n 4. Sigma_fm (SyntaxN.Ex j (Var j EQ t AND All2 i (Var j) A))", "apply (auto simp: supp_conv_fresh Sigma_fm_All2_Var)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Sigma_fm (All2 i t A)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Lemma 2.3: Sequence-related concepts are Sigma-formulas\\<close>"], ["", "lemma OrdP_sf [iff]: \"Sigma_fm (OrdP t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "obtain z::name and y::name where \"atom z \\<sharp> t\" \"atom y \\<sharp> (t, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z y.\n        \\<lbrakk>atom z \\<sharp> t; atom y \\<sharp> (t, z)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom z \\<sharp> t\n  atom y \\<sharp> (t, z)\n\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom z \\<sharp> t\n  atom y \\<sharp> (t, z)\n\ngoal (1 subgoal):\n 1. Sigma_fm (OrdP t)", "by (auto simp: OrdP.simps)"], ["proof (state)\nthis:\n  Sigma_fm (OrdP t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma OrdNotEqP_sf [iff]: \"Sigma_fm (OrdNotEqP t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (t NEQ u)", "by (auto simp: OrdNotEqP.simps)"], ["", "lemma HDomain_Incl_sf [iff]: \"Sigma_fm (HDomain_Incl t u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "obtain x::name and y::name and z::name\n    where \"atom x \\<sharp> (t,u,y,z)\" \"atom y \\<sharp> (t,u,z)\" \"atom z \\<sharp> (t,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y z.\n        \\<lbrakk>atom x \\<sharp> (t, u, y, z); atom y \\<sharp> (t, u, z);\n         atom z \\<sharp> (t, u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom x \\<sharp> (t, u, y, z)\n  atom y \\<sharp> (t, u, z)\n  atom z \\<sharp> (t, u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom x \\<sharp> (t, u, y, z)\n  atom y \\<sharp> (t, u, z)\n  atom z \\<sharp> (t, u)\n\ngoal (1 subgoal):\n 1. Sigma_fm (HDomain_Incl t u)", "by auto"], ["proof (state)\nthis:\n  Sigma_fm (HDomain_Incl t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HFun_Sigma_Iff:\n  assumes \"atom z \\<sharp> (r,z',x,y,x',y')\"  \"atom z' \\<sharp> (r,x,y,x',y')\"\n       \"atom x \\<sharp> (r,y,x',y')\"  \"atom y \\<sharp> (r,x',y')\"\n       \"atom x' \\<sharp> (r,y')\"  \"atom y' \\<sharp> (r)\"\n  shows\n  \"{} \\<turnstile>HFun_Sigma r IFF\n         All2 z r (All2 z' r (Ex x (Ex y (Ex x' (Ex y'\n             (Var z EQ HPair (Var x) (Var y) AND Var z' EQ HPair (Var x') (Var y')\n              AND OrdP (Var x) AND OrdP (Var x') AND\n              ((Var x NEQ Var x') OR (Var y EQ Var y'))))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    HFun_Sigma r IFF\n    All2 z r\n     (All2 z' r\n       (SyntaxN.Ex x\n         (SyntaxN.Ex y\n           (SyntaxN.Ex x'\n             (SyntaxN.Ex y'\n               (Var z EQ HPair (Var x) (Var y) AND\n                Var z' EQ HPair (Var x') (Var y') AND\n                OrdP (Var x) AND\n                OrdP (Var x') AND\n                (Var x NEQ Var x' OR Var y EQ Var y')))))))", "apply (simp add: HFun_Sigma.simps [OF assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<turnstile>\n    All2 z r\n     (All2 z' r\n       (SyntaxN.Ex x\n         (SyntaxN.Ex y\n           (SyntaxN.Ex x'\n             (SyntaxN.Ex y'\n               (Var z EQ HPair (Var x) (Var y) AND\n                Var z' EQ HPair (Var x') (Var y') AND\n                OrdP (Var x) AND\n                OrdP (Var x') AND\n                (Var x EQ Var x' IMP Var y EQ Var y'))))))) IFF\n    All2 z r\n     (All2 z' r\n       (SyntaxN.Ex x\n         (SyntaxN.Ex y\n           (SyntaxN.Ex x'\n             (SyntaxN.Ex y'\n               (Var z EQ HPair (Var x) (Var y) AND\n                Var z' EQ HPair (Var x') (Var y') AND\n                OrdP (Var x) AND\n                OrdP (Var x') AND\n                (Var x NEQ Var x' OR Var y EQ Var y')))))))", "apply (rule Iff_refl All_cong Imp_cong Ex_cong)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. {} \\<turnstile>\n    Var z EQ HPair (Var x) (Var y) AND\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND\n    OrdP (Var x') AND (Var x EQ Var x' IMP Var y EQ Var y') IFF\n    Var z EQ HPair (Var x) (Var y) AND\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND OrdP (Var x') AND (Var x NEQ Var x' OR Var y EQ Var y')\n 2. \\<forall>C\\<in>{}. atom y' \\<sharp> C\n 3. \\<forall>C\\<in>{}. atom x' \\<sharp> C\n 4. \\<forall>C\\<in>{}. atom y \\<sharp> C\n 5. \\<forall>C\\<in>{}. atom x \\<sharp> C\n 6. \\<forall>C\\<in>{}. atom z' \\<sharp> C\n 7. \\<forall>C\\<in>{}. atom z \\<sharp> C", "apply (rule Conj_cong [OF Iff_refl])"], ["proof (prove)\ngoal (7 subgoals):\n 1. {} \\<turnstile>\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND\n    OrdP (Var x') AND (Var x EQ Var x' IMP Var y EQ Var y') IFF\n    Var z' EQ HPair (Var x') (Var y') AND\n    OrdP (Var x) AND OrdP (Var x') AND (Var x NEQ Var x' OR Var y EQ Var y')\n 2. \\<forall>C\\<in>{}. atom y' \\<sharp> C\n 3. \\<forall>C\\<in>{}. atom x' \\<sharp> C\n 4. \\<forall>C\\<in>{}. atom y \\<sharp> C\n 5. \\<forall>C\\<in>{}. atom x \\<sharp> C\n 6. \\<forall>C\\<in>{}. atom z' \\<sharp> C\n 7. \\<forall>C\\<in>{}. atom z \\<sharp> C", "apply (rule Conj_cong [OF Iff_refl], auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. {Neg (Var x EQ Var x'), OrdP (Var x'), OrdP (Var x)} \\<turnstile>\n    Var x NEQ Var x' OR Var y EQ Var y'\n 2. {Var y EQ Var y', OrdP (Var x'), OrdP (Var x)} \\<turnstile>\n    Var x NEQ Var x' OR Var y EQ Var y'\n 3. {Var x EQ Var x', Var x NEQ Var x', OrdP (Var x'),\n     OrdP (Var x)} \\<turnstile>\n    Var y EQ Var y'", "apply (blast intro: Disj_I1 Neg_D OrdNotEqP_I)"], ["proof (prove)\ngoal (2 subgoals):\n 1. {Var y EQ Var y', OrdP (Var x'), OrdP (Var x)} \\<turnstile>\n    Var x NEQ Var x' OR Var y EQ Var y'\n 2. {Var x EQ Var x', Var x NEQ Var x', OrdP (Var x'),\n     OrdP (Var x)} \\<turnstile>\n    Var y EQ Var y'", "apply (blast intro: Disj_I2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {Var x EQ Var x', Var x NEQ Var x', OrdP (Var x'),\n     OrdP (Var x)} \\<turnstile>\n    Var y EQ Var y'", "apply (blast intro: OrdNotEqP_E rotate2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma HFun_Sigma_sf [iff]: \"Sigma_fm (HFun_Sigma t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "obtain x::name and y::name and z::name and x'::name and y'::name and z'::name\n    where atoms: \"atom z \\<sharp> (t,z',x,y,x',y')\"  \"atom z' \\<sharp> (t,x,y,x',y')\"\n       \"atom x \\<sharp> (t,y,x',y')\"  \"atom y \\<sharp> (t,x',y')\"\n       \"atom x' \\<sharp> (t,y')\"  \"atom y' \\<sharp> (t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z z' x y x' y'.\n        \\<lbrakk>atom z \\<sharp> (t, z', x, y, x', y');\n         atom z' \\<sharp> (t, x, y, x', y'); atom x \\<sharp> (t, y, x', y');\n         atom y \\<sharp> (t, x', y'); atom x' \\<sharp> (t, y');\n         atom y' \\<sharp> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom z \\<sharp> (t, z', x, y, x', y')\n  atom z' \\<sharp> (t, x, y, x', y')\n  atom x \\<sharp> (t, y, x', y')\n  atom y \\<sharp> (t, x', y')\n  atom x' \\<sharp> (t, y')\n  atom y' \\<sharp> t\n\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (HFun_Sigma t)", "by (auto intro!: Sigma_fm_Iff [OF HFun_Sigma_Iff [OF atoms]] simp: supp_conv_fresh atoms)"], ["proof (state)\nthis:\n  Sigma_fm (HFun_Sigma t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LstSeqP_sf [iff]: \"Sigma_fm (LstSeqP t u v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (LstSeqP t u v)", "by (auto simp: LstSeqP.simps)"], ["", "end"]]}