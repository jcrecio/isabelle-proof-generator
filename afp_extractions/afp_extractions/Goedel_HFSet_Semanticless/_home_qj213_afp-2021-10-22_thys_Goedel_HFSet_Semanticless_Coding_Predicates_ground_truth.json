{"file_name": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless/Coding_Predicates.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Goedel_HFSet_Semanticless", "problem_names": ["lemma VarP_eqvt [eqvt]: \"(p \\<bullet> VarP x) = VarP (p \\<bullet> x)\"", "lemma VarP_fresh_iff [simp]: \"a \\<sharp> VarP x \\<longleftrightarrow> a \\<sharp> x\"", "lemma VarP_sf [iff]: \"Sigma_fm (VarP x)\"", "lemma VarP_subst [simp]: \"(VarP x)(i::=t) = VarP (subst i t x) \"", "lemma VarP_cong: \"H \\<turnstile> x EQ x' \\<Longrightarrow> H \\<turnstile> VarP x IFF VarP x'\"", "lemma VarP_HPairE [intro!]: \"insert (VarP (HPair x y)) H \\<turnstile> A\"", "lemma\n  shows IndP_fresh_iff [simp]: \"a \\<sharp> IndP x \\<longleftrightarrow> a \\<sharp> x\"                (is ?thesis1)\n    and IndP_sf [iff]:         \"Sigma_fm (IndP x)\"                   (is ?thsf)\n    and OrdP_IndP_Q_Ind:       \"{OrdP x} \\<turnstile> IndP (Q_Ind x)\"           (is ?thqind)", "lemma IndP_Q_Ind: \"H \\<turnstile> OrdP x \\<Longrightarrow> H \\<turnstile> IndP (Q_Ind x)\"", "lemma subst_fm_IndP [simp]: \"(IndP t)(i::=x) = IndP (subst i x t)\"", "lemma IndP_cong: \"H \\<turnstile> x EQ x' \\<Longrightarrow> H \\<turnstile> IndP x IFF IndP x'\"", "lemma\n  shows SeqCTermP_fresh_iff [simp]:\n       \"a \\<sharp> SeqCTermP vf s k t \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t\"  (is ?thesis1)\n    and SeqCTermP_sf [iff]:\n       \"Sigma_fm (SeqCTermP vf s k t)\"   (is ?thsf)\n    and SeqCTermP_imp_LstSeqP:\n      \"{ SeqCTermP vf s k t } \\<turnstile> LstSeqP s k t\"  (is ?thlstseq)\n    and SeqCTermP_imp_OrdP [simp]:\n      \"{ SeqCTermP vf s k t } \\<turnstile> OrdP k\"  (is ?thord)", "lemma SeqCTermP_subst [simp]:\n      \"(SeqCTermP vf s k t)(j::=w) = SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)\"", "lemma SeqConstP_imp_SeqTermP: \"{SeqConstP s k t} \\<turnstile> SeqTermP s k t\"", "lemma\n  shows CTermP_fresh_iff [simp]: \"a \\<sharp> CTermP vf t \\<longleftrightarrow> a \\<sharp> t\"            (is ?thesis1)\n    and CTermP_sf [iff]: \"Sigma_fm (CTermP vf t)\"                      (is ?thsf)", "lemma CTermP_subst [simp]: \"(CTermP vf i)(j::=w) = CTermP vf (subst j w i)\"", "lemma ConstP_imp_TermP: \"{ConstP t} \\<turnstile> TermP t\"", "lemma\n  shows SeqStTermP_fresh_iff [simp]:\n      \"a \\<sharp> SeqStTermP v i t u s k \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n    and SeqStTermP_sf [iff]:\n      \"Sigma_fm (SeqStTermP v i t u s k)\"  (is ?thsf)\n    and SeqStTermP_imp_OrdP:\n      \"{ SeqStTermP v i t u s k } \\<turnstile> OrdP k\"  (is ?thord)\n    and SeqStTermP_imp_VarP:\n      \"{ SeqStTermP v i t u s k } \\<turnstile> VarP v\"  (is ?thvar)\n    and SeqStTermP_imp_LstSeqP:\n      \"{ SeqStTermP v i t u s k } \\<turnstile> LstSeqP s k (HPair t u)\"  (is ?thlstseq)", "lemma SeqStTermP_subst [simp]:\n      \"(SeqStTermP v i t u s k)(j::=w) =\n       SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u) (subst j w s) (subst j w k)\"", "lemma SeqStTermP_cong:\n  \"\\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'; H \\<turnstile> s EQ s'; H \\<turnstile> k EQ k'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SeqStTermP v i t u s k IFF SeqStTermP v i t' u' s' k'\"", "lemma\n  shows AbstTermP_fresh_iff [simp]:\n      \"a \\<sharp> AbstTermP v i t u \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u\"  (is ?thesis1)\n    and AbstTermP_sf [iff]:\n      \"Sigma_fm (AbstTermP v i t u)\"  (is ?thsf)\n    and AbstTermP_imp_VarP:\n       \"{ AbstTermP v i t u } \\<turnstile> VarP v\"   (is ?thvar)\n    and AbstTermP_imp_OrdP:\n       \"{ AbstTermP v i t u } \\<turnstile> OrdP i\"   (is ?thord)", "lemma AbstTermP_subst [simp]:\n      \"(AbstTermP v i t u)(j::=w) = AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\"", "lemma\n  shows SubstTermP_fresh_iff [simp]:\n       \"a \\<sharp> SubstTermP v i t u \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u\"  (is ?thesis1)\n    and SubstTermP_sf [iff]:\n       \"Sigma_fm (SubstTermP v i t u)\"     (is ?thsf)\n    and SubstTermP_imp_TermP:\n       \"{ SubstTermP v i t u } \\<turnstile> TermP i\"  (is ?thterm)\n    and SubstTermP_imp_VarP:\n       \"{ SubstTermP v i t u } \\<turnstile> VarP v\"   (is ?thvar)", "lemma SubstTermP_subst [simp]:\n      \"(SubstTermP v i t u)(j::=w) = SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\"", "lemma SubstTermP_cong:\n  \"\\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> i EQ i'; H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SubstTermP v i t u IFF SubstTermP v' i' t' u'\"", "lemma\n  shows AbstAtomicP_fresh_iff [simp]:\n       \"a \\<sharp> AbstAtomicP v i y y' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y'\"         (is ?thesis1)\n    and AbstAtomicP_sf [iff]: \"Sigma_fm (AbstAtomicP v i y y')\"              (is ?thsf)", "lemma AbstAtomicP_subst [simp]:\n      \"(AbstAtomicP v tm y y')(i::=w) = AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')\"", "lemma\n  shows SeqAbstFormP_fresh_iff [simp]:\n       \"a \\<sharp> SeqAbstFormP v i x x' s k \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n    and SeqAbstFormP_sf [iff]:\n       \"Sigma_fm (SeqAbstFormP v i x x' s k)\"  (is ?thsf)\n    and SeqAbstFormP_imp_OrdP:\n       \"{ SeqAbstFormP v u x x' s k } \\<turnstile> OrdP k\"  (is ?thOrd)\n    and SeqAbstFormP_imp_LstSeqP:\n       \"{ SeqAbstFormP v u x x' s k } \\<turnstile> LstSeqP s k (HPair u (HPair x x'))\"  (is ?thLstSeq)", "lemma SeqAbstFormP_subst [simp]:\n      \"(SeqAbstFormP v u x x' s k)(i::=t) =\n       SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x') (subst i t s) (subst i t k)\"", "lemma\n  shows AbstFormP_fresh_iff [simp]:\n       \"a \\<sharp> AbstFormP v i x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\" (is ?thesis1)\n    and AbstFormP_sf [iff]:\n       \"Sigma_fm (AbstFormP v i x x')\"    (is ?thsf)", "lemma AbstFormP_subst [simp]:\n     \"(AbstFormP v i x x')(j::=t) = AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')\"", "lemma\n  shows SubstAtomicP_fresh_iff [simp]:\n       \"a \\<sharp> SubstAtomicP v tm y y' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y'\"           (is ?thesis1)\n    and SubstAtomicP_sf [iff]: \"Sigma_fm (SubstAtomicP v tm y y')\"               (is ?thsf)", "lemma SubstAtomicP_subst [simp]:\n  \"(SubstAtomicP v tm y y')(i::=w) = SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')\"", "lemma SubstAtomicP_cong:\n  \"\\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> tm EQ tm'; H \\<turnstile> x EQ x'; H \\<turnstile> y EQ y'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SubstAtomicP v tm x y IFF SubstAtomicP v' tm' x' y'\"", "lemma\n  shows SeqSubstFormP_fresh_iff [simp]:\n       \"a \\<sharp> SeqSubstFormP v u x x' s k \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> u \\<and> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n    and SeqSubstFormP_sf [iff]:\n       \"Sigma_fm (SeqSubstFormP v u x x' s k)\"  (is ?thsf)\n    and SeqSubstFormP_imp_OrdP:\n       \"{ SeqSubstFormP v u x x' s k } \\<turnstile> OrdP k\"  (is ?thOrd)\n    and SeqSubstFormP_imp_LstSeqP:\n       \"{ SeqSubstFormP v u x x' s k } \\<turnstile> LstSeqP s k (HPair x x')\"  (is ?thLstSeq)", "lemma SeqSubstFormP_subst [simp]:\n      \"(SeqSubstFormP v u x x' s k)(i::=t) =\n       SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x') (subst i t s) (subst i t k)\"", "lemma SeqSubstFormP_cong:\n  \"\\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'; H \\<turnstile> s EQ s'; H \\<turnstile> k EQ k'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SeqSubstFormP v i t u s k IFF SeqSubstFormP v i t' u' s' k'\"", "lemma\n  shows SubstFormP_fresh_iff [simp]:\n       \"a \\<sharp> SubstFormP v i x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\"  (is ?thesis1)\n    and SubstFormP_sf [iff]:\n       \"Sigma_fm (SubstFormP v i x x')\"  (is ?thsf)", "lemma SubstFormP_subst [simp]:\n     \"(SubstFormP v i x x')(j::=t) = SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')\"", "lemma SubstFormP_cong:\n  \"\\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> i EQ i'; H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SubstFormP v i t u IFF SubstFormP v' i' t' u'\"", "lemma ground_SubstFormP [simp]: \"ground_fm (SubstFormP v y x x') \\<longleftrightarrow> ground v \\<and> ground y \\<and> ground x \\<and> ground x'\"", "lemma\n  shows AtomicP_fresh_iff [simp]: \"a \\<sharp> AtomicP y \\<longleftrightarrow> a \\<sharp> y\"    (is ?thesis1)\n    and AtomicP_sf [iff]: \"Sigma_fm (AtomicP y)\"  (is ?thsf)", "lemma AtompicP_subst [simp]: \"(AtomicP t)(j::=w) = AtomicP (subst j w t)\"", "lemma\n  shows MakeFormP_fresh_iff [simp]:\n       \"a \\<sharp> MakeFormP y u w \\<longleftrightarrow> a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w\"  (is ?thesis1)\n    and MakeFormP_sf [iff]:\n       \"Sigma_fm (MakeFormP y u w)\"  (is ?thsf)", "lemma MakeFormP_subst [simp]: \"(MakeFormP y u t)(j::=w) = MakeFormP (subst j w y) (subst j w u) (subst j w t)\"", "lemma\n  shows SeqFormP_fresh_iff [simp]:\n       \"a \\<sharp> SeqFormP s k t \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t\" (is ?thesis1)\n    and SeqFormP_sf [iff]: \"Sigma_fm (SeqFormP s k t)\"          (is ?thsf)\n    and SeqFormP_imp_OrdP:\n       \"{ SeqFormP s k t } \\<turnstile> OrdP k\"  (is ?thOrd)\n    and SeqFormP_imp_LstSeqP:\n       \"{ SeqFormP s k t } \\<turnstile> LstSeqP s k t\"  (is ?thLstSeq)", "lemma SeqFormP_subst [simp]:\n      \"(SeqFormP s k t)(j::=w) = SeqFormP (subst j w s) (subst j w k) (subst j w t)\"", "lemma\n  shows FormP_fresh_iff [simp]: \"a \\<sharp> FormP y \\<longleftrightarrow> a \\<sharp> y\"              (is ?thesis1)\n    and FormP_sf [iff]:         \"Sigma_fm (FormP y)\"                 (is ?thsf)", "lemma FormP_subst [simp]: \"(FormP y)(j::=w) = FormP (subst j w y)\"", "lemma\n  shows VarNonOccFormP_fresh_iff [simp]: \"a \\<sharp> VarNonOccFormP v y \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> y\" (is ?thesis1)\n    and VarNonOccFormP_sf [iff]: \"Sigma_fm (VarNonOccFormP v y)\" (is ?thsf)"], "translations": [["", "lemma VarP_eqvt [eqvt]: \"(p \\<bullet> VarP x) = VarP (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> VarP x = VarP (p \\<bullet> x)", "by (simp add: VarP_def)"], ["", "lemma VarP_fresh_iff [simp]: \"a \\<sharp> VarP x \\<longleftrightarrow> a \\<sharp> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> VarP x = a \\<sharp> x", "by (simp add: VarP_def)"], ["", "lemma VarP_sf [iff]: \"Sigma_fm (VarP x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sigma_fm (VarP x)", "by (auto simp: VarP_def)"], ["", "lemma VarP_subst [simp]: \"(VarP x)(i::=t) = VarP (subst i t x) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (VarP x)(i::=t) = VarP (subst i t x)", "by (simp add: VarP_def)"], ["", "lemma VarP_cong: \"H \\<turnstile> x EQ x' \\<Longrightarrow> H \\<turnstile> VarP x IFF VarP x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> x EQ x' \\<Longrightarrow>\n    H \\<turnstile> VarP x IFF VarP x'", "by (rule P1_cong) auto"], ["", "lemma VarP_HPairE [intro!]: \"insert (VarP (HPair x y)) H \\<turnstile> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (VarP (HPair x y)) H \\<turnstile> A", "by (auto simp: VarP_def)"], ["", "subsection \\<open>De Bruijn Indexes\\<close>"], ["", "abbreviation Q_Ind :: \"tm \\<Rightarrow> tm\"\n  where \"Q_Ind k \\<equiv> HPair (HTuple 6) k\""], ["", "nominal_function IndP :: \"tm \\<Rightarrow> fm\"\n  where \"atom m \\<sharp> x \\<Longrightarrow>\n    IndP x = Ex m (OrdP (Var m) AND x EQ HPair (HTuple 6) (Var m))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt IndP_graph_aux\n 2. \\<And>x y. IndP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>m xa.\n           \\<lbrakk>atom m \\<sharp> xa; x = xa\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>m x ma xa.\n       \\<lbrakk>atom m \\<sharp> x; atom ma \\<sharp> xa; x = xa\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex m\n                          (OrdP (Var m) AND x EQ Q_Ind (Var m)) =\n                         SyntaxN.Ex ma\n                          (OrdP (Var ma) AND xa EQ Q_Ind (Var ma))", "by (auto simp: eqvt_def IndP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All IndP_dom", "by lexicographic_order"], ["", "lemma\n  shows IndP_fresh_iff [simp]: \"a \\<sharp> IndP x \\<longleftrightarrow> a \\<sharp> x\"                (is ?thesis1)\n    and IndP_sf [iff]:         \"Sigma_fm (IndP x)\"                   (is ?thsf)\n    and OrdP_IndP_Q_Ind:       \"{OrdP x} \\<turnstile> IndP (Q_Ind x)\"           (is ?thqind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> IndP x = a \\<sharp> x &&&\n    Sigma_fm (IndP x) &&& {OrdP x} \\<turnstile> IndP (Q_Ind x)", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. a \\<sharp> IndP x = a \\<sharp> x\n 2. Sigma_fm (IndP x)\n 3. {OrdP x} \\<turnstile> IndP (Q_Ind x)", "obtain m::name where \"atom m \\<sharp> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m. atom m \\<sharp> x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom m \\<sharp> x\n\ngoal (3 subgoals):\n 1. a \\<sharp> IndP x = a \\<sharp> x\n 2. Sigma_fm (IndP x)\n 3. {OrdP x} \\<turnstile> IndP (Q_Ind x)", "thus ?thesis1 ?thsf ?thqind"], ["proof (prove)\nusing this:\n  atom m \\<sharp> x\n\ngoal (1 subgoal):\n 1. a \\<sharp> IndP x = a \\<sharp> x &&&\n    Sigma_fm (IndP x) &&& {OrdP x} \\<turnstile> IndP (Q_Ind x)", "by (auto intro: Ex_I [where x=x])"], ["proof (state)\nthis:\n  a \\<sharp> IndP x = a \\<sharp> x\n  Sigma_fm (IndP x)\n  {OrdP x} \\<turnstile> IndP (Q_Ind x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma IndP_Q_Ind: \"H \\<turnstile> OrdP x \\<Longrightarrow> H \\<turnstile> IndP (Q_Ind x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> OrdP x \\<Longrightarrow> H \\<turnstile> IndP (Q_Ind x)", "by (rule cut1 [OF OrdP_IndP_Q_Ind])"], ["", "lemma subst_fm_IndP [simp]: \"(IndP t)(i::=x) = IndP (subst i x t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (IndP t)(i::=x) = IndP (subst i x t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (IndP t)(i::=x) = IndP (subst i x t)", "obtain m::name where \"atom m \\<sharp> (i,t,x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        atom m \\<sharp> (i, t, x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom m \\<sharp> (i, t, x)\n\ngoal (1 subgoal):\n 1. (IndP t)(i::=x) = IndP (subst i x t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom m \\<sharp> (i, t, x)\n\ngoal (1 subgoal):\n 1. (IndP t)(i::=x) = IndP (subst i x t)", "by (auto simp: IndP.simps [of m])"], ["proof (state)\nthis:\n  (IndP t)(i::=x) = IndP (subst i x t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma IndP_cong: \"H \\<turnstile> x EQ x' \\<Longrightarrow> H \\<turnstile> IndP x IFF IndP x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<turnstile> x EQ x' \\<Longrightarrow>\n    H \\<turnstile> IndP x IFF IndP x'", "by (rule P1_cong) auto"], ["", "subsection \\<open>Various syntactic lemmas\\<close>"], ["", "section \\<open>The predicate \\<open>SeqCTermP\\<close>, for Terms and Constants\\<close>"], ["", "(*SeqCTerm(s,k,t) \\<equiv> LstSeq(s,k,t) \\<and> (\\<forall>l\\<in>k)[s l=0 \\<or> Var(s l)\\<or>(\\<exists>m,n\\<in>l)[s l = \\<langle>Eats, s m, s n\\<rangle>]]*)"], ["", "nominal_function SeqCTermP :: \"bool \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,sl,m,n,sm,sn);  atom sl \\<sharp> (s,m,n,sm,sn);\n          atom m \\<sharp> (s,n,sm,sn);  atom n \\<sharp> (s,sm,sn);\n          atom sm \\<sharp> (s,sn);  atom sn \\<sharp> (s)\\<rbrakk> \\<Longrightarrow>\n    SeqCTermP vf s k t =\n      LstSeqP s k t AND\n      All2 l (SUCC k) (Ex sl (HPair (Var l) (Var sl) IN s AND\n               (Var sl EQ Zero OR (if vf then VarP (Var sl) else Fls) OR\n                Ex m (Ex n (Ex sm (Ex sn (Var m IN Var l AND Var n IN Var l AND\n                       HPair (Var m) (Var sm) IN s AND HPair (Var n) (Var sn) IN s AND\n                       Var sl EQ Q_Eats (Var sm) (Var sn))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqCTermP_graph_aux\n 2. \\<And>x y. SeqCTermP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k sl m n sm sn vf t.\n           \\<lbrakk>atom l \\<sharp> (s, k, sl, m, n, sm, sn);\n            atom sl \\<sharp> (s, m, n, sm, sn);\n            atom m \\<sharp> (s, n, sm, sn); atom n \\<sharp> (s, sm, sn);\n            atom sm \\<sharp> (s, sn); atom sn \\<sharp> s;\n            x = (vf, s, k, t)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k sl m n sm sn vf t la sa ka sla ma na sma sna vfa ta.\n       \\<lbrakk>atom l \\<sharp> (s, k, sl, m, n, sm, sn);\n        atom sl \\<sharp> (s, m, n, sm, sn); atom m \\<sharp> (s, n, sm, sn);\n        atom n \\<sharp> (s, sm, sn); atom sm \\<sharp> (s, sn);\n        atom sn \\<sharp> s;\n        atom la \\<sharp> (sa, ka, sla, ma, na, sma, sna);\n        atom sla \\<sharp> (sa, ma, na, sma, sna);\n        atom ma \\<sharp> (sa, na, sma, sna);\n        atom na \\<sharp> (sa, sma, sna); atom sma \\<sharp> (sa, sna);\n        atom sna \\<sharp> sa; (vf, s, k, t) = (vfa, sa, ka, ta)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k t AND\n                         All2 l (SUCC k)\n                          (SyntaxN.Ex sl\n                            (HPair (Var l) (Var sl) IN s AND\n                             (Var sl EQ Zero OR\n                              (if vf then VarP (Var sl) else Fls) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex n\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sn\n                                     (Var m IN Var l AND\nVar n IN Var l AND\nHPair (Var m) (Var sm) IN s AND\nHPair (Var n) (Var sn) IN s AND Var sl EQ Q_Eats (Var sm) (Var sn)))))))) =\n                         LstSeqP sa ka ta AND\n                         All2 la (SUCC ka)\n                          (SyntaxN.Ex sla\n                            (HPair (Var la) (Var sla) IN sa AND\n                             (Var sla EQ Zero OR\n                              (if vfa then VarP (Var sla) else Fls) OR\n                              SyntaxN.Ex ma\n                               (SyntaxN.Ex na\n                                 (SyntaxN.Ex sma\n                                   (SyntaxN.Ex sna\n                                     (Var ma IN Var la AND\nVar na IN Var la AND\nHPair (Var ma) (Var sma) IN sa AND\nHPair (Var na) (Var sna) IN sa AND\nVar sla EQ Q_Eats (Var sma) (Var sna))))))))", "by (auto simp: eqvt_def SeqCTermP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqCTermP_dom", "by lexicographic_order"], ["", "lemma\n  shows SeqCTermP_fresh_iff [simp]:\n       \"a \\<sharp> SeqCTermP vf s k t \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t\"  (is ?thesis1)\n    and SeqCTermP_sf [iff]:\n       \"Sigma_fm (SeqCTermP vf s k t)\"   (is ?thsf)\n    and SeqCTermP_imp_LstSeqP:\n      \"{ SeqCTermP vf s k t } \\<turnstile> LstSeqP s k t\"  (is ?thlstseq)\n    and SeqCTermP_imp_OrdP [simp]:\n      \"{ SeqCTermP vf s k t } \\<turnstile> OrdP k\"  (is ?thord)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqCTermP vf s k t =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t) &&&\n     Sigma_fm (SeqCTermP vf s k t)) &&&\n    {SeqCTermP vf s k t} \\<turnstile> LstSeqP s k t &&&\n    {SeqCTermP vf s k t} \\<turnstile> OrdP k", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqCTermP vf s k t =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n 2. Sigma_fm (SeqCTermP vf s k t)\n 3. {SeqCTermP vf s k t} \\<turnstile> LstSeqP s k t\n 4. {SeqCTermP vf s k t} \\<turnstile> OrdP k", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where atoms: \"atom l \\<sharp> (s,k,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (s,m,n,sm,sn)\"\n        \"atom m \\<sharp> (s,n,sm,sn)\"   \"atom n \\<sharp> (s,sm,sn)\"\n        \"atom sm \\<sharp> (s,sn)\"   \"atom sn \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (s, k, sl, m, n, sm, sn);\n         atom sl \\<sharp> (s, m, n, sm, sn); atom m \\<sharp> (s, n, sm, sn);\n         atom n \\<sharp> (s, sm, sn); atom sm \\<sharp> (s, sn);\n         atom sn \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, m, n, sm, sn)\n  atom m \\<sharp> (s, n, sm, sn)\n  atom n \\<sharp> (s, sm, sn)\n  atom sm \\<sharp> (s, sn)\n  atom sn \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqCTermP vf s k t =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n 2. Sigma_fm (SeqCTermP vf s k t)\n 3. {SeqCTermP vf s k t} \\<turnstile> LstSeqP s k t\n 4. {SeqCTermP vf s k t} \\<turnstile> OrdP k", "thus ?thesis1 ?thsf ?thlstseq ?thord"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, m, n, sm, sn)\n  atom m \\<sharp> (s, n, sm, sn)\n  atom n \\<sharp> (s, sm, sn)\n  atom sm \\<sharp> (s, sn)\n  atom sn \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqCTermP vf s k t =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t) &&&\n     Sigma_fm (SeqCTermP vf s k t)) &&&\n    {SeqCTermP vf s k t} \\<turnstile> LstSeqP s k t &&&\n    {SeqCTermP vf s k t} \\<turnstile> OrdP k", "by (auto simp: LstSeqP.simps)"], ["proof (state)\nthis:\n  a \\<sharp> SeqCTermP vf s k t =\n  (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n  Sigma_fm (SeqCTermP vf s k t)\n  {SeqCTermP vf s k t} \\<turnstile> LstSeqP s k t\n  {SeqCTermP vf s k t} \\<turnstile> OrdP k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqCTermP_subst [simp]:\n      \"(SeqCTermP vf s k t)(j::=w) = SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqCTermP vf s k t)(j::=w) =\n    SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqCTermP vf s k t)(j::=w) =\n    SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where \"atom l \\<sharp> (j,w,s,k,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (j,w,s,m,n,sm,sn)\"\n          \"atom m \\<sharp> (j,w,s,n,sm,sn)\"   \"atom n \\<sharp> (j,w,s,sm,sn)\"\n          \"atom sm \\<sharp> (j,w,s,sn)\"   \"atom sn \\<sharp> (j,w,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (j, w, s, k, sl, m, n, sm, sn);\n         atom sl \\<sharp> (j, w, s, m, n, sm, sn);\n         atom m \\<sharp> (j, w, s, n, sm, sn);\n         atom n \\<sharp> (j, w, s, sm, sn); atom sm \\<sharp> (j, w, s, sn);\n         atom sn \\<sharp> (j, w, s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (j, w, s, k, sl, m, n, sm, sn)\n  atom sl \\<sharp> (j, w, s, m, n, sm, sn)\n  atom m \\<sharp> (j, w, s, n, sm, sn)\n  atom n \\<sharp> (j, w, s, sm, sn)\n  atom sm \\<sharp> (j, w, s, sn)\n  atom sn \\<sharp> (j, w, s)\n\ngoal (1 subgoal):\n 1. (SeqCTermP vf s k t)(j::=w) =\n    SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (j, w, s, k, sl, m, n, sm, sn)\n  atom sl \\<sharp> (j, w, s, m, n, sm, sn)\n  atom m \\<sharp> (j, w, s, n, sm, sn)\n  atom n \\<sharp> (j, w, s, sm, sn)\n  atom sm \\<sharp> (j, w, s, sn)\n  atom sn \\<sharp> (j, w, s)\n\ngoal (1 subgoal):\n 1. (SeqCTermP vf s k t)(j::=w) =\n    SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)", "by (force simp add: SeqCTermP.simps [of l _ _ sl m n sm sn])"], ["proof (state)\nthis:\n  (SeqCTermP vf s k t)(j::=w) =\n  SeqCTermP vf (subst j w s) (subst j w k) (subst j w t)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare SeqCTermP.simps [simp del]"], ["", "abbreviation SeqTermP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"SeqTermP \\<equiv> SeqCTermP True\""], ["", "abbreviation SeqConstP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"SeqConstP \\<equiv> SeqCTermP False\""], ["", "lemma SeqConstP_imp_SeqTermP: \"{SeqConstP s k t} \\<turnstile> SeqTermP s k t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {SeqConstP s k t} \\<turnstile> SeqTermP s k t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {SeqConstP s k t} \\<turnstile> SeqTermP s k t", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where \"atom l \\<sharp> (s,k,t,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (s,k,t,m,n,sm,sn)\"\n          \"atom m \\<sharp> (s,k,t,n,sm,sn)\"   \"atom n \\<sharp> (s,k,t,sm,sn)\"\n          \"atom sm \\<sharp> (s,k,t,sn)\"   \"atom sn \\<sharp> (s,k,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n         atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n         atom m \\<sharp> (s, k, t, n, sm, sn);\n         atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n         atom sn \\<sharp> (s, k, t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, t, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, k, t, m, n, sm, sn)\n  atom m \\<sharp> (s, k, t, n, sm, sn)\n  atom n \\<sharp> (s, k, t, sm, sn)\n  atom sm \\<sharp> (s, k, t, sn)\n  atom sn \\<sharp> (s, k, t)\n\ngoal (1 subgoal):\n 1. {SeqConstP s k t} \\<turnstile> SeqTermP s k t", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, t, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, k, t, m, n, sm, sn)\n  atom m \\<sharp> (s, k, t, n, sm, sn)\n  atom n \\<sharp> (s, k, t, sm, sn)\n  atom sm \\<sharp> (s, k, t, sn)\n  atom sn \\<sharp> (s, k, t)\n\ngoal (1 subgoal):\n 1. {SeqConstP s k t} \\<turnstile> SeqTermP s k t", "apply (auto simp: SeqCTermP.simps [of l s k sl m n sm sn])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {Neg (SyntaxN.Ex sl\n                             (HPair (Var l) (Var sl) IN s AND\n                              (Var sl EQ Zero OR\n                               VarP (Var sl) OR\n                               SyntaxN.Ex m\n                                (SyntaxN.Ex n\n                                  (SyntaxN.Ex sm\n                                    (SyntaxN.Ex sn\n(Var m IN Var l AND\n Var n IN Var l AND\n HPair (Var m) (Var sm) IN s AND\n HPair (Var n) (Var sn) IN s AND Var sl EQ Q_Eats (Var sm) (Var sn)))))))),\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex l\n                       (Neg (Var l IN SUCC k IMP\n                             SyntaxN.Ex sl\n                              (HPair (Var l) (Var sl) IN s AND\n                               (Var sl EQ Zero OR\n                                Fls OR\n                                SyntaxN.Ex m\n                                 (SyntaxN.Ex n\n                                   (SyntaxN.Ex sm\n                                     (SyntaxN.Ex sn\n (Var m IN Var l AND\n  Var n IN Var l AND\n  HPair (Var m) (Var sm) IN s AND\n  HPair (Var n) (Var sn) IN s AND Var sl EQ Q_Eats (Var sm) (Var sn)))))))))", "apply (rule Ex_I [where x=\"Var l\"], auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {Var sl EQ Zero, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN s AND\n                        (Var sl EQ Zero OR\n                         VarP (Var sl) OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sn\n                                (Var m IN Var l AND\n                                 Var n IN Var l AND\n                                 HPair (Var m) (Var sm) IN s AND\n                                 HPair (Var n) (Var sn) IN s AND\n                                 Var sl EQ Q_Eats (Var sm) (Var sn)))))))\n 2. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN s AND\n                        (Var sl EQ Zero OR\n                         VarP (Var sl) OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sn\n                                (Var m IN Var l AND\n                                 Var n IN Var l AND\n                                 HPair (Var m) (Var sm) IN s AND\n                                 HPair (Var n) (Var sn) IN s AND\n                                 Var sl EQ Q_Eats (Var sm) (Var sn)))))))", "apply (rule Ex_I [where x = \"Var sl\"], force intro: Disj_I1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex sl\n                       (HPair (Var l) (Var sl) IN s AND\n                        (Var sl EQ Zero OR\n                         VarP (Var sl) OR\n                         SyntaxN.Ex m\n                          (SyntaxN.Ex n\n                            (SyntaxN.Ex sm\n                              (SyntaxN.Ex sn\n                                (Var m IN Var l AND\n                                 Var n IN Var l AND\n                                 HPair (Var m) (Var sm) IN s AND\n                                 HPair (Var n) (Var sn) IN s AND\n                                 Var sl EQ Q_Eats (Var sm) (Var sn)))))))", "apply (rule Ex_I [where x = \"Var sl\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      HPair (Var l) (Var sl) IN s AND\n                      (Var sl EQ Zero OR\n                       VarP (Var sl) OR\n                       SyntaxN.Ex m\n                        (SyntaxN.Ex n\n                          (SyntaxN.Ex sm\n                            (SyntaxN.Ex sn\n                              (Var m IN Var l AND\n                               Var n IN Var l AND\n                               HPair (Var m) (Var sm) IN s AND\n                               HPair (Var n) (Var sn) IN s AND\n                               Var sl EQ Q_Eats (Var sm) (Var sn))))))", "apply (rule Conj_I, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      Var sl EQ Zero OR\n                      VarP (Var sl) OR\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sn\n                             (Var m IN Var l AND\n                              Var n IN Var l AND\n                              HPair (Var m) (Var sm) IN s AND\n                              HPair (Var n) (Var sn) IN s AND\n                              Var sl EQ Q_Eats (Var sm) (Var sn)))))", "apply (rule Disj_I2)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex m\n                       (SyntaxN.Ex n\n                         (SyntaxN.Ex sm\n                           (SyntaxN.Ex sn\n                             (Var m IN Var l AND\n                              Var n IN Var l AND\n                              HPair (Var m) (Var sm) IN s AND\n                              HPair (Var n) (Var sn) IN s AND\n                              Var sl EQ Q_Eats (Var sm) (Var sn)))))", "apply (rule Ex_I [where x = \"Var m\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex n\n                       (SyntaxN.Ex sm\n                         (SyntaxN.Ex sn\n                           (Var m IN Var l AND\n                            Var n IN Var l AND\n                            HPair (Var m) (Var sm) IN s AND\n                            HPair (Var n) (Var sn) IN s AND\n                            Var sl EQ Q_Eats (Var sm) (Var sn))))", "apply (rule Ex_I [where x = \"Var n\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex sm\n                       (SyntaxN.Ex sn\n                         (Var m IN Var l AND\n                          Var n IN Var l AND\n                          HPair (Var m) (Var sm) IN s AND\n                          HPair (Var n) (Var sn) IN s AND\n                          Var sl EQ Q_Eats (Var sm) (Var sn)))", "apply (rule Ex_I [where x = \"Var sm\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n     atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n     atom m \\<sharp> (s, k, t, n, sm, sn);\n     atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n     atom sn \\<sharp> (s, k, t)\\<rbrakk>\n    \\<Longrightarrow> {HPair (Var n) (Var sn) IN s,\n                       Var sl EQ Q_Eats (Var sm) (Var sn),\n                       HPair (Var m) (Var sm) IN s, Var n IN Var l,\n                       Var m IN Var l, HPair (Var l) (Var sl) IN s,\n                       Var l IN SUCC k, LstSeqP s k t} \\<turnstile>\n                      SyntaxN.Ex sn\n                       (Var m IN Var l AND\n                        Var n IN Var l AND\n                        HPair (Var m) (Var sm) IN s AND\n                        HPair (Var n) (Var sn) IN s AND\n                        Var sl EQ Q_Eats (Var sm) (Var sn))", "apply (rule Ex_I [where x = \"Var sn\"], auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {SeqConstP s k t} \\<turnstile> SeqTermP s k t\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>The predicates \\<open>TermP\\<close> and \\<open>ConstP\\<close>\\<close>"], ["", "subsection \\<open>Definition\\<close>"], ["", "nominal_function CTermP :: \"bool \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom k \\<sharp> (s,t); atom s \\<sharp> t\\<rbrakk> \\<Longrightarrow>\n    CTermP vf t = Ex s (Ex k (SeqCTermP vf (Var s) (Var k) t))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt CTermP_graph_aux\n 2. \\<And>x y. CTermP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>k s t vf.\n           \\<lbrakk>atom k \\<sharp> (s, t); atom s \\<sharp> t;\n            x = (vf, t)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>k s t vf ka sa ta vfa.\n       \\<lbrakk>atom k \\<sharp> (s, t); atom s \\<sharp> t;\n        atom ka \\<sharp> (sa, ta); atom sa \\<sharp> ta;\n        (vf, t) = (vfa, ta)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex s\n                          (SyntaxN.Ex k (SeqCTermP vf (Var s) (Var k) t)) =\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka\n                            (SeqCTermP vfa (Var sa) (Var ka) ta))", "by (auto simp: eqvt_def CTermP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All CTermP_dom", "by lexicographic_order"], ["", "lemma\n  shows CTermP_fresh_iff [simp]: \"a \\<sharp> CTermP vf t \\<longleftrightarrow> a \\<sharp> t\"            (is ?thesis1)\n    and CTermP_sf [iff]: \"Sigma_fm (CTermP vf t)\"                      (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> CTermP vf t = a \\<sharp> t &&& Sigma_fm (CTermP vf t)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> CTermP vf t = a \\<sharp> t\n 2. Sigma_fm (CTermP vf t)", "obtain k::name and s::name  where \"atom k \\<sharp> (s,t)\" \"atom s \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, t); atom s \\<sharp> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, t)\n  atom s \\<sharp> t\n\ngoal (2 subgoals):\n 1. a \\<sharp> CTermP vf t = a \\<sharp> t\n 2. Sigma_fm (CTermP vf t)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, t)\n  atom s \\<sharp> t\n\ngoal (1 subgoal):\n 1. a \\<sharp> CTermP vf t = a \\<sharp> t &&& Sigma_fm (CTermP vf t)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> CTermP vf t = a \\<sharp> t\n  Sigma_fm (CTermP vf t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma CTermP_subst [simp]: \"(CTermP vf i)(j::=w) = CTermP vf (subst j w i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (CTermP vf i)(j::=w) = CTermP vf (subst j w i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (CTermP vf i)(j::=w) = CTermP vf (subst j w i)", "obtain k::name and s::name  where \"atom k \\<sharp> (s,i,j,w)\" \"atom s \\<sharp> (i,j,w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, i, j, w);\n         atom s \\<sharp> (i, j, w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, i, j, w)\n  atom s \\<sharp> (i, j, w)\n\ngoal (1 subgoal):\n 1. (CTermP vf i)(j::=w) = CTermP vf (subst j w i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, i, j, w)\n  atom s \\<sharp> (i, j, w)\n\ngoal (1 subgoal):\n 1. (CTermP vf i)(j::=w) = CTermP vf (subst j w i)", "by (simp add: CTermP.simps [of k s])"], ["proof (state)\nthis:\n  (CTermP vf i)(j::=w) = CTermP vf (subst j w i)\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation TermP :: \"tm \\<Rightarrow> fm\"\n  where \"TermP \\<equiv> CTermP True\""], ["", "abbreviation ConstP :: \"tm \\<Rightarrow> fm\"\n  where \"ConstP \\<equiv> CTermP False\""], ["", "subsection \\<open>Correctness properties for constants\\<close>"], ["", "lemma ConstP_imp_TermP: \"{ConstP t} \\<turnstile> TermP t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {ConstP t} \\<turnstile> TermP t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {ConstP t} \\<turnstile> TermP t", "obtain k::name and s::name  where \"atom k \\<sharp> (s,t)\" \"atom s \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, t); atom s \\<sharp> t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, t)\n  atom s \\<sharp> t\n\ngoal (1 subgoal):\n 1. {ConstP t} \\<turnstile> TermP t", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, t)\n  atom s \\<sharp> t\n\ngoal (1 subgoal):\n 1. {ConstP t} \\<turnstile> TermP t", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (s, t); atom s \\<sharp> t\\<rbrakk>\n    \\<Longrightarrow> {SeqConstP (Var s) (Var k) t} \\<turnstile>\n                      SyntaxN.Ex s\n                       (SyntaxN.Ex k (SeqTermP (Var s) (Var k) t))", "apply (rule Ex_I [where x = \"Var s\"], simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom k \\<sharp> (s, t); atom s \\<sharp> t\\<rbrakk>\n    \\<Longrightarrow> {SeqConstP (Var s) (Var k) t} \\<turnstile>\n                      SyntaxN.Ex k (SeqTermP (Var s) (Var k) t)", "apply (rule Ex_I [where x = \"Var k\"], auto intro: SeqConstP_imp_SeqTermP [THEN cut1])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {ConstP t} \\<turnstile> TermP t\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Abstraction over terms\\<close>"], ["", "nominal_function SeqStTermP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,v,i,sl,sl',m,n,sm,sm',sn,sn');\n          atom sl \\<sharp> (s,v,i,sl',m,n,sm,sm',sn,sn'); atom sl' \\<sharp> (s,v,i,m,n,sm,sm',sn,sn');\n          atom m \\<sharp> (s,n,sm,sm',sn,sn'); atom n \\<sharp> (s,sm,sm',sn,sn');\n          atom sm \\<sharp> (s,sm',sn,sn'); atom sm' \\<sharp> (s,sn,sn');\n          atom sn \\<sharp> (s,sn'); atom sn' \\<sharp> s\\<rbrakk> \\<Longrightarrow>\n    SeqStTermP v i t u s k =\n      VarP v AND LstSeqP s k (HPair t u) AND\n      All2 l (SUCC k) (Ex sl (Ex sl' (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                (((Var sl EQ v AND Var sl' EQ i) OR\n                  ((IndP (Var sl) OR Var sl NEQ v) AND Var sl' EQ Var sl)) OR\n                Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN Var l AND Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                       Var sl EQ Q_Eats (Var sm) (Var sn) AND\n                       Var sl' EQ Q_Eats (Var sm') (Var sn')))))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqStTermP_graph_aux\n 2. \\<And>x y. SeqStTermP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k v i sl sl' m n sm sm' sn sn' t u.\n           \\<lbrakk>atom\n                     l \\<sharp> (s, k, v, i, sl, sl', m, n, sm, sm', sn,\n                                 sn');\n            atom sl \\<sharp> (s, v, i, sl', m, n, sm, sm', sn, sn');\n            atom sl' \\<sharp> (s, v, i, m, n, sm, sm', sn, sn');\n            atom m \\<sharp> (s, n, sm, sm', sn, sn');\n            atom n \\<sharp> (s, sm, sm', sn, sn');\n            atom sm \\<sharp> (s, sm', sn, sn');\n            atom sm' \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (v, i, t, u, s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k v i sl sl' m n sm sm' sn sn' t u la sa ka va ia sla sl'a ma\n       na sma sm'a sna sn'a ta ua.\n       \\<lbrakk>atom\n                 l \\<sharp> (s, k, v, i, sl, sl', m, n, sm, sm', sn, sn');\n        atom sl \\<sharp> (s, v, i, sl', m, n, sm, sm', sn, sn');\n        atom sl' \\<sharp> (s, v, i, m, n, sm, sm', sn, sn');\n        atom m \\<sharp> (s, n, sm, sm', sn, sn');\n        atom n \\<sharp> (s, sm, sm', sn, sn');\n        atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n        atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s;\n        atom\n         la \\<sharp> (sa, ka, va, ia, sla, sl'a, ma, na, sma, sm'a, sna,\n                      sn'a);\n        atom sla \\<sharp> (sa, va, ia, sl'a, ma, na, sma, sm'a, sna, sn'a);\n        atom sl'a \\<sharp> (sa, va, ia, ma, na, sma, sm'a, sna, sn'a);\n        atom ma \\<sharp> (sa, na, sma, sm'a, sna, sn'a);\n        atom na \\<sharp> (sa, sma, sm'a, sna, sn'a);\n        atom sma \\<sharp> (sa, sm'a, sna, sn'a);\n        atom sm'a \\<sharp> (sa, sna, sn'a); atom sna \\<sharp> (sa, sn'a);\n        atom sn'a \\<sharp> sa;\n        (v, i, t, u, s, k) = (va, ia, ta, ua, sa, ka)\\<rbrakk>\n       \\<Longrightarrow> VarP v AND\n                         LstSeqP s k (HPair t u) AND\n                         All2 l (SUCC k)\n                          (SyntaxN.Ex sl\n                            (SyntaxN.Ex sl'\n                              (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                               s AND\n                               ((Var sl EQ v AND Var sl' EQ i OR\n                                 (IndP (Var sl) OR Var sl NEQ v) AND\n                                 Var sl' EQ Var sl) OR\n                                SyntaxN.Ex m\n                                 (SyntaxN.Ex n\n                                   (SyntaxN.Ex sm\n                                     (SyntaxN.Ex sm'\n (SyntaxN.Ex sn\n   (SyntaxN.Ex sn'\n     (Var m IN Var l AND\n      Var n IN Var l AND\n      HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n      HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n      Var sl EQ Q_Eats (Var sm) (Var sn) AND\n      Var sl' EQ Q_Eats (Var sm') (Var sn'))))))))))) =\n                         VarP va AND\n                         LstSeqP sa ka (HPair ta ua) AND\n                         All2 la (SUCC ka)\n                          (SyntaxN.Ex sla\n                            (SyntaxN.Ex sl'a\n                              (HPair (Var la)\n                                (HPair (Var sla) (Var sl'a)) IN\n                               sa AND\n                               ((Var sla EQ va AND Var sl'a EQ ia OR\n                                 (IndP (Var sla) OR Var sla NEQ va) AND\n                                 Var sl'a EQ Var sla) OR\n                                SyntaxN.Ex ma\n                                 (SyntaxN.Ex na\n                                   (SyntaxN.Ex sma\n                                     (SyntaxN.Ex sm'a\n (SyntaxN.Ex sna\n   (SyntaxN.Ex sn'a\n     (Var ma IN Var la AND\n      Var na IN Var la AND\n      HPair (Var ma) (HPair (Var sma) (Var sm'a)) IN sa AND\n      HPair (Var na) (HPair (Var sna) (Var sn'a)) IN sa AND\n      Var sla EQ Q_Eats (Var sma) (Var sna) AND\n      Var sl'a EQ Q_Eats (Var sm'a) (Var sn'a)))))))))))", "apply (simp_all add: eqvt_def SeqStTermP_graph_aux_def flip_fresh_fresh)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       (\\<And>l s k v i sl sl' m n sm sm' sn sn' t u.\n           \\<lbrakk>atom\n                     l \\<sharp> (s, k, v, i, sl, sl', m, n, sm, sm', sn,\n                                 sn');\n            atom sl \\<sharp> (s, v, i, sl', m, n, sm, sm', sn, sn');\n            atom sl' \\<sharp> (s, v, i, m, n, sm, sm', sn, sn');\n            atom m \\<sharp> (s, n, sm, sm', sn, sn');\n            atom n \\<sharp> (s, sm, sm', sn, sn');\n            atom sm \\<sharp> (s, sm', sn, sn');\n            atom sm' \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (v, i, t, u, s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P", "by auto (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqStTermP_dom", "by lexicographic_order"], ["", "lemma\n  shows SeqStTermP_fresh_iff [simp]:\n      \"a \\<sharp> SeqStTermP v i t u s k \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n    and SeqStTermP_sf [iff]:\n      \"Sigma_fm (SeqStTermP v i t u s k)\"  (is ?thsf)\n    and SeqStTermP_imp_OrdP:\n      \"{ SeqStTermP v i t u s k } \\<turnstile> OrdP k\"  (is ?thord)\n    and SeqStTermP_imp_VarP:\n      \"{ SeqStTermP v i t u s k } \\<turnstile> VarP v\"  (is ?thvar)\n    and SeqStTermP_imp_LstSeqP:\n      \"{ SeqStTermP v i t u s k } \\<turnstile> LstSeqP s k (HPair t u)\"  (is ?thlstseq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqStTermP v i t u s k =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and>\n      a \\<sharp> t \\<and>\n      a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqStTermP v i t u s k)) &&&\n    {SeqStTermP v i t u s k} \\<turnstile> OrdP k &&&\n    {SeqStTermP v i t u s k} \\<turnstile> VarP v &&&\n    {SeqStTermP v i t u s k} \\<turnstile> LstSeqP s k (HPair t u)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. a \\<sharp> SeqStTermP v i t u s k =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and>\n     a \\<sharp> t \\<and>\n     a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqStTermP v i t u s k)\n 3. {SeqStTermP v i t u s k} \\<turnstile> OrdP k\n 4. {SeqStTermP v i t u s k} \\<turnstile> VarP v\n 5. {SeqStTermP v i t u s k} \\<turnstile> LstSeqP s k (HPair t u)", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where atoms:\n       \"atom l \\<sharp> (s,k,v,i,sl,sl',m,n,sm,sm',sn,sn')\"\n       \"atom sl \\<sharp> (s,v,i,sl',m,n,sm,sm',sn,sn')\" \"atom sl' \\<sharp> (s,v,i,m,n,sm,sm',sn,sn')\"\n       \"atom m \\<sharp> (s,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,sm,sm',sn,sn')\"\n       \"atom sm \\<sharp> (s,sm',sn,sn')\" \"atom sm' \\<sharp> (s,sn,sn')\"\n       \"atom sn \\<sharp> (s,sn')\" \"atom sn' \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, v, i, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (s, v, i, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, v, i, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n         atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, v, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (5 subgoals):\n 1. a \\<sharp> SeqStTermP v i t u s k =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and>\n     a \\<sharp> t \\<and>\n     a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqStTermP v i t u s k)\n 3. {SeqStTermP v i t u s k} \\<turnstile> OrdP k\n 4. {SeqStTermP v i t u s k} \\<turnstile> VarP v\n 5. {SeqStTermP v i t u s k} \\<turnstile> LstSeqP s k (HPair t u)", "thus ?thesis1 ?thsf ?thord ?thvar ?thlstseq"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, v, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqStTermP v i t u s k =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and>\n      a \\<sharp> t \\<and>\n      a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqStTermP v i t u s k)) &&&\n    {SeqStTermP v i t u s k} \\<turnstile> OrdP k &&&\n    {SeqStTermP v i t u s k} \\<turnstile> VarP v &&&\n    {SeqStTermP v i t u s k} \\<turnstile> LstSeqP s k (HPair t u)", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> SeqStTermP v i t u s k =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> i \\<and>\n   a \\<sharp> t \\<and> a \\<sharp> u \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n  Sigma_fm (SeqStTermP v i t u s k)\n  {SeqStTermP v i t u s k} \\<turnstile> OrdP k\n  {SeqStTermP v i t u s k} \\<turnstile> VarP v\n  {SeqStTermP v i t u s k} \\<turnstile> LstSeqP s k (HPair t u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqStTermP_subst [simp]:\n      \"(SeqStTermP v i t u s k)(j::=w) =\n       SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u) (subst j w s) (subst j w k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqStTermP v i t u s k)(j::=w) =\n    SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n     (subst j w s) (subst j w k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqStTermP v i t u s k)(j::=w) =\n    SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n     (subst j w s) (subst j w k)", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where \"atom l \\<sharp> (s,k,v,i,w,j,sl,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl \\<sharp> (s,v,i,w,j,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl' \\<sharp> (s,v,i,w,j,m,n,sm,sm',sn,sn')\"\n         \"atom m \\<sharp> (s,w,j,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,w,j,sm,sm',sn,sn')\"\n         \"atom sm \\<sharp> (s,w,j,sm',sn,sn')\" \"atom sm' \\<sharp> (s,w,j,sn,sn')\"\n         \"atom sn \\<sharp> (s,w,j,sn')\" \"atom sn' \\<sharp> (s,w,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, v, i, w, j, sl, sl', m, n, sm, sm', sn,\n                              sn');\n         atom sl \\<sharp> (s, v, i, w, j, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, v, i, w, j, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, w, j, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, w, j, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, w, j, sm', sn, sn');\n         atom sm' \\<sharp> (s, w, j, sn, sn');\n         atom sn \\<sharp> (s, w, j, sn');\n         atom sn' \\<sharp> (s, w, j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, v, i, w, j, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, i, w, j, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, i, w, j, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, w, j, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, w, j, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, w, j, sm', sn, sn')\n  atom sm' \\<sharp> (s, w, j, sn, sn')\n  atom sn \\<sharp> (s, w, j, sn')\n  atom sn' \\<sharp> (s, w, j)\n\ngoal (1 subgoal):\n 1. (SeqStTermP v i t u s k)(j::=w) =\n    SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n     (subst j w s) (subst j w k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, v, i, w, j, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, i, w, j, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, i, w, j, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, w, j, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, w, j, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, w, j, sm', sn, sn')\n  atom sm' \\<sharp> (s, w, j, sn, sn')\n  atom sn \\<sharp> (s, w, j, sn')\n  atom sn' \\<sharp> (s, w, j)\n\ngoal (1 subgoal):\n 1. (SeqStTermP v i t u s k)(j::=w) =\n    SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n     (subst j w s) (subst j w k)", "by (force simp add: SeqStTermP.simps [of l _ _ _ _ sl sl' m n sm sm' sn sn'])"], ["proof (state)\nthis:\n  (SeqStTermP v i t u s k)(j::=w) =\n  SeqStTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n   (subst j w s) (subst j w k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqStTermP_cong:\n  \"\\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'; H \\<turnstile> s EQ s'; H \\<turnstile> k EQ k'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SeqStTermP v i t u s k IFF SeqStTermP v i t' u' s' k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u';\n     H \\<turnstile> s EQ s'; H \\<turnstile> k EQ k'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile>\n                      SeqStTermP v i t u s k IFF SeqStTermP v i t' u' s' k'", "by (rule P4_cong [where tms=\"[v,i]\"]) (auto simp: fresh_Cons)"], ["", "declare SeqStTermP.simps [simp del]"], ["", "subsection \\<open>Defining the syntax: main predicate\\<close>"], ["", "nominal_function AbstTermP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (v,i,t,u,k); atom k \\<sharp> (v,i,t,u)\\<rbrakk> \\<Longrightarrow>\n    AbstTermP v i t u =\n     OrdP i AND Ex s (Ex k (SeqStTermP v (Q_Ind i) t u (Var s) (Var k)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt AbstTermP_graph_aux\n 2. \\<And>x y. AbstTermP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s v i t u k.\n           \\<lbrakk>atom s \\<sharp> (v, i, t, u, k);\n            atom k \\<sharp> (v, i, t, u); x = (v, i, t, u)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s v i t u k sa va ia ta ua ka.\n       \\<lbrakk>atom s \\<sharp> (v, i, t, u, k);\n        atom k \\<sharp> (v, i, t, u); atom sa \\<sharp> (va, ia, ta, ua, ka);\n        atom ka \\<sharp> (va, ia, ta, ua);\n        (v, i, t, u) = (va, ia, ta, ua)\\<rbrakk>\n       \\<Longrightarrow> OrdP i AND\n                         SyntaxN.Ex s\n                          (SyntaxN.Ex k\n                            (SeqStTermP v (Q_Ind i) t u (Var s) (Var k))) =\n                         OrdP ia AND\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka\n                            (SeqStTermP va (Q_Ind ia) ta ua (Var sa)\n                              (Var ka)))", "by (auto simp: eqvt_def AbstTermP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All AbstTermP_dom", "by lexicographic_order"], ["", "lemma\n  shows AbstTermP_fresh_iff [simp]:\n      \"a \\<sharp> AbstTermP v i t u \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u\"  (is ?thesis1)\n    and AbstTermP_sf [iff]:\n      \"Sigma_fm (AbstTermP v i t u)\"  (is ?thsf)\n    and AbstTermP_imp_VarP:\n       \"{ AbstTermP v i t u } \\<turnstile> VarP v\"   (is ?thvar)\n    and AbstTermP_imp_OrdP:\n       \"{ AbstTermP v i t u } \\<turnstile> OrdP i\"   (is ?thord)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> AbstTermP v i t u =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u) &&&\n     Sigma_fm (AbstTermP v i t u)) &&&\n    {AbstTermP v i t u} \\<turnstile> VarP v &&&\n    {AbstTermP v i t u} \\<turnstile> OrdP i", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> AbstTermP v i t u =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u)\n 2. Sigma_fm (AbstTermP v i t u)\n 3. {AbstTermP v i t u} \\<turnstile> VarP v\n 4. {AbstTermP v i t u} \\<turnstile> OrdP i", "obtain s::name and k::name where \"atom s \\<sharp> (v,i,t,u,k)\"  \"atom k \\<sharp> (v,i,t,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, t, u, k);\n         atom k \\<sharp> (v, i, t, u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, t, u, k)\n  atom k \\<sharp> (v, i, t, u)\n\ngoal (4 subgoals):\n 1. a \\<sharp> AbstTermP v i t u =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u)\n 2. Sigma_fm (AbstTermP v i t u)\n 3. {AbstTermP v i t u} \\<turnstile> VarP v\n 4. {AbstTermP v i t u} \\<turnstile> OrdP i", "thus ?thesis1 ?thsf ?thvar ?thord"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, t, u, k)\n  atom k \\<sharp> (v, i, t, u)\n\ngoal (1 subgoal):\n 1. (a \\<sharp> AbstTermP v i t u =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u) &&&\n     Sigma_fm (AbstTermP v i t u)) &&&\n    {AbstTermP v i t u} \\<turnstile> VarP v &&&\n    {AbstTermP v i t u} \\<turnstile> OrdP i", "by (auto intro: SeqStTermP_imp_VarP thin2)"], ["proof (state)\nthis:\n  a \\<sharp> AbstTermP v i t u =\n  (a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u)\n  Sigma_fm (AbstTermP v i t u)\n  {AbstTermP v i t u} \\<turnstile> VarP v\n  {AbstTermP v i t u} \\<turnstile> OrdP i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AbstTermP_subst [simp]:\n      \"(AbstTermP v i t u)(j::=w) = AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AbstTermP v i t u)(j::=w) =\n    AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (AbstTermP v i t u)(j::=w) =\n    AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "obtain s::name and k::name  where \"atom s \\<sharp> (v,i,t,u,w,j,k)\"  \"atom k \\<sharp> (v,i,t,u,w,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, t, u, w, j, k);\n         atom k \\<sharp> (v, i, t, u, w, j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, t, u, w, j, k)\n  atom k \\<sharp> (v, i, t, u, w, j)\n\ngoal (1 subgoal):\n 1. (AbstTermP v i t u)(j::=w) =\n    AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, t, u, w, j, k)\n  atom k \\<sharp> (v, i, t, u, w, j)\n\ngoal (1 subgoal):\n 1. (AbstTermP v i t u)(j::=w) =\n    AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "by (simp add: AbstTermP.simps [of s _ _ _ _ k])"], ["proof (state)\nthis:\n  (AbstTermP v i t u)(j::=w) =\n  AbstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare AbstTermP.simps [simp del]"], ["", "section \\<open>Substitution over terms\\<close>"], ["", "subsection \\<open>Defining the syntax\\<close>"], ["", "nominal_function SubstTermP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (v,i,t,u,k); atom k \\<sharp> (v,i,t,u)\\<rbrakk> \\<Longrightarrow>\n    SubstTermP v i t u = TermP i AND Ex s (Ex k (SeqStTermP v i t u (Var s) (Var k)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SubstTermP_graph_aux\n 2. \\<And>x y. SubstTermP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s v i t u k.\n           \\<lbrakk>atom s \\<sharp> (v, i, t, u, k);\n            atom k \\<sharp> (v, i, t, u); x = (v, i, t, u)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s v i t u k sa va ia ta ua ka.\n       \\<lbrakk>atom s \\<sharp> (v, i, t, u, k);\n        atom k \\<sharp> (v, i, t, u); atom sa \\<sharp> (va, ia, ta, ua, ka);\n        atom ka \\<sharp> (va, ia, ta, ua);\n        (v, i, t, u) = (va, ia, ta, ua)\\<rbrakk>\n       \\<Longrightarrow> TermP i AND\n                         SyntaxN.Ex s\n                          (SyntaxN.Ex k\n                            (SeqStTermP v i t u (Var s) (Var k))) =\n                         TermP ia AND\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka\n                            (SeqStTermP va ia ta ua (Var sa) (Var ka)))", "by (auto simp: eqvt_def SubstTermP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SubstTermP_dom", "by lexicographic_order"], ["", "lemma\n  shows SubstTermP_fresh_iff [simp]:\n       \"a \\<sharp> SubstTermP v i t u \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u\"  (is ?thesis1)\n    and SubstTermP_sf [iff]:\n       \"Sigma_fm (SubstTermP v i t u)\"     (is ?thsf)\n    and SubstTermP_imp_TermP:\n       \"{ SubstTermP v i t u } \\<turnstile> TermP i\"  (is ?thterm)\n    and SubstTermP_imp_VarP:\n       \"{ SubstTermP v i t u } \\<turnstile> VarP v\"   (is ?thvar)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SubstTermP v i t u =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u) &&&\n     Sigma_fm (SubstTermP v i t u)) &&&\n    {SubstTermP v i t u} \\<turnstile> TermP i &&&\n    {SubstTermP v i t u} \\<turnstile> VarP v", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SubstTermP v i t u =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u)\n 2. Sigma_fm (SubstTermP v i t u)\n 3. {SubstTermP v i t u} \\<turnstile> TermP i\n 4. {SubstTermP v i t u} \\<turnstile> VarP v", "obtain s::name and k::name  where \"atom s \\<sharp> (v,i,t,u,k)\" \"atom k \\<sharp> (v,i,t,u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, t, u, k);\n         atom k \\<sharp> (v, i, t, u)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, t, u, k)\n  atom k \\<sharp> (v, i, t, u)\n\ngoal (4 subgoals):\n 1. a \\<sharp> SubstTermP v i t u =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u)\n 2. Sigma_fm (SubstTermP v i t u)\n 3. {SubstTermP v i t u} \\<turnstile> TermP i\n 4. {SubstTermP v i t u} \\<turnstile> VarP v", "thus ?thesis1 ?thsf ?thterm ?thvar"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, t, u, k)\n  atom k \\<sharp> (v, i, t, u)\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SubstTermP v i t u =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u) &&&\n     Sigma_fm (SubstTermP v i t u)) &&&\n    {SubstTermP v i t u} \\<turnstile> TermP i &&&\n    {SubstTermP v i t u} \\<turnstile> VarP v", "by (auto intro: SeqStTermP_imp_VarP thin2)"], ["proof (state)\nthis:\n  a \\<sharp> SubstTermP v i t u =\n  (a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> t \\<and> a \\<sharp> u)\n  Sigma_fm (SubstTermP v i t u)\n  {SubstTermP v i t u} \\<turnstile> TermP i\n  {SubstTermP v i t u} \\<turnstile> VarP v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstTermP_subst [simp]:\n      \"(SubstTermP v i t u)(j::=w) = SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SubstTermP v i t u)(j::=w) =\n    SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SubstTermP v i t u)(j::=w) =\n    SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "obtain s::name and k::name\n    where \"atom s \\<sharp> (v,i,t,u,w,j,k)\"  \"atom k \\<sharp> (v,i,t,u,w,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, t, u, w, j, k);\n         atom k \\<sharp> (v, i, t, u, w, j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, t, u, w, j, k)\n  atom k \\<sharp> (v, i, t, u, w, j)\n\ngoal (1 subgoal):\n 1. (SubstTermP v i t u)(j::=w) =\n    SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, t, u, w, j, k)\n  atom k \\<sharp> (v, i, t, u, w, j)\n\ngoal (1 subgoal):\n 1. (SubstTermP v i t u)(j::=w) =\n    SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)", "by (simp add: SubstTermP.simps [of s _ _ _ _ k])"], ["proof (state)\nthis:\n  (SubstTermP v i t u)(j::=w) =\n  SubstTermP (subst j w v) (subst j w i) (subst j w t) (subst j w u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstTermP_cong:\n  \"\\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> i EQ i'; H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SubstTermP v i t u IFF SubstTermP v' i' t' u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> i EQ i';\n     H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile>\n                      SubstTermP v i t u IFF SubstTermP v' i' t' u'", "by (rule P4_cong) auto"], ["", "declare SubstTermP.simps [simp del]"], ["", "section \\<open>Abstraction over formulas\\<close>"], ["", "subsection \\<open>The predicate \\<open>AbstAtomicP\\<close>\\<close>"], ["", "nominal_function AbstAtomicP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom t \\<sharp> (v,i,y,y',t',u,u'); atom t' \\<sharp> (v,i,y,y',u,u');\n          atom u \\<sharp> (v,i,y,y',u'); atom u' \\<sharp> (v,i,y,y')\\<rbrakk> \\<Longrightarrow>\n    AbstAtomicP v i y y' =\n         Ex t (Ex u (Ex t' (Ex u'\n           (AbstTermP v i (Var t) (Var t') AND AbstTermP v i (Var u) (Var u') AND\n                      ((y EQ Q_Eq (Var t) (Var u) AND y' EQ Q_Eq (Var t') (Var u')) OR\n                       (y EQ Q_Mem (Var t) (Var u) AND y' EQ Q_Mem (Var t') (Var u')))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt AbstAtomicP_graph_aux\n 2. \\<And>x y. AbstAtomicP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>t v i y y' t' u u'.\n           \\<lbrakk>atom t \\<sharp> (v, i, y, y', t', u, u');\n            atom t' \\<sharp> (v, i, y, y', u, u');\n            atom u \\<sharp> (v, i, y, y', u');\n            atom u' \\<sharp> (v, i, y, y'); x = (v, i, y, y')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>t v i y y' t' u u' ta va ia ya y'a t'a ua u'a.\n       \\<lbrakk>atom t \\<sharp> (v, i, y, y', t', u, u');\n        atom t' \\<sharp> (v, i, y, y', u, u');\n        atom u \\<sharp> (v, i, y, y', u'); atom u' \\<sharp> (v, i, y, y');\n        atom ta \\<sharp> (va, ia, ya, y'a, t'a, ua, u'a);\n        atom t'a \\<sharp> (va, ia, ya, y'a, ua, u'a);\n        atom ua \\<sharp> (va, ia, ya, y'a, u'a);\n        atom u'a \\<sharp> (va, ia, ya, y'a);\n        (v, i, y, y') = (va, ia, ya, y'a)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex t\n                          (SyntaxN.Ex u\n                            (SyntaxN.Ex t'\n                              (SyntaxN.Ex u'\n                                (AbstTermP v i (Var t) (Var t') AND\n                                 AbstTermP v i (Var u) (Var u') AND\n                                 (y EQ Q_Eq (Var t) (Var u) AND\n                                  y' EQ Q_Eq (Var t') (Var u') OR\n                                  y EQ Q_Mem (Var t) (Var u) AND\n                                  y' EQ Q_Mem (Var t') (Var u')))))) =\n                         SyntaxN.Ex ta\n                          (SyntaxN.Ex ua\n                            (SyntaxN.Ex t'a\n                              (SyntaxN.Ex u'a\n                                (AbstTermP va ia (Var ta) (Var t'a) AND\n                                 AbstTermP va ia (Var ua) (Var u'a) AND\n                                 (ya EQ Q_Eq (Var ta) (Var ua) AND\n                                  y'a EQ Q_Eq (Var t'a) (Var u'a) OR\n                                  ya EQ Q_Mem (Var ta) (Var ua) AND\n                                  y'a EQ Q_Mem (Var t'a) (Var u'a))))))", "by (auto simp: eqvt_def AbstAtomicP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All AbstAtomicP_dom", "by lexicographic_order"], ["", "lemma\n  shows AbstAtomicP_fresh_iff [simp]:\n       \"a \\<sharp> AbstAtomicP v i y y' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y'\"         (is ?thesis1)\n    and AbstAtomicP_sf [iff]: \"Sigma_fm (AbstAtomicP v i y y')\"              (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> AbstAtomicP v i y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y') &&&\n    Sigma_fm (AbstAtomicP v i y y')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> AbstAtomicP v i y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y')\n 2. Sigma_fm (AbstAtomicP v i y y')", "obtain t::name and u::name and t'::name  and u'::name\n    where \"atom t \\<sharp> (v,i,y,y',t',u,u')\" \"atom t' \\<sharp> (v,i,y,y',u,u')\"\n          \"atom u \\<sharp> (v,i,y,y',u')\" \"atom u' \\<sharp> (v,i,y,y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t t' u u'.\n        \\<lbrakk>atom t \\<sharp> (v, i, y, y', t', u, u');\n         atom t' \\<sharp> (v, i, y, y', u, u');\n         atom u \\<sharp> (v, i, y, y', u');\n         atom u' \\<sharp> (v, i, y, y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (v, i, y, y', t', u, u')\n  atom t' \\<sharp> (v, i, y, y', u, u')\n  atom u \\<sharp> (v, i, y, y', u')\n  atom u' \\<sharp> (v, i, y, y')\n\ngoal (2 subgoals):\n 1. a \\<sharp> AbstAtomicP v i y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y')\n 2. Sigma_fm (AbstAtomicP v i y y')", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (v, i, y, y', t', u, u')\n  atom t' \\<sharp> (v, i, y, y', u, u')\n  atom u \\<sharp> (v, i, y, y', u')\n  atom u' \\<sharp> (v, i, y, y')\n\ngoal (1 subgoal):\n 1. a \\<sharp> AbstAtomicP v i y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y') &&&\n    Sigma_fm (AbstAtomicP v i y y')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> AbstAtomicP v i y y' =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> i \\<and> a \\<sharp> y \\<and> a \\<sharp> y')\n  Sigma_fm (AbstAtomicP v i y y')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AbstAtomicP_subst [simp]:\n      \"(AbstAtomicP v tm y y')(i::=w) = AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AbstAtomicP v tm y y')(i::=w) =\n    AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (AbstAtomicP v tm y y')(i::=w) =\n    AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "obtain t::name and u::name and t'::name  and u'::name\n    where \"atom t \\<sharp> (v,tm,y,y',w,i,t',u,u')\"  \"atom t' \\<sharp> (v,tm,y,y',w,i,u,u')\"\n          \"atom u \\<sharp> (v,tm,y,y',w,i,u')\"       \"atom u' \\<sharp> (v,tm,y,y',w,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t t' u u'.\n        \\<lbrakk>atom t \\<sharp> (v, tm, y, y', w, i, t', u, u');\n         atom t' \\<sharp> (v, tm, y, y', w, i, u, u');\n         atom u \\<sharp> (v, tm, y, y', w, i, u');\n         atom u' \\<sharp> (v, tm, y, y', w, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (v, tm, y, y', w, i, t', u, u')\n  atom t' \\<sharp> (v, tm, y, y', w, i, u, u')\n  atom u \\<sharp> (v, tm, y, y', w, i, u')\n  atom u' \\<sharp> (v, tm, y, y', w, i)\n\ngoal (1 subgoal):\n 1. (AbstAtomicP v tm y y')(i::=w) =\n    AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (v, tm, y, y', w, i, t', u, u')\n  atom t' \\<sharp> (v, tm, y, y', w, i, u, u')\n  atom u \\<sharp> (v, tm, y, y', w, i, u')\n  atom u' \\<sharp> (v, tm, y, y', w, i)\n\ngoal (1 subgoal):\n 1. (AbstAtomicP v tm y y')(i::=w) =\n    AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "by (simp add: AbstAtomicP.simps [of t _ _ _ _ t' u u'])"], ["proof (state)\nthis:\n  (AbstAtomicP v tm y y')(i::=w) =\n  AbstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')\n\ngoal:\nNo subgoals!", "qed"], ["", "declare AbstAtomicP.simps [simp del]"], ["", "subsection \\<open>The predicate \\<open>AbsMakeForm\\<close>\\<close>"], ["", "nominal_function SeqAbstFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,v,sli,sl,sl',m,n,smi,sm,sm',sni,sn,sn');\n          atom sli \\<sharp> (s,v,sl,sl',m,n,smi,sm,sm',sni,sn,sn');\n          atom sl \\<sharp> (s,v,sl',m,n,smi,sm,sm',sni,sn,sn');\n          atom sl' \\<sharp> (s,v,m,n,smi,sm,sm',sni,sn,sn');\n          atom m \\<sharp> (s,n,smi,sm,sm',sni,sn,sn');\n          atom n \\<sharp> (s,smi,sm,sm',sni,sn,sn'); atom smi \\<sharp> (s,sm,sm',sni,sn,sn');\n          atom sm \\<sharp> (s,sm',sni,sn,sn'); atom sm' \\<sharp> (s,sni,sn,sn');\n          atom sni \\<sharp> (s,sn,sn'); atom sn \\<sharp> (s,sn'); atom sn' \\<sharp> (s)\\<rbrakk> \\<Longrightarrow>\n    SeqAbstFormP v i x x' s k =\n      LstSeqP s k (HPair i (HPair x x')) AND\n      All2 l (SUCC k) (Ex sli (Ex sl (Ex sl' (HPair (Var l) (HPair (Var sli) (HPair (Var sl) (Var sl'))) IN s AND\n                (AbstAtomicP v (Var sli) (Var sl) (Var sl') OR\n                OrdP (Var sli) AND\n                Ex m (Ex n (Ex smi (Ex sm (Ex sm' (Ex sni (Ex sn (Ex sn'\n                      (Var m IN Var l AND Var n IN Var l AND\n                       HPair (Var m) (HPair (Var smi) (HPair (Var sm) (Var sm'))) IN s AND\n                       HPair (Var n) (HPair (Var sni) (HPair (Var sn) (Var sn'))) IN s AND\n                       ((Var sli EQ Var smi AND Var sli EQ Var sni AND\n                         Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                         Var sl' EQ Q_Disj (Var sm') (Var sn')) OR\n                        (Var sli EQ Var smi AND\n                         Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm')) OR\n                        (SUCC (Var sli) EQ Var smi AND\n                         Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm'))))))))))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqAbstFormP_graph_aux\n 2. \\<And>x y. SeqAbstFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k v sli sl sl' m n smi sm sm' sni sn sn' i xa x'.\n           \\<lbrakk>atom\n                     l \\<sharp> (s, k, v, sli, sl, sl', m, n, smi, sm, sm',\n                                 sni, sn, sn');\n            atom\n             sli \\<sharp> (s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn');\n            atom sl \\<sharp> (s, v, sl', m, n, smi, sm, sm', sni, sn, sn');\n            atom sl' \\<sharp> (s, v, m, n, smi, sm, sm', sni, sn, sn');\n            atom m \\<sharp> (s, n, smi, sm, sm', sni, sn, sn');\n            atom n \\<sharp> (s, smi, sm, sm', sni, sn, sn');\n            atom smi \\<sharp> (s, sm, sm', sni, sn, sn');\n            atom sm \\<sharp> (s, sm', sni, sn, sn');\n            atom sm' \\<sharp> (s, sni, sn, sn');\n            atom sni \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (v, i, xa, x', s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k v sli sl sl' m n smi sm sm' sni sn sn' i x x' la sa ka va\n       slia sla sl'a ma na smia sma sm'a snia sna sn'a ia xa x'a.\n       \\<lbrakk>atom\n                 l \\<sharp> (s, k, v, sli, sl, sl', m, n, smi, sm, sm', sni,\n                             sn, sn');\n        atom sli \\<sharp> (s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn');\n        atom sl \\<sharp> (s, v, sl', m, n, smi, sm, sm', sni, sn, sn');\n        atom sl' \\<sharp> (s, v, m, n, smi, sm, sm', sni, sn, sn');\n        atom m \\<sharp> (s, n, smi, sm, sm', sni, sn, sn');\n        atom n \\<sharp> (s, smi, sm, sm', sni, sn, sn');\n        atom smi \\<sharp> (s, sm, sm', sni, sn, sn');\n        atom sm \\<sharp> (s, sm', sni, sn, sn');\n        atom sm' \\<sharp> (s, sni, sn, sn'); atom sni \\<sharp> (s, sn, sn');\n        atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s;\n        atom\n         la \\<sharp> (sa, ka, va, slia, sla, sl'a, ma, na, smia, sma, sm'a,\n                      snia, sna, sn'a);\n        atom\n         slia \\<sharp> (sa, va, sla, sl'a, ma, na, smia, sma, sm'a, snia,\n                        sna, sn'a);\n        atom\n         sla \\<sharp> (sa, va, sl'a, ma, na, smia, sma, sm'a, snia, sna,\n                       sn'a);\n        atom\n         sl'a \\<sharp> (sa, va, ma, na, smia, sma, sm'a, snia, sna, sn'a);\n        atom ma \\<sharp> (sa, na, smia, sma, sm'a, snia, sna, sn'a);\n        atom na \\<sharp> (sa, smia, sma, sm'a, snia, sna, sn'a);\n        atom smia \\<sharp> (sa, sma, sm'a, snia, sna, sn'a);\n        atom sma \\<sharp> (sa, sm'a, snia, sna, sn'a);\n        atom sm'a \\<sharp> (sa, snia, sna, sn'a);\n        atom snia \\<sharp> (sa, sna, sn'a); atom sna \\<sharp> (sa, sn'a);\n        atom sn'a \\<sharp> sa;\n        (v, i, x, x', s, k) = (va, ia, xa, x'a, sa, ka)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k (HPair i (HPair x x')) AND\n                         All2 l (SUCC k)\n                          (SyntaxN.Ex sli\n                            (SyntaxN.Ex sl\n                              (SyntaxN.Ex sl'\n                                (HPair (Var l)\n                                  (HPair (Var sli)\n                                    (HPair (Var sl) (Var sl'))) IN\n                                 s AND\n                                 (AbstAtomicP v (Var sli) (Var sl)\n                                   (Var sl') OR\n                                  OrdP (Var sli) AND\n                                  SyntaxN.Ex m\n                                   (SyntaxN.Ex n\n                                     (SyntaxN.Ex smi\n (SyntaxN.Ex sm\n   (SyntaxN.Ex sm'\n     (SyntaxN.Ex sni\n       (SyntaxN.Ex sn\n         (SyntaxN.Ex sn'\n           (Var m IN Var l AND\n            Var n IN Var l AND\n            HPair (Var m) (HPair (Var smi) (HPair (Var sm) (Var sm'))) IN\n            s AND\n            HPair (Var n) (HPair (Var sni) (HPair (Var sn) (Var sn'))) IN\n            s AND\n            (Var sli EQ Var smi AND\n             Var sli EQ Var sni AND\n             Var sl EQ Q_Disj (Var sm) (Var sn) AND\n             Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n             Var sli EQ Var smi AND\n             Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n             SUCC (Var sli) EQ Var smi AND\n             Var sl EQ Q_Ex (Var sm) AND\n             Var sl' EQ Q_Ex (Var sm'))))))))))))))) =\n                         LstSeqP sa ka (HPair ia (HPair xa x'a)) AND\n                         All2 la (SUCC ka)\n                          (SyntaxN.Ex slia\n                            (SyntaxN.Ex sla\n                              (SyntaxN.Ex sl'a\n                                (HPair (Var la)\n                                  (HPair (Var slia)\n                                    (HPair (Var sla) (Var sl'a))) IN\n                                 sa AND\n                                 (AbstAtomicP va (Var slia) (Var sla)\n                                   (Var sl'a) OR\n                                  OrdP (Var slia) AND\n                                  SyntaxN.Ex ma\n                                   (SyntaxN.Ex na\n                                     (SyntaxN.Ex smia\n (SyntaxN.Ex sma\n   (SyntaxN.Ex sm'a\n     (SyntaxN.Ex snia\n       (SyntaxN.Ex sna\n         (SyntaxN.Ex sn'a\n           (Var ma IN Var la AND\n            Var na IN Var la AND\n            HPair (Var ma)\n             (HPair (Var smia) (HPair (Var sma) (Var sm'a))) IN\n            sa AND\n            HPair (Var na)\n             (HPair (Var snia) (HPair (Var sna) (Var sn'a))) IN\n            sa AND\n            (Var slia EQ Var smia AND\n             Var slia EQ Var snia AND\n             Var sla EQ Q_Disj (Var sma) (Var sna) AND\n             Var sl'a EQ Q_Disj (Var sm'a) (Var sn'a) OR\n             Var slia EQ Var smia AND\n             Var sla EQ Q_Neg (Var sma) AND Var sl'a EQ Q_Neg (Var sm'a) OR\n             SUCC (Var slia) EQ Var smia AND\n             Var sla EQ Q_Ex (Var sma) AND\n             Var sl'a EQ Q_Ex (Var sm'a)))))))))))))))", "by (auto simp: eqvt_def SeqAbstFormP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqAbstFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows SeqAbstFormP_fresh_iff [simp]:\n       \"a \\<sharp> SeqAbstFormP v i x x' s k \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n    and SeqAbstFormP_sf [iff]:\n       \"Sigma_fm (SeqAbstFormP v i x x' s k)\"  (is ?thsf)\n    and SeqAbstFormP_imp_OrdP:\n       \"{ SeqAbstFormP v u x x' s k } \\<turnstile> OrdP k\"  (is ?thOrd)\n    and SeqAbstFormP_imp_LstSeqP:\n       \"{ SeqAbstFormP v u x x' s k } \\<turnstile> LstSeqP s k (HPair u (HPair x x'))\"  (is ?thLstSeq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqAbstFormP v i x x' s k =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and>\n      a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqAbstFormP v i x x' s k)) &&&\n    {SeqAbstFormP v u x x' s k} \\<turnstile> OrdP k &&&\n    {SeqAbstFormP v u x x' s k} \\<turnstile>\n    LstSeqP s k (HPair u (HPair x x'))", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqAbstFormP v i x x' s k =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and>\n     a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqAbstFormP v i x x' s k)\n 3. {SeqAbstFormP v u x x' s k} \\<turnstile> OrdP k\n 4. {SeqAbstFormP v u x x' s k} \\<turnstile>\n    LstSeqP s k (HPair u (HPair x x'))", "obtain l::name and sli::name and sl::name and sl'::name and m::name and n::name and\n         smi::name and sm::name and sm'::name and sni::name and sn::name and sn'::name\n    where atoms:\n         \"atom l \\<sharp> (s,k,v,sli,sl,sl',m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom sli \\<sharp> (s,v,sl,sl',m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom sl \\<sharp> (s,v,sl',m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom sl' \\<sharp> (s,v,m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom m \\<sharp> (s,n,smi,sm,sm',sni,sn,sn')\" \"atom n \\<sharp> (s,smi,sm,sm',sni,sn,sn')\"\n         \"atom smi \\<sharp> (s,sm,sm',sni,sn,sn')\"\n         \"atom sm \\<sharp> (s,sm',sni,sn,sn')\"\n         \"atom sm' \\<sharp> (s,sni,sn,sn')\"\n         \"atom sni \\<sharp> (s,sn,sn')\" \"atom sn \\<sharp> (s,sn')\" \"atom sn' \\<sharp> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sli sl sl' m n smi sm sm' sni sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, v, sli, sl, sl', m, n, smi, sm, sm',\n                              sni, sn, sn');\n         atom\n          sli \\<sharp> (s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn');\n         atom sl \\<sharp> (s, v, sl', m, n, smi, sm, sm', sni, sn, sn');\n         atom sl' \\<sharp> (s, v, m, n, smi, sm, sm', sni, sn, sn');\n         atom m \\<sharp> (s, n, smi, sm, sm', sni, sn, sn');\n         atom n \\<sharp> (s, smi, sm, sm', sni, sn, sn');\n         atom smi \\<sharp> (s, sm, sm', sni, sn, sn');\n         atom sm \\<sharp> (s, sm', sni, sn, sn');\n         atom sm' \\<sharp> (s, sni, sn, sn');\n         atom sni \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n         atom sn' \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, v, sli, sl, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sli \\<sharp> (s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl \\<sharp> (s, v, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl' \\<sharp> (s, v, m, n, smi, sm, sm', sni, sn, sn')\n  atom m \\<sharp> (s, n, smi, sm, sm', sni, sn, sn')\n  atom n \\<sharp> (s, smi, sm, sm', sni, sn, sn')\n  atom smi \\<sharp> (s, sm, sm', sni, sn, sn')\n  atom sm \\<sharp> (s, sm', sni, sn, sn')\n  atom sm' \\<sharp> (s, sni, sn, sn')\n  atom sni \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqAbstFormP v i x x' s k =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and>\n     a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqAbstFormP v i x x' s k)\n 3. {SeqAbstFormP v u x x' s k} \\<turnstile> OrdP k\n 4. {SeqAbstFormP v u x x' s k} \\<turnstile>\n    LstSeqP s k (HPair u (HPair x x'))", "thus ?thesis1 ?thsf ?thOrd ?thLstSeq"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, v, sli, sl, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sli \\<sharp> (s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl \\<sharp> (s, v, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl' \\<sharp> (s, v, m, n, smi, sm, sm', sni, sn, sn')\n  atom m \\<sharp> (s, n, smi, sm, sm', sni, sn, sn')\n  atom n \\<sharp> (s, smi, sm, sm', sni, sn, sn')\n  atom smi \\<sharp> (s, sm, sm', sni, sn, sn')\n  atom sm \\<sharp> (s, sm', sni, sn, sn')\n  atom sm' \\<sharp> (s, sni, sn, sn')\n  atom sni \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqAbstFormP v i x x' s k =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> i \\<and>\n      a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqAbstFormP v i x x' s k)) &&&\n    {SeqAbstFormP v u x x' s k} \\<turnstile> OrdP k &&&\n    {SeqAbstFormP v u x x' s k} \\<turnstile>\n    LstSeqP s k (HPair u (HPair x x'))", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> SeqAbstFormP v i x x' s k =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> i \\<and>\n   a \\<sharp> x \\<and>\n   a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n  Sigma_fm (SeqAbstFormP v i x x' s k)\n  {SeqAbstFormP v u x x' s k} \\<turnstile> OrdP k\n  {SeqAbstFormP v u x x' s k} \\<turnstile>\n  LstSeqP s k (HPair u (HPair x x'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqAbstFormP_subst [simp]:\n      \"(SeqAbstFormP v u x x' s k)(i::=t) =\n       SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x') (subst i t s) (subst i t k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqAbstFormP v u x x' s k)(i::=t) =\n    SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqAbstFormP v u x x' s k)(i::=t) =\n    SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "obtain l::name and sli::name and sl::name and sl'::name and m::name and n::name and\n         smi::name and sm::name and sm'::name and sni::name and sn::name and sn'::name\n   where \"atom l \\<sharp> (i,t,s,k,v,sli,sl,sl',m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom sli \\<sharp> (i,t,s,v,sl,sl',m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom sl \\<sharp> (i,t,s,v,sl',m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom sl' \\<sharp> (i,t,s,v,m,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom m \\<sharp> (i,t,s,n,smi,sm,sm',sni,sn,sn')\"\n         \"atom n \\<sharp> (i,t,s,smi,sm,sm',sni,sn,sn')\"\n         \"atom smi \\<sharp> (i,t,s,sm,sm',sni,sn,sn')\"\n         \"atom sm \\<sharp> (i,t,s,sm',sni,sn,sn')\" \"atom sm' \\<sharp> (i,t,s,sni,sn,sn')\"\n         \"atom sni \\<sharp> (i,t,s,sn,sn')\" \"atom sn \\<sharp> (i,t,s,sn')\" \"atom sn' \\<sharp> (i,t,s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sli sl sl' m n smi sm sm' sni sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (i, t, s, k, v, sli, sl, sl', m, n, smi, sm,\n                              sm', sni, sn, sn');\n         atom\n          sli \\<sharp> (i, t, s, v, sl, sl', m, n, smi, sm, sm', sni, sn,\n                        sn');\n         atom\n          sl \\<sharp> (i, t, s, v, sl', m, n, smi, sm, sm', sni, sn, sn');\n         atom sl' \\<sharp> (i, t, s, v, m, n, smi, sm, sm', sni, sn, sn');\n         atom m \\<sharp> (i, t, s, n, smi, sm, sm', sni, sn, sn');\n         atom n \\<sharp> (i, t, s, smi, sm, sm', sni, sn, sn');\n         atom smi \\<sharp> (i, t, s, sm, sm', sni, sn, sn');\n         atom sm \\<sharp> (i, t, s, sm', sni, sn, sn');\n         atom sm' \\<sharp> (i, t, s, sni, sn, sn');\n         atom sni \\<sharp> (i, t, s, sn, sn');\n         atom sn \\<sharp> (i, t, s, sn');\n         atom sn' \\<sharp> (i, t, s)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom\n   l \\<sharp> (i, t, s, k, v, sli, sl, sl', m, n, smi, sm, sm', sni, sn,\n               sn')\n  atom sli \\<sharp> (i, t, s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl \\<sharp> (i, t, s, v, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl' \\<sharp> (i, t, s, v, m, n, smi, sm, sm', sni, sn, sn')\n  atom m \\<sharp> (i, t, s, n, smi, sm, sm', sni, sn, sn')\n  atom n \\<sharp> (i, t, s, smi, sm, sm', sni, sn, sn')\n  atom smi \\<sharp> (i, t, s, sm, sm', sni, sn, sn')\n  atom sm \\<sharp> (i, t, s, sm', sni, sn, sn')\n  atom sm' \\<sharp> (i, t, s, sni, sn, sn')\n  atom sni \\<sharp> (i, t, s, sn, sn')\n  atom sn \\<sharp> (i, t, s, sn')\n  atom sn' \\<sharp> (i, t, s)\n\ngoal (1 subgoal):\n 1. (SeqAbstFormP v u x x' s k)(i::=t) =\n    SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom\n   l \\<sharp> (i, t, s, k, v, sli, sl, sl', m, n, smi, sm, sm', sni, sn,\n               sn')\n  atom sli \\<sharp> (i, t, s, v, sl, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl \\<sharp> (i, t, s, v, sl', m, n, smi, sm, sm', sni, sn, sn')\n  atom sl' \\<sharp> (i, t, s, v, m, n, smi, sm, sm', sni, sn, sn')\n  atom m \\<sharp> (i, t, s, n, smi, sm, sm', sni, sn, sn')\n  atom n \\<sharp> (i, t, s, smi, sm, sm', sni, sn, sn')\n  atom smi \\<sharp> (i, t, s, sm, sm', sni, sn, sn')\n  atom sm \\<sharp> (i, t, s, sm', sni, sn, sn')\n  atom sm' \\<sharp> (i, t, s, sni, sn, sn')\n  atom sni \\<sharp> (i, t, s, sn, sn')\n  atom sn \\<sharp> (i, t, s, sn')\n  atom sn' \\<sharp> (i, t, s)\n\ngoal (1 subgoal):\n 1. (SeqAbstFormP v u x x' s k)(i::=t) =\n    SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "by (force simp add: SeqAbstFormP.simps [of l _ _ _ sli sl sl' m n smi sm sm' sni sn sn'])"], ["proof (state)\nthis:\n  (SeqAbstFormP v u x x' s k)(i::=t) =\n  SeqAbstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n   (subst i t s) (subst i t k)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare SeqAbstFormP.simps [simp del]"], ["", "subsection \\<open>Defining the syntax: the main AbstForm predicate\\<close>"], ["", "nominal_function AbstFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (v,i,x,x',k);\n          atom k \\<sharp> (v,i,x,x')\\<rbrakk> \\<Longrightarrow>\n    AbstFormP v i x x' = VarP v AND OrdP i AND Ex s (Ex k (SeqAbstFormP v i x x' (Var s) (Var k)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt AbstFormP_graph_aux\n 2. \\<And>x y. AbstFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s v i xa x' k.\n           \\<lbrakk>atom s \\<sharp> (v, i, xa, x', k);\n            atom k \\<sharp> (v, i, xa, x'); x = (v, i, xa, x')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s v i x x' k sa va ia xa x'a ka.\n       \\<lbrakk>atom s \\<sharp> (v, i, x, x', k);\n        atom k \\<sharp> (v, i, x, x');\n        atom sa \\<sharp> (va, ia, xa, x'a, ka);\n        atom ka \\<sharp> (va, ia, xa, x'a);\n        (v, i, x, x') = (va, ia, xa, x'a)\\<rbrakk>\n       \\<Longrightarrow> VarP v AND\n                         OrdP i AND\n                         SyntaxN.Ex s\n                          (SyntaxN.Ex k\n                            (SeqAbstFormP v i x x' (Var s) (Var k))) =\n                         VarP va AND\n                         OrdP ia AND\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka\n                            (SeqAbstFormP va ia xa x'a (Var sa) (Var ka)))", "by (auto simp: eqvt_def AbstFormP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All AbstFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows AbstFormP_fresh_iff [simp]:\n       \"a \\<sharp> AbstFormP v i x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\" (is ?thesis1)\n    and AbstFormP_sf [iff]:\n       \"Sigma_fm (AbstFormP v i x x')\"    (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> AbstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    Sigma_fm (AbstFormP v i x x')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> AbstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n 2. Sigma_fm (AbstFormP v i x x')", "obtain s::name and k::name  where \"atom s \\<sharp> (v,i,x,x',k)\" \"atom k \\<sharp> (v,i,x,x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, x, x', k);\n         atom k \\<sharp> (v, i, x, x')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, x, x', k)\n  atom k \\<sharp> (v, i, x, x')\n\ngoal (2 subgoals):\n 1. a \\<sharp> AbstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n 2. Sigma_fm (AbstFormP v i x x')", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, x, x', k)\n  atom k \\<sharp> (v, i, x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> AbstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    Sigma_fm (AbstFormP v i x x')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> AbstFormP v i x x' =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n  Sigma_fm (AbstFormP v i x x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AbstFormP_subst [simp]:\n     \"(AbstFormP v i x x')(j::=t) = AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AbstFormP v i x x')(j::=t) =\n    AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (AbstFormP v i x x')(j::=t) =\n    AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "obtain s::name and k::name  where \"atom s \\<sharp> (v,i,x,x',t,j,k)\" \"atom k \\<sharp> (v,i,x,x',t,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, x, x', t, j, k);\n         atom k \\<sharp> (v, i, x, x', t, j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, x, x', t, j, k)\n  atom k \\<sharp> (v, i, x, x', t, j)\n\ngoal (1 subgoal):\n 1. (AbstFormP v i x x')(j::=t) =\n    AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, x, x', t, j, k)\n  atom k \\<sharp> (v, i, x, x', t, j)\n\ngoal (1 subgoal):\n 1. (AbstFormP v i x x')(j::=t) =\n    AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "by (auto simp: AbstFormP.simps [of s _ _ _ _ k])"], ["proof (state)\nthis:\n  (AbstFormP v i x x')(j::=t) =\n  AbstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')\n\ngoal:\nNo subgoals!", "qed"], ["", "declare AbstFormP.simps [simp del]"], ["", "section \\<open>Substitution over formulas\\<close>"], ["", "subsection \\<open>The predicate \\<open>SubstAtomicP\\<close>\\<close>"], ["", "nominal_function SubstAtomicP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom t \\<sharp> (v,tm,y,y',t',u,u');\n          atom t' \\<sharp> (v,tm,y,y',u,u');\n          atom u \\<sharp> (v,tm,y,y',u');\n          atom u' \\<sharp> (v,tm,y,y')\\<rbrakk> \\<Longrightarrow>\n    SubstAtomicP v tm y y' =\n         Ex t (Ex u (Ex t' (Ex u'\n           (SubstTermP v tm (Var t) (Var t') AND SubstTermP v tm (Var u) (Var u') AND\n                      ((y EQ Q_Eq (Var t) (Var u) AND y' EQ Q_Eq (Var t') (Var u')) OR\n                       (y EQ Q_Mem (Var t) (Var u) AND y' EQ Q_Mem (Var t') (Var u')))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SubstAtomicP_graph_aux\n 2. \\<And>x y. SubstAtomicP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>t v tm y y' t' u u'.\n           \\<lbrakk>atom t \\<sharp> (v, tm, y, y', t', u, u');\n            atom t' \\<sharp> (v, tm, y, y', u, u');\n            atom u \\<sharp> (v, tm, y, y', u');\n            atom u' \\<sharp> (v, tm, y, y'); x = (v, tm, y, y')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>t v tm y y' t' u u' ta va tma ya y'a t'a ua u'a.\n       \\<lbrakk>atom t \\<sharp> (v, tm, y, y', t', u, u');\n        atom t' \\<sharp> (v, tm, y, y', u, u');\n        atom u \\<sharp> (v, tm, y, y', u'); atom u' \\<sharp> (v, tm, y, y');\n        atom ta \\<sharp> (va, tma, ya, y'a, t'a, ua, u'a);\n        atom t'a \\<sharp> (va, tma, ya, y'a, ua, u'a);\n        atom ua \\<sharp> (va, tma, ya, y'a, u'a);\n        atom u'a \\<sharp> (va, tma, ya, y'a);\n        (v, tm, y, y') = (va, tma, ya, y'a)\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex t\n                          (SyntaxN.Ex u\n                            (SyntaxN.Ex t'\n                              (SyntaxN.Ex u'\n                                (SubstTermP v tm (Var t) (Var t') AND\n                                 SubstTermP v tm (Var u) (Var u') AND\n                                 (y EQ Q_Eq (Var t) (Var u) AND\n                                  y' EQ Q_Eq (Var t') (Var u') OR\n                                  y EQ Q_Mem (Var t) (Var u) AND\n                                  y' EQ Q_Mem (Var t') (Var u')))))) =\n                         SyntaxN.Ex ta\n                          (SyntaxN.Ex ua\n                            (SyntaxN.Ex t'a\n                              (SyntaxN.Ex u'a\n                                (SubstTermP va tma (Var ta) (Var t'a) AND\n                                 SubstTermP va tma (Var ua) (Var u'a) AND\n                                 (ya EQ Q_Eq (Var ta) (Var ua) AND\n                                  y'a EQ Q_Eq (Var t'a) (Var u'a) OR\n                                  ya EQ Q_Mem (Var ta) (Var ua) AND\n                                  y'a EQ Q_Mem (Var t'a) (Var u'a))))))", "by (auto simp: eqvt_def SubstAtomicP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SubstAtomicP_dom", "by lexicographic_order"], ["", "lemma\n  shows SubstAtomicP_fresh_iff [simp]:\n       \"a \\<sharp> SubstAtomicP v tm y y' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y'\"           (is ?thesis1)\n    and SubstAtomicP_sf [iff]: \"Sigma_fm (SubstAtomicP v tm y y')\"               (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> SubstAtomicP v tm y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y') &&&\n    Sigma_fm (SubstAtomicP v tm y y')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> SubstAtomicP v tm y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y')\n 2. Sigma_fm (SubstAtomicP v tm y y')", "obtain t::name and u::name and t'::name  and u'::name\n    where \"atom t \\<sharp> (v,tm,y,y',t',u,u')\" \"atom t' \\<sharp> (v,tm,y,y',u,u')\"\n          \"atom u \\<sharp> (v,tm,y,y',u')\" \"atom u' \\<sharp> (v,tm,y,y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t t' u u'.\n        \\<lbrakk>atom t \\<sharp> (v, tm, y, y', t', u, u');\n         atom t' \\<sharp> (v, tm, y, y', u, u');\n         atom u \\<sharp> (v, tm, y, y', u');\n         atom u' \\<sharp> (v, tm, y, y')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (v, tm, y, y', t', u, u')\n  atom t' \\<sharp> (v, tm, y, y', u, u')\n  atom u \\<sharp> (v, tm, y, y', u')\n  atom u' \\<sharp> (v, tm, y, y')\n\ngoal (2 subgoals):\n 1. a \\<sharp> SubstAtomicP v tm y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y')\n 2. Sigma_fm (SubstAtomicP v tm y y')", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (v, tm, y, y', t', u, u')\n  atom t' \\<sharp> (v, tm, y, y', u, u')\n  atom u \\<sharp> (v, tm, y, y', u')\n  atom u' \\<sharp> (v, tm, y, y')\n\ngoal (1 subgoal):\n 1. a \\<sharp> SubstAtomicP v tm y y' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y') &&&\n    Sigma_fm (SubstAtomicP v tm y y')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> SubstAtomicP v tm y y' =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> tm \\<and> a \\<sharp> y \\<and> a \\<sharp> y')\n  Sigma_fm (SubstAtomicP v tm y y')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstAtomicP_subst [simp]:\n  \"(SubstAtomicP v tm y y')(i::=w) = SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SubstAtomicP v tm y y')(i::=w) =\n    SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SubstAtomicP v tm y y')(i::=w) =\n    SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "obtain t::name and u::name and t'::name  and u'::name\n    where \"atom t \\<sharp> (v,tm,y,y',w,i,t',u,u')\" \"atom t' \\<sharp> (v,tm,y,y',w,i,u,u')\"\n          \"atom u \\<sharp> (v,tm,y,y',w,i,u')\" \"atom u' \\<sharp> (v,tm,y,y',w,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t t' u u'.\n        \\<lbrakk>atom t \\<sharp> (v, tm, y, y', w, i, t', u, u');\n         atom t' \\<sharp> (v, tm, y, y', w, i, u, u');\n         atom u \\<sharp> (v, tm, y, y', w, i, u');\n         atom u' \\<sharp> (v, tm, y, y', w, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (v, tm, y, y', w, i, t', u, u')\n  atom t' \\<sharp> (v, tm, y, y', w, i, u, u')\n  atom u \\<sharp> (v, tm, y, y', w, i, u')\n  atom u' \\<sharp> (v, tm, y, y', w, i)\n\ngoal (1 subgoal):\n 1. (SubstAtomicP v tm y y')(i::=w) =\n    SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (v, tm, y, y', w, i, t', u, u')\n  atom t' \\<sharp> (v, tm, y, y', w, i, u, u')\n  atom u \\<sharp> (v, tm, y, y', w, i, u')\n  atom u' \\<sharp> (v, tm, y, y', w, i)\n\ngoal (1 subgoal):\n 1. (SubstAtomicP v tm y y')(i::=w) =\n    SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')", "by (simp add: SubstAtomicP.simps [of t _ _ _ _ t' u u'])"], ["proof (state)\nthis:\n  (SubstAtomicP v tm y y')(i::=w) =\n  SubstAtomicP (subst i w v) (subst i w tm) (subst i w y) (subst i w y')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstAtomicP_cong:\n  \"\\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> tm EQ tm'; H \\<turnstile> x EQ x'; H \\<turnstile> y EQ y'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SubstAtomicP v tm x y IFF SubstAtomicP v' tm' x' y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> tm EQ tm';\n     H \\<turnstile> x EQ x'; H \\<turnstile> y EQ y'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile>\n                      SubstAtomicP v tm x y IFF SubstAtomicP v' tm' x' y'", "by (rule P4_cong) auto"], ["", "subsection \\<open>The predicate \\<open>SubstMakeForm\\<close>\\<close>"], ["", "nominal_function SeqSubstFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,v,u,sl,sl',m,n,sm,sm',sn,sn');\n          atom sl \\<sharp> (s,v,u,sl',m,n,sm,sm',sn,sn');\n          atom sl' \\<sharp> (s,v,u,m,n,sm,sm',sn,sn');\n          atom m \\<sharp> (s,n,sm,sm',sn,sn'); atom n \\<sharp> (s,sm,sm',sn,sn');\n          atom sm \\<sharp> (s,sm',sn,sn'); atom sm' \\<sharp> (s,sn,sn');\n          atom sn \\<sharp> (s,sn'); atom sn' \\<sharp> s\\<rbrakk> \\<Longrightarrow>\n    SeqSubstFormP v u x x' s k =\n      LstSeqP s k (HPair x x') AND\n      All2 l (SUCC k) (Ex sl (Ex sl' (HPair (Var l) (HPair (Var sl) (Var sl')) IN s AND\n                (SubstAtomicP v u (Var sl) (Var sl') OR\n                Ex m (Ex n (Ex sm (Ex sm' (Ex sn (Ex sn' (Var m IN Var l AND Var n IN Var l AND\n                       HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n                       HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n                       ((Var sl EQ Q_Disj (Var sm) (Var sn) AND\n                        Var sl' EQ Q_Disj (Var sm') (Var sn')) OR\n                        (Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm')) OR\n                        (Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqSubstFormP_graph_aux\n 2. \\<And>x y. SeqSubstFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k v u sl sl' m n sm sm' sn sn' xa x'.\n           \\<lbrakk>atom\n                     l \\<sharp> (s, k, v, u, sl, sl', m, n, sm, sm', sn,\n                                 sn');\n            atom sl \\<sharp> (s, v, u, sl', m, n, sm, sm', sn, sn');\n            atom sl' \\<sharp> (s, v, u, m, n, sm, sm', sn, sn');\n            atom m \\<sharp> (s, n, sm, sm', sn, sn');\n            atom n \\<sharp> (s, sm, sm', sn, sn');\n            atom sm \\<sharp> (s, sm', sn, sn');\n            atom sm' \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (v, u, xa, x', s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k v u sl sl' m n sm sm' sn sn' x x' la sa ka va ua sla sl'a ma\n       na sma sm'a sna sn'a xa x'a.\n       \\<lbrakk>atom\n                 l \\<sharp> (s, k, v, u, sl, sl', m, n, sm, sm', sn, sn');\n        atom sl \\<sharp> (s, v, u, sl', m, n, sm, sm', sn, sn');\n        atom sl' \\<sharp> (s, v, u, m, n, sm, sm', sn, sn');\n        atom m \\<sharp> (s, n, sm, sm', sn, sn');\n        atom n \\<sharp> (s, sm, sm', sn, sn');\n        atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n        atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s;\n        atom\n         la \\<sharp> (sa, ka, va, ua, sla, sl'a, ma, na, sma, sm'a, sna,\n                      sn'a);\n        atom sla \\<sharp> (sa, va, ua, sl'a, ma, na, sma, sm'a, sna, sn'a);\n        atom sl'a \\<sharp> (sa, va, ua, ma, na, sma, sm'a, sna, sn'a);\n        atom ma \\<sharp> (sa, na, sma, sm'a, sna, sn'a);\n        atom na \\<sharp> (sa, sma, sm'a, sna, sn'a);\n        atom sma \\<sharp> (sa, sm'a, sna, sn'a);\n        atom sm'a \\<sharp> (sa, sna, sn'a); atom sna \\<sharp> (sa, sn'a);\n        atom sn'a \\<sharp> sa;\n        (v, u, x, x', s, k) = (va, ua, xa, x'a, sa, ka)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k (HPair x x') AND\n                         All2 l (SUCC k)\n                          (SyntaxN.Ex sl\n                            (SyntaxN.Ex sl'\n                              (HPair (Var l) (HPair (Var sl) (Var sl')) IN\n                               s AND\n                               (SubstAtomicP v u (Var sl) (Var sl') OR\n                                SyntaxN.Ex m\n                                 (SyntaxN.Ex n\n                                   (SyntaxN.Ex sm\n                                     (SyntaxN.Ex sm'\n (SyntaxN.Ex sn\n   (SyntaxN.Ex sn'\n     (Var m IN Var l AND\n      Var n IN Var l AND\n      HPair (Var m) (HPair (Var sm) (Var sm')) IN s AND\n      HPair (Var n) (HPair (Var sn) (Var sn')) IN s AND\n      (Var sl EQ Q_Disj (Var sm) (Var sn) AND\n       Var sl' EQ Q_Disj (Var sm') (Var sn') OR\n       Var sl EQ Q_Neg (Var sm) AND Var sl' EQ Q_Neg (Var sm') OR\n       Var sl EQ Q_Ex (Var sm) AND Var sl' EQ Q_Ex (Var sm')))))))))))) =\n                         LstSeqP sa ka (HPair xa x'a) AND\n                         All2 la (SUCC ka)\n                          (SyntaxN.Ex sla\n                            (SyntaxN.Ex sl'a\n                              (HPair (Var la)\n                                (HPair (Var sla) (Var sl'a)) IN\n                               sa AND\n                               (SubstAtomicP va ua (Var sla) (Var sl'a) OR\n                                SyntaxN.Ex ma\n                                 (SyntaxN.Ex na\n                                   (SyntaxN.Ex sma\n                                     (SyntaxN.Ex sm'a\n (SyntaxN.Ex sna\n   (SyntaxN.Ex sn'a\n     (Var ma IN Var la AND\n      Var na IN Var la AND\n      HPair (Var ma) (HPair (Var sma) (Var sm'a)) IN sa AND\n      HPair (Var na) (HPair (Var sna) (Var sn'a)) IN sa AND\n      (Var sla EQ Q_Disj (Var sma) (Var sna) AND\n       Var sl'a EQ Q_Disj (Var sm'a) (Var sn'a) OR\n       Var sla EQ Q_Neg (Var sma) AND Var sl'a EQ Q_Neg (Var sm'a) OR\n       Var sla EQ Q_Ex (Var sma) AND Var sl'a EQ Q_Ex (Var sm'a))))))))))))", "apply (simp_all add: eqvt_def SeqSubstFormP_graph_aux_def flip_fresh_fresh)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       (\\<And>l s k v u sl sl' m n sm sm' sn sn' xa x'.\n           \\<lbrakk>atom\n                     l \\<sharp> (s, k, v, u, sl, sl', m, n, sm, sm', sn,\n                                 sn');\n            atom sl \\<sharp> (s, v, u, sl', m, n, sm, sm', sn, sn');\n            atom sl' \\<sharp> (s, v, u, m, n, sm, sm', sn, sn');\n            atom m \\<sharp> (s, n, sm, sm', sn, sn');\n            atom n \\<sharp> (s, sm, sm', sn, sn');\n            atom sm \\<sharp> (s, sm', sn, sn');\n            atom sm' \\<sharp> (s, sn, sn'); atom sn \\<sharp> (s, sn');\n            atom sn' \\<sharp> s; x = (v, u, xa, x', s, k)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P", "by auto (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqSubstFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows SeqSubstFormP_fresh_iff [simp]:\n       \"a \\<sharp> SeqSubstFormP v u x x' s k \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> u \\<and> a \\<sharp> x \\<and> a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k\"  (is ?thesis1)\n    and SeqSubstFormP_sf [iff]:\n       \"Sigma_fm (SeqSubstFormP v u x x' s k)\"  (is ?thsf)\n    and SeqSubstFormP_imp_OrdP:\n       \"{ SeqSubstFormP v u x x' s k } \\<turnstile> OrdP k\"  (is ?thOrd)\n    and SeqSubstFormP_imp_LstSeqP:\n       \"{ SeqSubstFormP v u x x' s k } \\<turnstile> LstSeqP s k (HPair x x')\"  (is ?thLstSeq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqSubstFormP v u x x' s k =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> u \\<and>\n      a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqSubstFormP v u x x' s k)) &&&\n    {SeqSubstFormP v u x x' s k} \\<turnstile> OrdP k &&&\n    {SeqSubstFormP v u x x' s k} \\<turnstile> LstSeqP s k (HPair x x')", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqSubstFormP v u x x' s k =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> u \\<and>\n     a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqSubstFormP v u x x' s k)\n 3. {SeqSubstFormP v u x x' s k} \\<turnstile> OrdP k\n 4. {SeqSubstFormP v u x x' s k} \\<turnstile> LstSeqP s k (HPair x x')", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n    where atoms:\n         \"atom l \\<sharp> (s,k,v,u,sl,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl \\<sharp> (s,v,u,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl' \\<sharp> (s,v,u,m,n,sm,sm',sn,sn')\"\n         \"atom m \\<sharp> (s,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,sm,sm',sn,sn')\"\n         \"atom sm \\<sharp> (s,sm',sn,sn')\" \"atom sm' \\<sharp> (s,sn,sn')\"\n         \"atom sn \\<sharp> (s,sn')\" \"atom sn' \\<sharp> (s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, v, u, sl, sl', m, n, sm, sm', sn, sn');\n         atom sl \\<sharp> (s, v, u, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, v, u, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, sm', sn, sn'); atom sm' \\<sharp> (s, sn, sn');\n         atom sn \\<sharp> (s, sn'); atom sn' \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, v, u, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, u, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, u, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqSubstFormP v u x x' s k =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> u \\<and>\n     a \\<sharp> x \\<and>\n     a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n 2. Sigma_fm (SeqSubstFormP v u x x' s k)\n 3. {SeqSubstFormP v u x x' s k} \\<turnstile> OrdP k\n 4. {SeqSubstFormP v u x x' s k} \\<turnstile> LstSeqP s k (HPair x x')", "thus ?thesis1 ?thsf ?thOrd ?thLstSeq"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, v, u, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, u, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, u, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, sm', sn, sn')\n  atom sm' \\<sharp> (s, sn, sn')\n  atom sn \\<sharp> (s, sn')\n  atom sn' \\<sharp> s\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqSubstFormP v u x x' s k =\n     (a \\<sharp> v \\<and>\n      a \\<sharp> u \\<and>\n      a \\<sharp> x \\<and>\n      a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k) &&&\n     Sigma_fm (SeqSubstFormP v u x x' s k)) &&&\n    {SeqSubstFormP v u x x' s k} \\<turnstile> OrdP k &&&\n    {SeqSubstFormP v u x x' s k} \\<turnstile> LstSeqP s k (HPair x x')", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> SeqSubstFormP v u x x' s k =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> u \\<and>\n   a \\<sharp> x \\<and>\n   a \\<sharp> x' \\<and> a \\<sharp> s \\<and> a \\<sharp> k)\n  Sigma_fm (SeqSubstFormP v u x x' s k)\n  {SeqSubstFormP v u x x' s k} \\<turnstile> OrdP k\n  {SeqSubstFormP v u x x' s k} \\<turnstile> LstSeqP s k (HPair x x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqSubstFormP_subst [simp]:\n      \"(SeqSubstFormP v u x x' s k)(i::=t) =\n       SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x') (subst i t s) (subst i t k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqSubstFormP v u x x' s k)(i::=t) =\n    SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqSubstFormP v u x x' s k)(i::=t) =\n    SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "obtain l::name and sl::name and sl'::name and m::name and n::name and\n         sm::name and sm'::name and sn::name and sn'::name\n   where \"atom l \\<sharp> (s,k,v,u,t,i,sl,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl \\<sharp> (s,v,u,t,i,sl',m,n,sm,sm',sn,sn')\"\n         \"atom sl' \\<sharp> (s,v,u,t,i,m,n,sm,sm',sn,sn')\"\n         \"atom m \\<sharp> (s,t,i,n,sm,sm',sn,sn')\" \"atom n \\<sharp> (s,t,i,sm,sm',sn,sn')\"\n         \"atom sm \\<sharp> (s,t,i,sm',sn,sn')\" \"atom sm' \\<sharp> (s,t,i,sn,sn')\"\n         \"atom sn \\<sharp> (s,t,i,sn')\" \"atom sn' \\<sharp> (s,t,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl sl' m n sm sm' sn sn'.\n        \\<lbrakk>atom\n                  l \\<sharp> (s, k, v, u, t, i, sl, sl', m, n, sm, sm', sn,\n                              sn');\n         atom sl \\<sharp> (s, v, u, t, i, sl', m, n, sm, sm', sn, sn');\n         atom sl' \\<sharp> (s, v, u, t, i, m, n, sm, sm', sn, sn');\n         atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn');\n         atom n \\<sharp> (s, t, i, sm, sm', sn, sn');\n         atom sm \\<sharp> (s, t, i, sm', sn, sn');\n         atom sm' \\<sharp> (s, t, i, sn, sn');\n         atom sn \\<sharp> (s, t, i, sn');\n         atom sn' \\<sharp> (s, t, i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, v, u, t, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, u, t, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, u, t, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, t, i, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, t, i, sm', sn, sn')\n  atom sm' \\<sharp> (s, t, i, sn, sn')\n  atom sn \\<sharp> (s, t, i, sn')\n  atom sn' \\<sharp> (s, t, i)\n\ngoal (1 subgoal):\n 1. (SeqSubstFormP v u x x' s k)(i::=t) =\n    SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, v, u, t, i, sl, sl', m, n, sm, sm', sn, sn')\n  atom sl \\<sharp> (s, v, u, t, i, sl', m, n, sm, sm', sn, sn')\n  atom sl' \\<sharp> (s, v, u, t, i, m, n, sm, sm', sn, sn')\n  atom m \\<sharp> (s, t, i, n, sm, sm', sn, sn')\n  atom n \\<sharp> (s, t, i, sm, sm', sn, sn')\n  atom sm \\<sharp> (s, t, i, sm', sn, sn')\n  atom sm' \\<sharp> (s, t, i, sn, sn')\n  atom sn \\<sharp> (s, t, i, sn')\n  atom sn' \\<sharp> (s, t, i)\n\ngoal (1 subgoal):\n 1. (SeqSubstFormP v u x x' s k)(i::=t) =\n    SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n     (subst i t s) (subst i t k)", "by (force simp add: SeqSubstFormP.simps [of l _ _ _ _ sl sl' m n sm sm' sn sn'])"], ["proof (state)\nthis:\n  (SeqSubstFormP v u x x' s k)(i::=t) =\n  SeqSubstFormP (subst i t v) (subst i t u) (subst i t x) (subst i t x')\n   (subst i t s) (subst i t k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqSubstFormP_cong:\n  \"\\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'; H \\<turnstile> s EQ s'; H \\<turnstile> k EQ k'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SeqSubstFormP v i t u s k IFF SeqSubstFormP v i t' u' s' k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u';\n     H \\<turnstile> s EQ s'; H \\<turnstile> k EQ k'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile>\n                      SeqSubstFormP v i t u s k IFF\n                      SeqSubstFormP v i t' u' s' k'", "by (rule P4_cong [where tms=\"[v,i]\"]) (auto simp: fresh_Cons)"], ["", "declare SeqSubstFormP.simps [simp del]"], ["", "subsection \\<open>Defining the syntax: the main SubstForm predicate\\<close>"], ["", "nominal_function SubstFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom s \\<sharp> (v,i,x,x',k); atom k \\<sharp> (v,i,x,x')\\<rbrakk> \\<Longrightarrow>\n    SubstFormP v i x x' =\n      VarP v AND TermP i AND Ex s (Ex k (SeqSubstFormP v i x x' (Var s) (Var k)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SubstFormP_graph_aux\n 2. \\<And>x y. SubstFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>s v i xa x' k.\n           \\<lbrakk>atom s \\<sharp> (v, i, xa, x', k);\n            atom k \\<sharp> (v, i, xa, x'); x = (v, i, xa, x')\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>s v i x x' k sa va ia xa x'a ka.\n       \\<lbrakk>atom s \\<sharp> (v, i, x, x', k);\n        atom k \\<sharp> (v, i, x, x');\n        atom sa \\<sharp> (va, ia, xa, x'a, ka);\n        atom ka \\<sharp> (va, ia, xa, x'a);\n        (v, i, x, x') = (va, ia, xa, x'a)\\<rbrakk>\n       \\<Longrightarrow> VarP v AND\n                         TermP i AND\n                         SyntaxN.Ex s\n                          (SyntaxN.Ex k\n                            (SeqSubstFormP v i x x' (Var s) (Var k))) =\n                         VarP va AND\n                         TermP ia AND\n                         SyntaxN.Ex sa\n                          (SyntaxN.Ex ka\n                            (SeqSubstFormP va ia xa x'a (Var sa) (Var ka)))", "by (auto simp: eqvt_def SubstFormP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SubstFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows SubstFormP_fresh_iff [simp]:\n       \"a \\<sharp> SubstFormP v i x x' \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x'\"  (is ?thesis1)\n    and SubstFormP_sf [iff]:\n       \"Sigma_fm (SubstFormP v i x x')\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> SubstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    Sigma_fm (SubstFormP v i x x')", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> SubstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n 2. Sigma_fm (SubstFormP v i x x')", "obtain s::name and k::name\n    where \"atom s \\<sharp> (v,i,x,x',k)\"  \"atom k \\<sharp> (v,i,x,x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, x, x', k);\n         atom k \\<sharp> (v, i, x, x')\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, x, x', k)\n  atom k \\<sharp> (v, i, x, x')\n\ngoal (2 subgoals):\n 1. a \\<sharp> SubstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n 2. Sigma_fm (SubstFormP v i x x')", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, x, x', k)\n  atom k \\<sharp> (v, i, x, x')\n\ngoal (1 subgoal):\n 1. a \\<sharp> SubstFormP v i x x' =\n    (a \\<sharp> v \\<and>\n     a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x') &&&\n    Sigma_fm (SubstFormP v i x x')", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> SubstFormP v i x x' =\n  (a \\<sharp> v \\<and>\n   a \\<sharp> i \\<and> a \\<sharp> x \\<and> a \\<sharp> x')\n  Sigma_fm (SubstFormP v i x x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstFormP_subst [simp]:\n     \"(SubstFormP v i x x')(j::=t) = SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SubstFormP v i x x')(j::=t) =\n    SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SubstFormP v i x x')(j::=t) =\n    SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "obtain s::name and k::name  where \"atom s \\<sharp> (v,i,x,x',t,j,k)\" \"atom k \\<sharp> (v,i,x,x',t,j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s k.\n        \\<lbrakk>atom s \\<sharp> (v, i, x, x', t, j, k);\n         atom k \\<sharp> (v, i, x, x', t, j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom s \\<sharp> (v, i, x, x', t, j, k)\n  atom k \\<sharp> (v, i, x, x', t, j)\n\ngoal (1 subgoal):\n 1. (SubstFormP v i x x')(j::=t) =\n    SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom s \\<sharp> (v, i, x, x', t, j, k)\n  atom k \\<sharp> (v, i, x, x', t, j)\n\ngoal (1 subgoal):\n 1. (SubstFormP v i x x')(j::=t) =\n    SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')", "by (auto simp: SubstFormP.simps [of s _ _ _ _ k])"], ["proof (state)\nthis:\n  (SubstFormP v i x x')(j::=t) =\n  SubstFormP (subst j t v) (subst j t i) (subst j t x) (subst j t x')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SubstFormP_cong:\n  \"\\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> i EQ i'; H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n   \\<Longrightarrow> H \\<turnstile> SubstFormP v i t u IFF SubstFormP v' i' t' u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>H \\<turnstile> v EQ v'; H \\<turnstile> i EQ i';\n     H \\<turnstile> t EQ t'; H \\<turnstile> u EQ u'\\<rbrakk>\n    \\<Longrightarrow> H \\<turnstile>\n                      SubstFormP v i t u IFF SubstFormP v' i' t' u'", "by (rule P4_cong) auto"], ["", "lemma ground_SubstFormP [simp]: \"ground_fm (SubstFormP v y x x') \\<longleftrightarrow> ground v \\<and> ground y \\<and> ground x \\<and> ground x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground_fm (SubstFormP v y x x') =\n    (ground v \\<and> ground y \\<and> ground x \\<and> ground x')", "by (auto simp: ground_aux_def ground_fm_aux_def supp_conv_fresh)"], ["", "declare SubstFormP.simps [simp del]"], ["", "section \\<open>The predicate \\<open>AtomicP\\<close>\\<close>"], ["", "nominal_function AtomicP :: \"tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom t \\<sharp> (u,y); atom u \\<sharp> y\\<rbrakk> \\<Longrightarrow>\n    AtomicP y = Ex t (Ex u (TermP (Var t) AND TermP (Var u) AND\n                      (y EQ Q_Eq (Var t) (Var u) OR\n                       y EQ Q_Mem (Var t) (Var u))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt AtomicP_graph_aux\n 2. \\<And>x y. AtomicP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>t u y.\n           \\<lbrakk>atom t \\<sharp> (u, y); atom u \\<sharp> y;\n            x = y\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>t u y ta ua ya.\n       \\<lbrakk>atom t \\<sharp> (u, y); atom u \\<sharp> y;\n        atom ta \\<sharp> (ua, ya); atom ua \\<sharp> ya; y = ya\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex t\n                          (SyntaxN.Ex u\n                            (TermP (Var t) AND\n                             TermP (Var u) AND\n                             (y EQ Q_Eq (Var t) (Var u) OR\n                              y EQ Q_Mem (Var t) (Var u)))) =\n                         SyntaxN.Ex ta\n                          (SyntaxN.Ex ua\n                            (TermP (Var ta) AND\n                             TermP (Var ua) AND\n                             (ya EQ Q_Eq (Var ta) (Var ua) OR\n                              ya EQ Q_Mem (Var ta) (Var ua))))", "by (auto simp: eqvt_def AtomicP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All AtomicP_dom", "by lexicographic_order"], ["", "lemma\n  shows AtomicP_fresh_iff [simp]: \"a \\<sharp> AtomicP y \\<longleftrightarrow> a \\<sharp> y\"    (is ?thesis1)\n    and AtomicP_sf [iff]: \"Sigma_fm (AtomicP y)\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> AtomicP y = a \\<sharp> y &&& Sigma_fm (AtomicP y)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> AtomicP y = a \\<sharp> y\n 2. Sigma_fm (AtomicP y)", "obtain t::name and u::name  where \"atom t \\<sharp> (u,y)\"  \"atom u \\<sharp> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t u.\n        \\<lbrakk>atom t \\<sharp> (u, y); atom u \\<sharp> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom t \\<sharp> (u, y)\n  atom u \\<sharp> y\n\ngoal (2 subgoals):\n 1. a \\<sharp> AtomicP y = a \\<sharp> y\n 2. Sigma_fm (AtomicP y)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom t \\<sharp> (u, y)\n  atom u \\<sharp> y\n\ngoal (1 subgoal):\n 1. a \\<sharp> AtomicP y = a \\<sharp> y &&& Sigma_fm (AtomicP y)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> AtomicP y = a \\<sharp> y\n  Sigma_fm (AtomicP y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AtompicP_subst [simp]: \"(AtomicP t)(j::=w) = AtomicP (subst j w t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AtomicP t)(j::=w) = AtomicP (subst j w t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (AtomicP t)(j::=w) = AtomicP (subst j w t)", "obtain x y :: name where \"atom x \\<sharp> (j,w,t,y)\"   \"atom y \\<sharp> (j,w,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>atom x \\<sharp> (j, w, t, y);\n         atom y \\<sharp> (j, w, t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom x \\<sharp> (j, w, t, y)\n  atom y \\<sharp> (j, w, t)\n\ngoal (1 subgoal):\n 1. (AtomicP t)(j::=w) = AtomicP (subst j w t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom x \\<sharp> (j, w, t, y)\n  atom y \\<sharp> (j, w, t)\n\ngoal (1 subgoal):\n 1. (AtomicP t)(j::=w) = AtomicP (subst j w t)", "by (auto simp: AtomicP.simps [of x y])"], ["proof (state)\nthis:\n  (AtomicP t)(j::=w) = AtomicP (subst j w t)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>The predicate \\<open>MakeForm\\<close>\\<close>"], ["", "nominal_function MakeFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom v \\<sharp> (y,u,w,au); atom au \\<sharp> (y,u,w)\\<rbrakk> \\<Longrightarrow>\n    MakeFormP y u w =\n      y EQ Q_Disj u w OR y EQ Q_Neg u OR\n      Ex v (Ex au (AbstFormP (Var v) Zero u (Var au) AND y EQ Q_Ex (Var au)))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt MakeFormP_graph_aux\n 2. \\<And>x y. MakeFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>v y u w au.\n           \\<lbrakk>atom v \\<sharp> (y, u, w, au);\n            atom au \\<sharp> (y, u, w); x = (y, u, w)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>v y u w au va ya ua wa aua.\n       \\<lbrakk>atom v \\<sharp> (y, u, w, au); atom au \\<sharp> (y, u, w);\n        atom va \\<sharp> (ya, ua, wa, aua); atom aua \\<sharp> (ya, ua, wa);\n        (y, u, w) = (ya, ua, wa)\\<rbrakk>\n       \\<Longrightarrow> y EQ Q_Disj u w OR\n                         y EQ Q_Neg u OR\n                         SyntaxN.Ex v\n                          (SyntaxN.Ex au\n                            (AbstFormP (Var v) Zero u (Var au) AND\n                             y EQ Q_Ex (Var au))) =\n                         ya EQ Q_Disj ua wa OR\n                         ya EQ Q_Neg ua OR\n                         SyntaxN.Ex va\n                          (SyntaxN.Ex aua\n                            (AbstFormP (Var va) Zero ua (Var aua) AND\n                             ya EQ Q_Ex (Var aua)))", "by (auto simp: eqvt_def MakeFormP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All MakeFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows MakeFormP_fresh_iff [simp]:\n       \"a \\<sharp> MakeFormP y u w \\<longleftrightarrow> a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w\"  (is ?thesis1)\n    and MakeFormP_sf [iff]:\n       \"Sigma_fm (MakeFormP y u w)\"  (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> MakeFormP y u w =\n    (a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w) &&&\n    Sigma_fm (MakeFormP y u w)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> MakeFormP y u w =\n    (a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w)\n 2. Sigma_fm (MakeFormP y u w)", "obtain v::name and au::name  where \"atom v \\<sharp> (y,u,w,au)\"  \"atom au \\<sharp> (y,u,w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v au.\n        \\<lbrakk>atom v \\<sharp> (y, u, w, au);\n         atom au \\<sharp> (y, u, w)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom v \\<sharp> (y, u, w, au)\n  atom au \\<sharp> (y, u, w)\n\ngoal (2 subgoals):\n 1. a \\<sharp> MakeFormP y u w =\n    (a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w)\n 2. Sigma_fm (MakeFormP y u w)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom v \\<sharp> (y, u, w, au)\n  atom au \\<sharp> (y, u, w)\n\ngoal (1 subgoal):\n 1. a \\<sharp> MakeFormP y u w =\n    (a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w) &&&\n    Sigma_fm (MakeFormP y u w)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> MakeFormP y u w =\n  (a \\<sharp> y \\<and> a \\<sharp> u \\<and> a \\<sharp> w)\n  Sigma_fm (MakeFormP y u w)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare MakeFormP.simps [simp del]"], ["", "lemma MakeFormP_subst [simp]: \"(MakeFormP y u t)(j::=w) = MakeFormP (subst j w y) (subst j w u) (subst j w t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (MakeFormP y u t)(j::=w) =\n    MakeFormP (subst j w y) (subst j w u) (subst j w t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (MakeFormP y u t)(j::=w) =\n    MakeFormP (subst j w y) (subst j w u) (subst j w t)", "obtain a b :: name where \"atom a \\<sharp> (j,w,y,u,t,b)\"   \"atom b \\<sharp> (j,w,y,u,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>atom a \\<sharp> (j, w, y, u, t, b);\n         atom b \\<sharp> (j, w, y, u, t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom a \\<sharp> (j, w, y, u, t, b)\n  atom b \\<sharp> (j, w, y, u, t)\n\ngoal (1 subgoal):\n 1. (MakeFormP y u t)(j::=w) =\n    MakeFormP (subst j w y) (subst j w u) (subst j w t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom a \\<sharp> (j, w, y, u, t, b)\n  atom b \\<sharp> (j, w, y, u, t)\n\ngoal (1 subgoal):\n 1. (MakeFormP y u t)(j::=w) =\n    MakeFormP (subst j w y) (subst j w u) (subst j w t)", "by (auto simp: MakeFormP.simps [of a _ _ _ b])"], ["proof (state)\nthis:\n  (MakeFormP y u t)(j::=w) =\n  MakeFormP (subst j w y) (subst j w u) (subst j w t)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>The predicate \\<open>SeqFormP\\<close>\\<close>"], ["", "(*SeqForm(s,k,t) \\<equiv> LstSeq(s,k,t) \\<and> (\\<forall>n\\<in>k)[Atomic (s n) \\<or> (\\<exists>m,l\\<in>n)[MakeForm (s m) (s l) (s n)]]*)"], ["", "nominal_function SeqFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom l \\<sharp> (s,k,t,sl,m,n,sm,sn); atom sl \\<sharp> (s,k,t,m,n,sm,sn);\n          atom m \\<sharp> (s,k,t,n,sm,sn); atom n \\<sharp> (s,k,t,sm,sn);\n          atom sm \\<sharp> (s,k,t,sn); atom sn \\<sharp> (s,k,t)\\<rbrakk> \\<Longrightarrow>\n    SeqFormP s k t =\n      LstSeqP s k t AND\n      All2 n (SUCC k) (Ex sn (HPair (Var n) (Var sn) IN s AND (AtomicP (Var sn) OR\n                Ex m (Ex l (Ex sm (Ex sl (Var m IN Var n AND Var l IN Var n AND\n                       HPair (Var m) (Var sm) IN s AND HPair (Var l) (Var sl) IN s AND\n                       MakeFormP (Var sn) (Var sm) (Var sl))))))))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt SeqFormP_graph_aux\n 2. \\<And>x y. SeqFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>l s k t sl m n sm sn.\n           \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n            atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n            atom m \\<sharp> (s, k, t, n, sm, sn);\n            atom n \\<sharp> (s, k, t, sm, sn);\n            atom sm \\<sharp> (s, k, t, sn); atom sn \\<sharp> (s, k, t);\n            x = (s, k, t)\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>l s k t sl m n sm sn la sa ka ta sla ma na sma sna.\n       \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n        atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n        atom m \\<sharp> (s, k, t, n, sm, sn);\n        atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n        atom sn \\<sharp> (s, k, t);\n        atom la \\<sharp> (sa, ka, ta, sla, ma, na, sma, sna);\n        atom sla \\<sharp> (sa, ka, ta, ma, na, sma, sna);\n        atom ma \\<sharp> (sa, ka, ta, na, sma, sna);\n        atom na \\<sharp> (sa, ka, ta, sma, sna);\n        atom sma \\<sharp> (sa, ka, ta, sna); atom sna \\<sharp> (sa, ka, ta);\n        (s, k, t) = (sa, ka, ta)\\<rbrakk>\n       \\<Longrightarrow> LstSeqP s k t AND\n                         All2 n (SUCC k)\n                          (SyntaxN.Ex sn\n                            (HPair (Var n) (Var sn) IN s AND\n                             (AtomicP (Var sn) OR\n                              SyntaxN.Ex m\n                               (SyntaxN.Ex l\n                                 (SyntaxN.Ex sm\n                                   (SyntaxN.Ex sl\n                                     (Var m IN Var n AND\nVar l IN Var n AND\nHPair (Var m) (Var sm) IN s AND\nHPair (Var l) (Var sl) IN s AND\nMakeFormP (Var sn) (Var sm) (Var sl)))))))) =\n                         LstSeqP sa ka ta AND\n                         All2 na (SUCC ka)\n                          (SyntaxN.Ex sna\n                            (HPair (Var na) (Var sna) IN sa AND\n                             (AtomicP (Var sna) OR\n                              SyntaxN.Ex ma\n                               (SyntaxN.Ex la\n                                 (SyntaxN.Ex sma\n                                   (SyntaxN.Ex sla\n                                     (Var ma IN Var na AND\nVar la IN Var na AND\nHPair (Var ma) (Var sma) IN sa AND\nHPair (Var la) (Var sla) IN sa AND\nMakeFormP (Var sna) (Var sma) (Var sla))))))))", "by (auto simp: eqvt_def SeqFormP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All SeqFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows SeqFormP_fresh_iff [simp]:\n       \"a \\<sharp> SeqFormP s k t \\<longleftrightarrow> a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t\" (is ?thesis1)\n    and SeqFormP_sf [iff]: \"Sigma_fm (SeqFormP s k t)\"          (is ?thsf)\n    and SeqFormP_imp_OrdP:\n       \"{ SeqFormP s k t } \\<turnstile> OrdP k\"  (is ?thOrd)\n    and SeqFormP_imp_LstSeqP:\n       \"{ SeqFormP s k t } \\<turnstile> LstSeqP s k t\"  (is ?thLstSeq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqFormP s k t =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t) &&&\n     Sigma_fm (SeqFormP s k t)) &&&\n    {SeqFormP s k t} \\<turnstile> OrdP k &&&\n    {SeqFormP s k t} \\<turnstile> LstSeqP s k t", "proof -"], ["proof (state)\ngoal (4 subgoals):\n 1. a \\<sharp> SeqFormP s k t =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n 2. Sigma_fm (SeqFormP s k t)\n 3. {SeqFormP s k t} \\<turnstile> OrdP k\n 4. {SeqFormP s k t} \\<turnstile> LstSeqP s k t", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where atoms: \"atom l \\<sharp> (s,k,t,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (s,k,t,m,n,sm,sn)\"\n        \"atom m \\<sharp> (s,k,t,n,sm,sn)\"   \"atom n \\<sharp> (s,k,t,sm,sn)\"\n        \"atom sm \\<sharp> (s,k,t,sn)\"       \"atom sn \\<sharp> (s,k,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (s, k, t, sl, m, n, sm, sn);\n         atom sl \\<sharp> (s, k, t, m, n, sm, sn);\n         atom m \\<sharp> (s, k, t, n, sm, sn);\n         atom n \\<sharp> (s, k, t, sm, sn); atom sm \\<sharp> (s, k, t, sn);\n         atom sn \\<sharp> (s, k, t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (s, k, t, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, k, t, m, n, sm, sn)\n  atom m \\<sharp> (s, k, t, n, sm, sn)\n  atom n \\<sharp> (s, k, t, sm, sn)\n  atom sm \\<sharp> (s, k, t, sn)\n  atom sn \\<sharp> (s, k, t)\n\ngoal (4 subgoals):\n 1. a \\<sharp> SeqFormP s k t =\n    (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n 2. Sigma_fm (SeqFormP s k t)\n 3. {SeqFormP s k t} \\<turnstile> OrdP k\n 4. {SeqFormP s k t} \\<turnstile> LstSeqP s k t", "thus ?thesis1 ?thsf ?thOrd ?thLstSeq"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (s, k, t, sl, m, n, sm, sn)\n  atom sl \\<sharp> (s, k, t, m, n, sm, sn)\n  atom m \\<sharp> (s, k, t, n, sm, sn)\n  atom n \\<sharp> (s, k, t, sm, sn)\n  atom sm \\<sharp> (s, k, t, sn)\n  atom sn \\<sharp> (s, k, t)\n\ngoal (1 subgoal):\n 1. (a \\<sharp> SeqFormP s k t =\n     (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t) &&&\n     Sigma_fm (SeqFormP s k t)) &&&\n    {SeqFormP s k t} \\<turnstile> OrdP k &&&\n    {SeqFormP s k t} \\<turnstile> LstSeqP s k t", "by (auto intro: LstSeqP_OrdP)"], ["proof (state)\nthis:\n  a \\<sharp> SeqFormP s k t =\n  (a \\<sharp> s \\<and> a \\<sharp> k \\<and> a \\<sharp> t)\n  Sigma_fm (SeqFormP s k t)\n  {SeqFormP s k t} \\<turnstile> OrdP k\n  {SeqFormP s k t} \\<turnstile> LstSeqP s k t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SeqFormP_subst [simp]:\n      \"(SeqFormP s k t)(j::=w) = SeqFormP (subst j w s) (subst j w k) (subst j w t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SeqFormP s k t)(j::=w) =\n    SeqFormP (subst j w s) (subst j w k) (subst j w t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (SeqFormP s k t)(j::=w) =\n    SeqFormP (subst j w s) (subst j w k) (subst j w t)", "obtain l::name and sl::name and m::name and n::name and sm::name and sn::name\n    where \"atom l \\<sharp> (j,w,s,t,k,sl,m,n,sm,sn)\"   \"atom sl \\<sharp> (j,w,s,k,t,m,n,sm,sn)\"\n        \"atom m \\<sharp> (j,w,s,k,t,n,sm,sn)\"   \"atom n \\<sharp> (j,w,s,k,t,sm,sn)\"\n        \"atom sm \\<sharp> (j,w,s,k,t,sn)\"   \"atom sn \\<sharp> (j,w,s,k,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l sl m n sm sn.\n        \\<lbrakk>atom l \\<sharp> (j, w, s, t, k, sl, m, n, sm, sn);\n         atom sl \\<sharp> (j, w, s, k, t, m, n, sm, sn);\n         atom m \\<sharp> (j, w, s, k, t, n, sm, sn);\n         atom n \\<sharp> (j, w, s, k, t, sm, sn);\n         atom sm \\<sharp> (j, w, s, k, t, sn);\n         atom sn \\<sharp> (j, w, s, k, t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom l \\<sharp> (j, w, s, t, k, sl, m, n, sm, sn)\n  atom sl \\<sharp> (j, w, s, k, t, m, n, sm, sn)\n  atom m \\<sharp> (j, w, s, k, t, n, sm, sn)\n  atom n \\<sharp> (j, w, s, k, t, sm, sn)\n  atom sm \\<sharp> (j, w, s, k, t, sn)\n  atom sn \\<sharp> (j, w, s, k, t)\n\ngoal (1 subgoal):\n 1. (SeqFormP s k t)(j::=w) =\n    SeqFormP (subst j w s) (subst j w k) (subst j w t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom l \\<sharp> (j, w, s, t, k, sl, m, n, sm, sn)\n  atom sl \\<sharp> (j, w, s, k, t, m, n, sm, sn)\n  atom m \\<sharp> (j, w, s, k, t, n, sm, sn)\n  atom n \\<sharp> (j, w, s, k, t, sm, sn)\n  atom sm \\<sharp> (j, w, s, k, t, sn)\n  atom sn \\<sharp> (j, w, s, k, t)\n\ngoal (1 subgoal):\n 1. (SeqFormP s k t)(j::=w) =\n    SeqFormP (subst j w s) (subst j w k) (subst j w t)", "by (auto simp: SeqFormP.simps [of l _ _ _ sl m n sm sn])"], ["proof (state)\nthis:\n  (SeqFormP s k t)(j::=w) =\n  SeqFormP (subst j w s) (subst j w k) (subst j w t)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>The predicate \\<open>FormP\\<close>\\<close>"], ["", "subsection \\<open>Definition\\<close>"], ["", "nominal_function FormP :: \"tm \\<Rightarrow> fm\"\n  where \"\\<lbrakk>atom k \\<sharp> (s,y); atom s \\<sharp> y\\<rbrakk> \\<Longrightarrow>\n    FormP y = Ex k (Ex s (SeqFormP (Var s) (Var k) y))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt FormP_graph_aux\n 2. \\<And>x y. FormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>k s y.\n           \\<lbrakk>atom k \\<sharp> (s, y); atom s \\<sharp> y;\n            x = y\\<rbrakk>\n           \\<Longrightarrow> P) \\<Longrightarrow>\n       P\n 4. \\<And>k s y ka sa ya.\n       \\<lbrakk>atom k \\<sharp> (s, y); atom s \\<sharp> y;\n        atom ka \\<sharp> (sa, ya); atom sa \\<sharp> ya; y = ya\\<rbrakk>\n       \\<Longrightarrow> SyntaxN.Ex k\n                          (SyntaxN.Ex s (SeqFormP (Var s) (Var k) y)) =\n                         SyntaxN.Ex ka\n                          (SyntaxN.Ex sa (SeqFormP (Var sa) (Var ka) ya))", "by (auto simp: eqvt_def FormP_graph_aux_def flip_fresh_fresh) (metis obtain_fresh)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All FormP_dom", "by lexicographic_order"], ["", "lemma\n  shows FormP_fresh_iff [simp]: \"a \\<sharp> FormP y \\<longleftrightarrow> a \\<sharp> y\"              (is ?thesis1)\n    and FormP_sf [iff]:         \"Sigma_fm (FormP y)\"                 (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> FormP y = a \\<sharp> y &&& Sigma_fm (FormP y)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> FormP y = a \\<sharp> y\n 2. Sigma_fm (FormP y)", "obtain k::name and s::name  where k: \"atom k \\<sharp> (s,y)\" \"atom s \\<sharp> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, y); atom s \\<sharp> y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, y)\n  atom s \\<sharp> y\n\ngoal (2 subgoals):\n 1. a \\<sharp> FormP y = a \\<sharp> y\n 2. Sigma_fm (FormP y)", "thus ?thesis1 ?thsf"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, y)\n  atom s \\<sharp> y\n\ngoal (1 subgoal):\n 1. a \\<sharp> FormP y = a \\<sharp> y &&& Sigma_fm (FormP y)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> FormP y = a \\<sharp> y\n  Sigma_fm (FormP y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma FormP_subst [simp]: \"(FormP y)(j::=w) = FormP (subst j w y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (FormP y)(j::=w) = FormP (subst j w y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (FormP y)(j::=w) = FormP (subst j w y)", "obtain k::name and s::name where \"atom k \\<sharp> (s,j,w,y)\"  \"atom s \\<sharp> (j,w,y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k s.\n        \\<lbrakk>atom k \\<sharp> (s, j, w, y);\n         atom s \\<sharp> (j, w, y)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_fresh)"], ["proof (state)\nthis:\n  atom k \\<sharp> (s, j, w, y)\n  atom s \\<sharp> (j, w, y)\n\ngoal (1 subgoal):\n 1. (FormP y)(j::=w) = FormP (subst j w y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom k \\<sharp> (s, j, w, y)\n  atom s \\<sharp> (j, w, y)\n\ngoal (1 subgoal):\n 1. (FormP y)(j::=w) = FormP (subst j w y)", "by (auto simp: FormP.simps [of k s])"], ["proof (state)\nthis:\n  (FormP y)(j::=w) = FormP (subst j w y)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The predicate \\<open>VarNonOccFormP\\<close> (Derived from \\<open>SubstFormP\\<close>)\\<close>"], ["", "nominal_function VarNonOccFormP :: \"tm \\<Rightarrow> tm \\<Rightarrow> fm\"\n  where \"VarNonOccFormP v x = FormP x AND SubstFormP v Zero x x\""], ["proof (prove)\ngoal (4 subgoals):\n 1. eqvt VarNonOccFormP_graph_aux\n 2. \\<And>x y. VarNonOccFormP_graph x y \\<Longrightarrow> True\n 3. \\<And>P x.\n       (\\<And>v xa. x = (v, xa) \\<Longrightarrow> P) \\<Longrightarrow> P\n 4. \\<And>v x va xa.\n       (v, x) = (va, xa) \\<Longrightarrow>\n       FormP x AND SubstFormP v Zero x x =\n       FormP xa AND SubstFormP va Zero xa xa", "by (auto simp: eqvt_def VarNonOccFormP_graph_aux_def)"], ["", "nominal_termination (eqvt)"], ["proof (prove)\ngoal (1 subgoal):\n 1. HOL.All VarNonOccFormP_dom", "by lexicographic_order"], ["", "lemma\n  shows VarNonOccFormP_fresh_iff [simp]: \"a \\<sharp> VarNonOccFormP v y \\<longleftrightarrow> a \\<sharp> v \\<and> a \\<sharp> y\" (is ?thesis1)\n    and VarNonOccFormP_sf [iff]: \"Sigma_fm (VarNonOccFormP v y)\" (is ?thsf)"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> VarNonOccFormP v y = (a \\<sharp> v \\<and> a \\<sharp> y) &&&\n    Sigma_fm (VarNonOccFormP v y)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. a \\<sharp> VarNonOccFormP v y = (a \\<sharp> v \\<and> a \\<sharp> y)\n 2. Sigma_fm (VarNonOccFormP v y)", "show ?thesis1 ?thsf"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> VarNonOccFormP v y = (a \\<sharp> v \\<and> a \\<sharp> y) &&&\n    Sigma_fm (VarNonOccFormP v y)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> VarNonOccFormP v y = (a \\<sharp> v \\<and> a \\<sharp> y)\n  Sigma_fm (VarNonOccFormP v y)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare VarNonOccFormP.simps [simp del]"], ["", "end"]]}