{"file_name": "/home/qj213/afp-2021-10-22/thys/WOOT_Strong_Eventual_Consistency/Example.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WOOT_Strong_Eventual_Consistency", "problem_names": ["lemma well_order_consistent:\n  fixes i j \n  assumes \"example.happened_immediately_before i j\"\n  shows \"witness_acyclic_events i < witness_acyclic_events j\"", "lemma\n  \"example.state (PeerA, 4) = Inr [\n    InsertMessage \\<turnstile> (PeerA, 0) \\<stileturn> (Some CHR ''B''),\n    InsertMessage \\<turnstile> (PeerB, 0) \\<stileturn> (Some CHR ''A''),\n    InsertMessage \\<lbrakk>(PeerA, 0)\\<rbrakk>  (PeerC, 1) \\<stileturn> (Some CHR ''R'')]\"\n  \"example.state (PeerA, 4) = example.state (PeerB, 4)\"\n  \"example.state (PeerB, 4) = example.state (PeerC, 4)\"", "lemma\n  \"example.state (PeerA, 3) = example.state (PeerB, 3)\"", "lemma\n  \"isOK (example.state (PeerC, 4))\""], "translations": [["", "lemma well_order_consistent:\n  fixes i j \n  assumes \"example.happened_immediately_before i j\"\n  shows \"witness_acyclic_events i < witness_acyclic_events j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. witness_acyclic_events i < witness_acyclic_events j", "using assms"], ["proof (prove)\nusing this:\n  example.happened_immediately_before i j\n\ngoal (1 subgoal):\n 1. witness_acyclic_events i < witness_acyclic_events j", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"i\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 2. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 3. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 4. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 5. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 6. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 7. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 8. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 9. \\<lbrakk>example.happened_immediately_before i j;\n     i = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 10. \\<lbrakk>example.happened_immediately_before i j;\n      i = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\nA total of 15 subgoals...", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"j\"])"], ["proof (prove)\ngoal (225 subgoals):\n 1. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 2. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 3. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 4. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 5. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 6. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 7. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 8. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 9. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n     j = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\n 10. \\<lbrakk>example.happened_immediately_before i j; i = (PeerA, 0);\n      j = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> witness_acyclic_events i < witness_acyclic_events j\nA total of 225 subgoals...", "by simp+"], ["", "text \\<open>Finally we show that the @{term example_events} meet the assumptions\n  for the distributed execution context.\\<close>"], ["", "interpretation example: dist_execution \"example_events\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist_execution example_events", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i s m.\n       example.event_at i (Receive s m) \\<Longrightarrow>\n       example.event_at s (Send m)\n 2. \\<And>i j s m.\n       \\<lbrakk>example.event_at i (Receive s m);\n        example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n       \\<Longrightarrow> i = j\n 3. acyclicP example.happened_immediately_before\n 4. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 5. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "fix i s m"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>i s m.\n       example.event_at i (Receive s m) \\<Longrightarrow>\n       example.event_at s (Send m)\n 2. \\<And>i j s m.\n       \\<lbrakk>example.event_at i (Receive s m);\n        example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n       \\<Longrightarrow> i = j\n 3. acyclicP example.happened_immediately_before\n 4. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 5. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "show \n    \"dist_execution_preliminary.event_at example_events i (Receive s m) \\<Longrightarrow>\n     dist_execution_preliminary.event_at example_events s (Send m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.event_at i (Receive s m) \\<Longrightarrow>\n    example.event_at s (Send m)", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"i\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>example.event_at i (Receive s m); i = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 2. \\<lbrakk>example.event_at i (Receive s m); i = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 3. \\<lbrakk>example.event_at i (Receive s m); i = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 4. \\<lbrakk>example.event_at i (Receive s m); i = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 5. \\<lbrakk>example.event_at i (Receive s m); i = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 6. \\<lbrakk>example.event_at i (Receive s m); i = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 7. \\<lbrakk>example.event_at i (Receive s m);\n     i = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 8. \\<lbrakk>example.event_at i (Receive s m);\n     i = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 9. \\<lbrakk>example.event_at i (Receive s m);\n     i = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> example.event_at s (Send m)\n 10. \\<lbrakk>example.event_at i (Receive s m);\n      i = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> example.event_at s (Send m)\nA total of 15 subgoals...", "by simp+"], ["proof (state)\nthis:\n  example.event_at i (Receive s m) \\<Longrightarrow>\n  example.event_at s (Send m)\n\ngoal (4 subgoals):\n 1. \\<And>i j s m.\n       \\<lbrakk>example.event_at i (Receive s m);\n        example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n       \\<Longrightarrow> i = j\n 2. acyclicP example.happened_immediately_before\n 3. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 4. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i j s m.\n       \\<lbrakk>example.event_at i (Receive s m);\n        example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n       \\<Longrightarrow> i = j\n 2. acyclicP example.happened_immediately_before\n 3. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 4. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "fix i j s :: \"example_peers event_id\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i j s m.\n       \\<lbrakk>example.event_at i (Receive s m);\n        example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n       \\<Longrightarrow> i = j\n 2. acyclicP example.happened_immediately_before\n 3. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 4. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "fix m"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>i j s m.\n       \\<lbrakk>example.event_at i (Receive s m);\n        example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n       \\<Longrightarrow> i = j\n 2. acyclicP example.happened_immediately_before\n 3. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 4. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "show \"example.event_at i (Receive s m) \\<Longrightarrow>\n       example.event_at j (Receive s m) \\<Longrightarrow> fst i = fst j \\<Longrightarrow> i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n    \\<Longrightarrow> i = j", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"i\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 2. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 3. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 4. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 5. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 6. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 7. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> i = j\n 8. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> i = j\n 9. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j;\n     i = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> i = j\n 10. \\<lbrakk>example.event_at i (Receive s m);\n      example.event_at j (Receive s m); fst i = fst j;\n      i = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> i = j\nA total of 15 subgoals...", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"j\"])"], ["proof (prove)\ngoal (225 subgoals):\n 1. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 2. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 3. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 4. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 5. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 6. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> i = j\n 7. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> i = j\n 8. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> i = j\n 9. \\<lbrakk>example.event_at i (Receive s m);\n     example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n     j = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> i = j\n 10. \\<lbrakk>example.event_at i (Receive s m);\n      example.event_at j (Receive s m); fst i = fst j; i = (PeerA, 0);\n      j = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> i = j\nA total of 225 subgoals...", "by simp+"], ["proof (state)\nthis:\n  \\<lbrakk>example.event_at i (Receive s m);\n   example.event_at j (Receive s m); fst i = fst j\\<rbrakk>\n  \\<Longrightarrow> i = j\n\ngoal (3 subgoals):\n 1. acyclicP example.happened_immediately_before\n 2. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 3. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. acyclicP example.happened_immediately_before\n 2. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 3. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "have \"wf (inv_image {(x,y). x < y} witness_acyclic_events)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (inv_image {(x, y). x < y} witness_acyclic_events)", "by (simp add: wf_less)"], ["proof (state)\nthis:\n  wf (inv_image {(x, y). x < y} witness_acyclic_events)\n\ngoal (3 subgoals):\n 1. acyclicP example.happened_immediately_before\n 2. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 3. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "moreover"], ["proof (state)\nthis:\n  wf (inv_image {(x, y). x < y} witness_acyclic_events)\n\ngoal (3 subgoals):\n 1. acyclicP example.happened_immediately_before\n 2. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 3. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "have \"{(x, y). example.happened_immediately_before x y} \\<le>\n    inv_image {(x,y). x < y} witness_acyclic_events\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). example.happened_immediately_before x y}\n    \\<subseteq> inv_image {(x, y). x < y} witness_acyclic_events", "using well_order_consistent"], ["proof (prove)\nusing this:\n  example.happened_immediately_before ?i ?j \\<Longrightarrow>\n  witness_acyclic_events ?i < witness_acyclic_events ?j\n\ngoal (1 subgoal):\n 1. {(x, y). example.happened_immediately_before x y}\n    \\<subseteq> inv_image {(x, y). x < y} witness_acyclic_events", "by auto"], ["proof (state)\nthis:\n  {(x, y). example.happened_immediately_before x y}\n  \\<subseteq> inv_image {(x, y). x < y} witness_acyclic_events\n\ngoal (3 subgoals):\n 1. acyclicP example.happened_immediately_before\n 2. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 3. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "ultimately"], ["proof (chain)\npicking this:\n  wf (inv_image {(x, y). x < y} witness_acyclic_events)\n  {(x, y). example.happened_immediately_before x y}\n  \\<subseteq> inv_image {(x, y). x < y} witness_acyclic_events", "have \"wfP example.happened_immediately_before\""], ["proof (prove)\nusing this:\n  wf (inv_image {(x, y). x < y} witness_acyclic_events)\n  {(x, y). example.happened_immediately_before x y}\n  \\<subseteq> inv_image {(x, y). x < y} witness_acyclic_events\n\ngoal (1 subgoal):\n 1. wfP example.happened_immediately_before", "using well_order_consistent wfP_def wf_subset"], ["proof (prove)\nusing this:\n  wf (inv_image {(x, y). x < y} witness_acyclic_events)\n  {(x, y). example.happened_immediately_before x y}\n  \\<subseteq> inv_image {(x, y). x < y} witness_acyclic_events\n  example.happened_immediately_before ?i ?j \\<Longrightarrow>\n  witness_acyclic_events ?i < witness_acyclic_events ?j\n  wfP ?r = wf {(x, y). ?r x y}\n  \\<lbrakk>wf ?r; ?p \\<subseteq> ?r\\<rbrakk> \\<Longrightarrow> wf ?p\n\ngoal (1 subgoal):\n 1. wfP example.happened_immediately_before", "by blast"], ["proof (state)\nthis:\n  wfP example.happened_immediately_before\n\ngoal (3 subgoals):\n 1. acyclicP example.happened_immediately_before\n 2. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 3. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "thus \"acyclicP example.happened_immediately_before\""], ["proof (prove)\nusing this:\n  wfP example.happened_immediately_before\n\ngoal (1 subgoal):\n 1. acyclicP example.happened_immediately_before", "using wfP_acyclicP"], ["proof (prove)\nusing this:\n  wfP example.happened_immediately_before\n  wfP ?r \\<Longrightarrow> acyclicP ?r\n\ngoal (1 subgoal):\n 1. acyclicP example.happened_immediately_before", "by blast"], ["proof (state)\nthis:\n  acyclicP example.happened_immediately_before\n\ngoal (2 subgoals):\n 1. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 2. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 2. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "fix m s i j i'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 2. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "have \"example.event_at (i, j) (Receive s m) \\<Longrightarrow>\n       i' \\<in> deps m \\<Longrightarrow>\n      example.event_at (i, witness_deps_received_at (i, j) i') (Receive (I (witness_deps_received_is (i, j) i')) (Insert (witness_deps_received_is (i, j) i'))) \\<and> witness_deps_received_at (i, j) i' < j \\<and> I (witness_deps_received_is (i, j) i') = i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"(i,j)\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 2. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 3. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 4. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 5. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 6. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 7. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 8. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 9. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n     (i, j) = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> example.event_at\n                       (i, witness_deps_received_at (i, j) i')\n                       (Receive (I (witness_deps_received_is (i, j) i'))\n                         (Insert\n                           (witness_deps_received_is (i, j) i'))) \\<and>\n                      witness_deps_received_at (i, j) i' < j \\<and>\n                      I (witness_deps_received_is (i, j) i') = i'\n 10. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m;\n      (i, j) = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> example.event_at\n                        (i, witness_deps_received_at (i, j) i')\n                        (Receive (I (witness_deps_received_is (i, j) i'))\n                          (Insert\n                            (witness_deps_received_is (i, j) i'))) \\<and>\n                       witness_deps_received_at (i, j) i' < j \\<and>\n                       I (witness_deps_received_is (i, j) i') = i'\nA total of 15 subgoals...", "by simp+"], ["proof (state)\nthis:\n  \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m\\<rbrakk>\n  \\<Longrightarrow> example.event_at (i, witness_deps_received_at (i, j) i')\n                     (Receive (I (witness_deps_received_is (i, j) i'))\n                       (Insert (witness_deps_received_is (i, j) i'))) \\<and>\n                    witness_deps_received_at (i, j) i' < j \\<and>\n                    I (witness_deps_received_is (i, j) i') = i'\n\ngoal (2 subgoals):\n 1. \\<And>m s i j i'.\n       \\<lbrakk>example.event_at (i, j) (Receive s m);\n        i' \\<in> deps m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s' j' m'.\n                            example.event_at (i, j')\n                             (Receive s' (Insert m')) \\<and>\n                            j' < j \\<and> I m' = i'\n 2. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "thus \"example.event_at (i, j) (Receive s m) \\<Longrightarrow>\n       i' \\<in> deps m \\<Longrightarrow>\n       \\<exists>s' j' m'.\n          example.event_at (i, j') (Receive s' (Insert m')) \\<and> j' < j \\<and> I m' = i'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m\\<rbrakk>\n  \\<Longrightarrow> example.event_at (i, witness_deps_received_at (i, j) i')\n                     (Receive (I (witness_deps_received_is (i, j) i'))\n                       (Insert (witness_deps_received_is (i, j) i'))) \\<and>\n                    witness_deps_received_at (i, j) i' < j \\<and>\n                    I (witness_deps_received_is (i, j) i') = i'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s' j' m'.\n                         example.event_at (i, j')\n                          (Receive s' (Insert m')) \\<and>\n                         j' < j \\<and> I m' = i'", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>example.event_at (i, j) (Receive s m); i' \\<in> deps m\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s' j' m'.\n                       example.event_at (i, j')\n                        (Receive s' (Insert m')) \\<and>\n                       j' < j \\<and> I m' = i'\n\ngoal (1 subgoal):\n 1. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "fix m i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "have \"example.event_at i (Send m) \\<Longrightarrow>\n        Inr m = example.state i \\<bind> (\\<lambda>s. create_insert s (witness_create_position i) (witness_create_letter i) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.event_at i (Send m) \\<Longrightarrow>\n    Inr m =\n    example.state i \\<bind>\n    (\\<lambda>s.\n        create_insert s (witness_create_position i)\n         (witness_create_letter i) i)", "apply (rule_tac [!] witness_acyclic_events.cases [where x=\"i\"])"], ["proof (prove)\ngoal (15 subgoals):\n 1. \\<lbrakk>example.event_at i (Send m); i = (PeerA, 0)\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 2. \\<lbrakk>example.event_at i (Send m); i = (PeerB, 0)\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 3. \\<lbrakk>example.event_at i (Send m); i = (PeerA, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 4. \\<lbrakk>example.event_at i (Send m); i = (PeerB, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 5. \\<lbrakk>example.event_at i (Send m); i = (PeerC, 0)\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 6. \\<lbrakk>example.event_at i (Send m); i = (PeerC, Suc 0)\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 7. \\<lbrakk>example.event_at i (Send m); i = (PeerC, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 8. \\<lbrakk>example.event_at i (Send m);\n     i = (PeerC, Suc (Suc (Suc 0)))\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 9. \\<lbrakk>example.event_at i (Send m); i = (PeerA, Suc (Suc 0))\\<rbrakk>\n    \\<Longrightarrow> Inr m =\n                      example.state i \\<bind>\n                      (\\<lambda>s.\n                          create_insert s (witness_create_position i)\n                           (witness_create_letter i) i)\n 10. \\<lbrakk>example.event_at i (Send m);\n      i = (PeerA, Suc (Suc (Suc 0)))\\<rbrakk>\n     \\<Longrightarrow> Inr m =\n                       example.state i \\<bind>\n                       (\\<lambda>s.\n                           create_insert s (witness_create_position i)\n                            (witness_create_letter i) i)\nA total of 15 subgoals...", "by (simp add:ext_ids_def)+"], ["proof (state)\nthis:\n  example.event_at i (Send m) \\<Longrightarrow>\n  Inr m =\n  example.state i \\<bind>\n  (\\<lambda>s.\n      create_insert s (witness_create_position i) (witness_create_letter i)\n       i)\n\ngoal (1 subgoal):\n 1. \\<And>m i.\n       example.event_at i (Send m) \\<Longrightarrow>\n       (\\<exists>n \\<sigma>.\n           Inr m =\n           example.state i \\<bind>\n           (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n       (\\<exists>n.\n           Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "thus \"example.event_at i (Send m) \\<Longrightarrow>\n           (\\<exists>n \\<sigma>. return m = example.state i \\<bind> (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n           (\\<exists>n. return m = example.state i \\<bind> (\\<lambda>s. create_delete s n))\""], ["proof (prove)\nusing this:\n  example.event_at i (Send m) \\<Longrightarrow>\n  Inr m =\n  example.state i \\<bind>\n  (\\<lambda>s.\n      create_insert s (witness_create_position i) (witness_create_letter i)\n       i)\n\ngoal (1 subgoal):\n 1. example.event_at i (Send m) \\<Longrightarrow>\n    (\\<exists>n \\<sigma>.\n        Inr m =\n        example.state i \\<bind>\n        (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n    (\\<exists>n.\n        Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))", "by blast"], ["proof (state)\nthis:\n  example.event_at i (Send m) \\<Longrightarrow>\n  (\\<exists>n \\<sigma>.\n      Inr m =\n      example.state i \\<bind>\n      (\\<lambda>s. create_insert s n \\<sigma> i)) \\<or>\n  (\\<exists>n.\n      Inr m = example.state i \\<bind> (\\<lambda>s. create_delete s n))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>As expected all peers reach the same final state.\\<close>"], ["", "lemma\n  \"example.state (PeerA, 4) = Inr [\n    InsertMessage \\<turnstile> (PeerA, 0) \\<stileturn> (Some CHR ''B''),\n    InsertMessage \\<turnstile> (PeerB, 0) \\<stileturn> (Some CHR ''A''),\n    InsertMessage \\<lbrakk>(PeerA, 0)\\<rbrakk>  (PeerC, 1) \\<stileturn> (Some CHR ''R'')]\"\n  \"example.state (PeerA, 4) = example.state (PeerB, 4)\"\n  \"example.state (PeerB, 4) = example.state (PeerC, 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.state (PeerA, 4) =\n    Inr [InsertMessage \\<turnstile> (PeerA, 0) \\<stileturn>\n          (Some CHR ''B''),\n         InsertMessage \\<turnstile> (PeerB, 0) \\<stileturn>\n          (Some CHR ''A''),\n         InsertMessage \\<lbrakk>(PeerA, 0)\\<rbrakk> (PeerC, 1) \\<stileturn>\n          (Some CHR ''R'')] &&&\n    example.state (PeerA, 4) = example.state (PeerB, 4) &&&\n    example.state (PeerB, 4) = example.state (PeerC, 4)", "by (simp del:substr_simp add:ext_ids_def substr.simps less_example_peers_def)+"], ["", "text \\<open>We can also derive the equivalence of states using the strong\n  convergence theorem. For example the set of received messages in\n  the third state of peer A and B is equivalent, even though they were\n  not received in the same order:\\<close>"], ["", "lemma\n  \"example.state (PeerA, 3) = example.state (PeerB, 3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "have \"example.is_valid_state_id (PeerA, 3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.is_valid_state_id (PeerA, 3)", "by auto"], ["proof (state)\nthis:\n  example.is_valid_state_id (PeerA, 3)\n\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "moreover"], ["proof (state)\nthis:\n  example.is_valid_state_id (PeerA, 3)\n\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "have \"example.is_valid_state_id (PeerB, 3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.is_valid_state_id (PeerB, 3)", "by auto"], ["proof (state)\nthis:\n  example.is_valid_state_id (PeerB, 3)\n\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "moreover"], ["proof (state)\nthis:\n  example.is_valid_state_id (PeerB, 3)\n\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "have\n    \"set (example.received_messages (PeerA, 3)) = \n     set (example.received_messages (PeerB, 3))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (example.received_messages (PeerA, 3)) =\n    set (example.received_messages (PeerB, 3))", "by auto"], ["proof (state)\nthis:\n  set (example.received_messages (PeerA, 3)) =\n  set (example.received_messages (PeerB, 3))\n\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "ultimately"], ["proof (chain)\npicking this:\n  example.is_valid_state_id (PeerA, 3)\n  example.is_valid_state_id (PeerB, 3)\n  set (example.received_messages (PeerA, 3)) =\n  set (example.received_messages (PeerB, 3))", "show ?thesis"], ["proof (prove)\nusing this:\n  example.is_valid_state_id (PeerA, 3)\n  example.is_valid_state_id (PeerB, 3)\n  set (example.received_messages (PeerA, 3)) =\n  set (example.received_messages (PeerB, 3))\n\ngoal (1 subgoal):\n 1. example.state (PeerA, 3) = example.state (PeerB, 3)", "by (rule example.strong_convergence)"], ["proof (state)\nthis:\n  example.state (PeerA, 3) = example.state (PeerB, 3)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Similarly we can conclude that reached states are successful.\\<close>"], ["", "lemma\n  \"isOK (example.state (PeerC, 4))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isOK (example.state (PeerC, 4))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. isOK (example.state (PeerC, 4))", "have \"example.is_valid_state_id (PeerC, 4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. example.is_valid_state_id (PeerC, 4)", "by auto"], ["proof (state)\nthis:\n  example.is_valid_state_id (PeerC, 4)\n\ngoal (1 subgoal):\n 1. isOK (example.state (PeerC, 4))", "thus ?thesis"], ["proof (prove)\nusing this:\n  example.is_valid_state_id (PeerC, 4)\n\ngoal (1 subgoal):\n 1. isOK (example.state (PeerC, 4))", "by (rule example.no_failure)"], ["proof (state)\nthis:\n  isOK (example.state (PeerC, 4))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}