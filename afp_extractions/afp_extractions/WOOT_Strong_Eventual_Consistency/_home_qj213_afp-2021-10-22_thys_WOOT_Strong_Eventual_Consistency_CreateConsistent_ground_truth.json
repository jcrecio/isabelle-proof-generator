{"file_name": "/home/qj213/afp-2021-10-22/thys/WOOT_Strong_Eventual_Consistency/CreateConsistent.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/WOOT_Strong_Eventual_Consistency", "problem_names": ["lemma nth_visible_inc':\n  assumes \"sorted_wrt (<) (map a (ext_ids s))\"\n  assumes \"nth_visible s n = Inr i\"\n  assumes \"nth_visible s (Suc n) = Inr j\"\n  shows \"a i < a j\"", "lemma nth_visible_eff:\n  assumes \"nth_visible s n = Inr i\"\n  shows \"extended_to_set i \\<subseteq> I ` set s\"", "lemma subset_mono:\n  assumes \"N \\<subseteq> M\"\n  shows \"I ` insert_messages N \\<subseteq> I ` insert_messages M\"", "lemma deps_insert:\n  assumes \"\\<Union> (deps ` M) \\<subseteq> (I ` insert_messages M)\"\n  assumes \"deps m \\<subseteq> I ` insert_messages M\"\n  shows \"\\<Union> (deps ` (M \\<union> {m})) \\<subseteq> (I ` insert_messages (M \\<union> {m}))\"", "lemma wf_add:\n  fixes m :: \"('a,'b) insert_message\"\n  assumes \"wfP (depends_on M)\"\n  assumes \"\\<And>n. n \\<in> (M \\<union> {m}) \\<Longrightarrow> I m \\<notin> deps (Insert n)\"\n  assumes \"m \\<notin> M\"\n  shows \"wfP (depends_on (M \\<union> {m}))\"", "lemma create_insert_p_s_ordered:\n  assumes \"is_associated_string N s\"\n  assumes \"a_conditions (insert_messages N) a\"\n  assumes \"Inr (Insert m) = create_insert s n \\<sigma> new_id\"\n  shows \"a (P m) < a (S m)\"", "lemma create_insert_consistent:\n  assumes \"consistent M\"\n  assumes \"is_associated_string N s\"\n  assumes \"N \\<subseteq> M\"\n  assumes \"Inr m = create_insert s n \\<sigma> new_id\"\n  assumes \"new_id \\<notin> I ` insert_messages M\"\n  shows \"consistent (M \\<union> {m})\"", "lemma bind_simp: \"(x \\<bind> (\\<lambda>l. y l) = Inr r) \\<Longrightarrow> (y (projr x) = Inr r)\"", "lemma create_delete_consistent:\n  assumes \"consistent M\"\n  assumes \"is_associated_string N s\"\n  assumes \"N \\<subseteq> M\"\n  assumes \"Inr m = create_delete s n\"\n  shows \"consistent (M \\<union> {m})\""], "translations": [["", "lemma nth_visible_inc':\n  assumes \"sorted_wrt (<) (map a (ext_ids s))\"\n  assumes \"nth_visible s n = Inr i\"\n  assumes \"nth_visible s (Suc n) = Inr j\"\n  shows \"a i < a j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a i < a j", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a i < a j", "have \"subseq (ext_ids (filter is_visible s)) (ext_ids s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subseq (ext_ids (filter is_visible s)) (ext_ids s)", "by (simp add: ext_ids_def subseq_map)"], ["proof (state)\nthis:\n  subseq (ext_ids (filter is_visible s)) (ext_ids s)\n\ngoal (1 subgoal):\n 1. a i < a j", "hence \"sorted_wrt (<) (map a (ext_ids (filter is_visible s)))\""], ["proof (prove)\nusing this:\n  subseq (ext_ids (filter is_visible s)) (ext_ids s)\n\ngoal (1 subgoal):\n 1. sorted_wrt (<) (map a (ext_ids (filter is_visible s)))", "using assms(1) subseq_imp_sorted sorted_wrt_map"], ["proof (prove)\nusing this:\n  subseq (ext_ids (filter is_visible s)) (ext_ids s)\n  sorted_wrt (<) (map a (ext_ids s))\n  \\<lbrakk>subseq ?s ?t; sorted_wrt ?p ?t\\<rbrakk>\n  \\<Longrightarrow> sorted_wrt ?p ?s\n  sorted_wrt ?R (map ?f ?xs) =\n  sorted_wrt (\\<lambda>x y. ?R (?f x) (?f y)) ?xs\n\ngoal (1 subgoal):\n 1. sorted_wrt (<) (map a (ext_ids (filter is_visible s)))", "by blast"], ["proof (state)\nthis:\n  sorted_wrt (<) (map a (ext_ids (filter is_visible s)))\n\ngoal (1 subgoal):\n 1. a i < a j", "moreover"], ["proof (state)\nthis:\n  sorted_wrt (<) (map a (ext_ids (filter is_visible s)))\n\ngoal (1 subgoal):\n 1. a i < a j", "have a:\"Suc n < length (ext_ids (filter is_visible s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n < length (ext_ids (filter is_visible s))", "apply (rule classical)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Suc n < length (ext_ids (filter is_visible s)) \\<Longrightarrow>\n    Suc n < length (ext_ids (filter is_visible s))", "using assms(3)"], ["proof (prove)\nusing this:\n  nth_visible s (Suc n) = Inr j\n\ngoal (1 subgoal):\n 1. \\<not> Suc n < length (ext_ids (filter is_visible s)) \\<Longrightarrow>\n    Suc n < length (ext_ids (filter is_visible s))", "by simp"], ["proof (state)\nthis:\n  Suc n < length (ext_ids (filter is_visible s))\n\ngoal (1 subgoal):\n 1. a i < a j", "ultimately"], ["proof (chain)\npicking this:\n  sorted_wrt (<) (map a (ext_ids (filter is_visible s)))\n  Suc n < length (ext_ids (filter is_visible s))", "show ?thesis"], ["proof (prove)\nusing this:\n  sorted_wrt (<) (map a (ext_ids (filter is_visible s)))\n  Suc n < length (ext_ids (filter is_visible s))\n\ngoal (1 subgoal):\n 1. a i < a j", "using assms(2) assms(3)"], ["proof (prove)\nusing this:\n  sorted_wrt (<) (map a (ext_ids (filter is_visible s)))\n  Suc n < length (ext_ids (filter is_visible s))\n  nth_visible s n = Inr i\n  nth_visible s (Suc n) = Inr j\n\ngoal (1 subgoal):\n 1. a i < a j", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted_wrt (<) (map a (ext_ids (filter is_visible s)));\n     Suc n < length (ext_ids (filter is_visible s));\n     ext_ids (filter is_visible s) ! n = i;\n     ext_ids (filter is_visible s) ! Suc n = j\\<rbrakk>\n    \\<Longrightarrow> a i < a j", "using sorted_wrt_nth_less"], ["proof (prove)\nusing this:\n  \\<lbrakk>sorted_wrt ?P ?xs; ?i < ?j; ?j < length ?xs\\<rbrakk>\n  \\<Longrightarrow> ?P (?xs ! ?i) (?xs ! ?j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sorted_wrt (<) (map a (ext_ids (filter is_visible s)));\n     Suc n < length (ext_ids (filter is_visible s));\n     ext_ids (filter is_visible s) ! n = i;\n     ext_ids (filter is_visible s) ! Suc n = j\\<rbrakk>\n    \\<Longrightarrow> a i < a j", "by fastforce"], ["proof (state)\nthis:\n  a i < a j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nth_visible_eff:\n  assumes \"nth_visible s n = Inr i\"\n  shows \"extended_to_set i \\<subseteq> I ` set s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended_to_set i \\<subseteq> I ` set s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. extended_to_set i \\<subseteq> I ` set s", "have \"i \\<in> set (ext_ids (filter is_visible s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> set (ext_ids (filter is_visible s))", "apply (cases \"n < length (ext_ids (filter is_visible s))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. n < length (ext_ids (filter is_visible s)) \\<Longrightarrow>\n    i \\<in> set (ext_ids (filter is_visible s))\n 2. \\<not> n < length (ext_ids (filter is_visible s)) \\<Longrightarrow>\n    i \\<in> set (ext_ids (filter is_visible s))", "using assms"], ["proof (prove)\nusing this:\n  nth_visible s n = Inr i\n\ngoal (2 subgoals):\n 1. n < length (ext_ids (filter is_visible s)) \\<Longrightarrow>\n    i \\<in> set (ext_ids (filter is_visible s))\n 2. \\<not> n < length (ext_ids (filter is_visible s)) \\<Longrightarrow>\n    i \\<in> set (ext_ids (filter is_visible s))", "by auto"], ["proof (state)\nthis:\n  i \\<in> set (ext_ids (filter is_visible s))\n\ngoal (1 subgoal):\n 1. extended_to_set i \\<subseteq> I ` set s", "thus ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> set (ext_ids (filter is_visible s))\n\ngoal (1 subgoal):\n 1. extended_to_set i \\<subseteq> I ` set s", "apply (simp add: ext_ids_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i = \\<turnstile> \\<or>\n    i = \\<stileturn> \\<or>\n    i \\<in> (\\<lambda>x. \\<lbrakk>I x\\<rbrakk>) `\n            {x \\<in> set s. is_visible x} \\<Longrightarrow>\n    extended_to_set i \\<subseteq> I ` set s", "using extended.inject"], ["proof (prove)\nusing this:\n  (\\<lbrakk>?x2.0\\<rbrakk> = \\<lbrakk>?y2.0\\<rbrakk>) = (?x2.0 = ?y2.0)\n\ngoal (1 subgoal):\n 1. i = \\<turnstile> \\<or>\n    i = \\<stileturn> \\<or>\n    i \\<in> (\\<lambda>x. \\<lbrakk>I x\\<rbrakk>) `\n            {x \\<in> set s. is_visible x} \\<Longrightarrow>\n    extended_to_set i \\<subseteq> I ` set s", "by auto"], ["proof (state)\nthis:\n  extended_to_set i \\<subseteq> I ` set s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_mono:\n  assumes \"N \\<subseteq> M\"\n  shows \"I ` insert_messages N \\<subseteq> I ` insert_messages M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I ` insert_messages N \\<subseteq> I ` insert_messages M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I ` insert_messages N \\<subseteq> I ` insert_messages M", "have \"insert_messages N \\<subseteq> insert_messages M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert_messages N \\<subseteq> insert_messages M", "using assms"], ["proof (prove)\nusing this:\n  N \\<subseteq> M\n\ngoal (1 subgoal):\n 1. insert_messages N \\<subseteq> insert_messages M", "by (metis (no_types, lifting) Collect_mono_iff insert_messages_def subsetCE)"], ["proof (state)\nthis:\n  insert_messages N \\<subseteq> insert_messages M\n\ngoal (1 subgoal):\n 1. I ` insert_messages N \\<subseteq> I ` insert_messages M", "thus ?thesis"], ["proof (prove)\nusing this:\n  insert_messages N \\<subseteq> insert_messages M\n\ngoal (1 subgoal):\n 1. I ` insert_messages N \\<subseteq> I ` insert_messages M", "by (simp add: image_mono)"], ["proof (state)\nthis:\n  I ` insert_messages N \\<subseteq> I ` insert_messages M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma deps_insert:\n  assumes \"\\<Union> (deps ` M) \\<subseteq> (I ` insert_messages M)\"\n  assumes \"deps m \\<subseteq> I ` insert_messages M\"\n  shows \"\\<Union> (deps ` (M \\<union> {m})) \\<subseteq> (I ` insert_messages (M \\<union> {m}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (deps ` (M \\<union> {m}))\n    \\<subseteq> I ` insert_messages (M \\<union> {m})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (deps ` (M \\<union> {m}))\n    \\<subseteq> I ` insert_messages (M \\<union> {m})", "have \"deps m \\<subseteq> I ` insert_messages (M \\<union> {m})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deps m \\<subseteq> I ` insert_messages (M \\<union> {m})", "using assms(2) subset_mono"], ["proof (prove)\nusing this:\n  deps m \\<subseteq> I ` insert_messages M\n  ?N \\<subseteq> ?M \\<Longrightarrow>\n  I ` insert_messages ?N \\<subseteq> I ` insert_messages ?M\n\ngoal (1 subgoal):\n 1. deps m \\<subseteq> I ` insert_messages (M \\<union> {m})", "by (metis Un_upper1 order_trans)"], ["proof (state)\nthis:\n  deps m \\<subseteq> I ` insert_messages (M \\<union> {m})\n\ngoal (1 subgoal):\n 1. \\<Union> (deps ` (M \\<union> {m}))\n    \\<subseteq> I ` insert_messages (M \\<union> {m})", "thus ?thesis"], ["proof (prove)\nusing this:\n  deps m \\<subseteq> I ` insert_messages (M \\<union> {m})\n\ngoal (1 subgoal):\n 1. \\<Union> (deps ` (M \\<union> {m}))\n    \\<subseteq> I ` insert_messages (M \\<union> {m})", "using assms(1)"], ["proof (prove)\nusing this:\n  deps m \\<subseteq> I ` insert_messages (M \\<union> {m})\n  \\<Union> (deps ` M) \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. \\<Union> (deps ` (M \\<union> {m}))\n    \\<subseteq> I ` insert_messages (M \\<union> {m})", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>deps m \\<subseteq> I ` insert_messages (insert m M);\n     \\<Union> (deps ` M) \\<subseteq> I ` insert_messages M\\<rbrakk>\n    \\<Longrightarrow> \\<Union> (deps ` M)\n                      \\<subseteq> I ` insert_messages (insert m M)", "by (meson rev_subsetD subsetI subset_insertI subset_mono)"], ["proof (state)\nthis:\n  \\<Union> (deps ` (M \\<union> {m}))\n  \\<subseteq> I ` insert_messages (M \\<union> {m})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_add:\n  fixes m :: \"('a,'b) insert_message\"\n  assumes \"wfP (depends_on M)\"\n  assumes \"\\<And>n. n \\<in> (M \\<union> {m}) \\<Longrightarrow> I m \\<notin> deps (Insert n)\"\n  assumes \"m \\<notin> M\"\n  shows \"wfP (depends_on (M \\<union> {m}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (depends_on (M \\<union> {m}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (depends_on (M \\<union> {m}))", "have \"\\<And>Q. Q \\<noteq> {} \\<Longrightarrow> (\\<exists>z\\<in>Q. \\<forall>y. (y \\<in> M \\<union> {m}) \\<and> (z \\<in> M \\<union> {m}) \\<and>\n           I y \\<in> deps (Insert z) \\<longrightarrow> y \\<notin> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Q.\n       Q \\<noteq> {} \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             y \\<in> M \\<union> {m} \\<and>\n             z \\<in> M \\<union> {m} \\<and>\n             I y \\<in> deps (Insert z) \\<longrightarrow>\n             y \\<notin> Q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Q.\n       Q \\<noteq> {} \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             y \\<in> M \\<union> {m} \\<and>\n             z \\<in> M \\<union> {m} \\<and>\n             I y \\<in> deps (Insert z) \\<longrightarrow>\n             y \\<notin> Q", "fix Q :: \"('a, 'b) insert_message set\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Q.\n       Q \\<noteq> {} \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             y \\<in> M \\<union> {m} \\<and>\n             z \\<in> M \\<union> {m} \\<and>\n             I y \\<in> deps (Insert z) \\<longrightarrow>\n             y \\<notin> Q", "assume b:\"Q \\<noteq> {}\""], ["proof (state)\nthis:\n  Q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>Q.\n       Q \\<noteq> {} \\<Longrightarrow>\n       \\<exists>z\\<in>Q.\n          \\<forall>y.\n             y \\<in> M \\<union> {m} \\<and>\n             z \\<in> M \\<union> {m} \\<and>\n             I y \\<in> deps (Insert z) \\<longrightarrow>\n             y \\<notin> Q", "show \"\\<exists>z\\<in>Q. \\<forall>y. (y \\<in> M \\<union> {m}) \\<and> (z \\<in> M \\<union> {m}) \\<and> I y \\<in> deps (Insert z)\n           \\<longrightarrow> y \\<notin> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "proof (cases \"\\<exists>x. x \\<in> Q - {m}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "case True"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> Q - {m}\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "hence \"\\<exists>z\\<in> Q - {m}. \\<forall>y. (y \\<in> M) \\<and> (z \\<in> M) \\<and> I y \\<in> deps (Insert z)\n             \\<longrightarrow> y \\<notin> Q - {m}\""], ["proof (prove)\nusing this:\n  \\<exists>x. x \\<in> Q - {m}\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q - {m}.\n       \\<forall>y.\n          y \\<in> M \\<and>\n          z \\<in> M \\<and> I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q - {m}", "by (metis depends_on.simps assms(1) wfP_eq_minimal)"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q - {m}.\n     \\<forall>y.\n        y \\<in> M \\<and>\n        z \\<in> M \\<and> I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q - {m}\n\ngoal (2 subgoals):\n 1. \\<exists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q\n 2. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "then"], ["proof (chain)\npicking this:\n  \\<exists>z\\<in>Q - {m}.\n     \\<forall>y.\n        y \\<in> M \\<and>\n        z \\<in> M \\<and> I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q - {m}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>Q - {m}.\n     \\<forall>y.\n        y \\<in> M \\<and>\n        z \\<in> M \\<and> I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q - {m}\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "using assms(2) DiffD2"], ["proof (prove)\nusing this:\n  \\<exists>z\\<in>Q - {m}.\n     \\<forall>y.\n        y \\<in> M \\<and>\n        z \\<in> M \\<and> I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q - {m}\n  ?n \\<in> M \\<union> {m} \\<Longrightarrow> I m \\<notin> deps (Insert ?n)\n  \\<lbrakk>?c \\<in> ?A - ?B; ?c \\<in> ?B\\<rbrakk> \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "by auto"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        y \\<in> M \\<union> {m} \\<and>\n        z \\<in> M \\<union> {m} \\<and>\n        I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "case False"], ["proof (state)\nthis:\n  \\<nexists>x. x \\<in> Q - {m}\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "hence \"Q = {m}\""], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<in> Q - {m}\n\ngoal (1 subgoal):\n 1. Q = {m}", "using b"], ["proof (prove)\nusing this:\n  \\<nexists>x. x \\<in> Q - {m}\n  Q \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Q = {m}", "by blast"], ["proof (state)\nthis:\n  Q = {m}\n\ngoal (1 subgoal):\n 1. \\<nexists>x. x \\<in> Q - {m} \\<Longrightarrow>\n    \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "thus ?thesis"], ["proof (prove)\nusing this:\n  Q = {m}\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "using assms(2)"], ["proof (prove)\nusing this:\n  Q = {m}\n  ?n \\<in> M \\<union> {m} \\<Longrightarrow> I m \\<notin> deps (Insert ?n)\n\ngoal (1 subgoal):\n 1. \\<exists>z\\<in>Q.\n       \\<forall>y.\n          y \\<in> M \\<union> {m} \\<and>\n          z \\<in> M \\<union> {m} \\<and>\n          I y \\<in> deps (Insert z) \\<longrightarrow>\n          y \\<notin> Q", "by blast"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        y \\<in> M \\<union> {m} \\<and>\n        z \\<in> M \\<union> {m} \\<and>\n        I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>z\\<in>Q.\n     \\<forall>y.\n        y \\<in> M \\<union> {m} \\<and>\n        z \\<in> M \\<union> {m} \\<and>\n        I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> Q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?Q \\<noteq> {} \\<Longrightarrow>\n  \\<exists>z\\<in>?Q.\n     \\<forall>y.\n        y \\<in> M \\<union> {m} \\<and>\n        z \\<in> M \\<union> {m} \\<and>\n        I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> ?Q\n\ngoal (1 subgoal):\n 1. wfP (depends_on (M \\<union> {m}))", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?Q \\<noteq> {} \\<Longrightarrow>\n  \\<exists>z\\<in>?Q.\n     \\<forall>y.\n        y \\<in> M \\<union> {m} \\<and>\n        z \\<in> M \\<union> {m} \\<and>\n        I y \\<in> deps (Insert z) \\<longrightarrow>\n        y \\<notin> ?Q\n\ngoal (1 subgoal):\n 1. wfP (depends_on (M \\<union> {m}))", "by (simp add:wfP_eq_minimal, blast)"], ["proof (state)\nthis:\n  wfP (depends_on (M \\<union> {m}))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma create_insert_p_s_ordered:\n  assumes \"is_associated_string N s\"\n  assumes \"a_conditions (insert_messages N) a\"\n  assumes \"Inr (Insert m) = create_insert s n \\<sigma> new_id\"\n  shows \"a (P m) < a (S m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "obtain p q where pq_def: \n    \"create_insert s n \\<sigma> new_id = Inr (Insert (InsertMessage p new_id q \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        create_insert s n \\<sigma> new_id =\n        Inr (Insert (InsertMessage p new_id q \\<sigma>)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) One_nat_def add.right_neutral add_Suc_right \n        create_insert.elims sum.case_eq_if sum.simps(4) assms(3) bind_def)"], ["proof (state)\nthis:\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "have \"Inr p = nth_visible s n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inr p = nth_visible s n", "using pq_def Error_Monad.bindE"], ["proof (prove)\nusing this:\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  \\<lbrakk>?p \\<bind> ?f = Inr ?x;\n   \\<And>y.\n      \\<lbrakk>?p = Inr y; ?f y = Inr ?x\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. Inr p = nth_visible s n", "by fastforce"], ["proof (state)\nthis:\n  Inr p = nth_visible s n\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "moreover"], ["proof (state)\nthis:\n  Inr p = nth_visible s n\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "have \"Inr q = nth_visible s (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Inr q = nth_visible s (Suc n)", "using pq_def Error_Monad.bindE"], ["proof (prove)\nusing this:\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  \\<lbrakk>?p \\<bind> ?f = Inr ?x;\n   \\<And>y.\n      \\<lbrakk>?p = Inr y; ?f y = Inr ?x\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. Inr q = nth_visible s (Suc n)", "by fastforce"], ["proof (state)\nthis:\n  Inr q = nth_visible s (Suc n)\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "ultimately"], ["proof (chain)\npicking this:\n  Inr p = nth_visible s n\n  Inr q = nth_visible s (Suc n)", "have \"a p < a q\""], ["proof (prove)\nusing this:\n  Inr p = nth_visible s n\n  Inr q = nth_visible s (Suc n)\n\ngoal (1 subgoal):\n 1. a p < a q", "using assms"], ["proof (prove)\nusing this:\n  Inr p = nth_visible s n\n  Inr q = nth_visible s (Suc n)\n  is_associated_string N s\n  a_conditions (insert_messages N) a\n  Inr (Insert m) = create_insert s n \\<sigma> new_id\n\ngoal (1 subgoal):\n 1. a p < a q", "by (metis is_associated_string_def nth_visible_inc')"], ["proof (state)\nthis:\n  a p < a q\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "moreover"], ["proof (state)\nthis:\n  a p < a q\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "have \"m = InsertMessage p new_id q \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m = InsertMessage p new_id q \\<sigma>", "using assms(3) pq_def"], ["proof (prove)\nusing this:\n  Inr (Insert m) = create_insert s n \\<sigma> new_id\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n\ngoal (1 subgoal):\n 1. m = InsertMessage p new_id q \\<sigma>", "by auto"], ["proof (state)\nthis:\n  m = InsertMessage p new_id q \\<sigma>\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "ultimately"], ["proof (chain)\npicking this:\n  a p < a q\n  m = InsertMessage p new_id q \\<sigma>", "show ?thesis"], ["proof (prove)\nusing this:\n  a p < a q\n  m = InsertMessage p new_id q \\<sigma>\n\ngoal (1 subgoal):\n 1. a (P m) < a (S m)", "by (simp add: pq_def)"], ["proof (state)\nthis:\n  a (P m) < a (S m)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma create_insert_consistent:\n  assumes \"consistent M\"\n  assumes \"is_associated_string N s\"\n  assumes \"N \\<subseteq> M\"\n  assumes \"Inr m = create_insert s n \\<sigma> new_id\"\n  assumes \"new_id \\<notin> I ` insert_messages M\"\n  shows \"consistent (M \\<union> {m})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "obtain p q where pq_def:\n    \"create_insert s n \\<sigma> new_id = Inr (Insert (InsertMessage p new_id q \\<sigma>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p q.\n        create_insert s n \\<sigma> new_id =\n        Inr (Insert (InsertMessage p new_id q \\<sigma>)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) One_nat_def add.right_neutral add_Suc_right \n        create_insert.elims assms(4) sum.case_eq_if sum.simps(4) bind_def)"], ["proof (state)\nthis:\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "define m' where \"m' = InsertMessage p new_id q \\<sigma>\""], ["proof (state)\nthis:\n  m' = InsertMessage p new_id q \\<sigma>\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence a:\"m = Insert m'\""], ["proof (prove)\nusing this:\n  m' = InsertMessage p new_id q \\<sigma>\n\ngoal (1 subgoal):\n 1. m = Insert m'", "using pq_def assms(4)"], ["proof (prove)\nusing this:\n  m' = InsertMessage p new_id q \\<sigma>\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  Inr m = create_insert s n \\<sigma> new_id\n\ngoal (1 subgoal):\n 1. m = Insert m'", "by auto"], ["proof (state)\nthis:\n  m = Insert m'\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence d: \"create_insert s n \\<sigma> new_id = Inr (Insert m')\""], ["proof (prove)\nusing this:\n  m = Insert m'\n\ngoal (1 subgoal):\n 1. create_insert s n \\<sigma> new_id = Inr (Insert m')", "using pq_def assms"], ["proof (prove)\nusing this:\n  m = Insert m'\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  consistent M\n  is_associated_string N s\n  N \\<subseteq> M\n  Inr m = create_insert s n \\<sigma> new_id\n  new_id \\<notin> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. create_insert s n \\<sigma> new_id = Inr (Insert m')", "by simp"], ["proof (state)\nthis:\n  create_insert s n \\<sigma> new_id = Inr (Insert m')\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "have b:\"I m' = new_id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I m' = new_id", "using m'_def"], ["proof (prove)\nusing this:\n  m' = InsertMessage p new_id q \\<sigma>\n\ngoal (1 subgoal):\n 1. I m' = new_id", "by (simp add:I_def)"], ["proof (state)\nthis:\n  I m' = new_id\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"inj_on I (insert_messages M \\<union> {m'})\""], ["proof (prove)\nusing this:\n  I m' = new_id\n\ngoal (1 subgoal):\n 1. inj_on I (insert_messages M \\<union> {m'})", "using assms(5) assms(1)"], ["proof (prove)\nusing this:\n  I m' = new_id\n  new_id \\<notin> I ` insert_messages M\n  consistent M\n\ngoal (1 subgoal):\n 1. inj_on I (insert_messages M \\<union> {m'})", "using consistent_def"], ["proof (prove)\nusing this:\n  I m' = new_id\n  new_id \\<notin> I ` insert_messages M\n  consistent M\n  consistent ?M \\<equiv>\n  inj_on I (insert_messages ?M) \\<and>\n  \\<Union> (deps ` ?M) \\<subseteq> I ` insert_messages ?M \\<and>\n  wfP (depends_on (insert_messages ?M)) \\<and>\n  (\\<exists>a. a_conditions (insert_messages ?M) a)\n\ngoal (1 subgoal):\n 1. inj_on I (insert_messages M \\<union> {m'})", "by fastforce"], ["proof (state)\nthis:\n  inj_on I (insert_messages M \\<union> {m'})\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"inj_on I (insert_messages (M \\<union> {m}))\""], ["proof (prove)\nusing this:\n  inj_on I (insert_messages M \\<union> {m'})\n\ngoal (1 subgoal):\n 1. inj_on I (insert_messages (M \\<union> {m}))", "using assms(4) pq_def m'_def"], ["proof (prove)\nusing this:\n  inj_on I (insert_messages M \\<union> {m'})\n  Inr m = create_insert s n \\<sigma> new_id\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  m' = InsertMessage p new_id q \\<sigma>\n\ngoal (1 subgoal):\n 1. inj_on I (insert_messages (M \\<union> {m}))", "by (metis Inr_inject insert_insert_message)"], ["proof (state)\nthis:\n  inj_on I (insert_messages (M \\<union> {m}))\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "moreover"], ["proof (state)\nthis:\n  inj_on I (insert_messages (M \\<union> {m}))\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "have p:\"extended_to_set p \\<subseteq> I ` set s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended_to_set p \\<subseteq> I ` set s", "using pq_def nth_visible_eff"], ["proof (prove)\nusing this:\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  nth_visible ?s ?n = Inr ?i \\<Longrightarrow>\n  extended_to_set ?i \\<subseteq> I ` set ?s\n\ngoal (1 subgoal):\n 1. extended_to_set p \\<subseteq> I ` set s", "by fastforce"], ["proof (state)\nthis:\n  extended_to_set p \\<subseteq> I ` set s\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "have q: \"extended_to_set q \\<subseteq> I ` set s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended_to_set q \\<subseteq> I ` set s", "using pq_def"], ["proof (prove)\nusing this:\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n\ngoal (1 subgoal):\n 1. extended_to_set q \\<subseteq> I ` set s", "apply (simp add:bind_def del:nth_visible.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case nth_visible s n of Inl e \\<Rightarrow> Inl e\n     | Inr x \\<Rightarrow>\n         case nth_visible s (Suc n) of Inl x \\<Rightarrow> Inl x\n         | Inr xa \\<Rightarrow>\n             Inr (Insert (InsertMessage x new_id xa \\<sigma>))) =\n    Inr (Insert (InsertMessage p new_id q \\<sigma>)) \\<Longrightarrow>\n    extended_to_set q \\<subseteq> I ` set s", "apply (cases \"nth_visible s n\", simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       \\<lbrakk>(case nth_visible s n of Inl e \\<Rightarrow> Inl e\n                 | Inr x \\<Rightarrow>\n                     case nth_visible s (Suc n) of Inl x \\<Rightarrow> Inl x\n                     | Inr xa \\<Rightarrow>\n                         Inr (Insert\n                               (InsertMessage x new_id xa \\<sigma>))) =\n                Inr (Insert (InsertMessage p new_id q \\<sigma>));\n        nth_visible s n = Inr b\\<rbrakk>\n       \\<Longrightarrow> extended_to_set q \\<subseteq> I ` set s", "by (cases \"nth_visible s (Suc n)\", simp, simp add: nth_visible_eff)"], ["proof (state)\nthis:\n  extended_to_set q \\<subseteq> I ` set s\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "have \"extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` set s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` set s", "using p q"], ["proof (prove)\nusing this:\n  extended_to_set p \\<subseteq> I ` set s\n  extended_to_set q \\<subseteq> I ` set s\n\ngoal (1 subgoal):\n 1. extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` set s", "by simp"], ["proof (state)\nthis:\n  extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` set s\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` insert_messages N\""], ["proof (prove)\nusing this:\n  extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` set s\n\ngoal (1 subgoal):\n 1. extended_to_set p \\<union> extended_to_set q\n    \\<subseteq> I ` insert_messages N", "by (metis assms(2) is_associated_string_def to_woot_character_keeps_i_lifted)"], ["proof (state)\nthis:\n  extended_to_set p \\<union> extended_to_set q\n  \\<subseteq> I ` insert_messages N\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"extended_to_set p \\<union> extended_to_set q \\<subseteq> I ` insert_messages M\""], ["proof (prove)\nusing this:\n  extended_to_set p \\<union> extended_to_set q\n  \\<subseteq> I ` insert_messages N\n\ngoal (1 subgoal):\n 1. extended_to_set p \\<union> extended_to_set q\n    \\<subseteq> I ` insert_messages M", "using assms(3) subset_mono"], ["proof (prove)\nusing this:\n  extended_to_set p \\<union> extended_to_set q\n  \\<subseteq> I ` insert_messages N\n  N \\<subseteq> M\n  ?N \\<subseteq> ?M \\<Longrightarrow>\n  I ` insert_messages ?N \\<subseteq> I ` insert_messages ?M\n\ngoal (1 subgoal):\n 1. extended_to_set p \\<union> extended_to_set q\n    \\<subseteq> I ` insert_messages M", "by blast"], ["proof (state)\nthis:\n  extended_to_set p \\<union> extended_to_set q\n  \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence c:\"deps m \\<subseteq> I ` insert_messages M\""], ["proof (prove)\nusing this:\n  extended_to_set p \\<union> extended_to_set q\n  \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. deps m \\<subseteq> I ` insert_messages M", "using pq_def assms(4)"], ["proof (prove)\nusing this:\n  extended_to_set p \\<union> extended_to_set q\n  \\<subseteq> I ` insert_messages M\n  create_insert s n \\<sigma> new_id =\n  Inr (Insert (InsertMessage p new_id q \\<sigma>))\n  Inr m = create_insert s n \\<sigma> new_id\n\ngoal (1 subgoal):\n 1. deps m \\<subseteq> I ` insert_messages M", "by auto"], ["proof (state)\nthis:\n  deps m \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"\\<Union> (deps ` (M \\<union> {m})) \\<subseteq> (I ` insert_messages (M \\<union> {m}))\""], ["proof (prove)\nusing this:\n  deps m \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. \\<Union> (deps ` (M \\<union> {m}))\n    \\<subseteq> I ` insert_messages (M \\<union> {m})", "by (metis consistent_def assms(1) deps_insert)"], ["proof (state)\nthis:\n  \\<Union> (deps ` (M \\<union> {m}))\n  \\<subseteq> I ` insert_messages (M \\<union> {m})\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "moreover"], ["proof (state)\nthis:\n  \\<Union> (deps ` (M \\<union> {m}))\n  \\<subseteq> I ` insert_messages (M \\<union> {m})\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "have w: \n    \"\\<forall>n \\<in> insert_messages M \\<union> {m'}. deps (Insert n) \\<subseteq> I ` insert_messages M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n       deps (Insert n) \\<subseteq> I ` insert_messages M", "by (metis a c consistent_def assms(1) Sup_le_iff imageI insert_iff \n        insert_is_Un insert_messages_def mem_Collect_eq sup.commute)"], ["proof (state)\nthis:\n  \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n     deps (Insert n) \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"\\<forall>n \\<in> insert_messages M \\<union> {m'}. I m' \\<notin> deps (Insert n)\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n     deps (Insert n) \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n       I m' \\<notin> deps (Insert n)", "using b assms(5)"], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n     deps (Insert n) \\<subseteq> I ` insert_messages M\n  I m' = new_id\n  new_id \\<notin> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n       I m' \\<notin> deps (Insert n)", "by blast"], ["proof (state)\nthis:\n  \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n     I m' \\<notin> deps (Insert n)\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"wfP (depends_on (insert_messages M \\<union> {m'}))\""], ["proof (prove)\nusing this:\n  \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n     I m' \\<notin> deps (Insert n)\n\ngoal (1 subgoal):\n 1. wfP (depends_on (insert_messages M \\<union> {m'}))", "by (metis Un_insert_right insert_absorb wf_add assms(1)\n        consistent_def sup_bot.right_neutral)"], ["proof (state)\nthis:\n  wfP (depends_on (insert_messages M \\<union> {m'}))\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "moreover"], ["proof (state)\nthis:\n  wfP (depends_on (insert_messages M \\<union> {m'}))\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "obtain a where a_def: \"a_conditions (insert_messages M) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a_conditions (insert_messages M) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using consistent_def  assms(1)"], ["proof (prove)\nusing this:\n  consistent ?M \\<equiv>\n  inj_on I (insert_messages ?M) \\<and>\n  \\<Union> (deps ` ?M) \\<subseteq> I ` insert_messages ?M \\<and>\n  wfP (depends_on (insert_messages ?M)) \\<and>\n  (\\<exists>a. a_conditions (insert_messages ?M) a)\n  consistent M\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a_conditions (insert_messages M) a \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a_conditions (insert_messages M) a\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "define a' where \n    \"a' = (\\<lambda>i. if i = \\<lbrakk> new_id \\<rbrakk> then \\<lbrakk>\\<Psi> (a (P m'), a(S m')) new_id\\<rbrakk> else a i)\""], ["proof (state)\nthis:\n  a' =\n  (\\<lambda>i.\n      if i = \\<lbrakk>new_id\\<rbrakk>\n      then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk> else a i)\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"a_conditions (insert_messages (M \\<union> {m})) a'\""], ["proof (prove)\nusing this:\n  a' =\n  (\\<lambda>i.\n      if i = \\<lbrakk>new_id\\<rbrakk>\n      then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk> else a i)\n\ngoal (1 subgoal):\n 1. a_conditions (insert_messages (M \\<union> {m})) a'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. a' =\n    (\\<lambda>i.\n        if i = \\<lbrakk>new_id\\<rbrakk>\n        then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk>\n        else a i) \\<Longrightarrow>\n    a_conditions (insert_messages (M \\<union> {m})) a'", "have \"a' \\<turnstile> < a' \\<stileturn>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<turnstile> < a' \\<stileturn>", "using a'_def a_conditions_def a_def"], ["proof (prove)\nusing this:\n  a' =\n  (\\<lambda>i.\n      if i = \\<lbrakk>new_id\\<rbrakk>\n      then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk> else a i)\n  a_conditions ?M ?a =\n  (?a \\<turnstile> < ?a \\<stileturn> \\<and>\n   (\\<forall>m.\n       m \\<in> ?M \\<longrightarrow>\n       ?a (P m) < ?a (S m) \\<and>\n       ?a \\<lbrakk>I m\\<rbrakk> =\n       \\<lbrakk>\\<Psi> (?a (P m), ?a (S m)) (I m)\\<rbrakk>))\n  a_conditions (insert_messages M) a\n\ngoal (1 subgoal):\n 1. a' \\<turnstile> < a' \\<stileturn>", "by auto"], ["proof (state)\nthis:\n  a' \\<turnstile> < a' \\<stileturn>\n\ngoal (1 subgoal):\n 1. a' =\n    (\\<lambda>i.\n        if i = \\<lbrakk>new_id\\<rbrakk>\n        then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk>\n        else a i) \\<Longrightarrow>\n    a_conditions (insert_messages (M \\<union> {m})) a'", "moreover"], ["proof (state)\nthis:\n  a' \\<turnstile> < a' \\<stileturn>\n\ngoal (1 subgoal):\n 1. a' =\n    (\\<lambda>i.\n        if i = \\<lbrakk>new_id\\<rbrakk>\n        then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk>\n        else a i) \\<Longrightarrow>\n    a_conditions (insert_messages (M \\<union> {m})) a'", "have \n      \"\\<And>m''. m'' \\<in> (insert_messages M \\<union> {m'}) \\<longrightarrow> \n          a'(P m'') < a'(S m'')  \\<and>\n          a' \\<lbrakk>I m''\\<rbrakk> = \\<lbrakk>\\<Psi> (a'(P m''), a'(S m'')) (I m'')\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m''.\n       m'' \\<in> insert_messages M \\<union> {m'} \\<longrightarrow>\n       a' (P m'') < a' (S m'') \\<and>\n       a' \\<lbrakk>I m''\\<rbrakk> =\n       \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m''.\n       m'' \\<in> insert_messages M \\<union> {m'} \\<Longrightarrow>\n       a' (P m'') < a' (S m'') \\<and>\n       a' \\<lbrakk>I m''\\<rbrakk> =\n       \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "fix m''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m''.\n       m'' \\<in> insert_messages M \\<union> {m'} \\<Longrightarrow>\n       a' (P m'') < a' (S m'') \\<and>\n       a' \\<lbrakk>I m''\\<rbrakk> =\n       \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "assume e:\" m'' \\<in> (insert_messages M \\<union> {m'})\""], ["proof (state)\nthis:\n  m'' \\<in> insert_messages M \\<union> {m'}\n\ngoal (1 subgoal):\n 1. \\<And>m''.\n       m'' \\<in> insert_messages M \\<union> {m'} \\<Longrightarrow>\n       a' (P m'') < a' (S m'') \\<and>\n       a' \\<lbrakk>I m''\\<rbrakk> =\n       \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "show \"a'(P m'') < a'(S m'') \\<and> a' \\<lbrakk> I m''\\<rbrakk> = \n            \\<lbrakk>\\<Psi> (a'(P m''), a'(S m'')) (I m'')\\<rbrakk>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "proof (cases \"m'' \\<in> insert_messages M\")"], ["proof (state)\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "case True"], ["proof (state)\nthis:\n  m'' \\<in> insert_messages M\n\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  m'' \\<in> insert_messages M\n\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "have \"deps (Insert m'') \\<subseteq> I ` insert_messages M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deps (Insert m'') \\<subseteq> I ` insert_messages M", "using e w"], ["proof (prove)\nusing this:\n  m'' \\<in> insert_messages M \\<union> {m'}\n  \\<forall>n\\<in>insert_messages M \\<union> {m'}.\n     deps (Insert n) \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. deps (Insert m'') \\<subseteq> I ` insert_messages M", "by blast"], ["proof (state)\nthis:\n  deps (Insert m'') \\<subseteq> I ` insert_messages M\n\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "hence \"P m'' \\<noteq> \\<lbrakk> new_id \\<rbrakk> \\<and> S m'' \\<noteq> \\<lbrakk> new_id \\<rbrakk>\""], ["proof (prove)\nusing this:\n  deps (Insert m'') \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n    S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>", "by (meson assms(5) contra_subsetD pred_is_dep succ_is_dep)"], ["proof (state)\nthis:\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "have \"I m'' \\<noteq> new_id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I m'' \\<noteq> new_id", "using assms(5) True"], ["proof (prove)\nusing this:\n  new_id \\<notin> I ` insert_messages M\n  m'' \\<in> insert_messages M\n\ngoal (1 subgoal):\n 1. I m'' \\<noteq> new_id", "by blast"], ["proof (state)\nthis:\n  I m'' \\<noteq> new_id\n\ngoal (2 subgoals):\n 1. m'' \\<in> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n 2. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "ultimately"], ["proof (chain)\npicking this:\n  m'' \\<in> insert_messages M\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  I m'' \\<noteq> new_id", "show ?thesis"], ["proof (prove)\nusing this:\n  m'' \\<in> insert_messages M\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  I m'' \\<noteq> new_id\n\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "using a_def True"], ["proof (prove)\nusing this:\n  m'' \\<in> insert_messages M\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  I m'' \\<noteq> new_id\n  a_conditions (insert_messages M) a\n  m'' \\<in> insert_messages M\n\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "by (simp add: a_conditions_def a'_def)"], ["proof (state)\nthis:\n  a' (P m'') < a' (S m'') \\<and>\n  a' \\<lbrakk>I m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "case False"], ["proof (state)\nthis:\n  m'' \\<notin> insert_messages M\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  m'' \\<notin> insert_messages M\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "have \"I m'' = new_id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I m'' = new_id", "using False b e"], ["proof (prove)\nusing this:\n  m'' \\<notin> insert_messages M\n  I m' = new_id\n  m'' \\<in> insert_messages M \\<union> {m'}\n\ngoal (1 subgoal):\n 1. I m'' = new_id", "by blast"], ["proof (state)\nthis:\n  I m'' = new_id\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  I m'' = new_id\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "have \"deps (Insert m'') \\<subseteq> I ` insert_messages M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. deps (Insert m'') \\<subseteq> I ` insert_messages M", "using False a c e"], ["proof (prove)\nusing this:\n  m'' \\<notin> insert_messages M\n  m = Insert m'\n  deps m \\<subseteq> I ` insert_messages M\n  m'' \\<in> insert_messages M \\<union> {m'}\n\ngoal (1 subgoal):\n 1. deps (Insert m'') \\<subseteq> I ` insert_messages M", "by blast"], ["proof (state)\nthis:\n  deps (Insert m'') \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "hence \"P m'' \\<noteq> \\<lbrakk> new_id \\<rbrakk> \\<and> S m'' \\<noteq> \\<lbrakk> new_id \\<rbrakk>\""], ["proof (prove)\nusing this:\n  deps (Insert m'') \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n    S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>", "by (meson assms(5) contra_subsetD pred_is_dep succ_is_dep)"], ["proof (state)\nthis:\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "moreover"], ["proof (state)\nthis:\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "have \"a_conditions (insert_messages N) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_conditions (insert_messages N) a", "using a_def a_subset assms is_associated_string_def"], ["proof (prove)\nusing this:\n  a_conditions (insert_messages M) a\n  \\<lbrakk>?M \\<subseteq> ?N; a_conditions (insert_messages ?N) ?a\\<rbrakk>\n  \\<Longrightarrow> a_conditions (insert_messages ?M) ?a\n  consistent M\n  is_associated_string N s\n  N \\<subseteq> M\n  Inr m = create_insert s n \\<sigma> new_id\n  new_id \\<notin> I ` insert_messages M\n  is_associated_string ?M ?s \\<equiv>\n  consistent ?M \\<and>\n  set ?s = to_woot_character ?M ` insert_messages ?M \\<and>\n  (\\<forall>a.\n      a_conditions (insert_messages ?M) a \\<longrightarrow>\n      sorted_wrt (<) (map a (ext_ids ?s)))\n\ngoal (1 subgoal):\n 1. a_conditions (insert_messages N) a", "by blast"], ["proof (state)\nthis:\n  a_conditions (insert_messages N) a\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "hence \"a (P m') < a (S m')\""], ["proof (prove)\nusing this:\n  a_conditions (insert_messages N) a\n\ngoal (1 subgoal):\n 1. a (P m') < a (S m')", "by (metis assms(2) d create_insert_p_s_ordered)"], ["proof (state)\nthis:\n  a (P m') < a (S m')\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "hence \"a' (P m'') < a' (S m'')\""], ["proof (prove)\nusing this:\n  a (P m') < a (S m')\n\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'')", "using calculation a'_def False e"], ["proof (prove)\nusing this:\n  a (P m') < a (S m')\n  m'' \\<notin> insert_messages M\n  I m'' = new_id\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  a' =\n  (\\<lambda>i.\n      if i = \\<lbrakk>new_id\\<rbrakk>\n      then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk> else a i)\n  m'' \\<notin> insert_messages M\n  m'' \\<in> insert_messages M \\<union> {m'}\n\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'')", "by auto"], ["proof (state)\nthis:\n  a' (P m'') < a' (S m'')\n\ngoal (1 subgoal):\n 1. m'' \\<notin> insert_messages M \\<Longrightarrow>\n    a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "ultimately"], ["proof (chain)\npicking this:\n  m'' \\<notin> insert_messages M\n  I m'' = new_id\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  a' (P m'') < a' (S m'')", "show ?thesis"], ["proof (prove)\nusing this:\n  m'' \\<notin> insert_messages M\n  I m'' = new_id\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  a' (P m'') < a' (S m'')\n\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "using e a'_def"], ["proof (prove)\nusing this:\n  m'' \\<notin> insert_messages M\n  I m'' = new_id\n  P m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk> \\<and>\n  S m'' \\<noteq> \\<lbrakk>new_id\\<rbrakk>\n  a' (P m'') < a' (S m'')\n  m'' \\<in> insert_messages M \\<union> {m'}\n  a' =\n  (\\<lambda>i.\n      if i = \\<lbrakk>new_id\\<rbrakk>\n      then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk> else a i)\n\ngoal (1 subgoal):\n 1. a' (P m'') < a' (S m'') \\<and>\n    a' \\<lbrakk>I m''\\<rbrakk> =\n    \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>", "by auto"], ["proof (state)\nthis:\n  a' (P m'') < a' (S m'') \\<and>\n  a' \\<lbrakk>I m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a' (P m'') < a' (S m'') \\<and>\n  a' \\<lbrakk>I m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P m''), a' (S m'')) (I m'')\\<rbrakk>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?m'' \\<in> insert_messages M \\<union> {m'} \\<longrightarrow>\n  a' (P ?m'') < a' (S ?m'') \\<and>\n  a' \\<lbrakk>I ?m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P ?m''), a' (S ?m'')) (I ?m'')\\<rbrakk>\n\ngoal (1 subgoal):\n 1. a' =\n    (\\<lambda>i.\n        if i = \\<lbrakk>new_id\\<rbrakk>\n        then \\<lbrakk>\\<Psi> (a (P m'), a (S m')) new_id\\<rbrakk>\n        else a i) \\<Longrightarrow>\n    a_conditions (insert_messages (M \\<union> {m})) a'", "ultimately"], ["proof (chain)\npicking this:\n  a' \\<turnstile> < a' \\<stileturn>\n  ?m'' \\<in> insert_messages M \\<union> {m'} \\<longrightarrow>\n  a' (P ?m'') < a' (S ?m'') \\<and>\n  a' \\<lbrakk>I ?m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P ?m''), a' (S ?m'')) (I ?m'')\\<rbrakk>", "show \"?thesis\""], ["proof (prove)\nusing this:\n  a' \\<turnstile> < a' \\<stileturn>\n  ?m'' \\<in> insert_messages M \\<union> {m'} \\<longrightarrow>\n  a' (P ?m'') < a' (S ?m'') \\<and>\n  a' \\<lbrakk>I ?m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P ?m''), a' (S ?m'')) (I ?m'')\\<rbrakk>\n\ngoal (1 subgoal):\n 1. a_conditions (insert_messages (M \\<union> {m})) a'", "using a_conditions_def"], ["proof (prove)\nusing this:\n  a' \\<turnstile> < a' \\<stileturn>\n  ?m'' \\<in> insert_messages M \\<union> {m'} \\<longrightarrow>\n  a' (P ?m'') < a' (S ?m'') \\<and>\n  a' \\<lbrakk>I ?m''\\<rbrakk> =\n  \\<lbrakk>\\<Psi> (a' (P ?m''), a' (S ?m'')) (I ?m'')\\<rbrakk>\n  a_conditions ?M ?a =\n  (?a \\<turnstile> < ?a \\<stileturn> \\<and>\n   (\\<forall>m.\n       m \\<in> ?M \\<longrightarrow>\n       ?a (P m) < ?a (S m) \\<and>\n       ?a \\<lbrakk>I m\\<rbrakk> =\n       \\<lbrakk>\\<Psi> (?a (P m), ?a (S m)) (I m)\\<rbrakk>))\n\ngoal (1 subgoal):\n 1. a_conditions (insert_messages (M \\<union> {m})) a'", "by (metis a insert_insert_message)"], ["proof (state)\nthis:\n  a_conditions (insert_messages (M \\<union> {m})) a'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a_conditions (insert_messages (M \\<union> {m})) a'\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "ultimately"], ["proof (chain)\npicking this:\n  inj_on I (insert_messages (M \\<union> {m}))\n  \\<Union> (deps ` (M \\<union> {m}))\n  \\<subseteq> I ` insert_messages (M \\<union> {m})\n  wfP (depends_on (insert_messages M \\<union> {m'}))\n  a_conditions (insert_messages (M \\<union> {m})) a'", "show \"?thesis\""], ["proof (prove)\nusing this:\n  inj_on I (insert_messages (M \\<union> {m}))\n  \\<Union> (deps ` (M \\<union> {m}))\n  \\<subseteq> I ` insert_messages (M \\<union> {m})\n  wfP (depends_on (insert_messages M \\<union> {m'}))\n  a_conditions (insert_messages (M \\<union> {m})) a'\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "using consistent_def a"], ["proof (prove)\nusing this:\n  inj_on I (insert_messages (M \\<union> {m}))\n  \\<Union> (deps ` (M \\<union> {m}))\n  \\<subseteq> I ` insert_messages (M \\<union> {m})\n  wfP (depends_on (insert_messages M \\<union> {m'}))\n  a_conditions (insert_messages (M \\<union> {m})) a'\n  consistent ?M \\<equiv>\n  inj_on I (insert_messages ?M) \\<and>\n  \\<Union> (deps ` ?M) \\<subseteq> I ` insert_messages ?M \\<and>\n  wfP (depends_on (insert_messages ?M)) \\<and>\n  (\\<exists>a. a_conditions (insert_messages ?M) a)\n  m = Insert m'\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "by (metis insert_insert_message)"], ["proof (state)\nthis:\n  consistent (M \\<union> {m})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bind_simp: \"(x \\<bind> (\\<lambda>l. y l) = Inr r) \\<Longrightarrow> (y (projr x) = Inr r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<bind> y = Inr r \\<Longrightarrow> y (projr x) = Inr r", "using isOK_I"], ["proof (prove)\nusing this:\n  ?m = Inr ?x \\<Longrightarrow> isOK ?m\n\ngoal (1 subgoal):\n 1. x \\<bind> y = Inr r \\<Longrightarrow> y (projr x) = Inr r", "by force"], ["", "lemma create_delete_consistent:\n  assumes \"consistent M\"\n  assumes \"is_associated_string N s\"\n  assumes \"N \\<subseteq> M\"\n  assumes \"Inr m = create_delete s n\"\n  shows \"consistent (M \\<union> {m})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "obtain i where pq_def: \"create_delete s n = Inr (Delete (DeleteMessage i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        create_delete s n = Inr (Delete (DeleteMessage i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Error_Monad.bindE create_delete.simps assms(4))"], ["proof (state)\nthis:\n  create_delete s n = Inr (Delete (DeleteMessage i))\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence a: \"m = Delete (DeleteMessage i)\""], ["proof (prove)\nusing this:\n  create_delete s n = Inr (Delete (DeleteMessage i))\n\ngoal (1 subgoal):\n 1. m = Delete (DeleteMessage i)", "using assms(4)"], ["proof (prove)\nusing this:\n  create_delete s n = Inr (Delete (DeleteMessage i))\n  Inr m = create_delete s n\n\ngoal (1 subgoal):\n 1. m = Delete (DeleteMessage i)", "by auto"], ["proof (state)\nthis:\n  m = Delete (DeleteMessage i)\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence b: \"insert_messages (M \\<union> {m}) = insert_messages M\""], ["proof (prove)\nusing this:\n  m = Delete (DeleteMessage i)\n\ngoal (1 subgoal):\n 1. insert_messages (M \\<union> {m}) = insert_messages M", "by (simp add:insert_messages_def)"], ["proof (state)\nthis:\n  insert_messages (M \\<union> {m}) = insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "have \"n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> 0", "apply (rule classical)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n \\<noteq> 0 \\<Longrightarrow> n \\<noteq> 0", "using pq_def"], ["proof (prove)\nusing this:\n  create_delete s n = Inr (Delete (DeleteMessage i))\n\ngoal (1 subgoal):\n 1. \\<not> n \\<noteq> 0 \\<Longrightarrow> n \\<noteq> 0", "by (simp add:bind_def ext_ids_def)"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "obtain u where \"n = Suc u\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>u. n = Suc u \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using not0_implies_Suc"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  ?n \\<noteq> 0 \\<Longrightarrow> \\<exists>m. ?n = Suc m\n\ngoal (1 subgoal):\n 1. (\\<And>u. n = Suc u \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  n = Suc u\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "then"], ["proof (chain)\npicking this:\n  n = Suc u", "have \"i \\<in> I ` set s\""], ["proof (prove)\nusing this:\n  n = Suc u\n\ngoal (1 subgoal):\n 1. i \\<in> I ` set s", "using pq_def"], ["proof (prove)\nusing this:\n  n = Suc u\n  create_delete s n = Inr (Delete (DeleteMessage i))\n\ngoal (1 subgoal):\n 1. i \\<in> I ` set s", "apply (cases \"u < length (filter is_visible s)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = Suc u; create_delete s n = Inr (Delete (DeleteMessage i));\n     u < length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s\n 2. \\<lbrakk>n = Suc u; create_delete s n = Inr (Delete (DeleteMessage i));\n     \\<not> u < length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s", "apply (simp add:bind_simp ext_ids_def nth_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = Suc u; I (filter is_visible s ! u) = i;\n     u < length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s\n 2. \\<lbrakk>n = Suc u; create_delete s n = Inr (Delete (DeleteMessage i));\n     \\<not> u < length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s", "apply (meson filter_is_subset imageI in_set_conv_nth subset_code(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = Suc u; create_delete s n = Inr (Delete (DeleteMessage i));\n     \\<not> u < length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s", "apply (cases \"u = length (filter is_visible s)\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>n = Suc u; create_delete s n = Inr (Delete (DeleteMessage i));\n     \\<not> u < length (filter is_visible s);\n     u = length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s\n 2. \\<lbrakk>n = Suc u; create_delete s n = Inr (Delete (DeleteMessage i));\n     \\<not> u < length (filter is_visible s);\n     u \\<noteq> length (filter is_visible s)\\<rbrakk>\n    \\<Longrightarrow> i \\<in> I ` set s", "by (simp add:bind_def ext_ids_def nth_append)+"], ["proof (state)\nthis:\n  i \\<in> I ` set s\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence \"i \\<in> I ` insert_messages N\""], ["proof (prove)\nusing this:\n  i \\<in> I ` set s\n\ngoal (1 subgoal):\n 1. i \\<in> I ` insert_messages N", "using assms"], ["proof (prove)\nusing this:\n  i \\<in> I ` set s\n  consistent M\n  is_associated_string N s\n  N \\<subseteq> M\n  Inr m = create_delete s n\n\ngoal (1 subgoal):\n 1. i \\<in> I ` insert_messages N", "by (metis is_associated_string_def to_woot_character_keeps_i_lifted)"], ["proof (state)\nthis:\n  i \\<in> I ` insert_messages N\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "hence c:\"deps m \\<subseteq> I ` insert_messages M\""], ["proof (prove)\nusing this:\n  i \\<in> I ` insert_messages N\n\ngoal (1 subgoal):\n 1. deps m \\<subseteq> I ` insert_messages M", "using a"], ["proof (prove)\nusing this:\n  i \\<in> I ` insert_messages N\n  m = Delete (DeleteMessage i)\n\ngoal (1 subgoal):\n 1. deps m \\<subseteq> I ` insert_messages M", "by (metis assms(3) deps.simps(2) singletonD subsetCE subsetI subset_mono)"], ["proof (state)\nthis:\n  deps m \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "then"], ["proof (chain)\npicking this:\n  deps m \\<subseteq> I ` insert_messages M", "show \"?thesis\""], ["proof (prove)\nusing this:\n  deps m \\<subseteq> I ` insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "using assms(1) b"], ["proof (prove)\nusing this:\n  deps m \\<subseteq> I ` insert_messages M\n  consistent M\n  insert_messages (M \\<union> {m}) = insert_messages M\n\ngoal (1 subgoal):\n 1. consistent (M \\<union> {m})", "by (simp add:consistent_def)"], ["proof (state)\nthis:\n  consistent (M \\<union> {m})\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}